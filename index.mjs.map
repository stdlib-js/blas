{"version":3,"file":"index.mjs","sources":["../base/diagonal-types/lib/main.js","../base/diagonal-types/lib/enum.js","../base/diagonal-types/lib/index.js","../base/assert/is-diagonal-type/lib/main.js","../base/layouts/lib/main.js","../base/layouts/lib/enum.js","../base/layouts/lib/index.js","../base/assert/is-layout/lib/main.js","../base/matrix-triangles/lib/main.js","../base/matrix-triangles/lib/enum.js","../base/matrix-triangles/lib/index.js","../base/assert/is-matrix-triangle/lib/main.js","../base/operation-sides/lib/main.js","../base/operation-sides/lib/enum.js","../base/operation-sides/lib/index.js","../base/assert/is-operation-side/lib/main.js","../base/transpose-operations/lib/main.js","../base/transpose-operations/lib/enum.js","../base/transpose-operations/lib/index.js","../base/assert/is-transpose-operation/lib/main.js","../base/assert/lib/index.js","../base/scabs1/lib/main.js","../base/caxpy/lib/ndarray.js","../base/caxpy/lib/caxpy.js","../base/caxpy/lib/main.js","../base/caxpy/lib/index.js","../245a6ac5d7db899bf8ba2c9784c958","../base/ccopy/lib/ccopy.js","../base/cscal/lib/ndarray.js","../base/cscal/lib/cscal.js","../base/csrot/lib/ndarray.js","../base/csrot/lib/csrot.js","../base/cswap/lib/cswap.js","../base/dasum/lib/ndarray.js","../base/dasum/lib/dasum.js","../base/ccopy/lib/main.js","../base/ccopy/lib/ndarray.js","../base/cscal/lib/main.js","../base/csrot/lib/main.js","../base/cswap/lib/main.js","../base/cswap/lib/ndarray.js","../base/dasum/lib/main.js","../base/daxpy/lib/ndarray.js","../base/daxpy/lib/daxpy.js","../base/dcabs1/lib/main.js","../base/daxpy/lib/main.js","../base/dcopy/lib/ndarray.js","../base/dcopy/lib/dcopy.js","../base/dcopy/lib/main.js","../base/ddot/lib/ndarray.js","../base/ddot/lib/ddot.js","../base/ddot/lib/main.js","../base/diagonal-type-enum2str/lib/main.js","../base/diagonal-type-str2enum/lib/main.js","../base/dnrm2/lib/ndarray.js","../base/dnrm2/lib/dnrm2.js","../base/drot/lib/ndarray.js","../base/drot/lib/drot.js","../base/drotg/lib/assign.js","../base/drotg/lib/main.js","../base/drotm/lib/ndarray.js","../base/drotm/lib/drotm.js","../base/dnrm2/lib/main.js","../base/drot/lib/main.js","../base/drotg/lib/index.js","../base/drotm/lib/main.js","../base/dscal/lib/ndarray.js","../base/dscal/lib/dscal.js","../base/dscal/lib/main.js","../base/dsdot/lib/ndarray.js","../base/dsdot/lib/dsdot.js","../base/dsdot/lib/main.js","../09246a6e5ff145f246f167a89211fd","../ext/base/dfill/lib/ndarray.js","../ext/base/dfill/lib/dfill.js","../base/dspmv/lib/base.js","../base/dspmv/lib/dspmv.js","../ext/base/dfill/lib/main.js","../base/dspmv/lib/main.js","../base/dspmv/lib/ndarray.js","../base/dspmv/lib/index.js","../base/dswap/lib/ndarray.js","../base/dswap/lib/dswap.js","../base/dswap/lib/main.js","../base/dsymv/lib/dsymv.js","../base/dsymv/lib/main.js","../base/dsymv/lib/ndarray.js","../base/dsymv/lib/index.js","../bcc2440e2f65ddbd0c12369d31faee","../base/dsyr/lib/base.js","../base/dsyr/lib/dsyr.js","../base/dsyr/lib/main.js","../base/dsyr/lib/ndarray.js","../base/dsyr/lib/index.js","../53f69d1478924e10397c8491d46d1e","../base/dsyr2/lib/base.js","../base/dsyr2/lib/dsyr2.js","../base/dsyr2/lib/main.js","../base/dsyr2/lib/ndarray.js","../base/dsyr2/lib/index.js","../fd88b39ba40a3186c4d4f2d4dc7a50","../base/dtrmv/lib/base.js","../base/dtrmv/lib/dtrmv.js","../base/dtrmv/lib/main.js","../base/dtrmv/lib/ndarray.js","../base/dtrmv/lib/index.js","../a956b9c0cac6dab644551fb581263b","../base/dznrm2/lib/ndarray.js","../base/dznrm2/lib/dznrm2.js","../base/dznrm2/lib/main.js","../base/dznrm2/lib/index.js","../3ccb9bd9b45fa4ab9e3a097190ccf7","../base/gasum/lib/main.js","../base/gasum/lib/index.js","../base/gasum/lib/ndarray.js","../base/gaxpy/lib/main.js","../base/gcopy/lib/accessors.js","../base/gaxpy/lib/index.js","../base/gaxpy/lib/ndarray.js","../base/gcopy/lib/main.js","../base/gcopy/lib/index.js","../base/gcopy/lib/ndarray.js","../base/gdot/lib/main.js","../base/gdot/lib/ndarray.js","../base/gnrm2/lib/main.js","../base/gdot/lib/index.js","../base/gnrm2/lib/index.js","../base/gnrm2/lib/ndarray.js","../base/gscal/lib/main.js","../base/gswap/lib/accessors.js","../base/gscal/lib/index.js","../base/gscal/lib/ndarray.js","../base/gswap/lib/main.js","../base/gswap/lib/ndarray.js","../base/idamax/lib/idamax.js","../base/isamax/lib/ndarray.js","../base/isamax/lib/isamax.js","../base/gswap/lib/index.js","../base/idamax/lib/main.js","../base/idamax/lib/ndarray.js","../base/isamax/lib/main.js","../base/layout-enum2str/lib/main.js","../base/layout-str2enum/lib/main.js","../base/matrix-triangle-enum2str/lib/main.js","../base/matrix-triangle-str2enum/lib/main.js","../base/operation-side-enum2str/lib/main.js","../base/operation-side-str2enum/lib/main.js","../base/sasum/lib/ndarray.js","../base/sasum/lib/sasum.js","../base/sasum/lib/main.js","../base/saxpy/lib/ndarray.js","../base/saxpy/lib/saxpy.js","../base/saxpy/lib/main.js","../base/scasum/lib/ndarray.js","../base/scasum/lib/scasum.js","../base/scasum/lib/main.js","../base/scasum/lib/index.js","../0b42a46668516c856757783d7a7653","../base/scnrm2/lib/ndarray.js","../base/scnrm2/lib/scnrm2.js","../base/scnrm2/lib/main.js","../base/scnrm2/lib/index.js","../92f7456581bbc0ab47fed7937a039b","../base/scopy/lib/ndarray.js","../base/scopy/lib/scopy.js","../base/sdot/lib/ndarray.js","../base/sdot/lib/sdot.js","../base/scopy/lib/main.js","../base/sdot/lib/main.js","../base/sdsdot/lib/ndarray.js","../base/sdsdot/lib/sdsdot.js","../base/sdsdot/lib/main.js","../5be512e5657a932af3985949081298","../ext/base/sfill/lib/ndarray.js","../ext/base/sfill/lib/sfill.js","../ext/base/sfill/lib/main.js","../base/sscal/lib/sscal.js","../base/sscal/lib/ndarray.js","../base/sgemv/lib/base.js","../base/sgemv/lib/sgemv.js","../base/sscal/lib/main.js","../base/sgemv/lib/main.js","../base/sgemv/lib/ndarray.js","../base/sgemv/lib/index.js","../base/snrm2/lib/ndarray.js","../base/snrm2/lib/snrm2.js","../base/srot/lib/ndarray.js","../base/srot/lib/srot.js","../base/srotg/lib/assign.js","../base/srotg/lib/main.js","../base/srotm/lib/ndarray.js","../base/srotm/lib/srotm.js","../base/snrm2/lib/main.js","../base/srot/lib/main.js","../base/srotg/lib/index.js","../base/srotm/lib/main.js","../base/sspmv/lib/sspmv.js","../base/sspmv/lib/main.js","../base/sspmv/lib/ndarray.js","../base/sspmv/lib/index.js","../a4d5d13bd7a42ec10fbdb0a50c7680","../base/sswap/lib/ndarray.js","../base/sswap/lib/sswap.js","../base/sswap/lib/main.js","../base/ssymv/lib/ssymv.js","../base/ssymv/lib/main.js","../base/ssymv/lib/ndarray.js","../base/ssymv/lib/index.js","../062ee640e95ec71a9b154f764ed658","../base/ssyr/lib/base.js","../base/ssyr/lib/ssyr.js","../base/ssyr/lib/main.js","../base/ssyr/lib/ndarray.js","../base/ssyr/lib/index.js","../17d45de5611c0a9e1e272d322f1c7f","../base/ssyr2/lib/base.js","../base/ssyr2/lib/ssyr2.js","../base/ssyr2/lib/main.js","../base/ssyr2/lib/ndarray.js","../base/ssyr2/lib/index.js","../838618fb53276f14809c99c2f79bec","../base/strmv/lib/base.js","../base/strmv/lib/strmv.js","../base/strmv/lib/main.js","../base/strmv/lib/ndarray.js","../base/strmv/lib/index.js","../0daa1ea8c9a21eac56cf46be49a7a9","../base/transpose-operation-enum2str/lib/main.js","../base/transpose-operation-str2enum/lib/main.js","../base/zaxpy/lib/ndarray.js","../base/zaxpy/lib/zaxpy.js","../base/zaxpy/lib/main.js","../base/zaxpy/lib/index.js","../47bacbb22b0b8c8681f44506904933","../base/zcopy/lib/zcopy.js","../base/zdrot/lib/ndarray.js","../base/zdrot/lib/zdrot.js","../base/zscal/lib/zscal.js","../base/zswap/lib/zswap.js","../base/zcopy/lib/main.js","../base/zcopy/lib/ndarray.js","../base/zdrot/lib/main.js","../base/zscal/lib/main.js","../base/zscal/lib/ndarray.js","../base/zswap/lib/main.js","../base/zswap/lib/ndarray.js","../base/lib/index.js","../ddot/lib/main.js","../tools/swap-factory/lib/main.js","../base/diagonal-type-resolve-enum/lib/main.js","../base/diagonal-type-resolve-str/lib/main.js","../base/layout-resolve-enum/lib/main.js","../base/layout-resolve-str/lib/main.js","../base/matrix-triangle-resolve-enum/lib/main.js","../base/matrix-triangle-resolve-str/lib/main.js","../base/operation-side-resolve-enum/lib/main.js","../base/operation-side-resolve-str/lib/main.js","../base/transpose-operation-resolve-enum/lib/main.js","../base/transpose-operation-resolve-str/lib/main.js","../dswap/lib/main.js","../ext/base/dapx/lib/ndarray.js","../ext/base/dapx/lib/dapx.js","../ext/base/dapxsumkbn/lib/ndarray.js","../ext/base/dapxsumkbn/lib/dapxsumkbn.js","../ext/base/dapxsum/lib/ndarray.js","../ext/base/dapxsum/lib/dapxsum.js","../ext/base/dapxsumkbn2/lib/ndarray.js","../ext/base/dapxsumkbn2/lib/dapxsumkbn2.js","../ext/base/dapxsumors/lib/ndarray.js","../ext/base/dapxsumors/lib/dapxsumors.js","../ext/base/dapx/lib/main.js","../ext/base/dapxsumkbn/lib/main.js","../ext/base/dapxsum/lib/main.js","../ext/base/dapxsumkbn2/lib/main.js","../ext/base/dapxsumors/lib/main.js","../ext/base/dapxsumpw/lib/ndarray.js","../ext/base/dapxsumpw/lib/dapxsumpw.js","../ext/base/dapxsumpw/lib/main.js","../ext/base/dasumpw/lib/ndarray.js","../ext/base/dasumpw/lib/dasumpw.js","../ext/base/dcusumkbn/lib/ndarray.js","../ext/base/dcusumkbn/lib/dcusumkbn.js","../ext/base/dcusum/lib/ndarray.js","../ext/base/dcusum/lib/dcusum.js","../ext/base/dcusumkbn2/lib/ndarray.js","../ext/base/dcusumkbn2/lib/dcusumkbn2.js","../ext/base/dcusumors/lib/ndarray.js","../ext/base/dcusumors/lib/dcusumors.js","../ext/base/dasumpw/lib/main.js","../ext/base/dcusumkbn/lib/main.js","../ext/base/dcusum/lib/main.js","../ext/base/dcusumkbn2/lib/main.js","../ext/base/dcusumors/lib/main.js","../ext/base/dcusumpw/lib/ndarray.js","../ext/base/dcusumpw/lib/dcusumpw.js","../ext/base/dnanasumors/lib/dnanasumors.js","../ext/base/dnanasumors/lib/ndarray.js","../ext/base/dnanasum/lib/dnanasum.js","../ext/base/dnannsumkbn/lib/dnannsumkbn.js","../ext/base/dnannsumkbn/lib/ndarray.js","../ext/base/dnannsum/lib/dnannsum.js","../ext/base/dnannsumkbn2/lib/dnannsumkbn2.js","../ext/base/dnannsumors/lib/dnannsumors.js","../ext/base/dcusumpw/lib/main.js","../ext/base/dnanasumors/lib/main.js","../ext/base/dnanasum/lib/main.js","../ext/base/dnanasum/lib/ndarray.js","../ext/base/dnannsumkbn/lib/main.js","../ext/base/dnannsum/lib/main.js","../ext/base/dnannsum/lib/ndarray.js","../ext/base/dnannsumkbn2/lib/main.js","../ext/base/dnannsumkbn2/lib/ndarray.js","../ext/base/dnannsumors/lib/main.js","../ext/base/dnannsumors/lib/ndarray.js","../ext/base/dnannsumpw/lib/sumpw.js","../ext/base/dnannsumpw/lib/dnannsumpw.js","../ext/base/dnansumkbn/lib/dnansumkbn.js","../ext/base/dnansumkbn/lib/ndarray.js","../ext/base/dnansum/lib/dnansum.js","../ext/base/dnansumkbn2/lib/dnansumkbn2.js","../ext/base/dnansumors/lib/dnansumors.js","../ext/base/dnannsumpw/lib/main.js","../ext/base/dnannsumpw/lib/ndarray.js","../ext/base/dnansumkbn/lib/main.js","../ext/base/dnansum/lib/main.js","../ext/base/dnansum/lib/ndarray.js","../ext/base/dnansumkbn2/lib/main.js","../ext/base/dnansumkbn2/lib/ndarray.js","../ext/base/dnansumors/lib/main.js","../ext/base/dnansumors/lib/ndarray.js","../ext/base/dnansumpw/lib/ndarray.js","../ext/base/dnansumpw/lib/dnansumpw.js","../ext/base/dnansumpw/lib/main.js","../ext/base/drev/lib/drev.js","../ext/base/drev/lib/main.js","../ext/base/drev/lib/ndarray.js","../ext/base/dsapxsumpw/lib/ndarray.js","../ext/base/dsapxsumpw/lib/dsapxsumpw.js","../ext/base/dsapxsum/lib/dsapxsum.js","../ext/base/dsnannsumors/lib/dsnannsumors.js","../ext/base/dsapxsumpw/lib/main.js","../ext/base/dsapxsum/lib/main.js","../ext/base/dsapxsum/lib/ndarray.js","../ext/base/dsnannsumors/lib/main.js","../ext/base/dsnannsumors/lib/ndarray.js","../ext/base/dsnansumpw/lib/ndarray.js","../ext/base/dsnansumpw/lib/dsnansumpw.js","../ext/base/dsnansum/lib/dsnansum.js","../ext/base/dsnansumors/lib/dsnansumors.js","../ext/base/dsort2hp/lib/dsort2hp.js","../ext/base/dsort2ins/lib/dsort2ins.js","../ext/base/dsnansumpw/lib/main.js","../ext/base/dsnansum/lib/main.js","../ext/base/dsnansum/lib/ndarray.js","../ext/base/dsnansumors/lib/main.js","../ext/base/dsnansumors/lib/ndarray.js","../ext/base/dsort2hp/lib/main.js","../ext/base/dsort2hp/lib/ndarray.js","../ext/base/dsort2ins/lib/main.js","../ext/base/dsort2ins/lib/ndarray.js","../ext/base/dsort2sh/lib/dsort2sh.js","../ext/base/dsort2sh/lib/ndarray.js","../ext/base/dsorthp/lib/dsorthp.js","../ext/base/dsortins/lib/dsortins.js","../ext/base/dsort2sh/lib/main.js","../ext/base/dsorthp/lib/main.js","../ext/base/dsorthp/lib/ndarray.js","../ext/base/dsortins/lib/main.js","../ext/base/dsortins/lib/ndarray.js","../ext/base/dsortsh/lib/dsortsh.js","../ext/base/dsortsh/lib/ndarray.js","../ext/base/dsortsh/lib/main.js","../ext/base/dssumpw/lib/ndarray.js","../ext/base/dssumpw/lib/dssumpw.js","../ext/base/dssum/lib/dssum.js","../ext/base/dssumpw/lib/main.js","../ext/base/dssum/lib/main.js","../ext/base/dssum/lib/ndarray.js","../ext/base/dssumors/lib/dssumors.js","../ext/base/dsumkbn/lib/dsumkbn.js","../ext/base/dsumkbn/lib/ndarray.js","../ext/base/dsum/lib/dsum.js","../ext/base/dsumkbn2/lib/dsumkbn2.js","../ext/base/dssumors/lib/main.js","../ext/base/dssumors/lib/ndarray.js","../ext/base/dsumkbn/lib/main.js","../ext/base/dsum/lib/main.js","../ext/base/dsum/lib/ndarray.js","../ext/base/dsumkbn2/lib/main.js","../ext/base/dsumkbn2/lib/ndarray.js","../ext/base/dsumors/lib/dsumors.js","../ext/base/dsumors/lib/main.js","../ext/base/dsumors/lib/ndarray.js","../ext/base/dsumpw/lib/ndarray.js","../ext/base/dsumpw/lib/dsumpw.js","../ext/base/dsumpw/lib/main.js","../ext/base/gapx/lib/main.js","../ext/base/gapxsumkbn/lib/main.js","../ext/base/gapxsumkbn/lib/ndarray.js","../ext/base/gapxsum/lib/main.js","../ext/base/gapxsumkbn2/lib/main.js","../ext/base/gapxsumors/lib/main.js","../ext/base/gapx/lib/index.js","../ext/base/gapx/lib/ndarray.js","../ext/base/gapxsumkbn/lib/index.js","../ext/base/gapxsum/lib/index.js","../ext/base/gapxsum/lib/ndarray.js","../ext/base/gapxsumkbn2/lib/index.js","../ext/base/gapxsumkbn2/lib/ndarray.js","../ext/base/gapxsumors/lib/index.js","../ext/base/gapxsumors/lib/ndarray.js","../ext/base/gapxsumpw/lib/ndarray.js","../ext/base/gapxsumpw/lib/main.js","../ext/base/gapxsumpw/lib/index.js","../ext/base/gasumpw/lib/ndarray.js","../ext/base/gasumpw/lib/main.js","../ext/base/gcusumkbn/lib/main.js","../ext/base/gcusumkbn/lib/ndarray.js","../ext/base/gcusum/lib/main.js","../ext/base/gcusumkbn2/lib/main.js","../ext/base/gcusumors/lib/main.js","../ext/base/gasumpw/lib/index.js","../ext/base/gcusumkbn/lib/index.js","../ext/base/gcusum/lib/index.js","../ext/base/gcusum/lib/ndarray.js","../ext/base/gcusumkbn2/lib/index.js","../ext/base/gcusumkbn2/lib/ndarray.js","../ext/base/gcusumors/lib/index.js","../ext/base/gcusumors/lib/ndarray.js","../ext/base/gcusumpw/lib/ndarray.js","../ext/base/gcusumpw/lib/main.js","../ext/base/gfill/lib/accessors.js","../ext/base/gcusumpw/lib/index.js","../ext/base/gfill/lib/main.js","../ext/base/gfill-by/lib/accessors.js","../ext/base/gfill-by/lib/main.js","../ext/base/gnansumkbn/lib/main.js","../ext/base/gnansumkbn/lib/ndarray.js","../ext/base/gnansum/lib/main.js","../ext/base/gnansumkbn2/lib/main.js","../ext/base/gnansumors/lib/main.js","../ext/base/gfill/lib/index.js","../ext/base/gfill/lib/ndarray.js","../ext/base/gfill-by/lib/index.js","../ext/base/gfill-by/lib/ndarray.js","../ext/base/gnansumkbn/lib/index.js","../ext/base/gnansum/lib/index.js","../ext/base/gnansum/lib/ndarray.js","../ext/base/gnansumkbn2/lib/index.js","../ext/base/gnansumkbn2/lib/ndarray.js","../ext/base/gnansumors/lib/index.js","../ext/base/gnansumors/lib/ndarray.js","../ext/base/gnansumpw/lib/ndarray.js","../ext/base/gnansumpw/lib/main.js","../ext/base/grev/lib/accessors.js","../ext/base/gnansumpw/lib/index.js","../ext/base/grev/lib/main.js","../ext/base/gsort2hp/lib/main.js","../ext/base/gsort2ins/lib/main.js","../ext/base/grev/lib/index.js","../ext/base/grev/lib/ndarray.js","../ext/base/gsort2hp/lib/index.js","../ext/base/gsort2hp/lib/ndarray.js","../ext/base/gsort2ins/lib/index.js","../ext/base/gsort2ins/lib/ndarray.js","../ext/base/gsort2sh/lib/main.js","../ext/base/gsort2sh/lib/ndarray.js","../ext/base/gsorthp/lib/main.js","../ext/base/gsortins/lib/main.js","../ext/base/gsort2sh/lib/index.js","../ext/base/gsorthp/lib/index.js","../ext/base/gsorthp/lib/ndarray.js","../ext/base/gsortins/lib/index.js","../ext/base/gsortins/lib/ndarray.js","../ext/base/gsortsh/lib/main.js","../ext/base/gsortsh/lib/ndarray.js","../ext/base/gsumkbn/lib/main.js","../ext/base/gsumkbn/lib/ndarray.js","../ext/base/gsum/lib/main.js","../ext/base/gsumkbn2/lib/main.js","../ext/base/gsortsh/lib/index.js","../ext/base/gsumkbn/lib/index.js","../ext/base/gsum/lib/index.js","../ext/base/gsum/lib/ndarray.js","../ext/base/gsumkbn2/lib/index.js","../ext/base/gsumkbn2/lib/ndarray.js","../ext/base/gsumors/lib/main.js","../ext/base/gsumors/lib/index.js","../ext/base/gsumors/lib/ndarray.js","../ext/base/gsumpw/lib/ndarray.js","../ext/base/gsumpw/lib/main.js","../ext/base/gsumpw/lib/index.js","../ext/base/sapx/lib/sapx.js","../ext/base/sapxsumkbn/lib/sapxsumkbn.js","../ext/base/sapxsumkbn/lib/ndarray.js","../ext/base/sapxsum/lib/sapxsum.js","../ext/base/sapxsumkbn2/lib/sapxsumkbn2.js","../ext/base/sapxsumors/lib/sapxsumors.js","../ext/base/sapx/lib/main.js","../ext/base/sapx/lib/ndarray.js","../ext/base/sapxsumkbn/lib/main.js","../ext/base/sapxsum/lib/main.js","../ext/base/sapxsum/lib/ndarray.js","../ext/base/sapxsumkbn2/lib/main.js","../ext/base/sapxsumkbn2/lib/ndarray.js","../ext/base/sapxsumors/lib/main.js","../ext/base/sapxsumors/lib/ndarray.js","../ext/base/sapxsumpw/lib/ndarray.js","../ext/base/sapxsumpw/lib/sapxsumpw.js","../ext/base/sapxsumpw/lib/main.js","../ext/base/sasumpw/lib/ndarray.js","../ext/base/sasumpw/lib/sasumpw.js","../ext/base/scusumkbn/lib/scusumkbn.js","../ext/base/scusumkbn/lib/ndarray.js","../ext/base/scusum/lib/scusum.js","../ext/base/scusumkbn2/lib/scusumkbn2.js","../ext/base/scusumors/lib/scusumors.js","../ext/base/sasumpw/lib/main.js","../ext/base/scusumkbn/lib/main.js","../ext/base/scusum/lib/main.js","../ext/base/scusum/lib/ndarray.js","../ext/base/scusumkbn2/lib/main.js","../ext/base/scusumkbn2/lib/ndarray.js","../ext/base/scusumors/lib/main.js","../ext/base/scusumors/lib/ndarray.js","../ext/base/scusumpw/lib/ndarray.js","../ext/base/scusumpw/lib/scusumpw.js","../ext/base/scusumpw/lib/main.js","../ext/base/sdsapxsumpw/lib/ndarray.js","../ext/base/sdsapxsumpw/lib/sdsapxsumpw.js","../ext/base/sdsapxsum/lib/sdsapxsum.js","../ext/base/sdsapxsumpw/lib/main.js","../ext/base/sdsapxsum/lib/main.js","../ext/base/sdsapxsum/lib/ndarray.js","../ext/base/sdsnansumpw/lib/ndarray.js","../ext/base/sdsnansumpw/lib/sdsnansumpw.js","../ext/base/sdsnansum/lib/sdsnansum.js","../ext/base/sdsnansumpw/lib/main.js","../ext/base/sdsnansum/lib/main.js","../ext/base/sdsnansum/lib/ndarray.js","../ext/base/sdssumpw/lib/ndarray.js","../ext/base/sdssumpw/lib/sdssumpw.js","../ext/base/sdssum/lib/sdssum.js","../ext/base/snansumkbn/lib/snansumkbn.js","../ext/base/snansumkbn/lib/ndarray.js","../ext/base/snansum/lib/snansum.js","../ext/base/snansumkbn2/lib/snansumkbn2.js","../ext/base/snansumors/lib/snansumors.js","../ext/base/sdssumpw/lib/main.js","../ext/base/sdssum/lib/main.js","../ext/base/sdssum/lib/ndarray.js","../ext/base/snansumkbn/lib/main.js","../ext/base/snansum/lib/main.js","../ext/base/snansum/lib/ndarray.js","../ext/base/snansumkbn2/lib/main.js","../ext/base/snansumkbn2/lib/ndarray.js","../ext/base/snansumors/lib/main.js","../ext/base/snansumors/lib/ndarray.js","../ext/base/snansumpw/lib/ndarray.js","../ext/base/snansumpw/lib/snansumpw.js","../ext/base/snansumpw/lib/main.js","../ext/base/srev/lib/srev.js","../ext/base/ssort2hp/lib/ssort2hp.js","../ext/base/ssort2ins/lib/ssort2ins.js","../ext/base/srev/lib/main.js","../ext/base/srev/lib/ndarray.js","../ext/base/ssort2hp/lib/main.js","../ext/base/ssort2hp/lib/ndarray.js","../ext/base/ssort2ins/lib/main.js","../ext/base/ssort2ins/lib/ndarray.js","../ext/base/ssort2sh/lib/ssort2sh.js","../ext/base/ssort2sh/lib/ndarray.js","../ext/base/ssorthp/lib/ssorthp.js","../ext/base/ssortins/lib/ssortins.js","../ext/base/ssort2sh/lib/main.js","../ext/base/ssorthp/lib/main.js","../ext/base/ssorthp/lib/ndarray.js","../ext/base/ssortins/lib/main.js","../ext/base/ssortins/lib/ndarray.js","../ext/base/ssortsh/lib/ssortsh.js","../ext/base/ssortsh/lib/ndarray.js","../ext/base/ssumkbn/lib/ssumkbn.js","../ext/base/ssumkbn/lib/ndarray.js","../ext/base/ssum/lib/ssum.js","../ext/base/ssumkbn2/lib/ssumkbn2.js","../ext/base/ssumors/lib/ssumors.js","../ext/base/ssortsh/lib/main.js","../ext/base/ssumkbn/lib/main.js","../ext/base/ssum/lib/main.js","../ext/base/ssum/lib/ndarray.js","../ext/base/ssumkbn2/lib/main.js","../ext/base/ssumkbn2/lib/ndarray.js","../ext/base/ssumors/lib/main.js","../ext/base/ssumors/lib/ndarray.js","../ext/base/ssumpw/lib/ndarray.js","../ext/base/ssumpw/lib/ssumpw.js","../ext/base/ssumpw/lib/main.js","../ext/base/lib/index.js","../ext/base/gnannsumkbn/lib/main.js","../ext/lib/index.js","../gdot/lib/main.js","../gswap/lib/main.js","../sdot/lib/main.js","../sswap/lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DATA from './data.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of BLAS diagonal element types.\n*\n* @returns {StringArray} list of diagonal element types\n*\n* @example\n* var list = diagonalTypes();\n* // e.g., returns [ 'non-unit', 'unit' ]\n*/\nfunction diagonalTypes() {\n\treturn DATA.slice();\n}\n\n\n// EXPORTS //\n\nexport default diagonalTypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported diagonal types to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `unit == 132`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of array objects.\n*\n* @returns {Object} object mapping supported types to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `diagonal_types.h` enumeration!!!!\n\treturn {\n\t\t// Elements along a diagonal are not all equal to one:\n\t\t'non-unit': 131,\n\n\t\t// Elements along a diagonal are all equal to one:\n\t\t'unit': 132\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of BLAS diagonal element types.\n*\n* @module @stdlib/blas/base/diagonal-types\n*\n* @example\n* import diagonalTypes from '@stdlib/blas/base/diagonal-types';\n*\n* var list = diagonalTypes();\n* // e.g., returns [ 'non-unit', 'unit' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport diagonalTypes from './../../../../base/diagonal-types';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a BLAS diagonal type.\n*\n* @name isDiagonalType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a diagonal type\n*\n* @example\n* var bool = isDiagonalType( 'unit' );\n* // returns true\n*\n* bool = isDiagonalType( 'non-unit' );\n* // returns true\n*\n* bool = isDiagonalType( 'foo' );\n* // returns false\n*/\nvar isDiagonalType = contains( diagonalTypes() );\n\n\n// EXPORTS //\n\nexport default isDiagonalType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DATA from './data.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of BLAS memory layouts.\n*\n* @returns {StringArray} list of memory layouts\n*\n* @example\n* var list = layouts();\n* // e.g., returns [ 'row-major', 'column-major' ]\n*/\nfunction layouts() {\n\treturn DATA.slice();\n}\n\n\n// EXPORTS //\n\nexport default layouts;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported layouts to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `row-major == 101`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of array objects.\n*\n* @returns {Object} object mapping supported layouts to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `layouts.h` enumeration!!!!\n\treturn {\n\t\t// Row-major (C-style):\n\t\t'row-major': 101,\n\n\t\t// Column-major (Fortran-style):\n\t\t'column-major': 102\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of BLAS memory layouts.\n*\n* @module @stdlib/blas/base/layouts\n*\n* @example\n* import layouts from '@stdlib/blas/base/layouts';\n*\n* var list = layouts();\n* // e.g., returns [ 'row-major', 'column-major' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport layouts from './../../../../base/layouts';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a BLAS memory layout.\n*\n* @name isLayout\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a memory layout\n*\n* @example\n* var bool = isLayout( 'row-major' );\n* // returns true\n*\n* bool = isLayout( 'column-major' );\n* // returns true\n*\n* bool = isLayout( 'foo' );\n* // returns false\n*/\nvar isLayout = contains( layouts() );\n\n\n// EXPORTS //\n\nexport default isLayout;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DATA from './data.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of BLAS matrix triangles.\n*\n* @returns {StringArray} list of matrix triangles\n*\n* @example\n* var list = matrixTriangles();\n* // e.g., returns [ 'upper', 'lower' ]\n*/\nfunction matrixTriangles() {\n\treturn DATA.slice();\n}\n\n\n// EXPORTS //\n\nexport default matrixTriangles;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported matrix triangles to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `upper == 121`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of array objects.\n*\n* @returns {Object} object mapping supported matrix triangles to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `matrix_triangles.h` enumeration!!!!\n\treturn {\n\t\t// Upper triangular part of a matrix:\n\t\t'upper': 121,\n\n\t\t// Lower triangular part of a matrix:\n\t\t'lower': 122\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of BLAS matrix triangles.\n*\n* @module @stdlib/blas/base/matrix-triangles\n*\n* @example\n* import matrixTriangles from '@stdlib/blas/base/matrix-triangles';\n*\n* var list = matrixTriangles();\n* // e.g., returns [ 'upper', 'lower' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport matrixTriangles from './../../../../base/matrix-triangles';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a BLAS matrix triangle.\n*\n* @name isMatrixTriangle\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a matrix triangle\n*\n* @example\n* var bool = isMatrixTriangle( 'lower' );\n* // returns true\n*\n* bool = isMatrixTriangle( 'upper' );\n* // returns true\n*\n* bool = isMatrixTriangle( 'foo' );\n* // returns false\n*/\nvar isMatrixTriangle = contains( matrixTriangles() );\n\n\n// EXPORTS //\n\nexport default isMatrixTriangle;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DATA from './data.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of BLAS operation sides.\n*\n* @returns {StringArray} list of operation sides\n*\n* @example\n* var list = operationSides();\n* // e.g., returns [ 'left', 'right' ]\n*/\nfunction operationSides() {\n\treturn DATA.slice();\n}\n\n\n// EXPORTS //\n\nexport default operationSides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported operation sides to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `left == 141`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of array objects.\n*\n* @returns {Object} object mapping supported types to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `operation_sides.h` enumeration!!!!\n\treturn {\n\t\t// Triangular matrix is on the left side of a matrix-matrix operation (e.g., AX = B, where A is a triangular matrix):\n\t\t'left': 141,\n\n\t\t// Triangular matrix is on the right side of a matrix-matrix operation (e.g., XA = B, where A is a triangular matrix):\n\t\t'right': 142\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of BLAS operation sides.\n*\n* @module @stdlib/blas/base/operation-sides\n*\n* @example\n* import operationSides from '@stdlib/blas/base/operation-sides';\n*\n* var list = operationSides();\n* // e.g., returns [ 'left', 'right' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport operationSides from './../../../../base/operation-sides';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a BLAS operation side.\n*\n* @name isOperationSide\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is an operation side\n*\n* @example\n* var bool = isOperationSide( 'right' );\n* // returns true\n*\n* bool = isOperationSide( 'left' );\n* // returns true\n*\n* bool = isOperationSide( 'foo' );\n* // returns false\n*/\nvar isOperationSide = contains( operationSides() );\n\n\n// EXPORTS //\n\nexport default isOperationSide;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DATA from './data.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of BLAS transpose operations.\n*\n* @returns {StringArray} list of transpose operations\n*\n* @example\n* var list = layouts();\n* // e.g., returns [ 'no-transpose', 'transpose', 'conjugate-transpose' ]\n*/\nfunction layouts() {\n\treturn DATA.slice();\n}\n\n\n// EXPORTS //\n\nexport default layouts;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported transpose operations to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `transpose == 112`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of array objects.\n*\n* @returns {Object} object mapping supported transpose operations to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `transpose_operations.h` enumeration!!!!\n\treturn {\n\t\t// No transposition:\n\t\t'no-transpose': 111,\n\n\t\t// Transposition:\n\t\t'transpose': 112,\n\n\t\t// Conjugate transposition:\n\t\t'conjugate-transpose': 113\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of BLAS transpose operations.\n*\n* @module @stdlib/blas/base/transpose-operations\n*\n* @example\n* import transposeOperations from '@stdlib/blas/base/transpose-operations';\n*\n* var list = transposeOperations();\n* // e.g., returns [ 'no-transpose', 'transpose', 'conjugate-transpose' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport ops from './../../../../base/transpose-operations';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a BLAS transpose operation.\n*\n* @name isTransposeOperation\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a transpose operation\n*\n* @example\n* var bool = isTransposeOperation( 'transpose' );\n* // returns true\n*\n* bool = isTransposeOperation( 'conjugate-transpose' );\n* // returns true\n*\n* bool = isTransposeOperation( 'foo' );\n* // returns false\n*/\nvar isTransposeOperation = contains( ops() );\n\n\n// EXPORTS //\n\nexport default isTransposeOperation;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name isDiagonalType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/assert/is-diagonal-type}\n*/\nimport isDiagonalType from './../../../base/assert/is-diagonal-type';\nsetReadOnly( ns, 'isDiagonalType', isDiagonalType );\n\n/**\n* @name isLayout\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/assert/is-layout}\n*/\nimport isLayout from './../../../base/assert/is-layout';\nsetReadOnly( ns, 'isLayout', isLayout );\n\n/**\n* @name isMatrixTriangle\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/assert/is-matrix-triangle}\n*/\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nsetReadOnly( ns, 'isMatrixTriangle', isMatrixTriangle );\n\n/**\n* @name isOperationSide\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/assert/is-operation-side}\n*/\nimport isOperationSide from './../../../base/assert/is-operation-side';\nsetReadOnly( ns, 'isOperationSide', isOperationSide );\n\n/**\n* @name isTransposeOperation\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/assert/is-transpose-operation}\n*/\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nsetReadOnly( ns, 'isTransposeOperation', isTransposeOperation );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport absf from '@stdlib/math/base/special/absf';\nimport realf from '@stdlib/complex/float32/real';\nimport imagf from '@stdlib/complex/float32/imag';\n\n\n// MAIN //\n\n/**\n* Computes the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point number.\n*\n* @param {Complex64} c - complex number\n* @returns {number} result\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var v = scabs1( new Complex64( 5.0, -3.0 ) );\n* // returns 8.0\n*/\nfunction scabs1( c ) {\n\treturn absf( realf( c ) ) + absf( imagf( c ) );\n}\n\n\n// EXPORTS //\n\nexport default scabs1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport scabs1 from './../../../base/scabs1';\nimport cmulf from '@stdlib/complex/float32/base/mul';\nimport caddf from '@stdlib/complex/float32/base/add';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant and adds the result to a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} ca - scalar constant\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {integer} offsetX - starting index for `cx`\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @param {integer} offsetY - starting index for `cy`\n* @returns {Complex64Array} second input array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import realf from '@stdlib/complex/float32/real';\n* import imagf from '@stdlib/complex/float32/imag';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var cy = new Complex64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var ca = new Complex64( 2.0, 2.0 );\n*\n* caxpy( 3, ca, cx, 1, 0, cy, 1, 0 );\n*\n* var z = cy.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns -1.0\n*\n* var im = imagf( z );\n* // returns 7.0\n*/\nfunction caxpy( N, ca, cx, strideX, offsetX, cy, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn cy;\n\t}\n\tif ( scabs1( ca ) === 0.0 ) {\n\t\treturn cy;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tcy.set( caddf( cmulf( ca, cx.get( ix ) ), cy.get( iy ) ), iy );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn cy;\n}\n\n\n// EXPORTS //\n\nexport default caxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant and adds the result to a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} ca - scalar constant\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @returns {Complex64Array} second input array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import realf from '@stdlib/complex/float32/real';\n* import imagf from '@stdlib/complex/float32/imag';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var cy = new Complex64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var ca = new Complex64( 2.0, 2.0 );\n*\n* caxpy( 3, ca, cx, 1, cy, 1 );\n*\n* var z = cy.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns -1.0\n*\n* var im = imagf( z );\n* // returns 7.0\n*/\nfunction caxpy( N, ca, cx, strideX, cy, strideY ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, ca, cx, strideX, ix, cy, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default caxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport caxpy from './caxpy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( caxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default caxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to scale a single-precision complex floating-point vector by a single-precision complex floating-point constant and add the result to a single-precision complex floating-point vector.\n*\n* @module @stdlib/blas/base/caxpy\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import realf from '@stdlib/complex/float32/real';\n* import imagf from '@stdlib/complex/float32/imag';\n* import caxpy from '@stdlib/blas/base/caxpy';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var cy = new Complex64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var ca = new Complex64( 2.0, 2.0 );\n*\n* caxpy( 3, ca, cx, 1, cy, 1 );\n*\n* var z = cy.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns -1.0\n*\n* var im = imagf( z );\n* // returns 7.0\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import realf from '@stdlib/complex/float32/real';\n* import imagf from '@stdlib/complex/float32/imag';\n* import caxpy from '@stdlib/blas/base/caxpy';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var cy = new Complex64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var ca = new Complex64( 2.0, 2.0 );\n*\n* caxpy.ndarray( 3, ca cx, 1, 0, cy, 1, 0);\n*\n* var z = cy.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns -1.0\n*\n* var im = imagf( z );\n* // returns 7.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar caxpy;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tcaxpy = main;\n} else {\n\tcaxpy = tmp;\n}\n\n\n// EXPORTS //\n\nexport default caxpy;\n\n// exports: { \"ndarray\": \"caxpy.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/caxpy/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex64';\n\n\n// MAIN //\n\n/**\n* Copies values from one complex single-precision floating-point vector to another complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Complex64Array} output array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import realf from '@stdlib/complex/float32/real';\n* import imagf from '@stdlib/complex/float32/imag';\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* ccopy( x.length, x, 1, y, 1 );\n*\n* var z = y.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns 2.0\n*/\nfunction ccopy( N, x, strideX, y, strideY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = reinterpret( x, 0 );\n\tviewY = reinterpret( y, 0 );\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tfor ( i = 0; i < N*2; i += 2 ) {\n\t\t\tviewY[ i ] = viewX[ i ];\n\t\t\tviewY[ i+1 ] = viewX[ i+1 ];\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = 2 * (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = 2 * (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tviewY[ iy ] = viewX[ ix ];\n\t\tviewY[ iy+1 ] = viewX[ ix+1 ];\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default ccopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cmulf from '@stdlib/complex/float32/base/mul';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} ca - constant\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting `cx` index\n* @returns {Complex64Array} input array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import realf from '@stdlib/complex/float32/real';\n* import imagf from '@stdlib/complex/float32/imag';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var ca = new Complex64( 2.0, 2.0 );\n*\n* cscal( 3, ca, cx, 1, 0 );\n*\n* var z = cx.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns -2.0\n*\n* var im = imagf( z );\n* // returns 6.0\n*/\nfunction cscal( N, ca, cx, strideX, offsetX ) {\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn cx;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tcx.set( cmulf( ca, cx.get( ix ) ), ix );\n\t\tix += strideX;\n\t}\n\treturn cx;\n}\n\n\n// EXPORTS //\n\nexport default cscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} ca - constant\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @returns {Complex64Array} input array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import realf from '@stdlib/complex/float32/real';\n* import imagf from '@stdlib/complex/float32/imag';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var ca = new Complex64( 2.0, 2.0 );\n*\n* cscal( 3, ca, cx, 1 );\n*\n* var z = cx.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns -2.0\n*\n* var im = imagf( z );\n* // returns 6.0\n*/\nfunction cscal( N, ca, cx, strideX ) {\n\tvar ox = stride2offset( N, strideX );\n\treturn ndarray( N, ca, cx, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default cscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex64';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting `cx` index\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @param {NonNegativeInteger} offsetY - starting `cy` index\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex64Array} `cy`\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import realf from '@stdlib/complex/float32/real';\n* import imagf from '@stdlib/complex/float32/imag';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* csrot( cx.length, cx, 1, 0, cy, 1, 0, 0.8, 0.6 );\n*\n* var z = cy.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns ~-0.6\n*\n* var im = imagf( z );\n* // returns ~-1.2\n*\n* z = cx.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns ~0.8\n*\n* im = imagf( z );\n* // returns ~1.6\n*/\nfunction csrot( N, cx, strideX, offsetX, cy, strideY, offsetY, c, s ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn cy;\n\t}\n\tviewX = reinterpret( cx, 0 );\n\tviewY = reinterpret( cy, 0 );\n\tc = f32( c );\n\ts = f32( s );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = f32( c*viewX[ ix ] ) + f32( s*viewY[ iy ] );\n\t\tviewY[ iy ] = f32( c*viewY[ iy ] ) - f32( s*viewX[ ix ] );\n\t\tviewX[ ix ] = tmp;\n\n\t\ttmp = f32( c*viewX[ ix+1 ] ) + f32( s*viewY[ iy+1 ] );\n\t\tviewY[ iy+1 ] = f32( c*viewY[ iy+1 ] ) - f32( s*viewX[ ix+1 ] );\n\t\tviewX[ ix+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn cy;\n}\n\n\n// EXPORTS //\n\nexport default csrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex64Array} `cy`\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import realf from '@stdlib/complex/float32/real';\n* import imagf from '@stdlib/complex/float32/imag';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* csrot( cx.length, cx, 1, cy, 1, 0.8, 0.6 );\n*\n* var z = cy.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns ~-0.6\n*\n* var im = imagf( z );\n* // returns ~-1.2\n*\n* z = cx.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns ~0.8\n*\n* im = imagf( z );\n* // returns ~1.6\n*/\nfunction csrot( N, cx, strideX, cy, strideY, c, s ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, cx, strideX, ix, cy, strideY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nexport default csrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex64';\n\n\n// MAIN //\n\n/**\n* Interchanges two complex single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Complex64Array} `y`\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import realf from '@stdlib/complex/float32/real';\n* import imagf from '@stdlib/complex/float32/imag';\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* cswap( x.length, x, 1, y, 1 );\n*\n* var z = y.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns 2.0\n*\n* z = x.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 7.0\n*\n* im = imagf( z );\n* // returns 8.0\n*/\nfunction cswap( N, x, strideX, y, strideY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tvar j;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = reinterpret( x, 0 );\n\tviewY = reinterpret( y, 0 );\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tfor ( i = 0; i < N*2; i += 2 ) {\n\t\t\ttmp = viewX[ i ];\n\t\t\tviewX[ i ] = viewY[ i ];\n\t\t\tviewY[ i ] = tmp;\n\n\t\t\tj = i + 1;\n\t\t\ttmp = viewX[ j ];\n\t\t\tviewX[ j ] = viewY[ j ];\n\t\t\tviewY[ j ] = tmp;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = 2 * (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = 2 * (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = viewX[ ix ];\n\t\tviewX[ ix ] = viewY[ iy ];\n\t\tviewY[ iy ] = tmp;\n\n\t\ttmp = viewX[ ix+1 ];\n\t\tviewX[ ix+1 ] = viewY[ iy+1 ];\n\t\tviewY[ iy+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default cswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - `x` stride length\n* @param {NonNegativeInteger} offset - starting index for `x`\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = dasum( x.length, x, 1, 0 );\n* // returns 15.0\n*/\nfunction dasum( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += abs( x[ix] );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - `x` stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = dasum( x.length, x, 1 );\n* // returns 15.0\n*/\nfunction dasum( N, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default dasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ccopy from './ccopy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ccopy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ccopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex64';\n\n\n// MAIN //\n\n/**\n* Copies values from one complex single-precision floating-point vector to another complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Complex64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Complex64Array} output array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import realf from '@stdlib/complex/float32/real';\n* import imagf from '@stdlib/complex/float32/imag';\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* ccopy( x.length, x, 1, 0, y, 1, 0 );\n*\n* var z = y.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns 2.0\n*/\nfunction ccopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = reinterpret( x, 0 );\n\tviewY = reinterpret( y, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tviewY[ iy ] = viewX[ ix ];\n\t\tviewY[ iy+1 ] = viewX[ ix+1 ];\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default ccopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport cscal from './cscal.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( cscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default cscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport csrot from './csrot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( csrot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default csrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport cswap from './cswap.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( cswap, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default cswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex64';\n\n\n// MAIN //\n\n/**\n* Interchanges two complex single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Complex64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Complex64Array} `y`\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import realf from '@stdlib/complex/float32/real';\n* import imagf from '@stdlib/complex/float32/imag';\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* cswap( x.length, x, 1, 0, y, 1, 0 );\n*\n* var z = y.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns 2.0\n*\n* z = x.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 7.0\n*\n* im = imagf( z );\n* // returns 8.0\n*/\nfunction cswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = reinterpret( x, 0 );\n\tviewY = reinterpret( y, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = viewX[ ix ];\n\t\tviewX[ ix ] = viewY[ iy ];\n\t\tviewY[ iy ] = tmp;\n\n\t\ttmp = viewX[ ix+1 ];\n\t\tviewX[ ix+1 ] = viewY[ iy+1 ];\n\t\tviewY[ iy+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default cswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dasum from './dasum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* daxpy( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction daxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\ty[ iy+1 ] += alpha * x[ ix+1 ];\n\t\t\ty[ iy+2 ] += alpha * x[ ix+2 ];\n\t\t\ty[ iy+3 ] += alpha * x[ ix+3 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += alpha * x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default daxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* daxpy( x.length, alpha, x, 1, y, 1 );\n* // y => <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction daxpy( N, alpha, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, alpha, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default daxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\nimport real from '@stdlib/complex/float64/real';\nimport imag from '@stdlib/complex/float64/imag';\n\n\n// MAIN //\n\n/**\n* Computes the sum of the absolute value of the real and imaginary part of a double-precision complex floating-point number.\n*\n* @param {Complex128} z - complex number\n* @returns {number} result\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var v = dcabs1( new Complex128( 5.0, -3.0 ) );\n* // returns 8.0\n*/\nfunction dcabs1( z ) {\n\treturn abs( real(z) ) + abs( imag(z) );\n}\n\n\n// EXPORTS //\n\nexport default dcabs1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport daxpy from './daxpy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( daxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default daxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dcopy( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dcopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] = x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] = x[ ix ];\n\t\t\ty[ iy+1 ] = x[ ix+1 ];\n\t\t\ty[ iy+2 ] = x[ ix+2 ];\n\t\t\ty[ iy+3 ] = x[ ix+3 ];\n\t\t\ty[ iy+4 ] = x[ ix+4 ];\n\t\t\ty[ iy+5 ] = x[ ix+5 ];\n\t\t\ty[ iy+6 ] = x[ ix+6 ];\n\t\t\ty[ iy+7 ] = x[ ix+7 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dcopy( x.length, x, 1, y, 1 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dcopy( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default dcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcopy from './dcopy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcopy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {integer} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = ddot( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction ddot( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += ( x[ ix ] * y[ iy ] );\n\t\t\t\tix += 1;\n\t\t\t\tiy += 1;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ ix ] * y[ iy ] ) + ( x[ ix+1 ] * y[ iy+1 ] ) + ( x[ ix+2 ] * y[ iy+2 ] ) + ( x[ ix+3 ] * y[ iy+3 ] ) + ( x[ ix+4 ] * y[ iy+4 ] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn dot;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nexport default ddot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = ddot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction ddot( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default ddot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ddot from './ddot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ddot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ddot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport { enum as enumeration } from './../../../base/diagonal-types';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the BLAS diagonal type string associated with a BLAS diagonal type enumeration constant.\n*\n* @param {integer} value - diagonal type enumeration constant\n* @returns {(string|null)} diagonal type string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/diagonal-type-str2enum';\n*\n* var v = str2enum( 'unit' );\n* // returns <number>\n*\n* var s = enum2str( v );\n* // returns 'unit'\n*/\nfunction enum2str( value ) {\n\tvar v = hash[ value ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from './../../../base/diagonal-types';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a BLAS diagonal type.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `UNIT == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} diagonal - diagonal type\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'unit' );\n* // returns <number>\n*/\nfunction str2enum( diagonal ) {\n\tvar v = ENUM[ diagonal ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT64_MAX from '@stdlib/constants/float64/max';\nimport abs from '@stdlib/math/base/special/abs';\nimport abs2 from '@stdlib/math/base/special/abs2';\nimport sqrt from '@stdlib/math/base/special/sqrt';\n\n\n// VARIABLES //\n\n// Blue's scaling constants:\nvar tsml = 1.4916681462400413E-154;\nvar tbig = 1.9979190722022350E+146;\nvar ssml = 4.4989137945431964E+161;\nvar sbig = 1.1113793747425387E-162;\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} L2-norm\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var z = dnrm2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnrm2( N, x, stride, offset ) {\n\tvar notbig;\n\tvar sumsq;\n\tvar abig;\n\tvar amed;\n\tvar asml;\n\tvar ymax;\n\tvar ymin;\n\tvar scl;\n\tvar ax;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offset;\n\n\t// Initialize loop values for accumulation:\n\tnotbig = true;\n\n\tsumsq = 0.0;\n\tabig = 0.0;\n\tamed = 0.0;\n\tasml = 0.0;\n\tscl = 1.0;\n\n\t// Compute the sum of squares using 3 accumulators--`abig` (sum of squares scaled down to avoid overflow), `asml` (sum of squares scaled up to avoid underflow), `amed` (sum of squares that do not require scaling)--and thresholds and multipliers--`tbig` (values bigger than this are scaled down by `sbig`) and `tsml` (values smaller than this are scaled up by `ssml`)...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = abs( x[ ix ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig += abs2( ax * sbig );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml += abs2( ax * ssml );\n\t\t\t}\n\t\t} else {\n\t\t\tamed += ( ax * ax );\n\t\t}\n\t\tix += stride;\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig` > 0...\n\t\tif ( amed > 0.0 || ( amed > FLOAT64_MAX ) || ( amed !== amed ) ) {\n\t\t\tabig += ( ( amed * sbig ) * sbig );\n\t\t}\n\t\tscl = 1.0 / sbig;\n\t\tsumsq = abig;\n\t} else if ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml` > 0...\n\t\tif ( amed > 0.0 || amed > FLOAT64_MAX || ( amed !== amed ) ) {\n\t\t\tamed = sqrt( amed );\n\t\t\tasml = sqrt( asml ) / ssml;\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscl = 1.0;\n\t\t\tsumsq = ( ymax * ymax ) * ( 1.0 + abs2( ymin / ymax ) );\n\t\t} else {\n\t\t\tscl = 1.0 / ssml;\n\t\t\tsumsq = asml;\n\t\t}\n\t} else {\n\t\t// All values are mid-range...\n\t\tscl = 1.0;\n\t\tsumsq = amed;\n\t}\n\treturn sqrt( sumsq ) * scl;\n}\n\n\n// EXPORTS //\n\nexport default dnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} L2-norm\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var out = dnrm2( 3, x, 1 );\n* // returns 3.0\n*/\nfunction dnrm2( N, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default dnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* drot( 4, x, 1, 1, y, 1, 1, 0.8, 0.6 );\n* // x => <Float64Array>[ 1.0, ~5.8, 7.2, 8.6, 10.0 ]\n* // y => <Float64Array>[ 6.0, 4.4, ~4.6, ~4.8, 5.0 ]\n*/\nfunction drot( N, x, strideX, offsetX, y, strideY, offsetY, c, s ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = ( c * x[ ix ] ) + ( s * y[ iy ] );\n\t\ty[ iy ] = ( c * y[ iy ] ) - ( s * x[ ix ] );\n\t\tx[ ix ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default drot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* drot( x.length, x, 1, y, 1, 0.8, 0.6 );\n* // x => <Float64Array>[ ~4.4, ~5.8, 7.2, 8.6, 10.0 ]\n* // y => <Float64Array>[ ~4.2, 4.4, 4.6, 4.8, 5.0 ]\n*/\nfunction drot( N, x, strideX, y, strideY, c, s ) {\n\tvar ix;\n\tvar iy;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nexport default drot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport abs2 from '@stdlib/math/base/special/abs2';\nimport copysign from '@stdlib/math/base/special/copysign';\n\n\n// MAIN //\n\n/**\n* Constructs a Givens plane rotation.\n*\n* @param {number} a - rotational elimination parameter\n* @param {number} b - rotational elimination parameter\n* @param {Float64Array} out - output array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var out = drotg( 0.0, 2.0, new Float64Array( 4 ), 1, 0 );\n* // returns <Float64Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*/\nfunction drotg( a, b, out, stride, offset ) {\n\tvar scale;\n\tvar sign;\n\tvar aa;\n\tvar ab;\n\tvar r;\n\tvar c;\n\tvar s;\n\tvar z;\n\n\taa = abs( a );\n\tab = abs( b );\n\tif ( aa > ab ) {\n\t\tsign = copysign( 1.0, a );\n\t} else {\n\t\tsign = copysign( 1.0, b );\n\t}\n\tscale = aa + ab;\n\tif ( scale === 0.0 ) {\n\t\tc = 1.0;\n\t\ts = 0.0;\n\t\tr = 0.0;\n\t\tz = 0.0;\n\t} else {\n\t\tr = scale * sqrt( abs2( a/scale ) + abs2( b/scale ) );\n\t\tr *= sign;\n\t\tc = a / r;\n\t\ts = b / r;\n\t\tz = 1.0;\n\t\tif ( aa > ab ) {\n\t\t\tz = s;\n\t\t} else if ( c !== 0.0 ) {\n\t\t\tz = 1.0 / c;\n\t\t}\n\t}\n\ta = r;\n\tb = z;\n\tout[ offset ] = a;\n\tout[ offset + stride ] = b;\n\tout[ offset + ( 2 * stride ) ] = c;\n\tout[ offset + ( 3 * stride ) ] = s;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default drotg;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float64Array from '@stdlib/array/float64';\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Constructs a Givens plane rotation.\n*\n* @param {number} a - rotational elimination parameter\n* @param {number} b - rotational elimination parameter\n* @returns {Float64Array} output array\n*\n* @example\n* var out = drotg( 0.0, 2.0 );\n* // returns <Float64Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*/\nfunction drotg( a, b ) {\n\tvar out = new Float64Array( 4 );\n\treturn fcn( a, b, out, 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default drotg;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a modified Givens plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float64Array} param - parameters for the modified Givens transformation\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 0.6, 0.1, -0.5, 0.8, 0.9, -0.3, -0.4 ] );\n* var y = new Float64Array( [ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ] );\n* var param = new Float64Array( [ 0.0, 0.0, 2.0, -3.0, 0.0 ] );\n*\n* drotm( 4, x, -1, 3, y, -2, 6, param );\n* // x => <Float64Array>[ -0.9, -0.8, 1.3, -1.6, 0.9, -0.3, -0.4 ]\n* // y => <Float64Array>[ 1.7, -0.9, 0.5, 0.7, -1.6, 0.2, 2.4 ]\n*/\nfunction drotm( N, x, strideX, offsetX, y, strideY, offsetY, param ) {\n\tvar dflag;\n\tvar dh11;\n\tvar dh12;\n\tvar dh21;\n\tvar dh22;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tvar w;\n\tvar z;\n\n\tdflag = param[ 0 ];\n\tif ( N <= 0 || dflag === -2.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( strideX === strideY && strideX > 0 ) {\n\t\tif ( dflag < 0.0 ) {\n\t\t\tdh11 = param[ 1 ];\n\t\t\tdh12 = param[ 3 ];\n\t\t\tdh21 = param[ 2 ];\n\t\t\tdh22 = param[ 4 ];\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tw = x[ ix ];\n\t\t\t\tz = y[ ix ];\n\t\t\t\tx[ ix ] = ( w * dh11 ) + ( z * dh12 );\n\t\t\t\ty[ ix ] = ( w * dh21 ) + ( z * dh22 );\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tif ( dflag === 0.0 ) {\n\t\t\tdh12 = param[ 3 ];\n\t\t\tdh21 = param[ 2 ];\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tw = x[ ix ];\n\t\t\t\tz = y[ ix ];\n\t\t\t\tx[ ix ] = w + ( z * dh12 );\n\t\t\t\ty[ ix ] = ( w * dh21 ) + z;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tdh11 = param[ 1 ];\n\t\tdh22 = param[ 4 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ ix ];\n\t\t\tx[ ix ] = ( w * dh11 ) + z;\n\t\t\ty[ ix ] = -w + ( z * dh22 );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( dflag < 0.0 ) {\n\t\tdh11 = param[ 1 ];\n\t\tdh12 = param[ 3 ];\n\t\tdh21 = param[ 2 ];\n\t\tdh22 = param[ 4 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ iy ];\n\t\t\tx[ ix ] = ( w * dh11 ) + ( z * dh12 );\n\t\t\ty[ iy ] = ( w * dh21 ) + ( z * dh22 );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( dflag === 0.0 ) {\n\t\tdh12 = param[ 3 ];\n\t\tdh21 = param[ 2 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ iy ];\n\t\t\tx[ ix ] = w + ( z * dh12 );\n\t\t\ty[ iy ] = ( w * dh21 ) + z;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tdh11 = param[ 1 ];\n\tdh22 = param[ 4 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tw = x[ ix ];\n\t\tz = y[ iy ];\n\t\tx[ ix ] = ( w * dh11 ) + z;\n\t\ty[ iy ] = -w + ( z * dh22 );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default drotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a modified Givens plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {Float64Array} param - parameters for the modified Givens transformation\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 0.6, 0.1, -0.5, 0.8, 0.9, -0.3, -0.4 ] );\n* var y = new Float64Array( [ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ] );\n* var param = new Float64Array( [ 0.0, 0.0, 2.0, -3.0, 0.0 ] );\n*\n* drotm( 4, x, -1, y, -2, param );\n* // x => <Float64Array>[ -0.9, -0.8, 1.3, -1.6, 0.9, -0.3, -0.4 ]\n* // y => <Float64Array>[ 1.7, -0.9, 0.5, 0.7, -1.6, 0.2, 2.4 ]\n*/\nfunction drotm( N, x, strideX, y, strideY, param ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy, param );\n}\n\n\n// EXPORTS //\n\nexport default drotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnrm2 from './dnrm2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport drot from './drot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( drot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default drot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Construct a Givens plane rotation.\n*\n* @module @stdlib/blas/base/drotg\n*\n* @example\n* import drotg from '@stdlib/blas/base/drotg';\n*\n* var out = drotg( 0.0, 2.0 );\n* // returns <Float64Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*\n* out = drotg( 6.0, -8.0 );\n* // returns <Float64Array>[ 10.0, ~-1.666, -0.6, 0.8 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import drotg from '@stdlib/blas/base/drotg';\n*\n* var out = new Float64Array( 4 );\n*\n* var y = drotg.assign( 0.0, 2.0, out, 1, 0 );\n* // returns <Float64Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport drotm from './drotm.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( drotm, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default drotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* dscal( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, -20.0, 25.0, -30.0 ]\n*/\nfunction dscal( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] *= alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] *= alpha;\n\t\t\tx[ ix+1 ] *= alpha;\n\t\t\tx[ ix+2 ] *= alpha;\n\t\t\tx[ ix+3 ] *= alpha;\n\t\t\tx[ ix+4 ] *= alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] *= alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* dscal( x.length, 5.0, x, 1 );\n* // x => <Float64Array>[ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\nfunction dscal( N, alpha, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, alpha, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default dscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dscal from './dscal.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y` with extended accumulation and result.\n*\n* @param {integer} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = dsdot( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction dsdot( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += x[ ix ] * y[ iy ];\n\t\t\t\tix += 1;\n\t\t\t\tiy += 1;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ix]*y[iy] ) + ( x[ix+1]*y[iy+1] ) + ( x[ix+2]*y[iy+2] ) + ( x[ix+3]*y[iy+3] ) + ( x[ix+4]*y[iy+4] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn dot;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nexport default dsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y` with extended accumulation and result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = dsdot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction dsdot( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default dsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsdot from './dsdot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsdot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsdot;\n","export default '/home/runner/work/blas/blas/base/dspmv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a double-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} strideX - index increment\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* dfill( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction dfill( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] = alpha;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] = alpha;\n\t\t\tx[ ix+1 ] = alpha;\n\t\t\tx[ ix+2 ] = alpha;\n\t\t\tx[ ix+3 ] = alpha;\n\t\t\tx[ ix+4 ] = alpha;\n\t\t\tx[ ix+5 ] = alpha;\n\t\t\tx[ ix+6 ] = alpha;\n\t\t\tx[ ix+7 ] = alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Fills a double-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} strideX - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* dfill( x.length, 5.0, x, 1 );\n* // x => <Float64Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction dfill( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dfill } from './../../../ext/base/dfill';\nimport { ndarray as dscal } from './../../../base/dscal';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @private\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @param {NonNegativeInteger} offsetAP - starting `AP` index\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n*\n* dspmv( 'column-major', 'lower', 3, 1.0, AP, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float64Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\nfunction dspmv( order, uplo, N, alpha, AP, offsetAP, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tvar temp1;\n\tvar temp2;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar kk;\n\tvar kx;\n\tvar ky;\n\tvar j;\n\tvar k;\n\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tdfill( N, 0.0, y, strideY, offsetY );\n\t\t} else {\n\t\t\tdscal( N, beta, y, strideY, offsetY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\t// Form: y = alpha*A*x + y\n\tkx = offsetX;\n\tky = offsetY;\n\tkk = offsetAP;\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tjx = kx;\n\t\tjy = ky;\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\ttemp1 = alpha * x[ jx ];\n\t\t\ttemp2 = 0.0;\n\t\t\ty[ jy ] += temp1 * AP[ kk ];\n\t\t\tix = jx;\n\t\t\tiy = jy;\n\t\t\tfor ( k = kk + 1; k < kk + N - j; k++ ) {\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t\ty[ iy ] += temp1 * AP[ k ];\n\t\t\t\ttemp2 += AP[ k ] * x[ ix ];\n\t\t\t}\n\t\t\ty[ jy ] += alpha * temp2;\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t\tkk += N - j;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tjx = kx;\n\tjy = ky;\n\tfor ( j = 0; j < N; j++ ) {\n\t\ttemp1 = alpha * x[ jx ];\n\t\ttemp2 = 0.0;\n\t\tix = kx;\n\t\tiy = ky;\n\t\tfor ( k = kk; k < kk + j; k++ ) {\n\t\t\ty[ iy ] += temp1 * AP[ k ];\n\t\t\ttemp2 += AP[ k ] * x[ ix ];\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\ty[ jy ] += ( temp1 * AP[ kk + j ] ) + ( alpha * temp2 );\n\t\tjx += strideX;\n\t\tjy += strideY;\n\t\tkk += j + 1;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be non-zero\n* @throws {RangeError} tenth argument must be non-zero\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n*\n* dspmv( 'column-major', 'lower', 3, 1.0, AP, x, 1, 1.0, y, 1 );\n* // y => <Float64Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\nfunction dspmv( order, uplo, N, alpha, AP, x, strideX, beta, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Seventh argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be non-zero. Value: `%d`.', strideY ) );\n\t}\n\toffsetX = stride2offset( N, strideX );\n\toffsetY = stride2offset( N, strideY );\n\treturn base( order, uplo, N, alpha, AP, 0, x, strideX, offsetX, beta, y, strideY, offsetY ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dfill from './dfill.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dfill, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dspmv from './dspmv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dspmv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @param {NonNegativeInteger} offsetAP - starting `AP` index\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} twelfth argument must be non-zero\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n*\n* dspmv( 'column-major', 'lower', 3, 1.0, AP, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float64Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\nfunction dspmv( order, uplo, N, alpha, AP, offsetAP, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Twelfth argument must be non-zero. Value: `%d`.', strideY ) );\n\t}\n\treturn base( order, uplo, N, alpha, AP, offsetAP, x, strideX, offsetX, beta, y, strideY, offsetY ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @module @stdlib/blas/base/dspmv\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dspmv from '@stdlib/blas/base/dspmv';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n*\n* dspmv( 'column-major', 'lower', 3, 1.0, AP, x, 1, 1.0, y, 1 );\n* // y => <Float64Array>[ ~7.0, ~12.0, ~15.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dspmv from '@stdlib/blas/base/dspmv';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n*\n* dspmv.ndarray( 'column-major', 'lower', 3, 1.0, AP, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float64Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dspmv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdspmv = main;\n} else {\n\tdspmv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dspmv;\n\n// exports: { \"ndarray\": \"dspmv.ndarray\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges two double-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dswap( x.length, x, 1, 0, y, 1, 0 );\n* // x => <Float64Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = y[ iy ];\n\t\t\t\ty[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = y[ iy ];\n\t\t\ty[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = y[ iy+1 ];\n\t\t\ty[ iy+1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = y[ iy+2 ];\n\t\t\ty[ iy+2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Interchanges two double-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dswap( x.length, x, 1, y, 1 );\n* // x => <Float64Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dswap( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default dswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dswap from './dswap.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dswap, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dfill from './../../../ext/base/dfill';\nimport dscal from './../../../base/dscal';\nimport max from '@stdlib/math/base/special/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} A - matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be greater than or equal to max(1,N)\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} eleventh argument must be non-zero\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* dsymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0.0, y, 1 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction dsymv( order, uplo, N, alpha, A, LDA, x, strideX, beta, y, strideY ) { // eslint-disable-line max-params\n\tvar temp1;\n\tvar temp2;\n\tvar jmin;\n\tvar jmax;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar ox;\n\tvar oy;\n\tvar sy;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( 'invalid argument. Sixth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eleventh argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\n\t// Form: y = beta*y\n\tsy = strideY;\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tdfill( N, 0.0, y, strideY );\n\t\t} else {\n\t\t\tif ( sy < 0 ) {\n\t\t\t\tsy = -sy;\n\t\t\t}\n\t\t\tdscal( N, beta, y, sy );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX > 0 ) {\n\t\tox = 0;\n\t} else {\n\t\tox = ( 1 - N ) * strideX;\n\t}\n\tif ( strideY > 0 ) {\n\t\toy = 0;\n\t} else {\n\t\toy = ( 1 - N ) * strideY;\n\t}\n\t// Form: y = alpha*A*x + y\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tix = ox;\n\t\tiy = oy;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ttemp1 = alpha * x[ ix ];\n\t\t\ttemp2 = 0.0;\n\t\t\tjmin = i + 1;\n\t\t\tjmax = N;\n\t\t\tjx = ox + ( jmin*strideX );\n\t\t\tjy = oy + ( jmin*strideY );\n\t\t\ty[ iy ] += temp1 * A[ ( LDA * i ) + i ];\n\t\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\t\tk = ( LDA * i ) + j;\n\t\t\t\ty[ jy ] += temp1 * A[ k ];\n\t\t\t\ttemp2 += x[ jx ] * A[ k ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\ty[ iy ] += alpha * temp2;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tix = ox + ( ( N - 1 ) * strideX );\n\tiy = oy + ( ( N - 1 ) * strideY );\n\tfor ( i = N - 1; i >= 0; i-- ) {\n\t\ttemp1 = alpha * x[ ix ];\n\t\ttemp2 = 0.0;\n\t\tjmin = 0;\n\t\tjmax = i;\n\t\tjx = ox + ( jmin * strideX );\n\t\tjy = oy + ( jmin * strideY );\n\t\ty[ iy ] += temp1 * A[ ( LDA * i ) + i ];\n\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\tk = ( LDA * i ) + j;\n\t\t\ty[ jy ] += temp1 * A[ k ];\n\t\t\ttemp2 += x[ jx ] * A[ k ];\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t}\n\t\ty[ iy ] += alpha * temp2;\n\t\tix -= strideX;\n\t\tiy -= strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dsymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsymv from './dsymv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsymv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dfill } from './../../../ext/base/dfill';\nimport { ndarray as dscal } from './../../../base/dscal';\nimport max from '@stdlib/math/base/special/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} A - matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be greater than or equal to max(1,N)\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} twelfth argument must be non-zero\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* dsymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0, 0.0, y, 1, 0 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction dsymv( order, uplo, N, alpha, A, LDA, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tvar temp1;\n\tvar temp2;\n\tvar jmin;\n\tvar jmax;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar ox;\n\tvar oy;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( 'invalid argument. Sixth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Twelfth argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tdfill( N, 0.0, y, strideY, offsetY );\n\t\t} else {\n\t\t\tdscal( N, beta, y, strideY, offsetY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tox = offsetX;\n\toy = offsetY;\n\n\t// Form: y = alpha*A*x + y\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tix = ox;\n\t\tiy = oy;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ttemp1 = alpha * x[ ix ];\n\t\t\ttemp2 = 0.0;\n\t\t\tjmin = i + 1;\n\t\t\tjmax = N;\n\t\t\tjx = ox + ( jmin * strideX );\n\t\t\tjy = oy + ( jmin * strideY );\n\t\t\ty[ iy ] += temp1 * A[ ( LDA * i ) + i ];\n\t\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\t\tk = ( LDA * i ) + j;\n\t\t\t\ty[ jy ] += temp1 * A[ k ];\n\t\t\t\ttemp2 += x[ jx ] * A[ k ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\ty[ iy ] += alpha * temp2;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tix = ox + ( ( N - 1 ) * strideX );\n\tiy = oy + ( ( N - 1 ) * strideY );\n\tfor ( i = N - 1; i >= 0; i-- ) {\n\t\ttemp1 = alpha * x[ ix ];\n\t\ttemp2 = 0.0;\n\t\tjmin = 0;\n\t\tjmax = i;\n\t\tjx = ox + ( jmin * strideX );\n\t\tjy = oy + ( jmin * strideY );\n\t\ty[ iy ] += temp1 * A[ ( LDA * i ) + i ];\n\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\tk = ( LDA * i ) + j;\n\t\t\ty[ jy ] += temp1 * A[ k ];\n\t\t\ttemp2 += x[ jx ] * A[ k ];\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t}\n\t\ty[ iy ] += alpha * temp2;\n\t\tix -= strideX;\n\t\tiy -= strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dsymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas/base/dsymv\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsymv from '@stdlib/blas/base/dsymv';\n*\n* var A = new Float64Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* dsymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0.0, y, 1 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsymv from '@stdlib/blas/base/dsymv';\n*\n* var A = new Float64Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* dsymv.ndarray( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0, 0.0, y, 1, 0 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dsymv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdsymv = main;\n} else {\n\tdsymv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dsymv;\n\n// exports: { \"ndarray\": \"dsymv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dsymv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @private\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction dsyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tvar isrm;\n\tvar tmp;\n\tvar ix0;\n\tvar ix1;\n\tvar sa0;\n\tvar sa1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\tif (\n\t\t( !isrm && uplo === 'upper' ) ||\n\t\t( isrm && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = alpha * x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tA[ oa+(sa0*i0) ] += x[ ix0 ] * tmp;\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn A;\n\t}\n\t// ( isrm && uplo === 'upper' ) || ( !isrm && uplo === 'lower' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\ttmp = alpha * x[ ix1 ];\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tA[ oa+(sa0*i0) ] += x[ ix0 ] * tmp;\n\t\t\t\tix0 += strideX;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nexport default dsyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} eighth argument must be greater than or equal to max(1,N)\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr( 'row-major', 'upper', 3, 1.0, x, 1, A, 3 );\n* // A => <Float64Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction dsyr( order, uplo, N, alpha, x, strideX, A, LDA ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, N, alpha, x, strideX, ox, A, sa1, sa2, 0 );\n}\n\n\n// EXPORTS //\n\nexport default dsyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsyr from './dsyr.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsyr, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @throws {TypeError} first argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be non-zero\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction dsyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\treturn base( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas/base/dsyr\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsyr from '@stdlib/blas/base/dsyr';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr( 'row-major', 'upper', 3, 1.0, x, 1, A, 3 );\n* // A => <Float64Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsyr from '@stdlib/blas/base/dsyr';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr.ndarray( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dsyr;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdsyr = main;\n} else {\n\tdsyr = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dsyr;\n\n// exports: { \"ndarray\": \"dsyr.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dsyr/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @private\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr2( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction dsyr2( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len, max-params\n\tvar tmp1;\n\tvar tmp2;\n\tvar isrm;\n\tvar ix0;\n\tvar ix1;\n\tvar iy0;\n\tvar iy1;\n\tvar sa0;\n\tvar sa1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\tvar oy;\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) { // row-major\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // column-major\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\toy = offsetY;\n\tix1 = ox;\n\tiy1 = oy;\n\tif (\n\t\t( isrm && uplo === 'lower' ) ||\n\t\t( !isrm && uplo === 'upper' )\n\t) {\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( ( x[ ix1 ] !== 0.0 ) || ( y[ iy1 ] !== 0.0 ) ) {\n\t\t\t\ttmp1 = alpha * y[ iy1 ];\n\t\t\t\ttmp2 = alpha * x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tiy0 = oy;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tA[ oa+(sa0*i0) ] += ( x[ ix0 ] * tmp1 ) + ( y[ iy0 ] * tmp2 ); // eslint-disable-line max-len\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t\tiy0 += strideY;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t\tiy1 += strideY;\n\t\t}\n\t\treturn A;\n\t}\n\t// ( isrm && uplo === 'upper' ) || ( !isrm && uplo === 'lower' )\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( ( x[ ix1 ] !== 0.0 ) || ( y[ iy1 ] !== 0.0 ) ) {\n\t\t\ttmp1 = alpha * y[ iy1 ];\n\t\t\ttmp2 = alpha * x[ ix1 ];\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tiy0 = iy1;\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tA[ oa+(sa0*i0) ] += ( x[ ix0 ] * tmp1 ) + ( y[ iy0 ] * tmp2 );\n\t\t\t\tix0 += strideX;\n\t\t\t\tiy0 += strideY;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t\tiy1 += strideY;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nexport default dsyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {Float64Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} eighth argument must be greater than or equal to max(1,N)\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr2( 'row-major', 'upper', 3, 1.0, x, 1, y, 1, A, 3 );\n* // A => <Float64Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction dsyr2( order, uplo, N, alpha, x, strideX, y, strideY, A, LDA ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\tvar oy;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\toy = stride2offset( N, strideY );\n\treturn base( uplo, N, alpha, x, strideX, ox, y, strideY, oy, A, sa1, sa2, 0 ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsyr2 from './dsyr2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsyr2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @throws {TypeError} first argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be non-zero\n* @throws {RangeError} eighth argument must be non-zero\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr2( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction dsyr2( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len, max-params\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether the reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\treturn base( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas/base/dsyr2\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsyr2 from '@stdlib/blas/base/dsyr2';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr2( 'row-major', 'upper', 3, 1.0, x, 1, y, 1, A, 3 );\n* // A => <Float64Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsyr2 from '@stdlib/blas/base/dsyr2';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr2.ndarray( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dsyr2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdsyr2 = main;\n} else {\n\tdsyr2 = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dsyr2;\n\n// exports: { \"ndarray\": \"dsyr2.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dsyr2/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @private\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction dtrmv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tvar nonunit;\n\tvar isrm;\n\tvar tmp;\n\tvar sa0;\n\tvar sa1;\n\tvar ix0;\n\tvar ix1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\n\t// Note on variable naming convention: sa#, ix#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tnonunit = ( diag === 'non-unit' );\n\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = 0; i0 < i1; i0++ ) {\n\t\t\t\t\tx[ ix0 ] += tmp * A[ oa+(sa0*i0) ];\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t}\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] *= A[ oa+(sa0*i1) ];\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'lower' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'upper' )\n\t) {\n\t\tox += ( N - 1 ) * strideX;\n\t\tix1 = ox;\n\t\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = N-1; i0 > i1; i0-- ) {\n\t\t\t\t\tx[ ix0 ] += tmp * A[ oa+(sa0*i0) ];\n\t\t\t\t\tix0 -= strideX;\n\t\t\t\t}\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] *= A[ oa+(sa0*i1) ];\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 -= strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans !== 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans === 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox + ( ( N - 1 ) * strideX );\n\t\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\t\ttmp = x[ ix1 ];\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tif ( nonunit ) {\n\t\t\t\ttmp *= A[ oa+(sa0*i1) ];\n\t\t\t}\n\t\t\tfor ( i0 = i1-1; i0 >= 0; i0-- ) {\n\t\t\t\tix0 -= strideX;\n\t\t\t\ttmp += x[ ix0 ] * A[ oa+(sa0*i0) ];\n\t\t\t}\n\t\t\tx[ ix1 ] = tmp;\n\t\t\tix1 -= strideX;\n\t\t}\n\t\treturn x;\n\t}\n\t// ( !isrm && trans !== 'no-transpose' && uplo === 'lower' ) || ( isrm && trans === 'no-transpose' && uplo === 'upper' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\ttmp = x[ ix1 ];\n\t\toa = offsetA + (sa1*i1);\n\t\tix0 = ix1;\n\t\tif ( nonunit ) {\n\t\t\ttmp *= A[ oa+(sa0*i1) ];\n\t\t}\n\t\tfor ( i0 = i1+1; i0 < N; i0++ ) {\n\t\t\tix0 += strideX;\n\t\t\ttmp += x[ ix0 ] * A[ oa+(sa0*i0) ];\n\t\t}\n\t\tx[ ix1 ] = tmp;\n\t\tix1 += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dtrmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nimport isDiagonal from './../../../base/assert/is-diagonal-type';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} third argument must be a valid transpose operation\n* @throws {TypeError} fourth argument must be a valid diagonal type\n* @throws {RangeError} fifth argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be greater than or equal to max(1,N)\n* @throws {RangeError} ninth argument must be non-zero\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction dtrmv( order, uplo, trans, diag, N, A, LDA, x, strideX ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Seventh argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, trans, diag, N, A, sa1, sa2, 0, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default dtrmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dtrmv from './dtrmv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dtrmv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dtrmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nimport isDiagonal from './../../../base/assert/is-diagonal-type';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @throws {TypeError} first argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} second argument must be a valid transpose operation\n* @throws {TypeError} third argument must be a valid diagonal type\n* @throws {RangeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} tenth argument must be non-zero\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction dtrmv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\treturn base( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dtrmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @module @stdlib/blas/base/dtrmv\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dtrmv from '@stdlib/blas/base/dtrmv';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dtrmv from '@stdlib/blas/base/dtrmv';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv.ndarray( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dtrmv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdtrmv = main;\n} else {\n\tdtrmv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dtrmv;\n\n// exports: { \"ndarray\": \"dtrmv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dtrmv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT64_MAX from '@stdlib/constants/float64/max';\nimport abs from '@stdlib/math/base/special/abs';\nimport abs2 from '@stdlib/math/base/special/abs2';\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\n\n\n// VARIABLES //\n\n// Blue's scaling constants:\nvar tsml = 1.4916681462400413E-154;\nvar tbig = 1.9979190722022350E+146;\nvar ssml = 4.4989137945431964E+161;\nvar sbig = 1.1113793747425387E-162;\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a complex double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - input array\n* @param {integer} strideX - `zx` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `zx`\n* @returns {number} L2-norm\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n*\n* var zx = new Complex128Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = dznrm2( 4, zx, 1, 0 );\n* // returns ~0.8\n*/\nfunction dznrm2( N, zx, strideX, offsetX ) {\n\tvar notbig;\n\tvar sumsq;\n\tvar viewX;\n\tvar abig;\n\tvar amed;\n\tvar asml;\n\tvar ymax;\n\tvar ymin;\n\tvar scl;\n\tvar ax;\n\tvar ix;\n\tvar sx;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\t// Reinterpret the input array as a real-valued array comprised of interleaved real and imaginary components:\n\tviewX = reinterpret( zx, 0 );\n\tsx = strideX * 2;\n\tix = offsetX * 2;\n\n\t// Initialize loop values for accumulation:\n\tnotbig = true;\n\n\tsumsq = 0.0;\n\tabig = 0.0;\n\tamed = 0.0;\n\tasml = 0.0;\n\tscl = 1.0;\n\n\t// Compute the sum of squares using 3 accumulators--`abig` (sum of squares scaled down to avoid overflow), `asml` (sum of squares scaled up to avoid underflow), `amed` (sum of squares that do not require scaling)--and thresholds and multipliers--`tbig` (values bigger than this are scaled down by `sbig`) and `tsml` (values smaller than this are scaled up by `ssml`)...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = abs( viewX[ ix ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig += abs2( ax * sbig );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml += abs2( ax * ssml );\n\t\t\t}\n\t\t} else {\n\t\t\tamed += ax * ax;\n\t\t}\n\t\tax = abs( viewX[ ix + 1 ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig += abs2( ax * sbig );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml += abs2( ax * ssml );\n\t\t\t}\n\t\t} else {\n\t\t\tamed += ax * ax;\n\t\t}\n\t\tix += sx;\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig` > 0...\n\t\tif ( amed > 0.0 || ( amed > FLOAT64_MAX ) || ( amed !== amed ) ) {\n\t\t\tabig += ( amed * sbig ) * sbig;\n\t\t}\n\t\tscl = 1.0 / sbig;\n\t\tsumsq = abig;\n\t} else if ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml` > 0...\n\t\tif ( amed > 0.0 || amed > FLOAT64_MAX || ( amed !== amed ) ) {\n\t\t\tamed = sqrt( amed );\n\t\t\tasml = sqrt( asml ) / ssml;\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscl = 1.0;\n\t\t\tsumsq = ( ymax * ymax ) * ( 1.0 + abs2( ymin / ymax ) );\n\t\t} else {\n\t\t\tscl = 1.0 / ssml;\n\t\t\tsumsq = asml;\n\t\t}\n\t} else {\n\t\t// All values are mid-range...\n\t\tscl = 1.0;\n\t\tsumsq = amed;\n\t}\n\treturn sqrt( sumsq ) * scl;\n}\n\n\n// EXPORTS //\n\nexport default dznrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a complex double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - input array\n* @param {integer} strideX - `zx` stride length\n* @returns {number} L2-norm\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n*\n* var zx = new Complex128Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = dznrm2( 4, zx, 1 );\n* // returns ~0.8\n*/\nfunction dznrm2( N, zx, strideX ) {\n\treturn ndarray( N, zx, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dznrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dznrm2 from './dznrm2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dznrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dznrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to find the euclidean norm of a complex double-precision floating-point vector.\n*\n* @module @stdlib/blas/base/dznrm2\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import dznrm2 from '@stdlib/blas/base/dznrm2';\n*\n* var zx = new Complex128Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = dznrm2( 4, zx, 1 );\n* // returns ~0.8\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import dznrm2 from '@stdlib/blas/base/dznrm2';\n*\n* var zx = new Complex128Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = dznrm2.ndarray( 4, zx, 1, 0 );\n* // returns ~0.8\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dznrm2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdznrm2 = main;\n} else {\n\tdznrm2 = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dznrm2;\n\n// exports: { \"ndarray\": \"dznrm2.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dznrm2/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {PositiveInteger} stride - `x` stride length\n* @returns {number} sum\n*\n* @example\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = gasum( x.length, x, 1 );\n* // 15.0\n*/\nfunction gasum( N, x, stride ) {\n\tvar sum;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 || stride <= 0 ) {\n\t\treturn sum;\n\t}\n\t// Use unrolled loops if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += abs( x[i] );\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += abs(x[i]) + abs(x[i+1]) + abs(x[i+2]) + abs(x[i+3]) + abs(x[i+4]) + abs(x[i+5]); // eslint-disable-line max-len\n\t\t}\n\t\treturn sum;\n\t}\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tsum += abs( x[i] );\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the sum of absolute values.\n*\n* @module @stdlib/blas/base/gasum\n*\n* @example\n* import gasum from '@stdlib/blas/base/gasum';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = gasum( x.length, x, 1 );\n* // 15.0\n*\n* @example\n* // Use the `ndarray` interface...\n* import { ndarray as gasum } from '@stdlib/blas/base/gasum';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = gasum( x.length, x, 1, 0 );\n* // 15.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - `x` stride length\n* @param {NonNegativeInteger} offset - starting `x` index\n* @returns {number} sum\n*\n* @example\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = gasum( x.length, x, 1, 0 );\n* // 15.0\n*/\nfunction gasum( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offset;\n\n\t// Use unrolled loops if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += abs( x[ix] );\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += abs( x[ix] ) + abs( x[ix+1] ) + abs( x[ix+2] ) + abs( x[ix+3] ) + abs( x[ix+4] ) + abs( x[ix+5] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += abs( x[ix] );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy( x.length, alpha, x, 1, y, 1 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction gaxpy( N, alpha, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ i ] += alpha * x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ i ] += alpha * x[ i ];\n\t\t\ty[ i+1 ] += alpha * x[ i+1 ];\n\t\t\ty[ i+2 ] += alpha * x[ i+2 ];\n\t\t\ty[ i+3 ] += alpha * x[ i+3 ];\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += alpha * x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Object} y - output array object\n* @param {Collection} y.data - output array data\n* @param {Array<Function>} y.accessors - array element accessors\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Object} output array object\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import reinterpret64 from '@stdlib/strided/base/reinterpret-complex64';\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var x = {\n*     'data': new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] ),\n*     'accessors': [ getter, setter ]\n* };\n*\n* var y = {\n*     'data': new Complex64Array( [ 5.0, 6.0, 7.0, 8.0 ] ),\n*     'accessors': [ getter, setter ]\n* };\n*\n* gcopy( x.data.length, x, 1, 0, y, 1, 0 );\n*\n* var view = reinterpret64( y.data, 0 );\n* // view => <Float32Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*/\nfunction gcopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar set;\n\tvar get;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache a reference to the element accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to multiply `x` and a constant and add the result to `y`.\n*\n* @module @stdlib/blas/base/gaxpy\n*\n* @example\n* import gaxpy from '@stdlib/blas/base/gaxpy';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy( x.length, alpha, x, 1, y, 1 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*\n* @example\n* import gaxpy from '@stdlib/blas/base/gaxpy';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction gaxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\ty[ iy+1 ] += alpha * x[ ix+1 ];\n\t\t\ty[ iy+2 ] += alpha * x[ ix+2 ];\n\t\t\ty[ iy+3 ] += alpha * x[ ix+3 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += alpha * x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Collection} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gcopy( x.length, x, 1, y, 1 );\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction gcopy( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\tif ( strideX < 0 ) {\n\t\t\tix = (1-N) * strideX;\n\t\t} else {\n\t\t\tix = 0;\n\t\t}\n\t\tif ( strideY < 0 ) {\n\t\t\tiy = (1-N) * strideY;\n\t\t} else {\n\t\t\tiy = 0;\n\t\t}\n\t\taccessors( N, ox, strideX, ix, oy, strideY, iy );\n\t\treturn oy.data;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ i ] = x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ i ] = x[ i ];\n\t\t\ty[ i+1 ] = x[ i+1 ];\n\t\t\ty[ i+2 ] = x[ i+2 ];\n\t\t\ty[ i+3 ] = x[ i+3 ];\n\t\t\ty[ i+4 ] = x[ i+4 ];\n\t\t\ty[ i+5 ] = x[ i+5 ];\n\t\t\ty[ i+6 ] = x[ i+6 ];\n\t\t\ty[ i+7 ] = x[ i+7 ];\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to copy values from `x` into `y`.\n*\n* @module @stdlib/blas/base/gcopy\n*\n* @example\n* import gcopy from '@stdlib/blas/base/gcopy';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gcopy( x.length, x, 1, y, 1 );\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* @example\n* import gcopy from '@stdlib/blas/base/gcopy';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gcopy.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Collection} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gcopy( x.length, x, 1, 0, y, 1, 0 );\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction gcopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn oy.data;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] = x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] = x[ ix ];\n\t\t\ty[ iy+1 ] = x[ ix+1 ];\n\t\t\ty[ iy+2 ] = x[ ix+2 ];\n\t\t\ty[ iy+3 ] = x[ ix+3 ];\n\t\t\ty[ iy+4 ] = x[ ix+4 ];\n\t\t\ty[ iy+5 ] = x[ ix+5 ];\n\t\t\ty[ iy+6 ] = x[ ix+6 ];\n\t\t\ty[ iy+7 ] = x[ ix+7 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n\n* var z = gdot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction gdot( N, x, strideX, y, strideY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += x[ i ] * y[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[i]*y[i] ) + ( x[i+1]*y[i+1] ) + ( x[i+2]*y[i+2] ) + ( x[i+3]*y[i+3] ) + ( x[i+4]*y[i+4] ); // eslint-disable-line max-len\n\t\t}\n\t\treturn dot;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = ( 1-N ) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = ( 1-N ) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += ( x[ ix ] * y[ iy ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nexport default gdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {integer} N - number of indexed elements\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n\n* var z = gdot( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction gdot( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += ( x[ ix ] * y[ iy ] );\n\t\t\t\tix += 1;\n\t\t\t\tiy += 1;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ix]*y[iy] ) + ( x[ix+1]*y[iy+1] ) + ( x[ix+2]*y[iy+2] ) + ( x[ix+3]*y[iy+3] ) + ( x[ix+4]*y[iy+4] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn dot;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nexport default gdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport abs from '@stdlib/math/base/special/abs';\nimport pow from '@stdlib/math/base/special/pow';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {PositiveInteger} stride - stride length\n* @returns {number} L2-norm\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var z = gnrm2( x.length, x, 1 );\n* // returns 3.0\n*/\nfunction gnrm2( N, x, stride ) {\n\tvar scale;\n\tvar ssq;\n\tvar ax;\n\tvar i;\n\n\tif ( N <= 0 || stride <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 ) {\n\t\treturn abs( x[ 0 ] );\n\t}\n\tscale = 0.0;\n\tssq = 1.0;\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tif ( x[ i ] !== 0.0 ) {\n\t\t\tax = abs( x[ i ] );\n\t\t\tif ( scale < ax ) {\n\t\t\t\tssq = 1.0 + ( ssq * pow( scale/ax, 2 ) );\n\t\t\t\tscale = ax;\n\t\t\t} else {\n\t\t\t\tssq += pow( ax/scale, 2 );\n\t\t\t}\n\t\t}\n\t}\n\treturn scale * sqrt( ssq );\n}\n\n\n// EXPORTS //\n\nexport default gnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the dot product of vectors `x` and `y`.\n*\n* @module @stdlib/blas/base/gdot\n*\n* @example\n* import gdot from '@stdlib/blas/base/gdot';\n*\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* var z = gdot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*\n* @example\n* import gdot from '@stdlib/blas/base/gdot';\n*\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* var z = gdot.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the L2-norm of a vector.\n*\n* @module @stdlib/blas/base/gnrm2\n*\n* @example\n* import gnrm2 from '@stdlib/blas/base/gnrm2';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var z = gnrm2( x.length, x, 1 );\n* // returns 3.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gnrm2 from '@stdlib/blas/base/gnrm2';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var z = gnrm2.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport abs from '@stdlib/math/base/special/abs';\nimport pow from '@stdlib/math/base/special/pow';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} L2-norm\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var z = gnrm2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnrm2( N, x, stride, offset ) {\n\tvar scale;\n\tvar ssq;\n\tvar ax;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 ) {\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tscale = 0.0;\n\tssq = 1.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( x[ ix ] !== 0.0 ) {\n\t\t\tax = abs( x[ ix ] );\n\t\t\tif ( scale < ax ) {\n\t\t\t\tssq = 1.0 + ( ssq * pow( scale/ax, 2 ) );\n\t\t\t\tscale = ax;\n\t\t\t} else {\n\t\t\t\tssq += pow( ax/scale, 2 );\n\t\t\t}\n\t\t}\n\t\tix += stride;\n\t}\n\treturn scale * sqrt( ssq );\n}\n\n\n// EXPORTS //\n\nexport default gnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {PositiveInteger} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal( x.length, 5.0, x, 1 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\nfunction gscal( N, alpha, x, stride ) {\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || stride <= 0|| alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i += 1 ) {\n\t\t\t\tx[ i ] *= alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] *= alpha;\n\t\t\tx[ i+1 ] *= alpha;\n\t\t\tx[ i+2 ] *= alpha;\n\t\t\tx[ i+3 ] *= alpha;\n\t\t\tx[ i+4 ] *= alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tx[ i ] *= alpha;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Interchanges vectors `x` and `y`.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - first input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Object} y - second input array object\n* @param {Collection} y.data - second input array array\n* @param {Array<Function>} y.accessors - array element accessors\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Object} `y`\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import reinterpret64 from '@stdlib/strided/base/reinterpret-complex64';\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var x = {\n*     'data': new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] ),\n*     'accessors': [ getter, setter ]\n* };\n*\n* var y = {\n*     'data': new Complex64Array( [ 5.0, 6.0, 7.0, 8.0 ] ),\n*     'accessors': [ getter, setter ]\n* };\n*\n* gswap( x.data.length, x, 1, 0, y, 1, 0 );\n*\n* var viewX = reinterpret64( x.data, 0 );\n* // viewX => <Float32Array>[ 5.0, 6.0, 7.0, 8.0 ]\n*\n* var viewY = reinterpret64( y.data, 0 );\n* // viewY => <Float32Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*/\nfunction gswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar set;\n\tvar get;\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache a reference to the element accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = get( xbuf, ix );\n\t\tset( xbuf, ix, get( ybuf, iy ) );\n\t\tset( ybuf, iy, tmp );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to multiply `x` by a constant.\n*\n* @module @stdlib/blas/base/gscal\n*\n* @example\n* import gscal from '@stdlib/blas/base/gscal';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal( x.length, 5.0, x, 1 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*\n* @example\n* import gscal from '@stdlib/blas/base/gscal';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* gscal( 3, 5.0, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, -20.0, 25.0, -30.0 ]\n*/\nfunction gscal( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] *= alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] *= alpha;\n\t\t\tx[ i+1 ] *= alpha;\n\t\t\tx[ i+2 ] *= alpha;\n\t\t\tx[ i+3 ] *= alpha;\n\t\t\tx[ i+4 ] *= alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] *= alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges vectors `x` and `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Collection} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Collection} `y`\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gswap( x.length, x, 1, y, 1 );\n* // x => [ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction gswap( N, x, strideX, y, strideY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar m;\n\tvar i;\n\tvar j;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\tif ( strideX < 0 ) {\n\t\t\tix = (1-N) * strideX;\n\t\t} else {\n\t\t\tix = 0;\n\t\t}\n\t\tif ( strideY < 0 ) {\n\t\t\tiy = (1-N) * strideY;\n\t\t} else {\n\t\t\tiy = 0;\n\t\t}\n\t\taccessors( N, ox, strideX, ix, oy, strideY, iy );\n\t\treturn oy.data;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ i ];\n\t\t\t\tx[ i ] = y[ i ];\n\t\t\t\ty[ i ] = tmp;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ i ];\n\t\t\tx[ i ] = y[ i ];\n\t\t\ty[ i ] = tmp;\n\n\t\t\tj = i + 1;\n\t\t\ttmp = x[ j ];\n\t\t\tx[ j ] = y[ j ];\n\t\t\ty[ j ] = tmp;\n\n\t\t\tj += 1;\n\t\t\ttmp = x[ j ];\n\t\t\tx[ j ] = y[ j ];\n\t\t\ty[ j ] = tmp;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges vectors `x` and `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Collection} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Collection} `y`\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gswap( x.length, x, 1, 0, y, 1, 0 );\n* // x => [ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction gswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn oy.data;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = y[ iy ];\n\t\t\t\ty[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = y[ iy ];\n\t\t\ty[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = y[ iy+1 ];\n\t\t\ty[ iy+1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = y[ iy+2 ];\n\t\t\ty[ iy+2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Finds the index of the first element having the maximum absolute value.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @returns {integer} index value\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var idx = idamax( x.length, x, 1 );\n* // returns 4\n*/\nfunction idamax( N, x, strideX ) {\n\tvar dmax;\n\tvar idx;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N < 1 || strideX <= 0 ) {\n\t\treturn -1;\n\t}\n\tidx = 0;\n\tif ( N === 1 ) {\n\t\treturn idx;\n\t}\n\tif (strideX === 1 ) {\n\t\t// Code for stride equal to `1`...\n\t\tdmax = abs( x[ 0 ] );\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = abs( x[ i ] );\n\t\t\tif ( v > dmax ) {\n\t\t\t\tidx = i;\n\t\t\t\tdmax = v;\n\t\t\t}\n\t\t}\n\t\treturn idx;\n\t}\n\t// Code for stride not equal to `1`...\n\tdmax = abs( x[ 0 ] );\n\tix = strideX;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = abs( x[ ix ] );\n\t\tif ( v > dmax ) {\n\t\t\tidx = i;\n\t\t\tdmax = v;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default idamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport absf from '@stdlib/math/base/special/absf';\n\n\n// MAIN //\n\n/**\n* Finds the index of the first element having the maximum absolute value.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {integer} index value\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var idx = isamax( x.length, x, 1, 0 );\n* // returns 4\n*/\nfunction isamax( N, x, strideX, offsetX ) {\n\tvar smax;\n\tvar idx;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N < 1 ) {\n\t\treturn -1;\n\t}\n\tidx = 0;\n\tif ( N === 1 ) {\n\t\treturn idx;\n\t}\n\tsmax = absf( x[ offsetX ] );\n\tix = offsetX + strideX;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = absf( x[ ix ] );\n\t\tif ( v > smax ) {\n\t\t\tidx = i;\n\t\t\tsmax = v;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default isamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Finds the index of the first element having the maximum absolute value.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @returns {integer} index value\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var idx = isamax( x.length, x, 1 );\n* // returns 4\n*/\nfunction isamax( N, x, strideX ) {\n\tvar ox = stride2offset( N, strideX );\n\treturn ndarray( N, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default isamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to interchange vectors `x` and `y`.\n*\n* @module @stdlib/blas/base/gswap\n*\n* @example\n* import gswap from '@stdlib/blas/base/gswap';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gswap( x.length, x, 1, y, 1 );\n* // x => [ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* @example\n* import gswap from '@stdlib/blas/base/gswap';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gswap.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // x => [ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport idamax from './idamax.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( idamax, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default idamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Finds the index of the first element having the maximum absolute value.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {integer} index value\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var idx = idamax( x.length, x, 1, 0 );\n* // returns 4\n*/\nfunction idamax( N, x, strideX, offsetX ) {\n\tvar dmax;\n\tvar idx;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N < 1 ) {\n\t\treturn -1;\n\t}\n\tidx = 0;\n\tif ( N === 1 ) {\n\t\treturn idx;\n\t}\n\tdmax = abs( x[ offsetX ] );\n\tix = offsetX + strideX;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = abs( x[ ix ] );\n\t\tif ( v > dmax ) {\n\t\t\tidx = i;\n\t\t\tdmax = v;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default idamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport isamax from './isamax.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( isamax, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default isamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport { enum as enumeration } from './../../../base/layouts';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the BLAS memory layout string associated with a BLAS memory layout enumeration constant.\n*\n* @param {integer} layout - layout enumeration constant\n* @returns {(string|null)} layout string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/layout-str2enum';\n*\n* var v = str2enum( 'row-major' );\n* // returns <number>\n*\n* var s = enum2str( v );\n* // returns 'row-major'\n*/\nfunction enum2str( layout ) {\n\tvar v = hash[ layout ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from './../../../base/layouts';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a BLAS memory layout string.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `ROW_MAJOR == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} layout - memory layout string\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'row-major' );\n* // returns <number>\n*/\nfunction str2enum( layout ) {\n\tvar v = ENUM[ layout ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport { enum as enumeration } from './../../../base/matrix-triangles';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the BLAS matrix triangle string associated with a BLAS matrix triangle enumeration constant.\n*\n* @param {integer} value - enumeration constant\n* @returns {(string|null)} matrix triangle string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/matrix-triangle-str2enum';\n*\n* var v = str2enum( 'upper' );\n* // returns <number>\n*\n* var s = enum2str( v );\n* // returns 'upper'\n*/\nfunction enum2str( value ) {\n\tvar v = hash[ value ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from './../../../base/matrix-triangles';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a BLAS matrix triangle.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `UPPER == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} value - matrix triangle string\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'upper' );\n* // returns <number>\n*/\nfunction str2enum( value ) {\n\tvar v = ENUM[ value ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport { enum as enumeration } from './../../../base/operation-sides';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the BLAS operation side string associated with a BLAS operation side enumeration constant.\n*\n* @param {integer} operation - operation enumeration constant\n* @returns {(string|null)} operation string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/operation-side-str2enum';\n*\n* var v = str2enum( 'left' );\n* // returns <number>\n*\n* var s = enum2str( v );\n* // returns 'left'\n*/\nfunction enum2str( operation ) {\n\tvar v = hash[ operation ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from './../../../base/operation-sides';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a BLAS operation side.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `LEFT == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} operation - operation side\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'left' );\n* // returns <number>\n*/\nfunction str2enum( operation ) {\n\tvar v = ENUM[ operation ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport absf from '@stdlib/math/base/special/absf';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - `x` stride length\n* @param {NonNegativeInteger} offset - starting index for `x`\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = sasum( x.length, x, 1, 0 );\n* // returns 15.0\n*/\nfunction sasum( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = f32( sum + absf( x[ ix ] ) );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default sasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - `x` stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = sasum( x.length, x, 1 );\n* // returns 15.0\n*/\nfunction sasum( N, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default sasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sasum from './sasum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* saxpy( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction saxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] += float64ToFloat32( alpha * x[ ix ] );\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] += float64ToFloat32( alpha * x[ ix ] );\n\t\t\ty[ iy+1 ] += float64ToFloat32( alpha * x[ ix+1 ] );\n\t\t\ty[ iy+2 ] += float64ToFloat32( alpha * x[ ix+2 ] );\n\t\t\ty[ iy+3 ] += float64ToFloat32( alpha * x[ ix+3 ] );\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += float64ToFloat32( alpha * x[ ix ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default saxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* saxpy( x.length, alpha, x, 1, y, 1 );\n* // y => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction saxpy( N, alpha, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, alpha, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default saxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport saxpy from './saxpy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( saxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default saxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport absf from '@stdlib/math/base/special/absf';\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex64';\n\n\n// MAIN //\n\n/**\n* Computes the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {PositiveInteger} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `cx`\n* @returns {number} result\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var cx = new Complex64Array( [ 5.0, -3.0, 6.0, 4.0 ] );\n*\n* var out = scasum( cx.length, cx, 1, 0 );\n* // returns 18.0\n*/\nfunction scasum( N, cx, strideX, offsetX ) {\n\tvar stemp;\n\tvar viewX;\n\tvar ix;\n\tvar sx;\n\tvar i;\n\n\tstemp = 0.0;\n\tif ( N <= 0 || strideX <= 0 ) {\n\t\treturn stemp;\n\t}\n\tviewX = reinterpret( cx, 0 );\n\tsx = strideX * 2;\n\tix = offsetX * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tstemp += absf( viewX[ ix ] ) + absf( viewX[ ix+1 ] );\n\t\tix += sx;\n\t}\n\treturn stemp;\n}\n\n\n// EXPORTS //\n\nexport default scasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {PositiveInteger} strideX - `cx` stride length\n* @returns {number} result\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var cx = new Complex64Array( [ 5.0, -3.0, 6.0, 4.0 ] );\n*\n* var out = scasum( cx.length, cx, 1 );\n* // returns 18.0\n*/\nfunction scasum( N, cx, strideX ) {\n\treturn ndarray( N, cx, strideX, 0 );\n}\n\n\n// EXPORTS //\n\nexport default scasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scasum from './scasum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point vector.\n*\n* @module @stdlib/blas/base/scasum\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import scasum from '@stdlib/blas/base/scasum';\n*\n* var cx = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var out = scasum( cx.length, cx, 1 );\n* // returns 19.0\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import scasum from '@stdlib/blas/base/scasum';\n*\n* var cx = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var out = scasum.ndarray( cx.length, cx, 1, 0 );\n* // returns 19.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar scasum;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tscasum = main;\n} else {\n\tscasum = tmp;\n}\n\n\n// EXPORTS //\n\nexport default scasum;\n\n// exports: { \"ndarray\": \"scasum.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/scasum/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport FLOAT32_MAX from '@stdlib/constants/float32/max';\nimport absf from '@stdlib/math/base/special/absf';\nimport abs2f from '@stdlib/math/base/special/abs2f';\nimport sqrtf from '@stdlib/math/base/special/sqrtf';\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex64';\n\n\n// VARIABLES //\n\n// Blue's scaling constants:\nvar tsml = 1.08420217E-19;\nvar tbig = 4.50359963E+15;\nvar ssml = 3.77789319E+22;\nvar sbig = 1.32348898E-23;\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `cx`\n* @returns {number} L2-norm\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2( 4, cx, 1, 0 );\n* // returns ~0.8\n*/\nfunction scnrm2( N, cx, strideX, offsetX ) {\n\tvar notbig;\n\tvar sumsq;\n\tvar viewX;\n\tvar abig;\n\tvar amed;\n\tvar asml;\n\tvar ymax;\n\tvar ymin;\n\tvar scl;\n\tvar ax;\n\tvar ix;\n\tvar sx;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\t// Reinterpret the input array as a real-valued array comprised of interleaved real and imaginary components:\n\tviewX = reinterpret( cx, 0 );\n\tsx = strideX * 2;\n\tix = offsetX * 2;\n\n\t// Initialize loop values for accumulation:\n\tnotbig = true;\n\n\tsumsq = 0.0;\n\tabig = 0.0;\n\tamed = 0.0;\n\tasml = 0.0;\n\tscl = 1.0;\n\n\t// Compute the sum of squares using 3 accumulators--`abig` (sum of squares scaled down to avoid overflow), `asml` (sum of squares scaled up to avoid underflow), `amed` (sum of squares that do not require scaling)--and thresholds and multipliers--`tbig` (values bigger than this are scaled down by `sbig`) and `tsml` (values smaller than this are scaled up by `ssml`)...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = absf( viewX[ ix ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig = f32( abig + abs2f( ax * sbig ) );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml = f32( asml + abs2f( ax * ssml ) );\n\t\t\t}\n\t\t} else {\n\t\t\tamed = f32( amed + f32( ax * ax ) );\n\t\t}\n\t\tax = absf( viewX[ ix + 1 ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig = f32( abig + abs2f( ax * sbig ) );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml = f32( asml + abs2f( ax * ssml ) );\n\t\t\t}\n\t\t} else {\n\t\t\tamed = f32( amed + f32( ax * ax ) );\n\t\t}\n\t\tix += sx;\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig` > 0...\n\t\tif ( amed > 0.0 || ( amed > FLOAT32_MAX ) || ( amed !== amed ) ) {\n\t\t\tabig = f32( abig + f32( f32( amed * sbig ) * sbig ) );\n\t\t}\n\t\tscl = f32( 1.0 / sbig );\n\t\tsumsq = abig;\n\t} else if ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml` > 0...\n\t\tif ( amed > 0.0 || amed > FLOAT32_MAX || ( amed !== amed ) ) {\n\t\t\tamed = sqrtf( amed );\n\t\t\tasml = f32( sqrtf( asml ) / ssml );\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscl = 1.0;\n\t\t\tsumsq = f32( f32( ymax * ymax ) * f32( 1.0 + abs2f( ymin / ymax ) ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tscl = f32( 1.0 / ssml );\n\t\t\tsumsq = asml;\n\t\t}\n\t} else {\n\t\t// All values are mid-range...\n\t\tscl = 1.0;\n\t\tsumsq = amed;\n\t}\n\treturn f32( sqrtf( sumsq ) * scl );\n}\n\n\n// EXPORTS //\n\nexport default scnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @returns {number} L2-norm\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2( 4, cx, 1 );\n* // returns ~0.8\n*/\nfunction scnrm2( N, cx, strideX ) {\n\treturn ndarray( N, cx, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default scnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scnrm2 from './scnrm2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scnrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the L2-norm of a complex single-precision floating-point vector.\n*\n* @module @stdlib/blas/base/scnrm2\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import scnrm2 from '@stdlib/blas/base/scnrm2';\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2( 4, cx, 1 );\n* // returns ~0.8\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import scnrm2 from '@stdlib/blas/base/scnrm2';\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2.ndarray( 4, cx, 1, 0 );\n* // returns ~0.8\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar scnrm2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tscnrm2 = main;\n} else {\n\tscnrm2 = tmp;\n}\n\n\n// EXPORTS //\n\nexport default scnrm2;\n\n// exports: { \"ndarray\": \"scnrm2.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/scnrm2/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* scopy( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction scopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] = x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] = x[ ix ];\n\t\t\ty[ iy+1 ] = x[ ix+1 ];\n\t\t\ty[ iy+2 ] = x[ ix+2 ];\n\t\t\ty[ iy+3 ] = x[ ix+3 ];\n\t\t\ty[ iy+4 ] = x[ ix+4 ];\n\t\t\ty[ iy+5 ] = x[ ix+5 ];\n\t\t\ty[ iy+6 ] = x[ ix+6 ];\n\t\t\ty[ iy+7 ] = x[ ix+7 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* scopy( x.length, x, 1, y, 1 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction scopy( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default scopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {integer} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdot( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction sdot( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot = float64ToFloat32( dot + float64ToFloat32( x[ ix ] * y[ iy ] ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nexport default sdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction sdot( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default sdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scopy from './scopy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scopy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdot from './sdot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two single-precision floating-point vectors with extended accumulation.\n*\n* @param {integer} N - number of indexed elements\n* @param {number} scalar - scalar constant to add to dot product\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdsdot( x.length, 0.0, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction sdsdot( N, scalar, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = scalar;\n\tif ( N <= 0 ) {\n\t\treturn float64ToFloat32( dot );\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += x[ ix ] * y[ iy ];\n\t\t\t\tix += 1;\n\t\t\t\tiy += 1;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn float64ToFloat32( dot );\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ix]*y[iy] ) + ( x[ix+1]*y[iy+1] ) + ( x[ix+2]*y[iy+2] ) + ( x[ix+3]*y[iy+3] ) + ( x[ix+4]*y[iy+4] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn float64ToFloat32( dot );\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn float64ToFloat32( dot );\n}\n\n\n// EXPORTS //\n\nexport default sdsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two single-precision floating-point vectors with extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} scalar - scalar constant to add to dot product\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdsdot( x.length, 0.0, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction sdsdot( N, scalar, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn float64ToFloat32( scalar );\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, scalar, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default sdsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdsdot from './sdsdot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdsdot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsdot;\n","export default '/home/runner/work/blas/blas/base/sgemv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a single-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - index increment\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* sfill( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction sfill( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] = alpha;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] = alpha;\n\t\t\tx[ ix+1 ] = alpha;\n\t\t\tx[ ix+2 ] = alpha;\n\t\t\tx[ ix+3 ] = alpha;\n\t\t\tx[ ix+4 ] = alpha;\n\t\t\tx[ ix+5 ] = alpha;\n\t\t\tx[ ix+6 ] = alpha;\n\t\t\tx[ ix+7 ] = alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default sfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Fills a single-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* sfill( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction sfill( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sfill from './sfill.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sfill, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {PositiveInteger} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* sscal( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\nfunction sscal( N, alpha, x, stride ) {\n\tvar i;\n\tvar m;\n\n\tif ( N <= 0 || stride <= 0|| alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] *= alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] *= alpha;\n\t\t\tx[ i+1 ] *= alpha;\n\t\t\tx[ i+2 ] *= alpha;\n\t\t\tx[ i+3 ] *= alpha;\n\t\t\tx[ i+4 ] *= alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tx[ i ] *= alpha;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default sscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n* var alpha = 5.0;\n*\n* sscal( 3, alpha, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, -20.0, 25.0, -30.0 ]\n*/\nfunction sscal( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\n\tif ( N <= 0 || alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] *= alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] *= alpha;\n\t\t\tx[ i+1 ] *= alpha;\n\t\t\tx[ i+2 ] *= alpha;\n\t\t\tx[ i+3 ] *= alpha;\n\t\t\tx[ i+4 ] *= alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] *= alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default sscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\nimport { ndarray as sfill } from './../../../ext/base/sfill';\nimport { ndarray as sscal } from './../../../base/sscal';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `y = α*A*x + β*y` or `y = α*A^T*x + β*y`, where `α` and `β` are scalars, `x` and `y` are vectors, and `A` is an `M` by `N` matrix.\n*\n* @private\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `A`\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0 ] );\n*\n* sgemv( 'no-transpose', 2, 3, 1.0, A, 3, 1, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float32Array>[ 7.0, 16.0 ]\n*/\nfunction sgemv( trans, M, N, alpha, A, strideA1, strideA2, offsetA, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tvar isrm;\n\tvar xlen;\n\tvar ylen;\n\tvar tmp;\n\tvar ix1;\n\tvar iy1;\n\tvar sa0;\n\tvar sa1;\n\tvar i1;\n\tvar i0;\n\tvar oa;\n\n\t// Note on variable naming convention: sa#, ix#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tif ( trans === 'no-transpose' ) {\n\t\txlen = N;\n\t\tylen = M;\n\t} else {\n\t\txlen = M;\n\t\tylen = N;\n\t}\n\t// y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tsfill( ylen, 0.0, y, strideY, offsetY );\n\t\t} else {\n\t\t\tsscal( ylen, beta, y, strideY, offsetY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\t// Form: y = α*A*x + y\n\tif (\n\t\t( !isrm && trans === 'no-transpose' ) ||\n\t\t( isrm && trans !== 'no-transpose' )\n\t) {\n\t\tix1 = offsetX;\n\t\tfor ( i1 = 0; i1 < xlen; i1++ ) {\n\t\t\ttmp = f32( alpha * x[ ix1 ] );\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tiy1 = offsetY;\n\t\t\tfor ( i0 = 0; i0 < ylen; i0++ ) {\n\t\t\t\ty[ iy1 ] += f32( A[ oa+(sa0*i0) ] * tmp );\n\t\t\t\tiy1 += strideY;\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn y;\n\t}\n\t// Form: y = α*A^T*x + y\n\n\t// ( !isrm && trans !== 'no-transpose' ) || ( isrm && trans === 'no-transpose' )\n\tiy1 = offsetY;\n\tfor ( i1 = 0; i1 < ylen; i1++ ) {\n\t\ttmp = 0.0;\n\t\tix1 = offsetX;\n\t\toa = offsetA + (sa1*i1);\n\t\tfor ( i0 = 0; i0 < xlen; i0++ ) {\n\t\t\ttmp += f32( A[ oa+(sa0*i0) ] * x[ ix1 ] );\n\t\t\tix1 += strideX;\n\t\t}\n\t\ty[ iy1 ] += f32( alpha * tmp );\n\t\tiy1 += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default sgemv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTranspose from './../../../base/assert/is-transpose-operation';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `y = α*A*x + β*y` or `y = α*A^T*x + β*y`, where `α` and `β` are scalars, `x` and `y` are vectors, and `A` is an `M` by `N` matrix.\n*\n* @param {string} order - storage layout\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `A`\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - input matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must be a valid transpose operation\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be greater than or equal to max(1,M)\n* @throws {RangeError} ninth argument must be non-zero\n* @throws {RangeError} twelfth argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0 ] );\n*\n* sgemv( 'row-major', 'no-transpose', 2, 3, 1.0, A, 3, x, 1, 1.0, y, 1 );\n* // y => <Float32Array>[ 7.0, 16.0 ]\n*/\nfunction sgemv( order, trans, M, N, alpha, A, LDA, x, strideX, beta, y, strideY ) { // eslint-disable-line max-params, max-len\n\tvar xlen;\n\tvar ylen;\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\tvar oy;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTranspose( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( M < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero.' ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Twelfth argument must be non-zero.' ) );\n\t}\n\t// Check if we can early return...\n\tif ( M === 0 || N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\tif ( trans === 'no-transpose' ) {\n\t\txlen = N;\n\t\tylen = M;\n\t} else {\n\t\txlen = M;\n\t\tylen = N;\n\t}\n\tox = stride2offset( xlen, strideX );\n\toy = stride2offset( ylen, strideY );\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\treturn base( trans, M, N, alpha, A, sa1, sa2, 0, x, strideX, ox, beta, y, strideY, oy ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sgemv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sscal from './sscal.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sgemv from './sgemv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sgemv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sgemv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTranspose from './../../../base/assert/is-transpose-operation';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `y = α*A*x + β*y` or `y = α*A^T*x + β*y`, where `α` and `β` are scalars, `x` and `y` are vectors, and `A` is an `M` by `N` matrix.\n*\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `A`\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @throws {TypeError} first argument must be a valid transpose operation\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} tenth argument must be non-zero\n* @throws {RangeError} fourteenth argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0 ] );\n*\n* sgemv( 'no-transpose', 2, 3, 1.0, A, 3, 1, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float32Array>[ 7.0, 16.0 ]\n*/\nfunction sgemv( trans, M, N, alpha, A, strideA1, strideA2, offsetA, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tif ( !isMatrixTranspose( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( M < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eleventh argument must be non-zero.' ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifteenth argument must be non-zero.' ) );\n\t}\n\t// Check if we can early return...\n\tif ( M === 0 || N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\treturn base( trans, M, N, alpha, A, strideA1, strideA2, offsetA, x, strideX, offsetX, beta, y, strideY, offsetY ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sgemv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform one of the matrix-vector operations `y = α*A*x + β*y` or `y = α*A^T*x + β*y`, where `α` and `β` are scalars, `x` and `y` are vectors, and `A` is an `M` by `N` matrix.\n*\n* @module @stdlib/blas/base/sgemv\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import sgemv from '@stdlib/blas/base/sgemv';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0 ] );\n*\n* sgemv( 'row-major', 'no-transpose', 2, 3, 1.0, A, 3, x, 1, 1.0, y, 1 );\n* // y => <Float32Array>[ 7.0, 16.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import sgemv from '@stdlib/blas/base/sgemv';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0 ] );\n*\n* sgemv.ndarray( 'no-transpose', 2, 3, 1.0, A, 3, 1, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float32Array>[ 7.0, 16.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar sgemv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsgemv = main;\n} else {\n\tsgemv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default sgemv;\n\n// exports: { \"ndarray\": \"sgemv.ndarray\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT32_MAX from '@stdlib/constants/float32/max';\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport absf from '@stdlib/math/base/special/absf';\nimport abs2f from '@stdlib/math/base/special/abs2f';\nimport sqrtf from '@stdlib/math/base/special/sqrtf';\n\n\n// VARIABLES //\n\n// Blue's scaling constants:\nvar tsml = 1.08420217E-19;\nvar tbig = 4.50359963E+15;\nvar ssml = 3.77789319E+22;\nvar sbig = 1.32348898E-23;\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} L2-norm\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var z = snrm2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snrm2( N, x, stride, offset ) {\n\tvar notbig;\n\tvar sumsq;\n\tvar abig;\n\tvar amed;\n\tvar asml;\n\tvar ymax;\n\tvar ymin;\n\tvar scl;\n\tvar ax;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offset;\n\n\t// Initialize loop values for accumulation:\n\tnotbig = true;\n\n\tsumsq = 0.0;\n\tabig = 0.0;\n\tamed = 0.0;\n\tasml = 0.0;\n\tscl = 1.0;\n\n\t// Compute the sum of squares using 3 accumulators--`abig` (sum of squares scaled down to avoid overflow), `asml` (sum of squares scaled up to avoid underflow), `amed` (sum of squares that do not require scaling)--and thresholds and multipliers--`tbig` (values bigger than this are scaled down by `sbig`) and `tsml` (values smaller than this are scaled up by `ssml`)...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = absf( x[ ix ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig = f32( abig + abs2f( ax * sbig ) );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml = f32( asml + abs2f( ax * ssml ) );\n\t\t\t}\n\t\t} else {\n\t\t\tamed = f32( amed + f32( ax * ax ) );\n\t\t}\n\t\tix += stride;\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig` > 0...\n\t\tif ( amed > 0.0 || ( amed > FLOAT32_MAX ) || ( amed !== amed ) ) {\n\t\t\tabig = f32( abig + f32( f32( amed * sbig ) * sbig ) );\n\t\t}\n\t\tscl = f32( 1.0 / sbig );\n\t\tsumsq = abig;\n\t} else if ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml` > 0...\n\t\tif ( amed > 0.0 || amed > FLOAT32_MAX || ( amed !== amed ) ) {\n\t\t\tamed = sqrtf( amed );\n\t\t\tasml = f32( sqrtf( asml ) / ssml );\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscl = 1.0;\n\t\t\tsumsq = f32( f32( ymax * ymax ) * f32( 1.0 + abs2f( ymin / ymax ) ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tscl = f32( 1.0 / ssml );\n\t\t\tsumsq = asml;\n\t\t}\n\t} else {\n\t\t// All values are mid-range...\n\t\tscl = 1.0;\n\t\tsumsq = amed;\n\t}\n\treturn f32( sqrtf( sumsq ) * scl );\n}\n\n\n// EXPORTS //\n\nexport default snrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} L2-norm\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var z = snrm2( x.length, x, 1 );\n* // returns 3.0\n*/\nfunction snrm2( N, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default snrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* srot( 2, x, 2, 2, y, 2, 2, 0.8, 0.6 );\n* // x => <Float32Array>[ 1.0, 2.0, ~7.8, 4.0, ~10.6, 6.0 ]\n* // y => <Float32Array>[ 7.0, 8.0, ~5.4, 10.0, ~5.8, 12.0 ]\n*/\nfunction srot( N, x, strideX, offsetX, y, strideY, offsetY, c, s ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tc = f32( c );\n\ts = f32( s );\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = f32( c * x[ ix ] ) + f32( s * y[ iy ] );\n\t\ty[ iy ] = f32( c * y[ iy ] ) - f32( s * x[ ix ] );\n\t\tx[ ix ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default srot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* srot( x.length, x, 1, y, 1, 0.8, 0.6 );\n* // x => <Float32Array>[ ~4.4, ~5.8, ~7.2, ~8.6, 10.0 ]\n* // y => <Float32Array>[ ~4.2, 4.4, 4.6, 4.8, 5.0 ]\n*/\nfunction srot( N, x, strideX, y, strideY, c, s ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nexport default srot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport absf from '@stdlib/math/base/special/absf';\nimport sqrtf from '@stdlib/math/base/special/sqrtf';\nimport abs2f from '@stdlib/math/base/special/abs2f';\nimport copysignf from '@stdlib/math/base/special/copysignf';\n\n\n// MAIN //\n\n/**\n* Constructs a Givens plane rotation.\n*\n* @param {number} a - rotational elimination parameter\n* @param {number} b - rotational elimination parameter\n* @param {Float32Array} out - output array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var out = srotg( 0.0, 2.0, new Float32Array( 4 ), 1, 0 );\n*  // returns <Float32Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*/\nfunction srotg( a, b, out, stride, offset ) {\n\tvar scale;\n\tvar sign;\n\tvar aa;\n\tvar ab;\n\tvar r;\n\tvar c;\n\tvar s;\n\tvar z;\n\n\taa = absf( a );\n\tab = absf( b );\n\tif ( aa > ab ) {\n\t\tsign = copysignf( 1.0, a );\n\t} else {\n\t\tsign = copysignf( 1.0, b );\n\t}\n\tscale = float64ToFloat32( aa + ab );\n\tif ( scale === 0.0 ) {\n\t\tc = 1.0;\n\t\ts = 0.0;\n\t\tr = 0.0;\n\t\tz = 0.0;\n\t} else {\n\t\tr = float64ToFloat32( scale * sqrtf( float64ToFloat32( abs2f( float64ToFloat32( a/scale ) ) + abs2f( float64ToFloat32( b/scale ) ) ) ) ); // eslint-disable-line max-len\n\t\tr = float64ToFloat32( r * sign );\n\t\tc = float64ToFloat32( a / r );\n\t\ts = float64ToFloat32( b / r );\n\t\tz = 1.0;\n\t\tif ( aa > ab ) {\n\t\t\tz = s;\n\t\t} else if ( c !== 0.0 ) {\n\t\t\tz = float64ToFloat32( 1.0 / c );\n\t\t}\n\t}\n\ta = r;\n\tb = z;\n\tout[ offset ] = a;\n\tout[ offset + stride ] = b;\n\tout[ offset + ( 2 * stride ) ] = c;\n\tout[ offset + ( 3 * stride ) ] = s;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default srotg;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array/float32';\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Constructs a Givens plane rotation.\n*\n* @param {number} a - rotational elimination parameter\n* @param {number} b - rotational elimination parameter\n* @returns {Float32Array} output array\n*\n* @example\n* var out = srotg( 0.0, 2.0 );\n* // returns <Float32Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*/\nfunction srotg( a, b ) {\n\tvar out = new Float32Array( 4 );\n\treturn fcn( a, b, out, 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default srotg;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Applies a modified Givens plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float32Array} param - parameters for the modified Givens transformation\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 0.6, 0.1, -0.5, 0.8, 0.9, -0.3, -0.4 ] );\n* var y = new Float32Array( [ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ] );\n* var param = new Float32Array( [ 0.0, 0.0, 2.0, -3.0, 0.0 ] );\n*\n* srotm( 4, x, -1, 3, y, -2, 6, param );\n* // x => <Float32Array>[ ~-0.9, ~-0.8, ~1.3, ~-1.6, ~0.9, ~-0.3, ~-0.4 ]\n* // y => <Float32Array>[ ~1.7, ~-0.9, ~0.5, ~0.7, ~-1.6, ~0.2, ~2.4 ]\n*/\nfunction srotm( N, x, strideX, offsetX, y, strideY, offsetY, param ) {\n\tvar sflag;\n\tvar sh11;\n\tvar sh12;\n\tvar sh21;\n\tvar sh22;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tvar w;\n\tvar z;\n\n\tsflag = param[ 0 ];\n\tif ( N <= 0 || sflag === -2.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( strideX === strideY && strideX > 0 ) {\n\t\tif ( sflag < 0.0 ) {\n\t\t\tsh11 = param[ 1 ];\n\t\t\tsh12 = param[ 3 ];\n\t\t\tsh21 = param[ 2 ];\n\t\t\tsh22 = param[ 4 ];\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tw = x[ ix ];\n\t\t\t\tz = y[ ix ];\n\t\t\t\tx[ ix ] = f32( f32( w * sh11 ) + f32( z * sh12 ) );\n\t\t\t\ty[ ix ] = f32( f32( w * sh21 ) + f32( z * sh22 ) );\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tif ( sflag === 0.0 ) {\n\t\t\tsh12 = param[ 3 ];\n\t\t\tsh21 = param[ 2 ];\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tw = x[ ix ];\n\t\t\t\tz = y[ ix ];\n\t\t\t\tx[ ix ] = f32( w + f32( z * sh12 ) );\n\t\t\t\ty[ ix ] = f32( f32( w * sh21 ) + z );\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tsh11 = param[ 1 ];\n\t\tsh22 = param[ 4 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ ix ];\n\t\t\tx[ ix ] = f32( f32( w * sh11 ) + z );\n\t\t\ty[ ix ] = f32( -w + f32( z * sh22 ) );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( sflag < 0.0 ) {\n\t\tsh11 = param[ 1 ];\n\t\tsh12 = param[ 3 ];\n\t\tsh21 = param[ 2 ];\n\t\tsh22 = param[ 4 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ iy ];\n\t\t\tx[ ix ] = f32( f32( w * sh11 ) + f32( z * sh12 ) );\n\t\t\ty[ iy ] = f32( f32( w * sh21 ) + f32( z * sh22 ) );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( sflag === 0.0 ) {\n\t\tsh12 = param[ 3 ];\n\t\tsh21 = param[ 2 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ iy ];\n\t\t\tx[ ix ] = f32( w + f32( z * sh12 ) );\n\t\t\ty[ iy ] = f32( f32( w * sh21 ) + z );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tsh11 = param[ 1 ];\n\tsh22 = param[ 4 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tw = x[ ix ];\n\t\tz = y[ iy ];\n\t\tx[ ix ] = f32( f32( w * sh11 ) + z );\n\t\ty[ iy ] = f32( -w + f32( z * sh22 ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default srotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a modified Givens plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {Float32Array} param - parameters for the modified Givens transformation\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 0.6, 0.1, -0.5, 0.8, 0.9, -0.3, -0.4 ] );\n* var y = new Float32Array( [ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ] );\n* var param = new Float32Array( [ 0.0, 0.0, 2.0, -3.0, 0.0 ] );\n*\n* srotm( 4, x, -1, y, -2, param );\n* // x => <Float32Array>[ ~-0.9, ~-0.8, ~1.3, ~-1.6, ~0.9, ~-0.3, ~-0.4 ]\n* // y => <Float32Array>[ ~1.7, ~-0.9, ~0.5, ~0.7, ~-1.6, ~0.2, ~2.4 ]\n*/\nfunction srotm( N, x, strideX, y, strideY, param ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy, param );\n}\n\n\n// EXPORTS //\n\nexport default srotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snrm2 from './snrm2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport srot from './srot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( srot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default srot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Construct a Givens plane rotation.\n*\n* @module @stdlib/blas/base/srotg\n*\n* @example\n* import srotg from '@stdlib/blas/base/srotg';\n*\n* var out = srotg( 0.0, 2.0 );\n* // returns <Float32Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*\n* out = srotg( 6.0, -8.0 );\n* // returns <Float32Array>[ 10.0, ~-1.666, -0.6, 0.8 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import srotg from '@stdlib/blas/base/srotg';\n*\n* var out = new Float32Array( 4 );\n*\n* var y = srotg.assign( 0.0, 2.0, out, 1, 0 );\n* // returns <Float32Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport srotm from './srotm.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( srotm, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default srotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sfill from './../../../ext/base/sfill';\nimport sscal from './../../../base/sscal';\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} AP - packed form of a symmetric matrix `A`\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be non-zero\n* @throws {RangeError} tenth argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var AP = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n*\n* sspmv( 'column-major', 'lower', 3, 1.0, AP, x, 1, 1.0, y, 1 );\n* // y => <Float32Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\nfunction sspmv( order, uplo, N, alpha, AP, x, strideX, beta, y, strideY ) {\n\tvar temp1;\n\tvar temp2;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar kk;\n\tvar kx;\n\tvar ky;\n\tvar sy;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Seventh argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Tenth argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tsy = strideY;\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tsfill( N, 0.0, y, strideY );\n\t\t} else {\n\t\t\tif ( strideY < 0 ) {\n\t\t\t\tsy = -sy;\n\t\t\t}\n\t\t\tsscal( N, beta, y, sy );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX > 0 ) {\n\t\tkx = 0;\n\t} else {\n\t\tkx = ( 1 - N ) * strideX;\n\t}\n\tif ( strideY > 0 ) {\n\t\tky = 0;\n\t} else {\n\t\tky = ( 1 - N ) * strideY;\n\t}\n\t// Form: y = alpha*A*x + y\n\tkk = 0;\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tjx = kx;\n\t\tjy = ky;\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\ttemp1 = f32( alpha * x[ jx ] );\n\t\t\ttemp2 = 0.0;\n\t\t\ty[ jy ] += f32( temp1 * AP[ kk ] );\n\t\t\tix = jx;\n\t\t\tiy = jy;\n\t\t\tfor ( k = kk + 1; k < kk + N - j; k++ ) {\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t\ty[ iy ] += f32( temp1 * AP[ k ] );\n\t\t\t\ttemp2 += f32( AP[ k ] * x[ ix ] );\n\t\t\t}\n\t\t\ty[ jy ] += f32( alpha * temp2 );\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t\tkk += N - j;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tjx = kx;\n\tjy = ky;\n\tfor ( j = 0; j < N; j++ ) {\n\t\ttemp1 = f32( alpha * x[ jx ] );\n\t\ttemp2 = 0.0;\n\t\tix = kx;\n\t\tiy = ky;\n\t\tfor ( k = kk; k < kk + j; k++ ) {\n\t\t\ty[ iy ] += f32( temp1 * AP[ k ] );\n\t\t\ttemp2 += f32( AP[ k ] * x[ ix ] );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\ty[ jy ] += f32( f32( temp1 * AP[ kk + j ] ) + f32( alpha * temp2 ) );\n\t\tjx += strideX;\n\t\tjy += strideY;\n\t\tkk += j + 1;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default sspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sspmv from './sspmv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sspmv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sfill } from './../../../ext/base/sfill';\nimport { ndarray as sscal } from './../../../base/sscal';\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} AP - packed form of a symmetric matrix `A`\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be non-zero\n* @throws {RangeError} eleventh argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n*\n* sspmv( 'column-major', 'lower', 3, 1.0, A, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float32Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\nfunction sspmv( order, uplo, N, alpha, AP, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tvar temp1;\n\tvar temp2;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar kk;\n\tvar kx;\n\tvar ky;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Seventh argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eleventh argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tsfill( N, 0.0, y, strideY, offsetY );\n\t\t} else {\n\t\t\tsscal( N, beta, y, strideY, offsetY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\t// Form: y = alpha*A*x + y\n\tkx = offsetX;\n\tky = offsetY;\n\tkk = 0;\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tjx = kx;\n\t\tjy = ky;\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\ttemp1 = f32( alpha * x[ jx ] );\n\t\t\ttemp2 = 0.0;\n\t\t\ty[ jy ] += f32( temp1 * AP[ kk ] );\n\t\t\tix = jx;\n\t\t\tiy = jy;\n\t\t\tfor ( k = kk + 1; k < kk + N - j; k++ ) {\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t\ty[ iy ] += f32( temp1 * AP[ k ] );\n\t\t\t\ttemp2 += f32( AP[ k ] * x[ ix ] );\n\t\t\t}\n\t\t\ty[ jy ] += f32( alpha * temp2 );\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t\tkk += N - j;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tjx = kx;\n\tjy = ky;\n\tfor ( j = 0; j < N; j++ ) {\n\t\ttemp1 = f32( alpha * x[ jx ] );\n\t\ttemp2 = 0.0;\n\t\tix = kx;\n\t\tiy = ky;\n\t\tfor ( k = kk; k < kk + j; k++ ) {\n\t\t\ty[ iy ] += f32( temp1 * AP[ k ] );\n\t\t\ttemp2 += f32( AP[ k ] * x[ ix ] );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\ty[ jy ] += f32( f32( temp1 * AP[ kk + j ] ) + f32( alpha * temp2 ) );\n\t\tjx += strideX;\n\t\tjy += strideY;\n\t\tkk += j + 1;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default sspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @module @stdlib/blas/base/sspmv\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import sspmv from '@stdlib/blas/base/sspmv';\n*\n* var AP = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n*\n* sspmv( 'column-major', 'lower', 3, 1.0, AP, x, 1, 1.0, y, 1 );\n* // y => <Float32Array>[ ~7.0, ~12.0, ~15.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import sspmv from '@stdlib/blas/base/sspmv';\n*\n* var AP = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n*\n* sspmv.ndarray( 'column-major', 'lower', 3, 1.0, AP, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float32Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar sspmv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsspmv = main;\n} else {\n\tsspmv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default sspmv;\n\n// exports: { \"ndarray\": \"sspmv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/sspmv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges two single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* sswap( x.length, x, 1, 0, y, 1, 0 );\n* // x => <Float32Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction sswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = y[ iy ];\n\t\t\t\ty[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = y[ iy ];\n\t\t\ty[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = y[ iy+1 ];\n\t\t\ty[ iy+1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = y[ iy+2 ];\n\t\t\ty[ iy+2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default sswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Interchanges two single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* sswap( x.length, x, 1, y, 1 );\n* // x => <Float32Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction sswap( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default sswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sswap from './sswap.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sswap, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sfill from './../../../ext/base/sfill';\nimport sscal from './../../../base/sscal';\nimport max from '@stdlib/math/base/special/max';\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be greater than or equal to max(1,N)\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} eleventh argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 0.0, 0.0, 0.0 ] );\n*\n* ssymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0.0, y, 1 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction ssymv( order, uplo, N, alpha, A, LDA, x, strideX, beta, y, strideY ) { // eslint-disable-line max-params\n\tvar temp1;\n\tvar temp2;\n\tvar jmin;\n\tvar jmax;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar ox;\n\tvar oy;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( 'invalid argument. Sixth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eleventh argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tsfill( N, 0.0, y, strideY );\n\t\t} else {\n\t\t\tif ( strideY < 0 ) {\n\t\t\t\tstrideY = -strideY;\n\t\t\t}\n\t\t\tsscal( N, beta, y, strideY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX > 0 ) {\n\t\tox = 0;\n\t} else {\n\t\tox = ( 1 - N ) * strideX;\n\t}\n\tif ( strideY > 0 ) {\n\t\toy = 0;\n\t} else {\n\t\toy = ( 1 - N ) * strideY;\n\t}\n\t// Form: y = alpha*A*x + y\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tix = ox;\n\t\tiy = oy;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ttemp1 = f32( alpha * x[ ix ] );\n\t\t\ttemp2 = 0.0;\n\t\t\tjmin = i + 1;\n\t\t\tjmax = N;\n\t\t\tjx = ox + ( jmin*strideX );\n\t\t\tjy = oy + ( jmin*strideY );\n\t\t\ty[ iy ] += f32( temp1 * A[(LDA*i)+i] );\n\t\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\t\tk = ( LDA*i ) + j;\n\t\t\t\ty[ jy ] += f32( temp1 * A[k] );\n\t\t\t\ttemp2 = f32( temp2 + f32( x[jx] * A[k] ) );\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\ty[ iy ] += f32( alpha * temp2 );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tix = ox + ( (N-1)*strideX );\n\tiy = oy + ( (N-1)*strideY );\n\tfor ( i = N-1; i >= 0; i-- ) {\n\t\ttemp1 = f32( alpha * x[ ix ] );\n\t\ttemp2 = 0.0;\n\t\tjmin = 0;\n\t\tjmax = i;\n\t\tjx = ox + ( jmin*strideX );\n\t\tjy = oy + ( jmin*strideY );\n\t\ty[ iy ] += f32( temp1 * A[(LDA*i)+i] );\n\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\tk = ( LDA*i ) + j;\n\t\t\ty[ jy ] += f32( temp1 * A[k] );\n\t\t\ttemp2 = f32( temp2 + f32( x[jx] * A[k] ) );\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t}\n\t\ty[ iy ] += f32( alpha * temp2 );\n\t\tix -= strideX;\n\t\tiy -= strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default ssymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssymv from './ssymv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssymv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sfill } from './../../../ext/base/sfill';\nimport { ndarray as sscal } from './../../../base/sscal';\nimport max from '@stdlib/math/base/special/max';\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be greater than or equal to max(1,N)\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} twelfth argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 0.0, 0.0, 0.0 ] );\n*\n* ssymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0, 0.0, y, 1, 0 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction ssymv( order, uplo, N, alpha, A, LDA, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tvar temp1;\n\tvar temp2;\n\tvar jmin;\n\tvar jmax;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar ox;\n\tvar oy;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( 'invalid argument. Sixth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Twelfth argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tsfill( N, 0.0, y, strideY, offsetY );\n\t\t} else {\n\t\t\tsscal( N, beta, y, strideY, offsetY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tox = offsetX;\n\toy = offsetY;\n\n\t// Form: y = alpha*A*x + y\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tix = ox;\n\t\tiy = oy;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ttemp1 = f32( alpha * x[ ix ] );\n\t\t\ttemp2 = 0.0;\n\t\t\tjmin = i + 1;\n\t\t\tjmax = N;\n\t\t\tjx = ox + ( jmin*strideX );\n\t\t\tjy = oy + ( jmin*strideY );\n\t\t\ty[ iy ] += f32( temp1 * A[(LDA*i)+i] );\n\t\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\t\tk = ( LDA*i ) + j;\n\t\t\t\ty[ jy ] += f32( temp1 * A[k] );\n\t\t\t\ttemp2 = f32( temp2 + f32( x[jx] * A[k] ) );\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\ty[ iy ] += f32( alpha * temp2 );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tix = ox + ( (N-1)*strideX );\n\tiy = oy + ( (N-1)*strideY );\n\tfor ( i = N-1; i >= 0; i-- ) {\n\t\ttemp1 = f32( alpha * x[ ix ] );\n\t\ttemp2 = 0.0;\n\t\tjmin = 0;\n\t\tjmax = i;\n\t\tjx = ox + ( jmin*strideX );\n\t\tjy = oy + ( jmin*strideY );\n\t\ty[ iy ] += f32( temp1 * A[(LDA*i)+i] );\n\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\tk = ( LDA*i ) + j;\n\t\t\ty[ jy ] += f32( temp1 * A[k] );\n\t\t\ttemp2 = f32( temp2 + f32( x[jx] * A[k] ) );\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t}\n\t\ty[ iy ] += f32( alpha * temp2 );\n\t\tix -= strideX;\n\t\tiy -= strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default ssymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas/base/ssymv\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import ssymv from '@stdlib/blas/base/ssymv';\n*\n* var A = new Float32Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 0.0, 0.0, 0.0 ] );\n*\n* ssymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0.0, y, 1 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import ssymv from '@stdlib/blas/base/ssymv';\n*\n* var A = new Float32Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 0.0, 0.0, 0.0 ] );\n*\n* ssymv.ndarray( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0, 0.0, y, 1, 0 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar ssymv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tssymv = main;\n} else {\n\tssymv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default ssymv;\n\n// exports: { \"ndarray\": \"ssymv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/ssymv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @private\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction ssyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tvar isrm;\n\tvar tmp;\n\tvar ix0;\n\tvar ix1;\n\tvar sa0;\n\tvar sa1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\tif (\n\t\t( isrm && uplo === 'lower' ) ||\n\t\t( !isrm && uplo === 'upper' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = f32( alpha * x[ ix1 ] );\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tA[ oa+(sa0*i0) ] += f32( x[ ix0 ] * tmp );\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn A;\n\t}\n\t// ( isrm && uplo === 'upper' ) || ( !isrm && uplo === 'lower' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\ttmp = f32( alpha * x[ ix1 ] );\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tA[ oa+(sa0*i0) ] += f32( x[ ix0 ] * tmp );\n\t\t\t\tix0 += strideX;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nexport default ssyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} eighth argument must be greater than or equal to max(1,N)\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr( 'row-major', 'upper', 3, 1.0, x, 1, A, 3 );\n* // A => <Float32Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction ssyr( order, uplo, N, alpha, x, strideX, A, LDA ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, N, alpha, x, strideX, ox, A, sa1, sa2, 0 );\n}\n\n\n// EXPORTS //\n\nexport default ssyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssyr from './ssyr.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssyr, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @throws {TypeError} first argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be non-zero\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction ssyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\treturn base( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ssyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas/base/ssyr\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import ssyr from '@stdlib/blas/base/ssyr';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr( 'row-major', 'upper', 3, 1.0, x, 1, A, 3 );\n* // A => <Float32Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import ssyr from '@stdlib/blas/base/ssyr';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr.ndarray( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar ssyr;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tssyr = main;\n} else {\n\tssyr = tmp;\n}\n\n\n// EXPORTS //\n\nexport default ssyr;\n\n// exports: { \"ndarray\": \"ssyr.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/ssyr/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @private\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr2( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction ssyr2( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len, max-params\n\tvar tmp1;\n\tvar tmp2;\n\tvar isrm;\n\tvar ix0;\n\tvar ix1;\n\tvar iy0;\n\tvar iy1;\n\tvar sa0;\n\tvar sa1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\tvar oy;\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) { // row-major\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // column-major\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\toy = offsetY;\n\tix1 = ox;\n\tiy1 = oy;\n\tif (\n\t\t( isrm && uplo === 'lower' ) ||\n\t\t( !isrm && uplo === 'upper' )\n\t) {\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( ( x[ ix1 ] !== 0.0 ) || ( y[ iy1 ] !== 0.0 ) ) {\n\t\t\t\ttmp1 = f32( alpha * y[ iy1 ] );\n\t\t\t\ttmp2 = f32( alpha * x[ ix1 ] );\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tiy0 = oy;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tA[ oa+(sa0*i0) ] += f32( f32( x[ ix0 ] * tmp1 ) + f32( y[ iy0 ] * tmp2 ) ); // eslint-disable-line max-len\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t\tiy0 += strideY;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t\tiy1 += strideY;\n\t\t}\n\t\treturn A;\n\t}\n\t// ( isrm && uplo === 'upper' ) || ( !isrm && uplo === 'lower' )\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( ( x[ ix1 ] !== 0.0 ) || ( y[ iy1 ] !== 0.0 ) ) {\n\t\t\ttmp1 = f32( alpha * y[ iy1 ] );\n\t\t\ttmp2 = f32( alpha * x[ ix1 ] );\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tiy0 = iy1;\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tA[ oa+(sa0*i0) ] += f32( f32( x[ ix0 ] * tmp1 ) + f32( y[ iy0 ] * tmp2 ) ); // eslint-disable-line max-len\n\t\t\t\tix0 += strideX;\n\t\t\t\tiy0 += strideY;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t\tiy1 += strideY;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nexport default ssyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {Float32Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} eighth argument must be greater than or equal to max(1,N)\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr2( 'row-major', 'upper', 3, 1.0, x, 1, y, 1, A, 3 );\n* // A => <Float32Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction ssyr2( order, uplo, N, alpha, x, strideX, y, strideY, A, LDA ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\tvar oy;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\toy = stride2offset( N, strideY );\n\treturn base( uplo, N, alpha, x, strideX, ox, y, strideY, oy, A, sa1, sa2, 0 ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ssyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssyr2 from './ssyr2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssyr2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @throws {TypeError} first argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be non-zero\n* @throws {RangeError} eighth argument must be non-zero\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr2( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction ssyr2( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len, max-params\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether the reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\treturn base( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ssyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas/base/ssyr2\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import ssyr2 from '@stdlib/blas/base/ssyr2';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr2( 'row-major', 'upper', 3, 1.0, x, 1, y, 1, A, 3 );\n* // A => <Float32Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import ssyr2 from '@stdlib/blas/base/ssyr2';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr2.ndarray( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar ssyr2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tssyr2 = main;\n} else {\n\tssyr2 = tmp;\n}\n\n\n// EXPORTS //\n\nexport default ssyr2;\n\n// exports: { \"ndarray\": \"ssyr2.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/ssyr2/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @private\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strmv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float32Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction strmv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tvar nonunit;\n\tvar isrm;\n\tvar tmp;\n\tvar sa0;\n\tvar sa1;\n\tvar ix0;\n\tvar ix1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\n\t// Note on variable naming convention: sa#, ix#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tnonunit = ( diag === 'non-unit' );\n\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = 0; i0 < i1; i0++ ) {\n\t\t\t\t\tx[ ix0 ] = f32( x[ ix0 ] + f32( tmp * A[ oa+(sa0*i0) ] ) );\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t}\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] = f32( x[ ix1 ] * A[ oa+(sa0*i1) ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'lower' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'upper' )\n\t) {\n\t\tox += ( N - 1 ) * strideX;\n\t\tix1 = ox;\n\t\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = N-1; i0 > i1; i0-- ) {\n\t\t\t\t\tx[ ix0 ] = f32( x[ ix0 ] + f32( tmp * A[ oa+(sa0*i0) ] ) );\n\t\t\t\t\tix0 -= strideX;\n\t\t\t\t}\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] = f32( x[ ix1 ] * A[ oa+(sa0*i1) ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 -= strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans !== 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans === 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox + ( ( N - 1 ) * strideX );\n\t\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\t\ttmp = x[ ix1 ];\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tif ( nonunit ) {\n\t\t\t\ttmp = f32( tmp * A[ oa+(sa0*i1) ] );\n\t\t\t}\n\t\t\tfor ( i0 = i1-1; i0 >= 0; i0-- ) {\n\t\t\t\tix0 -= strideX;\n\t\t\t\ttmp = f32( tmp + f32( x[ ix0 ] * A[ oa+(sa0*i0) ] ) );\n\t\t\t}\n\t\t\tx[ ix1 ] = tmp;\n\t\t\tix1 -= strideX;\n\t\t}\n\t\treturn x;\n\t}\n\t// ( !isrm && trans !== 'no-transpose' && uplo === 'lower' ) || ( isrm && trans === 'no-transpose' && uplo === 'upper' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\ttmp = x[ ix1 ];\n\t\toa = offsetA + (sa1*i1);\n\t\tix0 = ix1;\n\t\tif ( nonunit ) {\n\t\t\ttmp = f32( tmp * A[ oa+(sa0*i1) ] );\n\t\t}\n\t\tfor ( i0 = i1+1; i0 < N; i0++ ) {\n\t\t\tix0 += strideX;\n\t\t\ttmp = f32( tmp + f32( x[ ix0 ] * A[ oa+(sa0*i0) ] ) );\n\t\t}\n\t\tx[ ix1 ] = tmp;\n\t\tix1 += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default strmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nimport isDiagonal from './../../../base/assert/is-diagonal-type';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float32Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} third argument must be a valid transpose operation\n* @throws {TypeError} fourth argument must be a valid diagonal type\n* @throws {RangeError} fifth argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be greater than or equal to max(1,N)\n* @throws {RangeError} ninth argument must be non-zero\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strmv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float32Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction strmv( order, uplo, trans, diag, N, A, LDA, x, strideX ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Seventh argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, trans, diag, N, A, sa1, sa2, 0, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default strmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport strmv from './strmv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( strmv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default strmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nimport isDiagonal from './../../../base/assert/is-diagonal-type';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @throws {TypeError} first argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} second argument must be a valid transpose operation\n* @throws {TypeError} third argument must be a valid diagonal type\n* @throws {RangeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} tenth argument must be non-zero\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strmv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float32Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction strmv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\treturn base( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default strmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @module @stdlib/blas/base/strmv\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import strmv from '@stdlib/blas/base/strmv';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strmv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float32Array>[ 14.0, 8.0, 3.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import strmv from '@stdlib/blas/base/strmv';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strmv.ndarray( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float32Array>[ 14.0, 8.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar strmv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tstrmv = main;\n} else {\n\tstrmv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default strmv;\n\n// exports: { \"ndarray\": \"strmv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/strmv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport { enum as enumeration } from './../../../base/transpose-operations';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the BLAS transpose operation string associated with a BLAS transpose operation enumeration constant.\n*\n* @param {integer} operation - operation enumeration constant\n* @returns {(string|null)} operation string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/transpose-operation-str2enum';\n*\n* var v = str2enum( 'transpose' );\n* // returns <number>\n*\n* var s = enum2str( v );\n* // returns 'transpose'\n*/\nfunction enum2str( operation ) {\n\tvar v = hash[ operation ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from './../../../base/transpose-operations';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a BLAS transpose operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `TRANSPOSE == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} operation - transpose operation\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'transpose' );\n* // returns <number>\n*/\nfunction str2enum( operation ) {\n\tvar v = ENUM[ operation ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dcabs1 from './../../../base/dcabs1';\nimport cmul from '@stdlib/complex/float64/base/mul';\nimport cadd from '@stdlib/complex/float64/base/add';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant and adds the result to a double-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} za - scalar constant\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {integer} offsetX - starting index for `zx`\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @param {integer} offsetY - starting index for `zy`\n* @returns {Complex128Array} second input array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, za, zx, 1, 0, zy, 1, 0 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns -1.0\n*\n* var im = imag( z );\n* // returns 7.0\n*/\nfunction zaxpy( N, za, zx, strideX, offsetX, zy, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn zy;\n\t}\n\tif ( dcabs1( za ) === 0.0 ) {\n\t\treturn zy;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tzy.set( cadd( cmul( za, zx.get( ix ) ), zy.get( iy ) ), iy );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn zy;\n}\n\n\n// EXPORTS //\n\nexport default zaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant and adds the result to a double-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} za - scalar constant\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @returns {Complex128Array} second input array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, za, zx, 1, zy, 1 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns -1.0\n*\n* var im = imag( z );\n* // returns 7.0\n*/\nfunction zaxpy( N, za, zx, strideX, zy, strideY ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, za, zx, strideX, ix, zy, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default zaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport zaxpy from './zaxpy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zaxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to scale a double-precision complex floating-point vector by a double-precision complex floating-point constant and add the result to a double-precision complex floating-point vector.\n*\n* @module @stdlib/blas/base/zaxpy\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n* import zaxpy from '@stdlib/blas/base/zaxpy';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, za, zx, 1, zy, 1 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns -1.0\n*\n* var im = imag( z );\n* // returns 7.0\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n* import zaxpy from '@stdlib/blas/base/zaxpy';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy.ndarray( 3, za, zx, 1, 0, zy, 1, 0 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns -1.0\n*\n* var im = imag( z );\n* // returns 7.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar zaxpy;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tzaxpy = main;\n} else {\n\tzaxpy = tmp;\n}\n\n\n// EXPORTS //\n\nexport default zaxpy;\n\n// exports: { \"ndarray\": \"zaxpy.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/zaxpy/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\n\n\n// MAIN //\n\n/**\n* Copies values from one complex double-precision floating-point vector to another complex double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex128Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Complex128Array} output array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex128Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* zcopy( x.length, x, 1, y, 1 );\n*\n* var z = y.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns 2.0\n*/\nfunction zcopy( N, x, strideX, y, strideY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = reinterpret( x, 0 );\n\tviewY = reinterpret( y, 0 );\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tfor ( i = 0; i < N*2; i += 2 ) {\n\t\t\tviewY[ i ] = viewX[ i ];\n\t\t\tviewY[ i+1 ] = viewX[ i+1 ];\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = 2 * (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = 2 * (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tviewY[ iy ] = viewX[ ix ];\n\t\tviewY[ iy+1 ] = viewX[ ix+1 ];\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default zcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {NonNegativeInteger} offsetX - starting `zx` index\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @param {NonNegativeInteger} offsetY - starting `zy` index\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex128Array} `zy`\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var zy = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* zdrot( zx.length, zx, 1, 0, zy, 1, 0, 0.8, 0.6 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns ~-0.6\n*\n* var im = imag( z );\n* // returns ~-1.2\n*\n* z = zx.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns ~0.8\n*\n* im = imag( z );\n* // returns ~1.6\n*/\nfunction zdrot( N, zx, strideX, offsetX, zy, strideY, offsetY, c, s ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn zy;\n\t}\n\tviewX = reinterpret( zx, 0 );\n\tviewY = reinterpret( zy, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = ( c*viewX[ ix ] ) + ( s*viewY[ iy ] );\n\t\tviewY[ iy ] = ( c*viewY[ iy ] ) - ( s*viewX[ ix ] );\n\t\tviewX[ ix ] = tmp;\n\n\t\ttmp = ( c*viewX[ ix+1 ] ) + ( s*viewY[ iy+1 ] );\n\t\tviewY[ iy+1 ] = ( c*viewY[ iy+1 ] ) - ( s*viewX[ ix+1 ] );\n\t\tviewX[ ix+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn zy;\n}\n\n\n// EXPORTS //\n\nexport default zdrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex128Array} `zy`\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var zy = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* zdrot( zx.length, zx, 1, zy, 1, 0.8, 0.6 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns ~-0.6\n*\n* var im = imag( z );\n* // returns ~-1.2\n*\n* z = zx.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns ~0.8\n*\n* im = imag( z );\n* // returns ~1.6\n*/\nfunction zdrot( N, zx, strideX, zy, strideY, c, s ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, zx, strideX, ix, zy, strideY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nexport default zdrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cmul from '@stdlib/complex/float64/base/mul';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} za - constant\n* @param {Complex128Array} zx - input array\n* @param {integer} strideX - `zx` stride length\n* @returns {Complex128Array} input array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zscal( 3, za, zx, 1 );\n*\n* var z = zx.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns -2.0\n*\n* var im = imag( z );\n* // returns 6.0\n*/\nfunction zscal( N, za, zx, strideX ) {\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 || strideX <= 0 ) {\n\t\treturn zx;\n\t}\n\tif ( strideX === 1 ) {\n\t\t// Code for stride equal to `1`...\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tzx.set( cmul( za, zx.get( i ) ), i );\n\t\t}\n\t\treturn zx;\n\t}\n\t// Code for stride not equal to `1`...\n\tix = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tzx.set( cmul( za, zx.get( ix ) ), ix );\n\t\tix += strideX;\n\t}\n\treturn zx;\n}\n\n\n// EXPORTS //\n\nexport default zscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\n\n\n// MAIN //\n\n/**\n* Interchanges two complex double-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex128Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Complex128Array} `y`\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex128Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* zswap( x.length, x, 1, y, 1 );\n*\n* var z = y.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns 2.0\n*\n* z = x.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 7.0\n*\n* im = imag( z );\n* // returns 8.0\n*/\nfunction zswap( N, x, strideX, y, strideY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tvar j;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = reinterpret( x, 0 );\n\tviewY = reinterpret( y, 0 );\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tfor ( i = 0; i < N*2; i += 2 ) {\n\t\t\ttmp = viewX[ i ];\n\t\t\tviewX[ i ] = viewY[ i ];\n\t\t\tviewY[ i ] = tmp;\n\n\t\t\tj = i + 1;\n\t\t\ttmp = viewX[ j ];\n\t\t\tviewX[ j ] = viewY[ j ];\n\t\t\tviewY[ j ] = tmp;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = 2 * ( 1-N ) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = 2 * ( 1-N ) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = viewX[ ix ];\n\t\tviewX[ ix ] = viewY[ iy ];\n\t\tviewY[ iy ] = tmp;\n\n\t\ttmp = viewX[ ix+1 ];\n\t\tviewX[ ix+1 ] = viewY[ iy+1 ];\n\t\tviewY[ iy+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default zswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport zcopy from './zcopy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zcopy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\n\n\n// MAIN //\n\n/**\n* Copies values from one complex double-precision floating-point vector to another complex double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Complex128Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Complex128Array} output array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex128Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* zcopy( x.length, x, 1, 0, y, 1, 0 );\n*\n* var z = y.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns 2.0\n*/\nfunction zcopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = reinterpret( x, 0 );\n\tviewY = reinterpret( y, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tviewY[ iy ] = viewX[ ix ];\n\t\tviewY[ iy+1 ] = viewX[ ix+1 ];\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default zcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport zdrot from './zdrot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zdrot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zdrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport zscal from './zscal.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cmul from '@stdlib/complex/float64/base/mul';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} za - constant\n* @param {Complex128Array} zx - input array\n* @param {integer} strideX - `zx` stride length\n* @param {NonNegativeInteger} offsetX - starting `zx` index\n* @returns {Complex128Array} input array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zscal( 3, za, zx, 1, 0 );\n*\n* var z = zx.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns -2.0\n*\n* var im = imag( z );\n* // returns 6.0\n*/\nfunction zscal( N, za, zx, strideX, offsetX ) {\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 || strideX <= 0 ) {\n\t\treturn zx;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tzx.set( cmul( za, zx.get( ix ) ), ix );\n\t\tix += strideX;\n\t}\n\treturn zx;\n}\n\n\n// EXPORTS //\n\nexport default zscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport zswap from './zswap.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zswap, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\n\n\n// MAIN //\n\n/**\n* Interchanges two complex double-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Complex128Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Complex128Array} `y`\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex128Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* zswap( x.length, x, 1, 0, y, 1, 0 );\n*\n* var z = y.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns 2.0\n*\n* z = x.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 7.0\n*\n* im = imag( z );\n* // returns 8.0\n*/\nfunction zswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = reinterpret( x, 0 );\n\tviewY = reinterpret( y, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = viewX[ ix ];\n\t\tviewX[ ix ] = viewY[ iy ];\n\t\tviewY[ iy ] = tmp;\n\n\t\ttmp = viewX[ ix+1 ];\n\t\tviewX[ ix+1 ] = viewY[ iy+1 ];\n\t\tviewY[ iy+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default zswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace blas\n*/\nvar blas = {};\n\n/**\n* @name assert\n* @memberof blas\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/base/assert}\n*/\nimport assert from './../../base/assert';\nsetReadOnly( blas, 'assert', assert );\n\n/**\n* @name caxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/caxpy}\n*/\nimport caxpy from './../../base/caxpy';\nsetReadOnly( blas, 'caxpy', caxpy );\n\n/**\n* @name ccopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ccopy}\n*/\nimport ccopy from './../../base/ccopy';\nsetReadOnly( blas, 'ccopy', ccopy );\n\n/**\n* @name cscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/cscal}\n*/\nimport cscal from './../../base/cscal';\nsetReadOnly( blas, 'cscal', cscal );\n\n/**\n* @name csrot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/csrot}\n*/\nimport csrot from './../../base/csrot';\nsetReadOnly( blas, 'csrot', csrot );\n\n/**\n* @name cswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/cswap}\n*/\nimport cswap from './../../base/cswap';\nsetReadOnly( blas, 'cswap', cswap );\n\n/**\n* @name dasum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dasum}\n*/\nimport dasum from './../../base/dasum';\nsetReadOnly( blas, 'dasum', dasum );\n\n/**\n* @name daxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/daxpy}\n*/\nimport daxpy from './../../base/daxpy';\nsetReadOnly( blas, 'daxpy', daxpy );\n\n/**\n* @name dcabs1\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dcabs1}\n*/\nimport dcabs1 from './../../base/dcabs1';\nsetReadOnly( blas, 'dcabs1', dcabs1 );\n\n/**\n* @name dcopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dcopy}\n*/\nimport dcopy from './../../base/dcopy';\nsetReadOnly( blas, 'dcopy', dcopy );\n\n/**\n* @name ddot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ddot}\n*/\nimport ddot from './../../base/ddot';\nsetReadOnly( blas, 'ddot', ddot );\n\n/**\n* @name diagonalTypeEnum2Str\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/diagonal-type-enum2str}\n*/\nimport diagonalTypeEnum2Str from './../../base/diagonal-type-enum2str';\nsetReadOnly( blas, 'diagonalTypeEnum2Str', diagonalTypeEnum2Str );\n\n/**\n* @name diagonalTypeResolveEnum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/diagonal-type-resolve-enum}\n*/\nimport diagonalTypeResolveEnum from './../../base/diagonal-type-resolve-enum';\nsetReadOnly( blas, 'diagonalTypeResolveEnum', diagonalTypeResolveEnum );\n\n/**\n* @name diagonalTypeResolveStr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/diagonal-type-resolve-str}\n*/\nimport diagonalTypeResolveStr from './../../base/diagonal-type-resolve-str';\nsetReadOnly( blas, 'diagonalTypeResolveStr', diagonalTypeResolveStr );\n\n/**\n* @name diagonalTypeStr2Enum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/diagonal-type-str2enum}\n*/\nimport diagonalTypeStr2Enum from './../../base/diagonal-type-str2enum';\nsetReadOnly( blas, 'diagonalTypeStr2Enum', diagonalTypeStr2Enum );\n\n/**\n* @name diagonalTypes\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/diagonal-types}\n*/\nimport diagonalTypes from './../../base/diagonal-types';\nsetReadOnly( blas, 'diagonalTypes', diagonalTypes );\n\n/**\n* @name dnrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dnrm2}\n*/\nimport dnrm2 from './../../base/dnrm2';\nsetReadOnly( blas, 'dnrm2', dnrm2 );\n\n/**\n* @name drot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/drot}\n*/\nimport drot from './../../base/drot';\nsetReadOnly( blas, 'drot', drot );\n\n/**\n* @name drotg\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/drotg}\n*/\nimport drotg from './../../base/drotg';\nsetReadOnly( blas, 'drotg', drotg );\n\n/**\n* @name drotm\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/drotm}\n*/\nimport drotm from './../../base/drotm';\nsetReadOnly( blas, 'drotm', drotm );\n\n/**\n* @name dscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dscal}\n*/\nimport dscal from './../../base/dscal';\nsetReadOnly( blas, 'dscal', dscal );\n\n/**\n* @name dsdot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dsdot}\n*/\nimport dsdot from './../../base/dsdot';\nsetReadOnly( blas, 'dsdot', dsdot );\n\n/**\n* @name dspmv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dspmv}\n*/\nimport dspmv from './../../base/dspmv';\nsetReadOnly( blas, 'dspmv', dspmv );\n\n/**\n* @name dswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dswap}\n*/\nimport dswap from './../../base/dswap';\nsetReadOnly( blas, 'dswap', dswap );\n\n/**\n* @name dsymv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dsymv}\n*/\nimport dsymv from './../../base/dsymv';\nsetReadOnly( blas, 'dsymv', dsymv );\n\n/**\n* @name dsyr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dsyr}\n*/\nimport dsyr from './../../base/dsyr';\nsetReadOnly( blas, 'dsyr', dsyr );\n\n/**\n* @name dsyr2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dsyr2}\n*/\nimport dsyr2 from './../../base/dsyr2';\nsetReadOnly( blas, 'dsyr2', dsyr2 );\n\n/**\n* @name dtrmv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dtrmv}\n*/\nimport dtrmv from './../../base/dtrmv';\nsetReadOnly( blas, 'dtrmv', dtrmv );\n\n/**\n* @name dznrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dznrm2}\n*/\nimport dznrm2 from './../../base/dznrm2';\nsetReadOnly( blas, 'dznrm2', dznrm2 );\n\n/**\n* @name gasum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gasum}\n*/\nimport gasum from './../../base/gasum';\nsetReadOnly( blas, 'gasum', gasum );\n\n/**\n* @name gaxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gaxpy}\n*/\nimport gaxpy from './../../base/gaxpy';\nsetReadOnly( blas, 'gaxpy', gaxpy );\n\n/**\n* @name gcopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gcopy}\n*/\nimport gcopy from './../../base/gcopy';\nsetReadOnly( blas, 'gcopy', gcopy );\n\n/**\n* @name gdot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gdot}\n*/\nimport gdot from './../../base/gdot';\nsetReadOnly( blas, 'gdot', gdot );\n\n/**\n* @name gnrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gnrm2}\n*/\nimport gnrm2 from './../../base/gnrm2';\nsetReadOnly( blas, 'gnrm2', gnrm2 );\n\n/**\n* @name gscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gscal}\n*/\nimport gscal from './../../base/gscal';\nsetReadOnly( blas, 'gscal', gscal );\n\n/**\n* @name gswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gswap}\n*/\nimport gswap from './../../base/gswap';\nsetReadOnly( blas, 'gswap', gswap );\n\n/**\n* @name idamax\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/idamax}\n*/\nimport idamax from './../../base/idamax';\nsetReadOnly( blas, 'idamax', idamax );\n\n/**\n* @name isamax\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/isamax}\n*/\nimport isamax from './../../base/isamax';\nsetReadOnly( blas, 'isamax', isamax );\n\n/**\n* @name layoutEnum2Str\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/layout-enum2str}\n*/\nimport layoutEnum2Str from './../../base/layout-enum2str';\nsetReadOnly( blas, 'layoutEnum2Str', layoutEnum2Str );\n\n/**\n* @name layoutResolveEnum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/layout-resolve-enum}\n*/\nimport layoutResolveEnum from './../../base/layout-resolve-enum';\nsetReadOnly( blas, 'layoutResolveEnum', layoutResolveEnum );\n\n/**\n* @name layoutResolveStr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/layout-resolve-str}\n*/\nimport layoutResolveStr from './../../base/layout-resolve-str';\nsetReadOnly( blas, 'layoutResolveStr', layoutResolveStr );\n\n/**\n* @name layoutStr2Enum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/layout-str2enum}\n*/\nimport layoutStr2Enum from './../../base/layout-str2enum';\nsetReadOnly( blas, 'layoutStr2Enum', layoutStr2Enum );\n\n/**\n* @name layouts\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/layouts}\n*/\nimport layouts from './../../base/layouts';\nsetReadOnly( blas, 'layouts', layouts );\n\n/**\n* @name matrixTriangleEnum2Str\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/matrix-triangle-enum2str}\n*/\nimport matrixTriangleEnum2Str from './../../base/matrix-triangle-enum2str';\nsetReadOnly( blas, 'matrixTriangleEnum2Str', matrixTriangleEnum2Str );\n\n/**\n* @name matrixTriangleResolveEnum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/matrix-triangle-resolve-enum}\n*/\nimport matrixTriangleResolveEnum from './../../base/matrix-triangle-resolve-enum';\nsetReadOnly( blas, 'matrixTriangleResolveEnum', matrixTriangleResolveEnum );\n\n/**\n* @name matrixTriangleResolveStr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/matrix-triangle-resolve-str}\n*/\nimport matrixTriangleResolveStr from './../../base/matrix-triangle-resolve-str';\nsetReadOnly( blas, 'matrixTriangleResolveStr', matrixTriangleResolveStr );\n\n/**\n* @name matrixTriangleStr2Enum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/matrix-triangle-str2enum}\n*/\nimport matrixTriangleStr2Enum from './../../base/matrix-triangle-str2enum';\nsetReadOnly( blas, 'matrixTriangleStr2Enum', matrixTriangleStr2Enum );\n\n/**\n* @name matrixTriangles\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/matrix-triangles}\n*/\nimport matrixTriangles from './../../base/matrix-triangles';\nsetReadOnly( blas, 'matrixTriangles', matrixTriangles );\n\n/**\n* @name operationSideEnum2Str\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/operation-side-enum2str}\n*/\nimport operationSideEnum2Str from './../../base/operation-side-enum2str';\nsetReadOnly( blas, 'operationSideEnum2Str', operationSideEnum2Str );\n\n/**\n* @name operationSideResolveEnum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/operation-side-resolve-enum}\n*/\nimport operationSideResolveEnum from './../../base/operation-side-resolve-enum';\nsetReadOnly( blas, 'operationSideResolveEnum', operationSideResolveEnum );\n\n/**\n* @name operationSideResolveStr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/operation-side-resolve-str}\n*/\nimport operationSideResolveStr from './../../base/operation-side-resolve-str';\nsetReadOnly( blas, 'operationSideResolveStr', operationSideResolveStr );\n\n/**\n* @name operationSideStr2Enum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/operation-side-str2enum}\n*/\nimport operationSideStr2Enum from './../../base/operation-side-str2enum';\nsetReadOnly( blas, 'operationSideStr2Enum', operationSideStr2Enum );\n\n/**\n* @name operationSides\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/operation-sides}\n*/\nimport operationSides from './../../base/operation-sides';\nsetReadOnly( blas, 'operationSides', operationSides );\n\n/**\n* @name sasum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sasum}\n*/\nimport sasum from './../../base/sasum';\nsetReadOnly( blas, 'sasum', sasum );\n\n/**\n* @name saxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/saxpy}\n*/\nimport saxpy from './../../base/saxpy';\nsetReadOnly( blas, 'saxpy', saxpy );\n\n/**\n* @name scabs1\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/scabs1}\n*/\nimport scabs1 from './../../base/scabs1';\nsetReadOnly( blas, 'scabs1', scabs1 );\n\n/**\n* @name scasum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/scasum}\n*/\nimport scasum from './../../base/scasum';\nsetReadOnly( blas, 'scasum', scasum );\n\n/**\n* @name scnrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/scnrm2}\n*/\nimport scnrm2 from './../../base/scnrm2';\nsetReadOnly( blas, 'scnrm2', scnrm2 );\n\n/**\n* @name scopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/scopy}\n*/\nimport scopy from './../../base/scopy';\nsetReadOnly( blas, 'scopy', scopy );\n\n/**\n* @name sdot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sdot}\n*/\nimport sdot from './../../base/sdot';\nsetReadOnly( blas, 'sdot', sdot );\n\n/**\n* @name sdsdot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sdsdot}\n*/\nimport sdsdot from './../../base/sdsdot';\nsetReadOnly( blas, 'sdsdot', sdsdot );\n\n/**\n* @name sgemv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sgemv}\n*/\nimport sgemv from './../../base/sgemv';\nsetReadOnly( blas, 'sgemv', sgemv );\n\n/**\n* @name snrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/snrm2}\n*/\nimport snrm2 from './../../base/snrm2';\nsetReadOnly( blas, 'snrm2', snrm2 );\n\n/**\n* @name srot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/srot}\n*/\nimport srot from './../../base/srot';\nsetReadOnly( blas, 'srot', srot );\n\n/**\n* @name srotg\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/srotg}\n*/\nimport srotg from './../../base/srotg';\nsetReadOnly( blas, 'srotg', srotg );\n\n/**\n* @name srotm\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/srotm}\n*/\nimport srotm from './../../base/srotm';\nsetReadOnly( blas, 'srotm', srotm );\n\n/**\n* @name sscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sscal}\n*/\nimport sscal from './../../base/sscal';\nsetReadOnly( blas, 'sscal', sscal );\n\n/**\n* @name sspmv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sspmv}\n*/\nimport sspmv from './../../base/sspmv';\nsetReadOnly( blas, 'sspmv', sspmv );\n\n/**\n* @name sswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sswap}\n*/\nimport sswap from './../../base/sswap';\nsetReadOnly( blas, 'sswap', sswap );\n\n/**\n* @name ssymv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ssymv}\n*/\nimport ssymv from './../../base/ssymv';\nsetReadOnly( blas, 'ssymv', ssymv );\n\n/**\n* @name ssyr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ssyr}\n*/\nimport ssyr from './../../base/ssyr';\nsetReadOnly( blas, 'ssyr', ssyr );\n\n/**\n* @name ssyr2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ssyr2}\n*/\nimport ssyr2 from './../../base/ssyr2';\nsetReadOnly( blas, 'ssyr2', ssyr2 );\n\n/**\n* @name strmv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/strmv}\n*/\nimport strmv from './../../base/strmv';\nsetReadOnly( blas, 'strmv', strmv );\n\n/**\n* @name transposeOperationEnum2Str\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/transpose-operation-enum2str}\n*/\nimport transposeOperationEnum2Str from './../../base/transpose-operation-enum2str';\nsetReadOnly( blas, 'transposeOperationEnum2Str', transposeOperationEnum2Str );\n\n/**\n* @name transposeOperationResolveEnum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/transpose-operation-resolve-enum}\n*/\nimport transposeOperationResolveEnum from './../../base/transpose-operation-resolve-enum';\nsetReadOnly( blas, 'transposeOperationResolveEnum', transposeOperationResolveEnum );\n\n/**\n* @name transposeOperationResolveStr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/transpose-operation-resolve-str}\n*/\nimport transposeOperationResolveStr from './../../base/transpose-operation-resolve-str';\nsetReadOnly( blas, 'transposeOperationResolveStr', transposeOperationResolveStr );\n\n/**\n* @name transposeOperationStr2Enum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/transpose-operation-str2enum}\n*/\nimport transposeOperationStr2Enum from './../../base/transpose-operation-str2enum';\nsetReadOnly( blas, 'transposeOperationStr2Enum', transposeOperationStr2Enum );\n\n/**\n* @name transposeOperations\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/transpose-operations}\n*/\nimport transposeOperations from './../../base/transpose-operations';\nsetReadOnly( blas, 'transposeOperations', transposeOperations );\n\n/**\n* @name zaxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zaxpy}\n*/\nimport zaxpy from './../../base/zaxpy';\nsetReadOnly( blas, 'zaxpy', zaxpy );\n\n/**\n* @name zcopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zcopy}\n*/\nimport zcopy from './../../base/zcopy';\nsetReadOnly( blas, 'zcopy', zcopy );\n\n/**\n* @name zdrot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zdrot}\n*/\nimport zdrot from './../../base/zdrot';\nsetReadOnly( blas, 'zdrot', zdrot );\n\n/**\n* @name zscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zscal}\n*/\nimport zscal from './../../base/zscal';\nsetReadOnly( blas, 'zscal', zscal );\n\n/**\n* @name zswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zswap}\n*/\nimport zswap from './../../base/zswap';\nsetReadOnly( blas, 'zswap', zswap );\n\n\n// EXPORTS //\n\nexport default blas;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat64ndarrayLike from '@stdlib/assert/is-float64ndarray-like';\nimport { isPrimitive as isNegativeInteger } from '@stdlib/assert/is-negative-integer';\nimport min from '@stdlib/math/base/special/fast/min';\nimport without from '@stdlib/array/base/without';\nimport numel from '@stdlib/ndarray/base/numel';\nimport normalizeIndex from '@stdlib/ndarray/base/normalize-index';\nimport maybeBroadcastArrays from '@stdlib/ndarray/base/maybe-broadcast-arrays';\nimport ndarraylike2ndarray from '@stdlib/ndarray/base/ndarraylike2ndarray';\nimport nditerStacks from '@stdlib/ndarray/iter/stacks';\nimport empty from '@stdlib/ndarray/empty';\nimport { ndarray as base } from './../../base/ddot';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two double-precision floating-point vectors.\n*\n* @param {ndarrayLike} x - first input array\n* @param {ndarrayLike} y - second input array\n* @param {NegativeInteger} [dim=-1] - dimension for which to compute the dot product\n* @throws {TypeError} first argument must be a ndarray containing double-precision floating-point numbers\n* @throws {TypeError} first argument must have at least one dimension\n* @throws {TypeError} second argument must be a ndarray containing double-precision floating-point numbers\n* @throws {TypeError} second argument must have at least one dimension\n* @throws {TypeError} third argument must be a negative integer\n* @throws {Error} input arrays must be broadcast compatible\n* @throws {RangeError} the size of the contracted dimension must be the same for both input arrays\n* @throws {RangeError} third argument is out-of-bounds\n* @returns {ndarray} ndarray containing the dot product\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* var z = ddot( x, y );\n* // returns <ndarray>\n*\n* var v = z.get();\n* // returns -5.0\n*/\nfunction ddot( x, y ) {\n\tvar dim;\n\tvar xsh;\n\tvar ysh;\n\tvar osh;\n\tvar xit;\n\tvar yit;\n\tvar out;\n\tvar tmp;\n\tvar xc;\n\tvar yc;\n\tvar vx;\n\tvar vy;\n\tvar dm;\n\tvar S;\n\tvar v;\n\tvar i;\n\n\tif ( !isFloat64ndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray containing double-precision floating-point numbers. Value: `%s`.', x ) );\n\t}\n\tif ( !isFloat64ndarrayLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray containing double-precision floating-point numbers. Value: `%s`.', y ) );\n\t}\n\t// Convert the input arrays to \"base\" ndarrays:\n\txc = ndarraylike2ndarray( x );\n\tyc = ndarraylike2ndarray( y );\n\n\t// Resolve the input array shapes:\n\txsh = xc.shape;\n\tysh = yc.shape;\n\n\t// Validate that we've been provided non-zero-dimensional arrays...\n\tif ( xsh.length < 1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have at least one dimension.' ) );\n\t}\n\tif ( ysh.length < 1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have at least one dimension.' ) );\n\t}\n\t// Validate that the dimension argument is a negative integer...\n\tif ( arguments.length > 2 ) {\n\t\tdim = arguments[ 2 ];\n\t\tif ( !isNegativeInteger( dim ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a negative integer. Value: `%s`.', dim ) );\n\t\t}\n\t} else {\n\t\tdim = -1;\n\t}\n\t// Validate that a provided dimension index is within bounds **before** broadcasting...\n\tdm = min( xsh.length, ysh.length ) - 1;\n\tdim = normalizeIndex( dim, dm );\n\tif ( dim === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a value on the interval: [%d,%d]. Value: `%d`.', -dm, -1, arguments[ 2 ] ) );\n\t}\n\t// Validate that the contracted dimension size is the same for both input arrays...\n\tS = xsh[ dim ];\n\tif ( ysh[ dim ] !== S ) {\n\t\tthrow new RangeError( format( 'invalid argument. The size of the contracted dimension must be the same for both input ndarrays. Dim(%s,%d) = %d. Dim(%s,%d) = %d.', 'x', dim, S, 'y', dim, ysh[ dim ] ) );\n\t}\n\t// Broadcast the input arrays to a common shape....\n\ttry {\n\t\ttmp = maybeBroadcastArrays( [ xc, yc ] );\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tthrow new Error( format( 'invalid arguments. Input ndarrays must be broadcast compatible. Shape(%s) = (%s). Shape(%s) = (%s).', 'x', xsh.join( ',' ), 'y', ysh.join( ',' ) ) );\n\t}\n\txc = tmp[ 0 ];\n\tyc = tmp[ 1 ];\n\n\t// Resolve the output array shape by excluding the contracted dimension:\n\tosh = without( xc.shape, dim );\n\n\t// Allocate an empty output array:\n\tout = empty( osh, {\n\t\t'dtype': xc.dtype,\n\t\t'order': xc.order\n\t});\n\n\t// If we are only provided one-dimensional input arrays, we can skip iterating over stacks...\n\tif ( osh.length === 0 ) {\n\t\tv = base( S, xc.data, xc.strides[0], xc.offset, yc.data, yc.strides[0], yc.offset ); // eslint-disable-line max-len\n\t\tout.iset( v );\n\t\treturn out;\n\t}\n\t// Create iterators for iterating over stacks of vectors:\n\txit = nditerStacks( xc, [ dim ] );\n\tyit = nditerStacks( yc, [ dim ] );\n\n\t// Compute the dot product for each pair of vectors...\n\tfor ( i = 0; i < numel( osh ); i++ ) {\n\t\tvx = xit.next().value;\n\t\tvy = yit.next().value;\n\t\tv = base( S, vx.data, vx.strides[0], vx.offset, vy.data, vy.strides[0], vy.offset ); // eslint-disable-line max-len\n\t\tout.iset( i, v );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default ddot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert/is-function';\nimport isndarrayLikeWithDataType from '@stdlib/assert/is-ndarray-like-with-data-type';\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport { isPrimitive as isNegativeInteger } from '@stdlib/assert/is-negative-integer';\nimport isDataType from '@stdlib/ndarray/base/assert/is-data-type';\nimport isReadOnly from '@stdlib/ndarray/base/assert/is-read-only';\nimport hasEqualValues from '@stdlib/array/base/assert/has-equal-values-indexed';\nimport min from '@stdlib/math/base/special/fast/min';\nimport without from '@stdlib/array/base/without';\nimport ndarraylike2ndarray from '@stdlib/ndarray/base/ndarraylike2ndarray';\nimport normalizeIndex from '@stdlib/ndarray/base/normalize-index';\nimport nditerStacks from '@stdlib/ndarray/iter/stacks';\nimport numel from '@stdlib/ndarray/base/numel';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns a function which interchanges two vectors.\n*\n* @param {Function} base - \"base\" function which interchanges two vectors\n* @param {(String|null)} dtype - array data type\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a data type\n* @returns {Function} function wrapper\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import array from '@stdlib/ndarray/array';\n* import { ndarray as dswap } from '@stdlib/blas/base/dswap';\n*\n* var swap = factory( dswap, 'float64' );\n*\n* var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* swap( x, y );\n*\n* var xbuf = x.data;\n* // returns <Float64Array>[ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n*\n* var ybuf = y.data;\n* // returns <Float64Array>[ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nfunction factory( base, dtype ) {\n\tvar isValid;\n\tif ( !isFunction( base ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', base ) );\n\t}\n\tif ( !isDataType( dtype ) && dtype !== null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a data type. Value: `%s`.', dtype ) );\n\t}\n\tisValid = ( dtype ) ? isValidWrapper : isndarrayLike;\n\treturn swap;\n\n\t/**\n\t* Tests if an input value is an ndarray-like object having a specified data type.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating if an input value is an ndarray-like object having a specified data type\n\t*/\n\tfunction isValidWrapper( value ) {\n\t\treturn isndarrayLikeWithDataType( value, dtype );\n\t}\n\n\t/**\n\t* Interchanges two vectors.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - first input array\n\t* @param {ndarrayLike} y - second input array\n\t* @param {NegativeInteger} [dim] - dimension along which to interchange elements\n\t* @throws {TypeError} first argument must be an ndarray\n\t* @throws {TypeError} first argument must have at least one dimension\n\t* @throws {TypeError} second argument must be an ndarray\n\t* @throws {TypeError} second argument must have at least one dimension\n\t* @throws {Error} both input arrays must have the same shape\n\t* @throws {RangeError} third argument is out-of-bounds\n\t* @throws {Error} cannot write to read-only array\n\t* @returns {ndarrayLike} `y`\n\t*/\n\tfunction swap( x, y ) {\n\t\tvar dim;\n\t\tvar xsh;\n\t\tvar ysh;\n\t\tvar xit;\n\t\tvar yit;\n\t\tvar xc;\n\t\tvar yc;\n\t\tvar vx;\n\t\tvar vy;\n\t\tvar dm;\n\t\tvar S;\n\t\tvar N;\n\t\tvar i;\n\t\tif ( !isValid( x ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object having a supported data type. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( !isValid( y ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object having a supported data type. Value: `%s`.', y ) );\n\t\t}\n\t\tif ( isReadOnly( x ) || isReadOnly( y ) ) {\n\t\t\tthrow new Error( 'invalid argument. Cannot write to read-only array.' );\n\t\t}\n\t\t// Convert the input arrays to \"base\" ndarrays:\n\t\txc = ndarraylike2ndarray( x );\n\t\tyc = ndarraylike2ndarray( y );\n\n\t\t// Resolve the input array shapes:\n\t\txsh = xc.shape;\n\t\tysh = yc.shape;\n\n\t\t// Validate that we've been provided non-zero-dimensional arrays...\n\t\tif ( xsh.length < 1 ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must have at least one dimension.' ) );\n\t\t}\n\t\tif ( ysh.length < 1 ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must have at least one dimension.' ) );\n\t\t}\n\t\t// Validate that the arrays have the same shape...\n\t\tif ( !hasEqualValues( xsh, ysh ) ) {\n\t\t\tthrow new Error( 'invalid arguments. The first and second arguments must have the same shape.' );\n\t\t}\n\t\t// Validate that the dimension argument is a negative integer...\n\t\tif ( arguments.length > 2 ) {\n\t\t\tdim = arguments[ 2 ];\n\t\t\tif ( !isNegativeInteger( dim ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a negative integer. Value: `%s`.', dim ) );\n\t\t\t}\n\t\t} else {\n\t\t\tdim = -1;\n\t\t}\n\t\t// Validate that a provided dimension index is within bounds...\n\t\tdm = min( xsh.length, ysh.length ) - 1;\n\t\tdim = normalizeIndex( dim, dm );\n\t\tif ( dim === -1 ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a value on the interval: [%d,%d]. Value: `%d`.', -dm, -1, arguments[ 2 ] ) );\n\t\t}\n\t\t// Resolve the size of the interchange dimension:\n\t\tS = xsh[ dim ];\n\n\t\t// If we are only provided one-dimensional input arrays, we can skip iterating over stacks...\n\t\tif ( xsh.length === 1 ) {\n\t\t\tbase( S, xc.data, xc.strides[0], xc.offset, yc.data, yc.strides[0], yc.offset ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\t// Resolve the number of stacks:\n\t\tN = numel( without( xsh, dim ) );\n\n\t\t// Create iterators for iterating over stacks of vectors:\n\t\txit = nditerStacks( xc, [ dim ] );\n\t\tyit = nditerStacks( yc, [ dim ] );\n\n\t\t// Interchange each pair of vectors...\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tvx = xit.next().value;\n\t\t\tvy = yit.next().value;\n\t\t\tbase( S, vx.data, vx.strides[0], vx.offset, vy.data, vy.strides[0], vy.offset ); // eslint-disable-line max-len\n\t\t}\n\t\treturn y;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/diagonal-type-enum2str';\nimport str2enum from './../../../base/diagonal-type-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported BLAS diagonal type value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `UNIT == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} value - diagonal type value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'non-unit' );\n* // returns <number>\n*/\nfunction resolve( value ) {\n\tvar t = ( typeof value );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( value ) ) ? value : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( value );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/diagonal-type-enum2str';\nimport str2enum from './../../../base/diagonal-type-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the diagonal type string associated with a supported BLAS diagonal type value.\n*\n* @param {*} value - diagonal type value\n* @returns {(string|null)} diagonal type string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/diagonal-type-str2enum';\n*\n* var v = resolve( str2enum( 'unit' ) );\n* // returns 'unit'\n*/\nfunction resolve( value ) {\n\tvar t = ( typeof value );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( value ) === null ) ? null : value;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( value );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/layout-enum2str';\nimport str2enum from './../../../base/layout-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported BLAS memory layout value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `ROW_MAJOR == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} layout - layout value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'row-major' );\n* // returns <number>\n*/\nfunction resolve( layout ) {\n\tvar t = ( typeof layout );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( layout ) ) ? layout : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( layout );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/layout-enum2str';\nimport str2enum from './../../../base/layout-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the layout string associated with a supported BLAS memory layout value.\n*\n* @param {*} layout - layout value\n* @returns {(string|null)} layout string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/layout-str2enum';\n*\n* var v = resolve( str2enum( 'row-major' ) );\n* // returns 'row-major'\n*/\nfunction resolve( layout ) {\n\tvar t = ( typeof layout );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( layout ) === null ) ? null : layout;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( layout );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/matrix-triangle-enum2str';\nimport str2enum from './../../../base/matrix-triangle-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported BLAS matrix triangle value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `UPPER == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} value - matrix triangle value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'lower' );\n* // returns <number>\n*/\nfunction resolve( value ) {\n\tvar t = ( typeof value );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( value ) ) ? value : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( value );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/matrix-triangle-enum2str';\nimport str2enum from './../../../base/matrix-triangle-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the matrix triangle string associated with a supported BLAS matrix triangle value.\n*\n* @param {*} value - matrix triangle value\n* @returns {(string|null)} matrix triangle string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/matrix-triangle-str2enum';\n*\n* var v = resolve( str2enum( 'upper' ) );\n* // returns 'upper'\n*/\nfunction resolve( value ) {\n\tvar t = ( typeof value );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( value ) === null ) ? null : value;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( value );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/operation-side-enum2str';\nimport str2enum from './../../../base/operation-side-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported BLAS operation side value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `LEFT == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} operation - operation value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'right' );\n* // returns <number>\n*/\nfunction resolve( operation ) {\n\tvar t = ( typeof operation );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( operation ) ) ? operation : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( operation );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/operation-side-enum2str';\nimport str2enum from './../../../base/operation-side-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the operation side string associated with a supported BLAS operation side value.\n*\n* @param {*} operation - operation value\n* @returns {(string|null)} operation side string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/operation-side-str2enum';\n*\n* var v = resolve( str2enum( 'left' ) );\n* // returns 'left'\n*/\nfunction resolve( operation ) {\n\tvar t = ( typeof operation );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( operation ) === null ) ? null : operation;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( operation );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/transpose-operation-enum2str';\nimport str2enum from './../../../base/transpose-operation-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported BLAS transpose operation value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `TRANSPOSE == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} operation - operation value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'conjugate-transpose' );\n* // returns <number>\n*/\nfunction resolve( operation ) {\n\tvar t = ( typeof operation );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( operation ) ) ? operation : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( operation );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/transpose-operation-enum2str';\nimport str2enum from './../../../base/transpose-operation-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the transpose operation string associated with a supported BLAS transpose operation value.\n*\n* @param {*} operation - operation value\n* @returns {(string|null)} transpose operation string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/transpose-operation-str2enum';\n*\n* var v = resolve( str2enum( 'transpose' ) );\n* // returns 'transpose'\n*/\nfunction resolve( operation ) {\n\tvar t = ( typeof operation );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( operation ) === null ) ? null : operation;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( operation );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as base } from './../../base/dswap';\nimport factory from './../../tools/swap-factory';\n\n\n// MAIN //\n\n/**\n* Interchanges two double-precision floating-point vectors.\n*\n* @name dswap\n* @type {Function}\n* @param {ndarrayLike} x - first input array\n* @param {ndarrayLike} y - second input array\n* @param {NegativeInteger} [dim] - dimension along which to interchange elements\n* @throws {TypeError} first argument must be a ndarray containing double-precision floating-point numbers\n* @throws {TypeError} first argument must have at least one dimension\n* @throws {TypeError} second argument must be a ndarray containing double-precision floating-point numbers\n* @throws {TypeError} second argument must have at least one dimension\n* @throws {Error} both input arrays must have the same shape\n* @throws {RangeError} third argument is out-of-bounds\n* @throws {Error} cannot write to read-only array\n* @returns {ndarrayLike} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* dswap( x, y );\n*\n* var xbuf = x.data;\n* // returns <Float64Array>[ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n*\n* var ybuf = y.data;\n* // returns <Float64Array>[ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nvar dswap = factory( base, 'float64' );\n\n\n// EXPORTS //\n\nexport default dswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} strideX - index increment\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n* var alpha = 5.0;\n*\n* dapx( 3, alpha, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, 1.0, 10.0, -1.0 ]\n*/\nfunction dapx( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] += alpha;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] += alpha;\n\t\t\tx[ ix+1 ] += alpha;\n\t\t\tx[ ix+2 ] += alpha;\n\t\t\tx[ ix+3 ] += alpha;\n\t\t\tx[ ix+4 ] += alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} strideX - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* dapx( x.length, 5.0, x, 1 );\n* // x => <Float64Array>[ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\nfunction dapx( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsumkbn( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumkbn( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn alpha + x[ offsetX ];\n\t}\n\tix = offsetX;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default dapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dapxsumkbn( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumkbn( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dapxsumkbn } from './../../../../ext/base/dapxsumkbn';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsum( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsum( N, alpha, x, strideX, offsetX ) {\n\treturn dapxsumkbn( N, alpha, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default dapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dapxsum( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsum( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsumkbn2( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumkbn2( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tix = offsetX;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default dapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dapxsumkbn2( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumkbn2( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsumors( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumors( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tix = offsetX;\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += alpha + x[ ix ];\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dapxsumors( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumors( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapx from './dapx.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapx, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapxsumkbn from './dapxsumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapxsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapxsum from './dapxsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapxsumkbn2 from './dapxsumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapxsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapxsumors from './dapxsumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapxsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumpw( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn alpha + x[ offsetX ];\n\t}\n\tix = offsetX;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+strideX ];\n\t\ts2 = alpha + x[ ix+(2*strideX) ];\n\t\ts3 = alpha + x[ ix+(3*strideX) ];\n\t\ts4 = alpha + x[ ix+(4*strideX) ];\n\t\ts5 = alpha + x[ ix+(5*strideX) ];\n\t\ts6 = alpha + x[ ix+(6*strideX) ];\n\t\ts7 = alpha + x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+strideX ];\n\t\t\ts2 += alpha + x[ ix+(2*strideX) ];\n\t\t\ts3 += alpha + x[ ix+(3*strideX) ];\n\t\t\ts4 += alpha + x[ ix+(4*strideX) ];\n\t\t\ts5 += alpha + x[ ix+(5*strideX) ];\n\t\t\ts6 += alpha + x[ ix+(6*strideX) ];\n\t\t\ts7 += alpha + x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dapxsumpw( n, alpha, x, strideX, ix ) + dapxsumpw( N-n, alpha, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumpw( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapxsumpw from './dapxsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dasumpw( 4, x, 2, 1 );\n* // returns 9.0\n*/\nfunction dasumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn abs( x[ offsetX ] );\n\t}\n\tix = offsetX;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = abs( x[ ix ] );\n\t\ts1 = abs( x[ ix+strideX ] );\n\t\ts2 = abs( x[ ix+(2*strideX) ] );\n\t\ts3 = abs( x[ ix+(3*strideX) ] );\n\t\ts4 = abs( x[ ix+(4*strideX) ] );\n\t\ts5 = abs( x[ ix+(5*strideX) ] );\n\t\ts6 = abs( x[ ix+(6*strideX) ] );\n\t\ts7 = abs( x[ ix+(7*strideX) ] );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += abs( x[ ix ] );\n\t\t\ts1 += abs( x[ ix+strideX ] );\n\t\t\ts2 += abs( x[ ix+(2*strideX) ] );\n\t\t\ts3 += abs( x[ ix+(3*strideX) ] );\n\t\t\ts4 += abs( x[ ix+(4*strideX) ] );\n\t\t\ts5 += abs( x[ ix+(5*strideX) ] );\n\t\t\ts6 += abs( x[ ix+(6*strideX) ] );\n\t\t\ts7 += abs( x[ ix+(7*strideX) ] );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dasumpw( n, x, strideX, ix ) + dasumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dasumpw( N, x, 1 );\n* // returns 5.0\n*/\nfunction dasumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumkbn( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = s + v;\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc += (s-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + s;\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = s + c;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumkbn( 3, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumkbn( N, sum, x, strideX, y, strideY ) {\n\tndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dcusumkbn } from './../../../../ext/base/dcusumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusum( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusum( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn dcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY );\n}\n\n\n// EXPORTS //\n\nexport default dcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusum( 3, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusum( N, sum, x, strideX, y, strideY ) {\n\treturn ndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n* var N = 4;\n*\n* var v = dcusumkbn2( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumkbn2( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\n\t\ty[ iy ] = sum + cs + ccs;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n* var N = x.length;\n*\n* var v = dcusumkbn2( N, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumkbn2( N, sum, x, strideX, y, strideY ) {\n\tndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumors( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumors( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumors( 3, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumors( N, sum, x, strideX, y, strideY ) {\n\tndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dasumpw from './dasumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dasumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcusumkbn from './dcusumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcusumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcusum from './dcusum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcusum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcusumkbn2 from './dcusumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcusumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcusumors from './dcusumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcusumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation:\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumpw( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumpw( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( N <= BLOCKSIZE ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\ty[ iy ] = sum + s;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tn = floor( N/2 );\n\tdcusumpw( n, sum, x, strideX, ix, y, strideY, iy );\n\tiy += (n-1) * strideY;\n\tdcusumpw( N-n, y[ iy ], x, strideX, ix+(n*strideX), y, strideY, iy+strideY ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cusum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumpw( 3, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumpw( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\treturn cusum( N, sum, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default dcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnanasumors( N, x, 1 );\n* // returns 5.0\n*/\nfunction dnanasumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn abs( x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tsum += abs( v );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dnanasumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnanasumors( 4, x, 2, 1 );\n* // returns 9.0\n*/\nfunction dnanasumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tsum += abs( v );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dnanasumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dnanasumors from './../../../../ext/base/dnanasumors';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dnanasum( 4, x, 1 );\n* // returns 5.0\n*/\nfunction dnanasum( N, x, stride ) {\n\treturn dnanasumors( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default dnanasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumkbn( N, x, strideX, out, strideOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum + c;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tix = offsetX;\n\tio = offsetOut;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum + c;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dnannsumkbn from './../../../../ext/base/dnannsumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsum( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsum( N, x, strideX, out, strideOut ) {\n\treturn dnannsumkbn( N, x, strideX, out, strideOut );\n}\n\n\n// EXPORTS //\n\nexport default dnannsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn2( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumkbn2( N, x, strideX, out, strideOut ) {\n\tvar sum;\n\tvar ccs;\n\tvar cs;\n\tvar cc;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum + cs + ccs;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumors( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumors( N, x, strideX, out, strideOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcusumpw from './dcusumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcusumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnanasumors from './dnanasumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnanasumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnanasumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnanasum from './dnanasum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnanasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnanasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dnanasumors } from './../../../../ext/base/dnanasumors';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnanasum( 5, x, 2, 1 );\n* // returns 9.0\n*/\nfunction dnanasum( N, x, stride, offset ) {\n\treturn dnanasumors( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default dnanasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnannsumkbn from './dnannsumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnannsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnannsum from './dnannsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnannsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dnannsumkbn } from './../../../../ext/base/dnannsumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsum( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsum( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\treturn dnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut );\n}\n\n\n// EXPORTS //\n\nexport default dnannsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnannsumkbn2 from './dnannsumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnannsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn2( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumkbn2( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ccs;\n\tvar cs;\n\tvar cc;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tix = offsetX;\n\tio = offsetOut;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum + cs + ccs;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnannsumors from './dnannsumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnannsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumors( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumors( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar n;\n\tvar i;\n\n\tix = offsetX;\n\tio = offsetOut;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of a double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - two-element output array whose first element is the accumulated sum and whose second element is the accumulated number of summed values\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var out = new Float64Array( [ 0.0, 0 ] );\n* var v = sumpw( N, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction sumpw( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar ix;\n\tvar io;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tio = offsetOut;\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] += x[ ix ];\n\t\tout[ io+strideOut ] += 1;\n\t\treturn out;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tn = 0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\tout[ io ] += s;\n\t\tout[ io+strideOut ] += n;\n\t\treturn out;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = 0.0;\n\t\ts1 = 0.0;\n\t\ts2 = 0.0;\n\t\ts3 = 0.0;\n\t\ts4 = 0.0;\n\t\ts5 = 0.0;\n\t\ts6 = 0.0;\n\t\ts7 = 0.0;\n\t\tn = 0;\n\n\t\tM = N % 8;\n\t\tfor ( i = 0; i < N-M; i += 8 ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts0 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts1 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts2 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts3 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts4 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts5 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts6 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts7 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\tout[ io ] += s;\n\t\tout[ io+strideOut ] += n;\n\t\treturn out;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\tsumpw( n, x, strideX, ix, out, strideOut, offsetOut );\n\tsumpw( N-n, x, strideX, ix+(n*strideX), out, strideOut, offsetOut );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default sumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sumpw from './sumpw.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumpw( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumpw( N, x, strideX, out, strideOut ) {\n\tvar ix;\n\tvar io;\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tout[ io ] = 0.0;\n\tout[ io+strideOut ] = 0;\n\tsumpw( N, x, strideX, ix, out, strideOut, io );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnansumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default dnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnansumkbn( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default dnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dnansumkbn from './../../../../ext/base/dnansumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dnansum( 4, x, 1 );\n* // returns 1.0\n*/\nfunction dnansum( N, x, stride ) {\n\treturn dnansumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default dnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnansumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default dnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnansumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnannsumpw from './dnannsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnannsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sumpw from './sumpw.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumpw( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumpw( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = 0.0;\n\tout[ offsetOut+strideOut ] = 0;\n\tsumpw( N, x, strideX, offsetX, out, strideOut, offsetOut );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnansumkbn from './dnansumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnansumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnansum from './dnansum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dnansumkbn } from './../../../../ext/base/dnansumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnansum( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansum( N, x, stride, offset ) {\n\treturn dnansumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default dnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnansumkbn2 from './dnansumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnansumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnansumkbn2( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default dnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnansumors from './dnansumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnansumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnansumors( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnansumpw( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts1 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts2 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts3 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts4 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts5 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts6 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts7 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts1 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts2 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts3 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts4 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts5 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts6 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts7 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dnansumpw( n, x, stride, ix ) + dnansumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnansumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default dnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnansumpw from './dnansumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a double-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* drev( x.length, x, 1 );\n* // x => <Float64Array>[ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\nfunction drev( N, x, stride ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tn = floor( N/2 );\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( ix = 0; ix < m; ix++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tiy -= 1;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( ix = m; ix < n; ix += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default drev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport drev from './drev.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( drev, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default drev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a double-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* drev( 3, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, -6.0, 5.0, -4.0 ]\n*/\nfunction drev( N, x, stride, offset ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tn = floor( N/2 );\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = ix + N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tix += stride;\n\t\t\t\tiy -= stride;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < n; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default drev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dsapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+stride ];\n\t\ts2 = alpha + x[ ix+(2*stride) ];\n\t\ts3 = alpha + x[ ix+(3*stride) ];\n\t\ts4 = alpha + x[ ix+(4*stride) ];\n\t\ts5 = alpha + x[ ix+(5*stride) ];\n\t\ts6 = alpha + x[ ix+(6*stride) ];\n\t\ts7 = alpha + x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+stride ];\n\t\t\ts2 += alpha + x[ ix+(2*stride) ];\n\t\t\ts3 += alpha + x[ ix+(3*stride) ];\n\t\t\ts4 += alpha + x[ ix+(4*stride) ];\n\t\t\ts5 += alpha + x[ ix+(5*stride) ];\n\t\t\ts6 += alpha + x[ ix+(6*stride) ];\n\t\t\ts7 += alpha + x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsapxsumpw( n, alpha, x, stride, ix ) + dsapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dsapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default dsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dsapxsumpw from './../../../../ext/base/dsapxsumpw';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dsapxsum( 3, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dsapxsum( N, alpha, x, stride ) {\n\treturn dsapxsumpw( N, alpha, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default dsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dsnannsumors( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dsnannsumors( N, x, strideX, out, strideOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dsnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsapxsumpw from './dsapxsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsapxsum from './dsapxsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dsapxsumpw } from './../../../../ext/base/dsapxsumpw';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsapxsum( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dsapxsum( N, alpha, x, stride, offset ) {\n\treturn dsapxsumpw( N, alpha, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default dsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsnannsumors from './dsnannsumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsnannsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dsnannsumors( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dsnannsumors( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar n;\n\tvar i;\n\n\tix = offsetX;\n\tio = offsetOut;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dsnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using pairwise summation with extended accumulation, and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dsnansumpw( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsnansumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts1 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts2 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts3 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts4 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts5 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts6 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts7 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts1 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts2 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts3 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts4 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts5 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts6 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts7 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsnansumpw( n, x, stride, ix ) + dsnansumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using pairwise summation with extended accumulation, and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dsnansumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsnansumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default dsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dsnansumpw from './../../../../ext/base/dsnansumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsnansum( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsnansum( N, x, stride ) {\n\treturn dsnansumpw( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default dsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsnansumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsnansumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dsnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2hp( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2ins( N, order, x, strideX, y, strideY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideY < 0 ) {\n\t\tfy = (1-N) * strideY;\n\t\tly = 0;\n\t} else {\n\t\tfy = 0;\n\t\tly = (N-1) * strideY;\n\t}\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * strideX; // first index\n\t\tlx = 0;               // last index\n\t\tix = fx + strideX;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * strideX; // last index\n\tix = fx + strideX;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsnansumpw from './dsnansumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsnansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsnansum from './dsnansum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsnansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dsnansumpw } from './../../../../ext/base/dsnansumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dsnansum( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsnansum( N, x, stride, offset ) {\n\treturn dsnansumpw( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default dsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsnansumors from './dsnansumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsnansumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dsnansumors( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsnansumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dsnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsort2hp from './dsort2hp.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsort2hp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsort2ins from './dsort2ins.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsort2ins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2sh( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsorthp( x.length, 1.0, x, 1 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsorthp( N, order, x, stride ) {\n\tvar offset;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortins( x.length, 1.0, x, 1 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortins( N, order, x, stride ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * stride; // first index\n\t\tlx = 0;              // last index\n\t\tix = fx + stride;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * stride; // last index\n\tix = fx + stride;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsort2sh from './dsort2sh.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsort2sh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsorthp from './dsorthp.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsorthp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsorthp( x.length, 1.0, x, 1, 0 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsorthp( N, order, x, stride, offset ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsortins from './dsortins.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsortins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortins( x.length, 1.0, x, 1, 0 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortins( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfx = offset;              // first index\n\tlx = fx + ((N-1)*stride); // last index\n\tix = fx + stride;\n\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortsh( x.length, 1.0, x, 1 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortsh( N, order, x, stride ) {\n\tvar offset;\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortsh( x.length, 1.0, x, 1, 0 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortsh( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsortsh from './dsortsh.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsortsh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dssumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dssumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+stride ];\n\t\t\ts2 += x[ ix+(2*stride) ];\n\t\t\ts3 += x[ ix+(3*stride) ];\n\t\t\ts4 += x[ ix+(4*stride) ];\n\t\t\ts5 += x[ ix+(5*stride) ];\n\t\t\ts6 += x[ ix+(6*stride) ];\n\t\t\ts7 += x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dssumpw( n, x, stride, ix ) + dssumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dssumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction dssumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default dssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dssumpw from './../../../../ext/base/dssumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dssum( N, x, 1 );\n* // returns 1.0\n*/\nfunction dssum( N, x, stride ) {\n\treturn dssumpw( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default dssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dssumpw from './dssumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dssumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dssum from './dssum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dssum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dssumpw } from './../../../../ext/base/dssumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dssum( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dssum( N, x, stride, offset ) {\n\treturn dssumpw( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default dssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation with extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dssumors( 3, x, 1 );\n* // returns 1.0\n*/\nfunction dssumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[i] + x[i+1] + x[i+2] + x[i+3] + x[i+4] + x[i+5];\n\t\t}\n\t\treturn sum;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default dsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsumkbn( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default dsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dsumkbn from './../../../../ext/base/dsumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsum( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsum( N, x, stride ) {\n\treturn dsumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default dsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default dsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dssumors from './dssumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dssumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation with extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dssumors( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dssumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ ix ];\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsumkbn from './dsumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsum from './dsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dsumkbn } from './../../../../ext/base/dsumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsum( N, x, stride, offset ) {\n\treturn dsumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default dsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsumkbn2 from './dsumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = 4;\n*\n* var v = dsumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default dsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[i] + x[i+1] + x[i+2] + x[i+3] + x[i+4] + x[i+5];\n\t\t}\n\t\treturn sum;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsumors from './dsumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsumors( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ ix ];\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+stride ];\n\t\t\ts2 += x[ ix+(2*stride) ];\n\t\t\ts3 += x[ ix+(3*stride) ];\n\t\t\ts4 += x[ ix+(4*stride) ];\n\t\t\ts5 += x[ ix+(5*stride) ];\n\t\t\ts6 += x[ ix+(6*stride) ];\n\t\t\ts7 += x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsumpw( n, x, stride, ix ) + dsumpw( N-n, x, stride, ix+(n*stride) );\n}\n\n\n// EXPORTS //\n\nexport default dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsumpw from './dsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each element in a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx( x.length, 5.0, x, 1 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\nfunction gapx( N, alpha, x, stride ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] += alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] += alpha;\n\t\t\tx[ i+1 ] += alpha;\n\t\t\tx[ i+2 ] += alpha;\n\t\t\tx[ i+3 ] += alpha;\n\t\t\tx[ i+4 ] += alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumkbn( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumkbn( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumkbn( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumkbn( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gapxsumkbn from './../../../../ext/base/gapxsumkbn';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsum( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsum( N, alpha, x, stride ) {\n\treturn gapxsumkbn( N, alpha, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default gapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumkbn2( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumkbn2( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumors( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumors( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += alpha + x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each element in a strided array.\n*\n* @module @stdlib/blas/ext/base/gapx\n*\n* @example\n* import gapx from '@stdlib/blas/ext/base/gapx';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx( x.length, 5.0, x, 1 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*\n* @example\n* import gapx from '@stdlib/blas/ext/base/gapx';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each element in a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n* var alpha = 5.0;\n*\n* gapx( 3, alpha, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, 1.0, 10.0, -1.0 ]\n*/\nfunction gapx( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] += alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] += alpha;\n\t\t\tx[ ix+1 ] += alpha;\n\t\t\tx[ ix+2 ] += alpha;\n\t\t\tx[ ix+3 ] += alpha;\n\t\t\tx[ ix+4 ] += alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each strided array element and compute the sum using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gapxsumkbn\n*\n* @example\n* import gapxsumkbn from '@stdlib/blas/ext/base/gapxsumkbn';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumkbn( N, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gapxsumkbn from '@stdlib/blas/ext/base/gapxsumkbn';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumkbn.ndarray( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each strided array element and compute the sum.\n*\n* @module @stdlib/blas/ext/base/gapxsum\n*\n* @example\n* import gapxsum from '@stdlib/blas/ext/base/gapxsum';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsum( N, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gapxsum from '@stdlib/blas/ext/base/gapxsum';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsum.ndarray( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gapxsumkbn } from './../../../../ext/base/gapxsumkbn';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsum( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsum( N, alpha, x, stride, offset ) {\n\treturn gapxsumkbn( N, alpha, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default gapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each strided array element and compute the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gapxsumkbn2\n*\n* @example\n* import gapxsumkbn2 from '@stdlib/blas/ext/base/gapxsumkbn2';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumkbn2( N, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gapxsumkbn2 from '@stdlib/blas/ext/base/gapxsumkbn2';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumkbn2.ndarray( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumkbn2( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumkbn2( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each strided array element and compute the sum using ordinary recursive summation.\n*\n* @module @stdlib/blas/ext/base/gapxsumors\n*\n* @example\n* import gapxsumors from '@stdlib/blas/ext/base/gapxsumors';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumors( N, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gapxsumors from '@stdlib/blas/ext/base/gapxsumors';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumors.ndarray( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumors( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumors( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += alpha + x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumpw( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+stride ];\n\t\ts2 = alpha + x[ ix+(2*stride) ];\n\t\ts3 = alpha + x[ ix+(3*stride) ];\n\t\ts4 = alpha + x[ ix+(4*stride) ];\n\t\ts5 = alpha + x[ ix+(5*stride) ];\n\t\ts6 = alpha + x[ ix+(6*stride) ];\n\t\ts7 = alpha + x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+stride ];\n\t\t\ts2 += alpha + x[ ix+(2*stride) ];\n\t\t\ts3 += alpha + x[ ix+(3*stride) ];\n\t\t\ts4 += alpha + x[ ix+(4*stride) ];\n\t\t\ts5 += alpha + x[ ix+(5*stride) ];\n\t\t\ts6 += alpha + x[ ix+(6*stride) ];\n\t\t\ts7 += alpha + x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gapxsumpw( n, alpha, x, stride, ix ) + gapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default gapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each strided array element and compute the sum using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gapxsumpw\n*\n* @example\n* import gapxsumpw from '@stdlib/blas/ext/base/gapxsumpw';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gapxsumpw from '@stdlib/blas/ext/base/gapxsumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumpw.ndarray( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gasumpw( N, x, 2, 1 );\n* // returns 9.0\n*/\nfunction gasumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = abs( x[ ix ] );\n\t\ts1 = abs( x[ ix+stride ] );\n\t\ts2 = abs( x[ ix+(2*stride) ] );\n\t\ts3 = abs( x[ ix+(3*stride) ] );\n\t\ts4 = abs( x[ ix+(4*stride) ] );\n\t\ts5 = abs( x[ ix+(5*stride) ] );\n\t\ts6 = abs( x[ ix+(6*stride) ] );\n\t\ts7 = abs( x[ ix+(7*stride) ] );\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += abs( x[ ix ] );\n\t\t\ts1 += abs( x[ ix+stride ] );\n\t\t\ts2 += abs( x[ ix+(2*stride) ] );\n\t\t\ts3 += abs( x[ ix+(3*stride) ] );\n\t\t\ts4 += abs( x[ ix+(4*stride) ] );\n\t\t\ts5 += abs( x[ ix+(5*stride) ] );\n\t\t\ts6 += abs( x[ ix+(6*stride) ] );\n\t\t\ts7 += abs( x[ ix+(7*stride) ] );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gasumpw( n, x, stride, ix ) + gasumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gasumpw( x.length, x, 1 );\n* // returns 5.0\n*/\nfunction gasumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default gasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumkbn( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumkbn( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = s + v;\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc += (s-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + s;\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = s + c;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumkbn( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = s + v;\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc += (s-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + s;\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = s + c;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gcusumkbn from './../../../../ext/base/gcusumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusum( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusum( N, sum, x, strideX, y, strideY ) {\n\treturn gcusumkbn( N, sum, x, strideX, y, strideY );\n}\n\n\n// EXPORTS //\n\nexport default gcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumkbn2( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumkbn2( N, sum, x, strideX, y, strideY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\n\t\ty[ iy ] = sum + cs + ccs;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumors( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumors( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of absolute values (L1 norm) of strided array elements using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gasumpw\n*\n* @example\n* import gasumpw from '@stdlib/blas/ext/base/gasumpw';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gasumpw( x.length, x, 1 );\n* // returns 5.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gasumpw from '@stdlib/blas/ext/base/gasumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gasumpw.ndarray( N, x, 2, 1 );\n* // returns 9.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gcusumkbn\n*\n* @example\n* import gcusumkbn from '@stdlib/blas/ext/base/gcusumkbn';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gcusumkbn from '@stdlib/blas/ext/base/gcusumkbn';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumkbn.ndarray( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements.\n*\n* @module @stdlib/blas/ext/base/gcusum\n*\n* @example\n* import gcusum from '@stdlib/blas/ext/base/gcusum';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusum( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gcusum from '@stdlib/blas/ext/base/gcusum';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusum.ndarray( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gcusumkbn } from './../../../../ext/base/gcusumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusum( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusum( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn gcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY );\n}\n\n\n// EXPORTS //\n\nexport default gcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gcusumkbn2\n*\n* @example\n* import gcusumkbn2 from '@stdlib/blas/ext/base/gcusumkbn2';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn2( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gcusumkbn2 from '@stdlib/blas/ext/base/gcusumkbn2';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumkbn2.ndarray( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumkbn2( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumkbn2( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\n\t\ty[ iy ] = sum + cs + ccs;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using ordinary recursive summation.\n*\n* @module @stdlib/blas/ext/base/gcusumors\n*\n* @example\n* import gcusumors from '@stdlib/blas/ext/base/gcusumors';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumors( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gcusumors from '@stdlib/blas/ext/base/gcusumors';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumors.ndarray( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumors( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumors( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation:\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumpw( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumpw( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( N <= BLOCKSIZE ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\ty[ iy ] = sum + s;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tn = floor( N/2 );\n\tgcusumpw( n, sum, x, strideX, ix, y, strideY, iy );\n\tiy += (n-1) * strideY;\n\tgcusumpw( N-n, y[ iy ], x, strideX, ix+(n*strideX), y, strideY, iy+strideY ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cusum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumpw( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumpw( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\treturn cusum( N, sum, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default gcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Object} input array object\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import reinterpret64 from '@stdlib/strided/base/reinterpret-complex64';\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* var data = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var x = {\n*     'data': data,\n*     'accessors': [ null, setter ]\n* };\n*\n* var alpha = new Complex64( 5.0, 5.0 );\n*\n* gfill( data.length, alpha, x, 1, 0 );\n*\n* var view = reinterpret64( x.data, 0 );\n* // view => <Float32Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, stride, offset ) {\n\tvar xbuf;\n\tvar set;\n\tvar ix;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tset = x.accessors[ 1 ];\n\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( xbuf, ix, alpha );\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gcusumpw\n*\n* @example\n* import gcusumpw from '@stdlib/blas/ext/base/gcusumpw';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumpw( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gcusumpw from '@stdlib/blas/ext/base/gcusumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumpw.ndarray( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar\n* @param {Collection} x - input array\n* @param {integer} stride - index increment\n* @returns {Collection} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill( x.length, 5.0, x, 1 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, stride ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\tvar o;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\tif ( stride < 0 ) {\n\t\t\tix = (1-N) * stride;\n\t\t} else {\n\t\t\tix = 0;\n\t\t}\n\t\taccessors( N, alpha, o, stride, ix );\n\t\treturn o.data;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] = alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] = alpha;\n\t\t\tx[ i+1 ] = alpha;\n\t\t\tx[ i+2 ] = alpha;\n\t\t\tx[ i+3 ] = alpha;\n\t\t\tx[ i+4 ] = alpha;\n\t\t\tx[ i+5 ] = alpha;\n\t\t\tx[ i+6 ] = alpha;\n\t\t\tx[ i+7 ] = alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Fills a strided array according to a provided callback function.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @param {Callback} clbk - callback\n* @param {*} thisArg - execution context\n* @returns {Object} input array object\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import reinterpret64 from '@stdlib/strided/base/reinterpret-complex64';\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var data = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var x = {\n*     'data': data,\n*     'accessors': [ getter, setter ]\n* };\n*\n* function clbk() {\n*     return new Complex64( 5.0, 5.0 );\n* }\n*\n* gfillBy( data.length, x, 1, 0, clbk, void 0 );\n*\n* var view = reinterpret64( x.data, 0 );\n* // view => <Float32Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfillBy( N, x, stride, offset, clbk, thisArg ) {\n\tvar xbuf;\n\tvar set;\n\tvar get;\n\tvar ix;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessors:\n\tget = x.accessors[ 0 ];\n\tset = x.accessors[ 1 ];\n\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( xbuf, ix, clbk.call( thisArg, get( xbuf, ix ), i, ix, x ) );\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfillBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Fills a strided array according to a provided callback function.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} stride - index increment\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {Collection} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* gfillBy( x.length, x, 1, fill );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfillBy( N, x, stride, clbk, thisArg ) {\n\tvar ix;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\taccessors( N, o, stride, ix, clbk, thisArg );\n\t\treturn o.data;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfillBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumkbn( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gnansumkbn from './../../../../ext/base/gnansumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansum( N, x, 1 );\n* // returns 1.0\n*/\nfunction gnansum( N, x, stride ) {\n\treturn gnansumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default gnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumors( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\ts = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn s;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn s;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\ts += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default gnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with a specified scalar constant.\n*\n* @module @stdlib/blas/ext/base/gfill\n*\n* @example\n* import gfill from '@stdlib/blas/ext/base/gfill';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill( x.length, 5.0, x, 1 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*\n* @example\n* import gfill from '@stdlib/blas/ext/base/gfill';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar\n* @param {Collection} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Collection} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* gfill( 3, 5.0, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\taccessors( N, alpha, o, stride, offset );\n\t\treturn o.data;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] = alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] = alpha;\n\t\t\tx[ ix+1 ] = alpha;\n\t\t\tx[ ix+2 ] = alpha;\n\t\t\tx[ ix+3 ] = alpha;\n\t\t\tx[ ix+4 ] = alpha;\n\t\t\tx[ ix+5 ] = alpha;\n\t\t\tx[ ix+6 ] = alpha;\n\t\t\tx[ ix+7 ] = alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array according to a provided callback function.\n*\n* @module @stdlib/blas/ext/base/gfill-by\n*\n* @example\n* import gfillBy from '@stdlib/blas/ext/base/gfill-by';\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfillBy( x.length, x, 1, fill );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*\n* @example\n* import gfillBy from '@stdlib/blas/ext/base/gfill-by';\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfillBy.ndarray( x.length, x, 1, 0, fill );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Fills a strided array according to a provided callback function.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {Collection} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* gfillBy( 3, x, 1, x.length-3, fill );\n* // x => [ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfillBy( N, x, stride, offset, clbk, thisArg ) {\n\tvar ix;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\taccessors( N, o, stride, offset, clbk, thisArg );\n\t\treturn o.data;\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfillBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gnansumkbn\n*\n* @example\n* import gnansumkbn from '@stdlib/blas/ext/base/gnansumkbn';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumkbn( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gnansumkbn from '@stdlib/blas/ext/base/gnansumkbn';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumkbn.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values.\n*\n* @module @stdlib/blas/ext/base/gnansum\n*\n* @example\n* import gnansum from '@stdlib/blas/ext/base/gnansum';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansum( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gnansum from '@stdlib/blas/ext/base/gnansum';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansum.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gnansumkbn } from './../../../../ext/base/gnansumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansum( N, x, stride, offset ) {\n\treturn gnansumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default gnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gnansumkbn2\n*\n* @example\n* import gnansumkbn2 from '@stdlib/blas/ext/base/gnansumkbn2';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumkbn2( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gnansumkbn2 from '@stdlib/blas/ext/base/gnansumkbn2';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumkbn2.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @module @stdlib/blas/ext/base/gnansumors\n*\n* @example\n* import gnansumors from '@stdlib/blas/ext/base/gnansumors';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumors( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gnansumors from '@stdlib/blas/ext/base/gnansumors';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumors.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumors( N, x, stride, offset ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\ts = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn s;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn s;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\ts += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default gnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts1 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts2 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts3 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts4 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts5 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts6 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts7 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts1 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts2 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts3 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts4 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts5 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts6 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts7 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gnansumpw( n, x, stride, ix ) + gnansumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default gnansumpw;\n","\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Reverses a strided array in-place.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Object} input array object\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import reinterpret64 from '@stdlib/strided/base/reinterpret-complex64';\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var data = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var x = {\n*     'data': data,\n*     'accessors': [ getter, setter ]\n* };\n*\n* grev( data.length, x, 1, 0 );\n*\n* var view = reinterpret64( x.data, 0 );\n* // view => <Float32Array>[ -1.0, -3.0, 4.0, 0.0, 3.0, -5.0, -2.0, 1.0 ]\n*/\nfunction grev( N, x, stride, offset ) {\n\tvar xbuf;\n\tvar set;\n\tvar get;\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessors:\n\tget = x.accessors[ 0 ];\n\tset = x.accessors[ 1 ];\n\n\tn = floor( N/2 );\n\tix = offset;\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = get( xbuf, ix );\n\t\tset( xbuf, ix, get( xbuf, iy ) );\n\t\tset( xbuf, iy, tmp );\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default grev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gnansumpw\n*\n* @example\n* import gnansumpw from '@stdlib/blas/ext/base/gnansumpw';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumpw( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gnansumpw from '@stdlib/blas/ext/base/gnansumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumpw.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* grev( x.length, x, 1 );\n* // x => [ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\nfunction grev( N, x, stride ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar o;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\tif ( stride < 0 ) {\n\t\t\tix = (1-N) * stride;\n\t\t} else {\n\t\t\tix = 0;\n\t\t}\n\t\taccessors( N, o, stride, ix );\n\t\treturn o.data;\n\t}\n\tn = floor( N/2 );\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( ix = 0; ix < m; ix++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tiy -= 1;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( ix = m; ix < n; ix += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default grev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2hp( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2ins( N, order, x, strideX, y, strideY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideY < 0 ) {\n\t\tfy = (1-N) * strideY;\n\t\tly = 0;\n\t} else {\n\t\tfy = 0;\n\t\tly = (N-1) * strideY;\n\t}\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * strideX; // first index\n\t\tlx = 0;               // last index\n\t\tix = fx + strideX;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * strideX; // last index\n\tix = fx + strideX;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Reverse a strided array in-place.\n*\n* @module @stdlib/blas/ext/base/grev\n*\n* @example\n* import grev from '@stdlib/blas/ext/base/grev';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* grev( x.length, x, 1 );\n* // x => [ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*\n* @example\n* import grev from '@stdlib/blas/ext/base/grev';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* grev( x.length, x, 1, 0 );\n* // x => [ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* grev( 3, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, -6.0, 5.0, -4.0 ]\n*/\nfunction grev( N, x, stride, offset ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar o;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\taccessors( N, o, stride, offset );\n\t\treturn o.data;\n\t}\n\tn = floor( N/2 );\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = ix + N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tix += stride;\n\t\t\t\tiy -= stride;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < n; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default grev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously sort two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* @module @stdlib/blas/ext/base/gsort2hp\n*\n* @example\n* import gsort2hp from '@stdlib/blas/ext/base/gsort2hp';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* import gsort2hp from '@stdlib/blas/ext/base/gsort2hp';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously sort two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @module @stdlib/blas/ext/base/gsort2ins\n*\n* @example\n* import gsort2ins from '@stdlib/blas/ext/base/gsort2ins';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* import gsort2ins from '@stdlib/blas/ext/base/gsort2ins';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2sh( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform Shellsort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform Shellsort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsorthp( N, order, x, stride ) {\n\tvar offset;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortins( N, order, x, stride ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * stride; // first index\n\t\tlx = 0;              // last index\n\t\tix = fx + stride;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * stride; // last index\n\tix = fx + stride;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously sort two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* @module @stdlib/blas/ext/base/gsort2sh\n*\n* @example\n* import gsort2sh from '@stdlib/blas/ext/base/gsort2sh';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* import gsort2sh from '@stdlib/blas/ext/base/gsort2sh';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sort a strided array using heapsort.\n*\n* @module @stdlib/blas/ext/base/gsorthp\n*\n* @example\n* import gsorthp from '@stdlib/blas/ext/base/gsorthp';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* @example\n* import gsorthp from '@stdlib/blas/ext/base/gsorthp';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp.ndarray( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsorthp( N, order, x, stride, offset ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sort a strided array using insertion sort.\n*\n* @module @stdlib/blas/ext/base/gsortins\n*\n* @example\n* import gsortins from '@stdlib/blas/ext/base/gsortins';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* @example\n* import gsortins from '@stdlib/blas/ext/base/gsortins';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins.ndarray( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortins( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfx = offset;              // first index\n\tlx = fx + ((N-1)*stride); // last index\n\tix = fx + stride;\n\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortsh( N, order, x, stride ) {\n\tvar offset;\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortsh( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction gsumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumkbn( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gsumkbn from './../../../../ext/base/gsumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsum( N, x, 1 );\n* // returns 1.0\n*/\nfunction gsum( N, x, stride ) {\n\treturn gsumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default gsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction gsumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sort a strided array using Shellsort.\n*\n* @module @stdlib/blas/ext/base/gsortsh\n*\n* @example\n* import gsortsh from '@stdlib/blas/ext/base/gsortsh';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* @example\n* import gsortsh from '@stdlib/blas/ext/base/gsortsh';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh.ndarray( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gsumkbn\n*\n* @example\n* import gsumkbn from '@stdlib/blas/ext/base/gsumkbn';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumkbn( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gsumkbn from '@stdlib/blas/ext/base/gsumkbn';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumkbn.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements.\n*\n* @module @stdlib/blas/ext/base/gsum\n*\n* @example\n* import gsum from '@stdlib/blas/ext/base/gsum';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsum( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gsum from '@stdlib/blas/ext/base/gsum';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsum.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gsumkbn } from './../../../../ext/base/gsumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsum( N, x, stride, offset ) {\n\treturn gsumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default gsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gsumkbn2\n*\n* @example\n* import gsumkbn2 from '@stdlib/blas/ext/base/gsumkbn2';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumkbn2( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gsumkbn2 from '@stdlib/blas/ext/base/gsumkbn2';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumkbn2.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction gsumors( N, x, stride ) {\n\tvar ix;\n\tvar m;\n\tvar s;\n\tvar i;\n\n\ts = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn s;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ts += x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn s;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ts += x[i] + x[i+1] + x[i+2] + x[i+3] + x[i+4] + x[i+5];\n\t\t}\n\t\treturn s;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ts += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default gsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using ordinary recursive summation.\n*\n* @module @stdlib/blas/ext/base/gsumors\n*\n* @example\n* import gsumors from '@stdlib/blas/ext/base/gsumors';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumors( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gsumors from '@stdlib/blas/ext/base/gsumors';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumors.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumors( N, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar s;\n\tvar i;\n\n\ts = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn s;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn s;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ts += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn s;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ts += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default gsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+stride ];\n\t\t\ts2 += x[ ix+(2*stride) ];\n\t\t\ts3 += x[ ix+(3*stride) ];\n\t\t\ts4 += x[ ix+(4*stride) ];\n\t\t\ts5 += x[ ix+(5*stride) ];\n\t\t\ts6 += x[ ix+(6*stride) ];\n\t\t\ts7 += x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gsumpw( n, x, stride, ix ) + gsumpw( N-n, x, stride, ix+(n*stride) );\n}\n\n\n// EXPORTS //\n\nexport default gsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction gsumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default gsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gsumpw\n*\n* @example\n* import gsumpw from '@stdlib/blas/ext/base/gsumpw';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumpw( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gsumpw from '@stdlib/blas/ext/base/gsumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumpw.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each element in a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* sapx( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\nfunction sapx( N, alpha, x, stride ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] += alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] += alpha;\n\t\t\tx[ i+1 ] += alpha;\n\t\t\tx[ i+2 ] += alpha;\n\t\t\tx[ i+3 ] += alpha;\n\t\t\tx[ i+4 ] += alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default sapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sapxsumkbn( 3, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumkbn( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum + v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsumkbn( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumkbn( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ offset ] );\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum + v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sapxsumkbn from './../../../../ext/base/sapxsumkbn';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sapxsum( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsum( N, alpha, x, stride ) {\n\treturn sapxsumkbn( N, alpha, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default sapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sapxsumkbn2( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumkbn2( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sapxsumors( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumors( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + float64ToFloat32( alpha+x[ ix ] ) );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default sapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapx from './sapx.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapx, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each element in a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n* var alpha = 5.0;\n*\n* sapx( 3, alpha, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, 1.0, 10.0, -1.0 ]\n*/\nfunction sapx( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] += alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] += alpha;\n\t\t\tx[ ix+1 ] += alpha;\n\t\t\tx[ ix+2 ] += alpha;\n\t\t\tx[ ix+3 ] += alpha;\n\t\t\tx[ ix+4 ] += alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default sapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapxsumkbn from './sapxsumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapxsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapxsum from './sapxsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sapxsumkbn } from './../../../../ext/base/sapxsumkbn';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsum( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsum( N, alpha, x, stride, offset ) {\n\treturn sapxsumkbn( N, alpha, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default sapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapxsumkbn2 from './sapxsumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapxsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsumkbn2( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumkbn2( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ offset ] );\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapxsumors from './sapxsumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapxsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsumors( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumors( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + float64ToFloat32( alpha+x[ ix ] ) );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default sapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ offset ] );\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = float64ToFloat32( alpha + x[ ix ] );\n\t\ts1 = float64ToFloat32( alpha + x[ ix+stride ] );\n\t\ts2 = float64ToFloat32( alpha + x[ ix+(2*stride) ] );\n\t\ts3 = float64ToFloat32( alpha + x[ ix+(3*stride) ] );\n\t\ts4 = float64ToFloat32( alpha + x[ ix+(4*stride) ] );\n\t\ts5 = float64ToFloat32( alpha + x[ ix+(5*stride) ] );\n\t\ts6 = float64ToFloat32( alpha + x[ ix+(6*stride) ] );\n\t\ts7 = float64ToFloat32( alpha + x[ ix+(7*stride) ] );\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\ts1 = float64ToFloat32( s1 + float64ToFloat32( alpha + x[ ix+stride ] ) );\n\t\t\ts2 = float64ToFloat32( s2 + float64ToFloat32( alpha + x[ ix+(2*stride) ] ) );\n\t\t\ts3 = float64ToFloat32( s3 + float64ToFloat32( alpha + x[ ix+(3*stride) ] ) );\n\t\t\ts4 = float64ToFloat32( s4 + float64ToFloat32( alpha + x[ ix+(4*stride) ] ) );\n\t\t\ts5 = float64ToFloat32( s5 + float64ToFloat32( alpha + x[ ix+(5*stride) ] ) );\n\t\t\ts6 = float64ToFloat32( s6 + float64ToFloat32( alpha + x[ ix+(6*stride) ] ) );\n\t\t\ts7 = float64ToFloat32( s7 + float64ToFloat32( alpha + x[ ix+(7*stride) ] ) );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sapxsumpw( n, alpha, x, stride, ix ) + sapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapxsumpw from './sapxsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sasumpw( 4, x, 2, 1 );\n* // returns 9.0\n*/\nfunction sasumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + abs( x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = abs( x[ ix ] );\n\t\ts1 = abs( x[ ix+stride ] );\n\t\ts2 = abs( x[ ix+(2*stride) ] );\n\t\ts3 = abs( x[ ix+(3*stride) ] );\n\t\ts4 = abs( x[ ix+(4*stride) ] );\n\t\ts5 = abs( x[ ix+(5*stride) ] );\n\t\ts6 = abs( x[ ix+(6*stride) ] );\n\t\ts7 = abs( x[ ix+(7*stride) ] );\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + abs( x[ ix ] ) );\n\t\t\ts1 = float64ToFloat32( s1 + abs( x[ ix+stride ] ) );\n\t\t\ts2 = float64ToFloat32( s2 + abs( x[ ix+(2*stride) ] ) );\n\t\t\ts3 = float64ToFloat32( s3 + abs( x[ ix+(3*stride) ] ) );\n\t\t\ts4 = float64ToFloat32( s4 + abs( x[ ix+(4*stride) ] ) );\n\t\t\ts5 = float64ToFloat32( s5 + abs( x[ ix+(5*stride) ] ) );\n\t\t\ts6 = float64ToFloat32( s6 + abs( x[ ix+(6*stride) ] ) );\n\t\t\ts7 = float64ToFloat32( s7 + abs( x[ ix+(7*stride) ] ) );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) ); // eslint-disable-line max-len\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + abs( x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sasumpw( n, x, stride, ix ) + sasumpw( N-n, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sasumpw( N, x, 1 );\n* // returns 5.0\n*/\nfunction sasumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + abs( x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default sasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n* var N = x.length;\n*\n* var v = scusumkbn( N, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumkbn( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( s + v );\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( s-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + s ) ); // eslint-disable-line max-len\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = float64ToFloat32( s + c );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = scusumkbn( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( s + v );\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( s-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + s ) ); // eslint-disable-line max-len\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = float64ToFloat32( s + c );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport scusumkbn from './../../../../ext/base/scusumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusum( 3, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusum( N, sum, x, strideX, y, strideY ) {\n\treturn scusumkbn( N, sum, x, strideX, y, strideY );\n}\n\n\n// EXPORTS //\n\nexport default scusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n* var N = x.length;\n*\n* var v = scusumkbn2( N, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumkbn2( N, sum, x, strideX, y, strideY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\n\t\ty[ iy ] = float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n* var N = x.length;\n*\n* var v = scusumors( N, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumors( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sasumpw from './sasumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sasumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scusumkbn from './scusumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scusumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scusum from './scusum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scusum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as scusumkbn } from './../../../../ext/base/scusumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusum( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusum( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn scusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY );\n}\n\n\n// EXPORTS //\n\nexport default scusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scusumkbn2 from './scusumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scusumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = scusumkbn2( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumkbn2( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\n\t\ty[ iy ] = float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scusumors from './scusumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scusumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusumors( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumors( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation:\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = scusumpw( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumpw( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( N <= BLOCKSIZE ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\ty[ iy ] = float64ToFloat32( sum + s );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tn = floor( N/2 );\n\tscusumpw( n, sum, x, strideX, ix, y, strideY, iy );\n\tiy += (n-1) * strideY;\n\tscusumpw( N-n, y[ iy ], x, strideX, ix+(n*strideX), y, strideY, iy+strideY ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cusum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n* var N = x.length;\n*\n* var v = scusumpw( N, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumpw( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\treturn cusum( N, sum, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default scusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scusumpw from './scusumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scusumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sdsapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sdsapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ offset ] );\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+stride ];\n\t\ts2 = alpha + x[ ix+(2*stride) ];\n\t\ts3 = alpha + x[ ix+(3*stride) ];\n\t\ts4 = alpha + x[ ix+(4*stride) ];\n\t\ts5 = alpha + x[ ix+(5*stride) ];\n\t\ts6 = alpha + x[ ix+(6*stride) ];\n\t\ts7 = alpha + x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+stride ];\n\t\t\ts2 += alpha + x[ ix+(2*stride) ];\n\t\t\ts3 += alpha + x[ ix+(3*stride) ];\n\t\t\ts4 += alpha + x[ ix+(4*stride) ];\n\t\t\ts5 += alpha + x[ ix+(5*stride) ];\n\t\t\ts6 += alpha + x[ ix+(6*stride) ];\n\t\t\ts7 += alpha + x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sdsapxsumpw( n, alpha, x, stride, ix ) + sdsapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sdsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sdsapxsumpw( 3, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sdsapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default sdsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sdsapxsumpw from './../../../../ext/base/sdsapxsumpw';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sdsapxsum( 3, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sdsapxsum( N, alpha, x, stride ) {\n\treturn sdsapxsumpw( N, alpha, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default sdsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdsapxsumpw from './sdsapxsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdsapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdsapxsum from './sdsapxsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdsapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sdsapxsumpw } from './../../../../ext/base/sdsapxsumpw';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sdsapxsum( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sdsapxsum( N, alpha, x, stride, offset ) {\n\treturn sdsapxsumpw( N, alpha, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default sdsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = sdsnansumpw( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdsnansumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts1 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts2 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts3 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts4 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts5 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts6 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts7 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts1 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts2 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts3 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts4 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts5 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts6 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts7 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sdsnansumpw( n, x, stride, ix ) + sdsnansumpw( N-n, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sdsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = sdsnansumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction sdsnansumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default sdsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sdsnansumpw from './../../../../ext/base/sdsnansumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = sdsnansum( N, x, 1 );\n* // returns 1.0\n*/\nfunction sdsnansum( N, x, stride ) {\n\treturn sdsnansumpw( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default sdsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdsnansumpw from './sdsnansumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdsnansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdsnansum from './sdsnansum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdsnansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sdsnansumpw } from './../../../../ext/base/sdsnansumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = sdsnansum( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdsnansum( N, x, stride, offset ) {\n\treturn sdsnansumpw( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default sdsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sdssumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdssumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+stride ];\n\t\t\ts2 += x[ ix+(2*stride) ];\n\t\t\ts3 += x[ ix+(3*stride) ];\n\t\t\ts4 += x[ ix+(4*stride) ];\n\t\t\ts5 += x[ ix+(5*stride) ];\n\t\t\ts6 += x[ ix+(6*stride) ];\n\t\t\ts7 += x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sdssumpw( n, x, stride, ix ) + sdssumpw( N-n, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sdssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sdssumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction sdssumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default sdssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sdssumpw from './../../../../ext/base/sdssumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sdssum( N, x, 1 );\n* // returns 1.0\n*/\nfunction sdssum( N, x, stride ) {\n\treturn sdssumpw( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default sdssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snansumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction snansumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default snansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = snansumkbn( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default snansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport snansumkbn from './../../../../ext/base/snansumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = snansum( 4, x, 1 );\n* // returns 1.0\n*/\nfunction snansum( N, x, stride ) {\n\treturn snansumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default snansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snansumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction snansumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = float64ToFloat32( sum + v );\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = float64ToFloat32( cs + c );\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32(cs-t) + c );\n\t\t\t} else {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32(c-t) + cs );\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs = float64ToFloat32( ccs + cc );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs + ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default snansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snansumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction snansumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default snansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdssumpw from './sdssumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdssumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdssum from './sdssum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdssum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sdssumpw } from './../../../../ext/base/sdssumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sdssum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdssum( N, x, stride, offset ) {\n\treturn sdssumpw( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default sdssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snansumkbn from './snansumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snansumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snansum from './snansum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as snansumkbn } from './../../../../ext/base/snansumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = snansum( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansum( N, x, stride, offset ) {\n\treturn snansumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default snansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snansumkbn2 from './snansumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snansumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snansumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = float64ToFloat32( sum + v );\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = float64ToFloat32( cs + c );\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32(cs-t) + c );\n\t\t\t} else {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32(c-t) + cs );\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs = float64ToFloat32( ccs + cc );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs + ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default snansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snansumors from './snansumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snansumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = snansumors( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default snansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = snansumpw( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts1 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts2 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts3 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts4 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts5 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts6 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts7 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = ( isnanf( x[ ix ] ) ) ? s0 : float64ToFloat32( s0 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts1 = ( isnanf( x[ ix ] ) ) ? s1 : float64ToFloat32( s1 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts2 = ( isnanf( x[ ix ] ) ) ? s2 : float64ToFloat32( s2 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts3 = ( isnanf( x[ ix ] ) ) ? s3 : float64ToFloat32( s3 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts4 = ( isnanf( x[ ix ] ) ) ? s4 : float64ToFloat32( s4 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts5 = ( isnanf( x[ ix ] ) ) ? s5 : float64ToFloat32( s5 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts6 = ( isnanf( x[ ix ] ) ) ? s6 : float64ToFloat32( s6 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts7 = ( isnanf( x[ ix ] ) ) ? s7 : float64ToFloat32( s7 + x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) ); // eslint-disable-line max-len\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( snansumpw( n, x, stride, ix ) + snansumpw( N-n, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default snansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snansumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction snansumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default snansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snansumpw from './snansumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a single-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* srev( x.length, x, 1 );\n* // x => <Float32Array>[ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\nfunction srev( N, x, stride ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tn = floor( N/2 );\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( ix = 0; ix < m; ix++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tiy -= 1;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( ix = m; ix < n; ix += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default srev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZerof from '@stdlib/math/base/assert/is-positive-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2hp( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnanf( v1 ) || ( v1 === tx && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ssort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2ins( N, order, x, strideX, y, strideY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideY < 0 ) {\n\t\tfy = (1-N) * strideY;\n\t\tly = 0;\n\t} else {\n\t\tfy = 0;\n\t\tly = (N-1) * strideY;\n\t}\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * strideX; // first index\n\t\tlx = 0;               // last index\n\t\tix = fx + strideX;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * strideX; // last index\n\tix = fx + strideX;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport srev from './srev.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( srev, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default srev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a single-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* srev( 3, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, -6.0, 5.0, -4.0 ]\n*/\nfunction srev( N, x, stride, offset ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tn = floor( N/2 );\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = ix + N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tix += stride;\n\t\t\t\tiy -= stride;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < n; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default srev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssort2hp from './ssort2hp.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssort2hp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZerof from '@stdlib/math/base/assert/is-positive-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnanf( v1 ) || ( v1 === tx && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ssort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssort2ins from './ssort2ins.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssort2ins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2sh( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZerof from '@stdlib/math/base/assert/is-positive-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssorthp( x.length, 1.0, x, 1 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssorthp( N, order, x, stride ) {\n\tvar offset;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnanf( v1 ) || ( v1 === t && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ssorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortins( x.length, 1.0, x, 1 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortins( N, order, x, stride ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * stride; // first index\n\t\tlx = 0;              // last index\n\t\tix = fx + stride;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * stride; // last index\n\tix = fx + stride;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssort2sh from './ssort2sh.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssort2sh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssorthp from './ssorthp.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssorthp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZerof from '@stdlib/math/base/assert/is-positive-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssorthp( x.length, 1.0, x, 1, 0 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssorthp( N, order, x, stride, offset ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnanf( v1 ) || ( v1 === t && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ssorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssortins from './ssortins.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssortins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortins( x.length, 1.0, x, 1, 0 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortins( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfx = offset;              // first index\n\tlx = fx + ((N-1)*stride); // last index\n\tix = fx + stride;\n\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortsh( x.length, 1.0, x, 1 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortsh( N, order, x, stride ) {\n\tvar offset;\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortsh( x.length, 1.0, x, 1, 0 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortsh( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = ssumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction ssumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum + v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default ssumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = ssumkbn( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum + v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default ssumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ssumkbn from './../../../../ext/base/ssumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = ssum( N, x, 1 );\n* // returns 1.0\n*/\nfunction ssum( N, x, stride ) {\n\treturn ssumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default ssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = ssumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction ssumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default ssumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = ssumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction ssumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default ssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssortsh from './ssortsh.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssortsh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssumkbn from './ssumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssum from './ssum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as ssumkbn } from './../../../../ext/base/ssumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = ssum( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssum( N, x, stride, offset ) {\n\treturn ssumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default ssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssumkbn2 from './ssumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = ssumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default ssumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssumors from './ssumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = ssumors( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default ssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = ssumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + x[ ix ] );\n\t\t\ts1 = float64ToFloat32( s1 + x[ ix+stride ] );\n\t\t\ts2 = float64ToFloat32( s2 + x[ ix+(2*stride) ] );\n\t\t\ts3 = float64ToFloat32( s3 + x[ ix+(3*stride) ] );\n\t\t\ts4 = float64ToFloat32( s4 + x[ ix+(4*stride) ] );\n\t\t\ts5 = float64ToFloat32( s5 + x[ ix+(5*stride) ] );\n\t\t\ts6 = float64ToFloat32( s6 + x[ ix+(6*stride) ] );\n\t\t\ts7 = float64ToFloat32( s7 + x[ ix+(7*stride) ] );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) ); // eslint-disable-line max-len\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( ssumpw( n, x, stride, ix ) + ssumpw( N-n, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = ssumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction ssumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssumpw from './ssumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name dapx\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapx}\n*/\nimport dapx from './../../../ext/base/dapx';\nsetReadOnly( ns, 'dapx', dapx );\n\n/**\n* @name dapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsum}\n*/\nimport dapxsum from './../../../ext/base/dapxsum';\nsetReadOnly( ns, 'dapxsum', dapxsum );\n\n/**\n* @name dapxsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumkbn}\n*/\nimport dapxsumkbn from './../../../ext/base/dapxsumkbn';\nsetReadOnly( ns, 'dapxsumkbn', dapxsumkbn );\n\n/**\n* @name dapxsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumkbn2}\n*/\nimport dapxsumkbn2 from './../../../ext/base/dapxsumkbn2';\nsetReadOnly( ns, 'dapxsumkbn2', dapxsumkbn2 );\n\n/**\n* @name dapxsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumors}\n*/\nimport dapxsumors from './../../../ext/base/dapxsumors';\nsetReadOnly( ns, 'dapxsumors', dapxsumors );\n\n/**\n* @name dapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumpw}\n*/\nimport dapxsumpw from './../../../ext/base/dapxsumpw';\nsetReadOnly( ns, 'dapxsumpw', dapxsumpw );\n\n/**\n* @name dasumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dasumpw}\n*/\nimport dasumpw from './../../../ext/base/dasumpw';\nsetReadOnly( ns, 'dasumpw', dasumpw );\n\n/**\n* @name dcusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusum}\n*/\nimport dcusum from './../../../ext/base/dcusum';\nsetReadOnly( ns, 'dcusum', dcusum );\n\n/**\n* @name dcusumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumkbn}\n*/\nimport dcusumkbn from './../../../ext/base/dcusumkbn';\nsetReadOnly( ns, 'dcusumkbn', dcusumkbn );\n\n/**\n* @name dcusumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumkbn2}\n*/\nimport dcusumkbn2 from './../../../ext/base/dcusumkbn2';\nsetReadOnly( ns, 'dcusumkbn2', dcusumkbn2 );\n\n/**\n* @name dcusumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumors}\n*/\nimport dcusumors from './../../../ext/base/dcusumors';\nsetReadOnly( ns, 'dcusumors', dcusumors );\n\n/**\n* @name dcusumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumpw}\n*/\nimport dcusumpw from './../../../ext/base/dcusumpw';\nsetReadOnly( ns, 'dcusumpw', dcusumpw );\n\n/**\n* @name dfill\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dfill}\n*/\nimport dfill from './../../../ext/base/dfill';\nsetReadOnly( ns, 'dfill', dfill );\n\n/**\n* @name dnanasum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnanasum}\n*/\nimport dnanasum from './../../../ext/base/dnanasum';\nsetReadOnly( ns, 'dnanasum', dnanasum );\n\n/**\n* @name dnanasumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnanasumors}\n*/\nimport dnanasumors from './../../../ext/base/dnanasumors';\nsetReadOnly( ns, 'dnanasumors', dnanasumors );\n\n/**\n* @name dnannsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsum}\n*/\nimport dnannsum from './../../../ext/base/dnannsum';\nsetReadOnly( ns, 'dnannsum', dnannsum );\n\n/**\n* @name dnannsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumkbn}\n*/\nimport dnannsumkbn from './../../../ext/base/dnannsumkbn';\nsetReadOnly( ns, 'dnannsumkbn', dnannsumkbn );\n\n/**\n* @name dnannsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumkbn2}\n*/\nimport dnannsumkbn2 from './../../../ext/base/dnannsumkbn2';\nsetReadOnly( ns, 'dnannsumkbn2', dnannsumkbn2 );\n\n/**\n* @name dnannsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumors}\n*/\nimport dnannsumors from './../../../ext/base/dnannsumors';\nsetReadOnly( ns, 'dnannsumors', dnannsumors );\n\n/**\n* @name dnannsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumpw}\n*/\nimport dnannsumpw from './../../../ext/base/dnannsumpw';\nsetReadOnly( ns, 'dnannsumpw', dnannsumpw );\n\n/**\n* @name dnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansum}\n*/\nimport dnansum from './../../../ext/base/dnansum';\nsetReadOnly( ns, 'dnansum', dnansum );\n\n/**\n* @name dnansumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumkbn}\n*/\nimport dnansumkbn from './../../../ext/base/dnansumkbn';\nsetReadOnly( ns, 'dnansumkbn', dnansumkbn );\n\n/**\n* @name dnansumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumkbn2}\n*/\nimport dnansumkbn2 from './../../../ext/base/dnansumkbn2';\nsetReadOnly( ns, 'dnansumkbn2', dnansumkbn2 );\n\n/**\n* @name dnansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumors}\n*/\nimport dnansumors from './../../../ext/base/dnansumors';\nsetReadOnly( ns, 'dnansumors', dnansumors );\n\n/**\n* @name dnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumpw}\n*/\nimport dnansumpw from './../../../ext/base/dnansumpw';\nsetReadOnly( ns, 'dnansumpw', dnansumpw );\n\n/**\n* @name drev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/drev}\n*/\nimport drev from './../../../ext/base/drev';\nsetReadOnly( ns, 'drev', drev );\n\n/**\n* @name dsapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsapxsum}\n*/\nimport dsapxsum from './../../../ext/base/dsapxsum';\nsetReadOnly( ns, 'dsapxsum', dsapxsum );\n\n/**\n* @name dsapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsapxsumpw}\n*/\nimport dsapxsumpw from './../../../ext/base/dsapxsumpw';\nsetReadOnly( ns, 'dsapxsumpw', dsapxsumpw );\n\n/**\n* @name dsnannsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnannsumors}\n*/\nimport dsnannsumors from './../../../ext/base/dsnannsumors';\nsetReadOnly( ns, 'dsnannsumors', dsnannsumors );\n\n/**\n* @name dsnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnansum}\n*/\nimport dsnansum from './../../../ext/base/dsnansum';\nsetReadOnly( ns, 'dsnansum', dsnansum );\n\n/**\n* @name dsnansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnansumors}\n*/\nimport dsnansumors from './../../../ext/base/dsnansumors';\nsetReadOnly( ns, 'dsnansumors', dsnansumors );\n\n/**\n* @name dsnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnansumpw}\n*/\nimport dsnansumpw from './../../../ext/base/dsnansumpw';\nsetReadOnly( ns, 'dsnansumpw', dsnansumpw );\n\n/**\n* @name dsort2hp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsort2hp}\n*/\nimport dsort2hp from './../../../ext/base/dsort2hp';\nsetReadOnly( ns, 'dsort2hp', dsort2hp );\n\n/**\n* @name dsort2ins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsort2ins}\n*/\nimport dsort2ins from './../../../ext/base/dsort2ins';\nsetReadOnly( ns, 'dsort2ins', dsort2ins );\n\n/**\n* @name dsort2sh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsort2sh}\n*/\nimport dsort2sh from './../../../ext/base/dsort2sh';\nsetReadOnly( ns, 'dsort2sh', dsort2sh );\n\n/**\n* @name dsorthp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsorthp}\n*/\nimport dsorthp from './../../../ext/base/dsorthp';\nsetReadOnly( ns, 'dsorthp', dsorthp );\n\n/**\n* @name dsortins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsortins}\n*/\nimport dsortins from './../../../ext/base/dsortins';\nsetReadOnly( ns, 'dsortins', dsortins );\n\n/**\n* @name dsortsh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsortsh}\n*/\nimport dsortsh from './../../../ext/base/dsortsh';\nsetReadOnly( ns, 'dsortsh', dsortsh );\n\n/**\n* @name dssum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dssum}\n*/\nimport dssum from './../../../ext/base/dssum';\nsetReadOnly( ns, 'dssum', dssum );\n\n/**\n* @name dssumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dssumors}\n*/\nimport dssumors from './../../../ext/base/dssumors';\nsetReadOnly( ns, 'dssumors', dssumors );\n\n/**\n* @name dssumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dssumpw}\n*/\nimport dssumpw from './../../../ext/base/dssumpw';\nsetReadOnly( ns, 'dssumpw', dssumpw );\n\n/**\n* @name dsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsum}\n*/\nimport dsum from './../../../ext/base/dsum';\nsetReadOnly( ns, 'dsum', dsum );\n\n/**\n* @name dsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumkbn}\n*/\nimport dsumkbn from './../../../ext/base/dsumkbn';\nsetReadOnly( ns, 'dsumkbn', dsumkbn );\n\n/**\n* @name dsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumkbn2}\n*/\nimport dsumkbn2 from './../../../ext/base/dsumkbn2';\nsetReadOnly( ns, 'dsumkbn2', dsumkbn2 );\n\n/**\n* @name dsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumors}\n*/\nimport dsumors from './../../../ext/base/dsumors';\nsetReadOnly( ns, 'dsumors', dsumors );\n\n/**\n* @name dsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumpw}\n*/\nimport dsumpw from './../../../ext/base/dsumpw';\nsetReadOnly( ns, 'dsumpw', dsumpw );\n\n/**\n* @name gapx\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapx}\n*/\nimport gapx from './../../../ext/base/gapx';\nsetReadOnly( ns, 'gapx', gapx );\n\n/**\n* @name gapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsum}\n*/\nimport gapxsum from './../../../ext/base/gapxsum';\nsetReadOnly( ns, 'gapxsum', gapxsum );\n\n/**\n* @name gapxsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumkbn}\n*/\nimport gapxsumkbn from './../../../ext/base/gapxsumkbn';\nsetReadOnly( ns, 'gapxsumkbn', gapxsumkbn );\n\n/**\n* @name gapxsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumkbn2}\n*/\nimport gapxsumkbn2 from './../../../ext/base/gapxsumkbn2';\nsetReadOnly( ns, 'gapxsumkbn2', gapxsumkbn2 );\n\n/**\n* @name gapxsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumors}\n*/\nimport gapxsumors from './../../../ext/base/gapxsumors';\nsetReadOnly( ns, 'gapxsumors', gapxsumors );\n\n/**\n* @name gapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumpw}\n*/\nimport gapxsumpw from './../../../ext/base/gapxsumpw';\nsetReadOnly( ns, 'gapxsumpw', gapxsumpw );\n\n/**\n* @name gasumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gasumpw}\n*/\nimport gasumpw from './../../../ext/base/gasumpw';\nsetReadOnly( ns, 'gasumpw', gasumpw );\n\n/**\n* @name gcusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusum}\n*/\nimport gcusum from './../../../ext/base/gcusum';\nsetReadOnly( ns, 'gcusum', gcusum );\n\n/**\n* @name gcusumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumkbn}\n*/\nimport gcusumkbn from './../../../ext/base/gcusumkbn';\nsetReadOnly( ns, 'gcusumkbn', gcusumkbn );\n\n/**\n* @name gcusumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumkbn2}\n*/\nimport gcusumkbn2 from './../../../ext/base/gcusumkbn2';\nsetReadOnly( ns, 'gcusumkbn2', gcusumkbn2 );\n\n/**\n* @name gcusumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumors}\n*/\nimport gcusumors from './../../../ext/base/gcusumors';\nsetReadOnly( ns, 'gcusumors', gcusumors );\n\n/**\n* @name gcusumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumpw}\n*/\nimport gcusumpw from './../../../ext/base/gcusumpw';\nsetReadOnly( ns, 'gcusumpw', gcusumpw );\n\n/**\n* @name gfill\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gfill}\n*/\nimport gfill from './../../../ext/base/gfill';\nsetReadOnly( ns, 'gfill', gfill );\n\n/**\n* @name gfillBy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gfill-by}\n*/\nimport gfillBy from './../../../ext/base/gfill-by';\nsetReadOnly( ns, 'gfillBy', gfillBy );\n\n/**\n* @name gnannsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnannsumkbn}\n*/\nimport gnannsumkbn from './../../../ext/base/gnannsumkbn';\nsetReadOnly( ns, 'gnannsumkbn', gnannsumkbn );\n\n/**\n* @name gnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansum}\n*/\nimport gnansum from './../../../ext/base/gnansum';\nsetReadOnly( ns, 'gnansum', gnansum );\n\n/**\n* @name gnansumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumkbn}\n*/\nimport gnansumkbn from './../../../ext/base/gnansumkbn';\nsetReadOnly( ns, 'gnansumkbn', gnansumkbn );\n\n/**\n* @name gnansumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumkbn2}\n*/\nimport gnansumkbn2 from './../../../ext/base/gnansumkbn2';\nsetReadOnly( ns, 'gnansumkbn2', gnansumkbn2 );\n\n/**\n* @name gnansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumors}\n*/\nimport gnansumors from './../../../ext/base/gnansumors';\nsetReadOnly( ns, 'gnansumors', gnansumors );\n\n/**\n* @name gnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumpw}\n*/\nimport gnansumpw from './../../../ext/base/gnansumpw';\nsetReadOnly( ns, 'gnansumpw', gnansumpw );\n\n/**\n* @name grev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/grev}\n*/\nimport grev from './../../../ext/base/grev';\nsetReadOnly( ns, 'grev', grev );\n\n/**\n* @name gsort2hp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsort2hp}\n*/\nimport gsort2hp from './../../../ext/base/gsort2hp';\nsetReadOnly( ns, 'gsort2hp', gsort2hp );\n\n/**\n* @name gsort2ins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsort2ins}\n*/\nimport gsort2ins from './../../../ext/base/gsort2ins';\nsetReadOnly( ns, 'gsort2ins', gsort2ins );\n\n/**\n* @name gsort2sh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsort2sh}\n*/\nimport gsort2sh from './../../../ext/base/gsort2sh';\nsetReadOnly( ns, 'gsort2sh', gsort2sh );\n\n/**\n* @name gsorthp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsorthp}\n*/\nimport gsorthp from './../../../ext/base/gsorthp';\nsetReadOnly( ns, 'gsorthp', gsorthp );\n\n/**\n* @name gsortins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsortins}\n*/\nimport gsortins from './../../../ext/base/gsortins';\nsetReadOnly( ns, 'gsortins', gsortins );\n\n/**\n* @name gsortsh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsortsh}\n*/\nimport gsortsh from './../../../ext/base/gsortsh';\nsetReadOnly( ns, 'gsortsh', gsortsh );\n\n/**\n* @name gsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsum}\n*/\nimport gsum from './../../../ext/base/gsum';\nsetReadOnly( ns, 'gsum', gsum );\n\n/**\n* @name gsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumkbn}\n*/\nimport gsumkbn from './../../../ext/base/gsumkbn';\nsetReadOnly( ns, 'gsumkbn', gsumkbn );\n\n/**\n* @name gsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumkbn2}\n*/\nimport gsumkbn2 from './../../../ext/base/gsumkbn2';\nsetReadOnly( ns, 'gsumkbn2', gsumkbn2 );\n\n/**\n* @name gsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumors}\n*/\nimport gsumors from './../../../ext/base/gsumors';\nsetReadOnly( ns, 'gsumors', gsumors );\n\n/**\n* @name gsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumpw}\n*/\nimport gsumpw from './../../../ext/base/gsumpw';\nsetReadOnly( ns, 'gsumpw', gsumpw );\n\n/**\n* @name sapx\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapx}\n*/\nimport sapx from './../../../ext/base/sapx';\nsetReadOnly( ns, 'sapx', sapx );\n\n/**\n* @name sapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsum}\n*/\nimport sapxsum from './../../../ext/base/sapxsum';\nsetReadOnly( ns, 'sapxsum', sapxsum );\n\n/**\n* @name sapxsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumkbn}\n*/\nimport sapxsumkbn from './../../../ext/base/sapxsumkbn';\nsetReadOnly( ns, 'sapxsumkbn', sapxsumkbn );\n\n/**\n* @name sapxsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumkbn2}\n*/\nimport sapxsumkbn2 from './../../../ext/base/sapxsumkbn2';\nsetReadOnly( ns, 'sapxsumkbn2', sapxsumkbn2 );\n\n/**\n* @name sapxsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumors}\n*/\nimport sapxsumors from './../../../ext/base/sapxsumors';\nsetReadOnly( ns, 'sapxsumors', sapxsumors );\n\n/**\n* @name sapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumpw}\n*/\nimport sapxsumpw from './../../../ext/base/sapxsumpw';\nsetReadOnly( ns, 'sapxsumpw', sapxsumpw );\n\n/**\n* @name sasumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sasumpw}\n*/\nimport sasumpw from './../../../ext/base/sasumpw';\nsetReadOnly( ns, 'sasumpw', sasumpw );\n\n/**\n* @name scusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusum}\n*/\nimport scusum from './../../../ext/base/scusum';\nsetReadOnly( ns, 'scusum', scusum );\n\n/**\n* @name scusumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumkbn}\n*/\nimport scusumkbn from './../../../ext/base/scusumkbn';\nsetReadOnly( ns, 'scusumkbn', scusumkbn );\n\n/**\n* @name scusumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumkbn2}\n*/\nimport scusumkbn2 from './../../../ext/base/scusumkbn2';\nsetReadOnly( ns, 'scusumkbn2', scusumkbn2 );\n\n/**\n* @name scusumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumors}\n*/\nimport scusumors from './../../../ext/base/scusumors';\nsetReadOnly( ns, 'scusumors', scusumors );\n\n/**\n* @name scusumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumpw}\n*/\nimport scusumpw from './../../../ext/base/scusumpw';\nsetReadOnly( ns, 'scusumpw', scusumpw );\n\n/**\n* @name sdsapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsapxsum}\n*/\nimport sdsapxsum from './../../../ext/base/sdsapxsum';\nsetReadOnly( ns, 'sdsapxsum', sdsapxsum );\n\n/**\n* @name sdsapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsapxsumpw}\n*/\nimport sdsapxsumpw from './../../../ext/base/sdsapxsumpw';\nsetReadOnly( ns, 'sdsapxsumpw', sdsapxsumpw );\n\n/**\n* @name sdsnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsnansum}\n*/\nimport sdsnansum from './../../../ext/base/sdsnansum';\nsetReadOnly( ns, 'sdsnansum', sdsnansum );\n\n/**\n* @name sdsnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsnansumpw}\n*/\nimport sdsnansumpw from './../../../ext/base/sdsnansumpw';\nsetReadOnly( ns, 'sdsnansumpw', sdsnansumpw );\n\n/**\n* @name sdssum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdssum}\n*/\nimport sdssum from './../../../ext/base/sdssum';\nsetReadOnly( ns, 'sdssum', sdssum );\n\n/**\n* @name sdssumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdssumpw}\n*/\nimport sdssumpw from './../../../ext/base/sdssumpw';\nsetReadOnly( ns, 'sdssumpw', sdssumpw );\n\n/**\n* @name sfill\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sfill}\n*/\nimport sfill from './../../../ext/base/sfill';\nsetReadOnly( ns, 'sfill', sfill );\n\n/**\n* @name snansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansum}\n*/\nimport snansum from './../../../ext/base/snansum';\nsetReadOnly( ns, 'snansum', snansum );\n\n/**\n* @name snansumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumkbn}\n*/\nimport snansumkbn from './../../../ext/base/snansumkbn';\nsetReadOnly( ns, 'snansumkbn', snansumkbn );\n\n/**\n* @name snansumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumkbn2}\n*/\nimport snansumkbn2 from './../../../ext/base/snansumkbn2';\nsetReadOnly( ns, 'snansumkbn2', snansumkbn2 );\n\n/**\n* @name snansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumors}\n*/\nimport snansumors from './../../../ext/base/snansumors';\nsetReadOnly( ns, 'snansumors', snansumors );\n\n/**\n* @name snansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumpw}\n*/\nimport snansumpw from './../../../ext/base/snansumpw';\nsetReadOnly( ns, 'snansumpw', snansumpw );\n\n/**\n* @name srev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/srev}\n*/\nimport srev from './../../../ext/base/srev';\nsetReadOnly( ns, 'srev', srev );\n\n/**\n* @name ssort2hp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssort2hp}\n*/\nimport ssort2hp from './../../../ext/base/ssort2hp';\nsetReadOnly( ns, 'ssort2hp', ssort2hp );\n\n/**\n* @name ssort2ins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssort2ins}\n*/\nimport ssort2ins from './../../../ext/base/ssort2ins';\nsetReadOnly( ns, 'ssort2ins', ssort2ins );\n\n/**\n* @name ssort2sh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssort2sh}\n*/\nimport ssort2sh from './../../../ext/base/ssort2sh';\nsetReadOnly( ns, 'ssort2sh', ssort2sh );\n\n/**\n* @name ssorthp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssorthp}\n*/\nimport ssorthp from './../../../ext/base/ssorthp';\nsetReadOnly( ns, 'ssorthp', ssorthp );\n\n/**\n* @name ssortins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssortins}\n*/\nimport ssortins from './../../../ext/base/ssortins';\nsetReadOnly( ns, 'ssortins', ssortins );\n\n/**\n* @name ssortsh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssortsh}\n*/\nimport ssortsh from './../../../ext/base/ssortsh';\nsetReadOnly( ns, 'ssortsh', ssortsh );\n\n/**\n* @name ssum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssum}\n*/\nimport ssum from './../../../ext/base/ssum';\nsetReadOnly( ns, 'ssum', ssum );\n\n/**\n* @name ssumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumkbn}\n*/\nimport ssumkbn from './../../../ext/base/ssumkbn';\nsetReadOnly( ns, 'ssumkbn', ssumkbn );\n\n/**\n* @name ssumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumkbn2}\n*/\nimport ssumkbn2 from './../../../ext/base/ssumkbn2';\nsetReadOnly( ns, 'ssumkbn2', ssumkbn2 );\n\n/**\n* @name ssumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumors}\n*/\nimport ssumors from './../../../ext/base/ssumors';\nsetReadOnly( ns, 'ssumors', ssumors );\n\n/**\n* @name ssumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumpw}\n*/\nimport ssumpw from './../../../ext/base/ssumpw';\nsetReadOnly( ns, 'ssumpw', ssumpw );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var out = [ 0.0, 0 ];\n*\n* var v = gnannsumkbn( x.length, x, 1, out, 1 );\n* // returns [ 1.0, 3 ]\n*/\nfunction gnannsumkbn( N, x, strideX, out, strideOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum + c;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default gnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/ext/base}\n*/\nimport base from './../../ext/base';\nsetReadOnly( ns, 'base', base );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isCollection from '@stdlib/assert/is-collection';\nimport isFloat64Array from '@stdlib/assert/is-float64array';\nimport isFloat32Array from '@stdlib/assert/is-float32array';\nimport format from '@stdlib/string/format';\nimport { ndarray as ddot } from './../../base/ddot';\nimport { ndarray as sdot } from './../../base/sdot';\nimport { ndarray as dot } from './../../base/gdot';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of vectors `x` and `y`.\n*\n* ## Notes\n*\n* -   In general, for best performance, especially for large vectors, provide 1-dimensional `ndarrays` whose underlying data type is either `float64` or `float32`.\n*\n* @param {(Collection|VectorLike)} x - first input array\n* @param {(Collection|VectorLike)} y - second input array\n* @throws {TypeError} first argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {TypeError} second argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {RangeError} input arrays must be the same length\n* @returns {number} dot product\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* var z = gdot( x, y );\n* // returns -5.0\n*/\nfunction gdot( x, y ) {\n\tvar isxf64;\n\tvar isxf32;\n\tvar isyf64;\n\tvar isyf32;\n\tvar isxa;\n\tvar isxv;\n\tvar isya;\n\tvar isyv;\n\n\tisxa = isndarrayLike( x );\n\tisya = isndarrayLike( y );\n\tisxv = isxa && x.ndims === 1 && x.strides.length === 1; // is ndarray-like vector?\n\tisyv = isya && y.ndims === 1 && y.strides.length === 1; // is ndarray-like vector?\n\tif ( isxv ) {\n\t\tisxf64 = isFloat64Array( x.data );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x.data );\n\t} else if ( isxa === false && isCollection( x ) ) {\n\t\tisxf64 = isFloat64Array( x );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( isyv ) {\n\t\tisyf64 = isFloat64Array( y.data );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y.data );\n\t} else if ( isya === false && isCollection( y ) ) {\n\t\tisyf64 = isFloat64Array( y );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', y ) );\n\t}\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( format( 'invalid argument. Arrays must be the same length. First argument length: `%u`. Second argument length: `%u`.', x.length, y.length ) );\n\t}\n\tif ( isxv && isyv ) {\n\t\tif ( isxf64 && isyf64 ) {\n\t\t\treturn ddot( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t}\n\t\tif ( isxf32 && isyf32 ) {\n\t\t\treturn sdot( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t}\n\t\treturn dot( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t}\n\tif ( isxv ) {\n\t\treturn dot( x.length, x.data, x.strides[ 0 ], x.offset, y, 1, 0 );\n\t}\n\tif ( isyv ) {\n\t\treturn dot( x.length, x, 1, 0, y.data, y.strides[ 0 ], y.offset );\n\t}\n\treturn dot( x.length, x, 1, 0, y, 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default gdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isCollection from '@stdlib/assert/is-collection';\nimport isFloat64Array from '@stdlib/assert/is-float64array';\nimport isFloat32Array from '@stdlib/assert/is-float32array';\nimport format from '@stdlib/string/format';\nimport { ndarray as dswap } from './../../base/dswap';\nimport { ndarray as sswap } from './../../base/sswap';\nimport { ndarray as swap } from './../../base/gswap';\n\n\n// MAIN //\n\n/**\n* Interchanges two vectors.\n*\n* ## Notes\n*\n* -   In general, for best performance, especially for large vectors, provide 1-dimensional `ndarrays` whose underlying data type is either `float64` or `float32`.\n*\n* @param {(Collection|VectorLike)} x - first input array\n* @param {(Collection|VectorLike)} y - second input array\n* @throws {TypeError} first argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {TypeError} second argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {RangeError} input arrays must be the same length\n* @returns {(Collection|VectorLike)} `y`\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* gswap( x, y );\n* // x => [ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n* // y => [ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nfunction gswap( x, y ) {\n\tvar isxf64;\n\tvar isxf32;\n\tvar isyf64;\n\tvar isyf32;\n\tvar isxa;\n\tvar isxv;\n\tvar isya;\n\tvar isyv;\n\n\tisxa = isndarrayLike( x );\n\tisya = isndarrayLike( y );\n\tisxv = isxa && x.ndims === 1 && x.strides.length === 1; // is ndarray-like vector?\n\tisyv = isya && y.ndims === 1 && y.strides.length === 1; // is ndarray-like vector?\n\tif ( isxv ) {\n\t\tisxf64 = isFloat64Array( x.data );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x.data );\n\t} else if ( isxa === false && isCollection( x ) ) {\n\t\tisxf64 = isFloat64Array( x );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( isyv ) {\n\t\tisyf64 = isFloat64Array( y.data );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y.data );\n\t} else if ( isya === false && isCollection( y ) ) {\n\t\tisyf64 = isFloat64Array( y );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', y ) );\n\t}\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( format( 'invalid argument. Arrays must be the same length. First argument length: `%u`. Second argument length: `%u`.', x.length, y.length ) );\n\t}\n\tif ( isxv && isyv ) {\n\t\tif ( isxf64 && isyf64 ) {\n\t\t\tdswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\tif ( isxf32 && isyf32 ) {\n\t\t\tsswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\tswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\treturn y;\n\t}\n\tif ( isxv ) {\n\t\tswap( x.length, x.data, x.strides[ 0 ], x.offset, y, 1, 0 );\n\t\treturn y;\n\t}\n\tif ( isyv ) {\n\t\tswap( x.length, x, 1, 0, y.data, y.strides[ 0 ], y.offset );\n\t\treturn y;\n\t}\n\tswap( x.length, x, 1, 0, y, 1, 0 );\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat32ndarrayLike from '@stdlib/assert/is-float32ndarray-like';\nimport { isPrimitive as isNegativeInteger } from '@stdlib/assert/is-negative-integer';\nimport min from '@stdlib/math/base/special/fast/min';\nimport without from '@stdlib/array/base/without';\nimport numel from '@stdlib/ndarray/base/numel';\nimport normalizeIndex from '@stdlib/ndarray/base/normalize-index';\nimport maybeBroadcastArrays from '@stdlib/ndarray/base/maybe-broadcast-arrays';\nimport ndarraylike2ndarray from '@stdlib/ndarray/base/ndarraylike2ndarray';\nimport nditerStacks from '@stdlib/ndarray/iter/stacks';\nimport empty from '@stdlib/ndarray/empty';\nimport { ndarray as base } from './../../base/sdot';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two single-precision floating-point vectors.\n*\n* @param {ndarrayLike} x - first input array\n* @param {ndarrayLike} y - second input array\n* @param {NegativeInteger} [dim=-1] - dimension for which to compute the dot product\n* @throws {TypeError} first argument must be a ndarray containing single-precision floating-point numbers\n* @throws {TypeError} first argument must have at least one dimension\n* @throws {TypeError} second argument must be a ndarray containing single-precision floating-point numbers\n* @throws {TypeError} second argument must have at least one dimension\n* @throws {TypeError} third argument must be a negative integer\n* @throws {Error} input arrays must be broadcast compatible\n* @throws {RangeError} the size of the contracted dimension must be the same for both input arrays\n* @throws {RangeError} third argument is out-of-bounds\n* @returns {ndarray} ndarray containing the dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* var z = sdot( x, y );\n* // returns <ndarray>\n*\n* var v = z.get();\n* // returns -5.0\n*/\nfunction sdot( x, y ) {\n\tvar dim;\n\tvar xsh;\n\tvar ysh;\n\tvar osh;\n\tvar xit;\n\tvar yit;\n\tvar out;\n\tvar tmp;\n\tvar xc;\n\tvar yc;\n\tvar vx;\n\tvar vy;\n\tvar dm;\n\tvar S;\n\tvar v;\n\tvar i;\n\n\tif ( !isFloat32ndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray containing single-precision floating-point numbers. Value: `%s`.', x ) );\n\t}\n\tif ( !isFloat32ndarrayLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray containing single-precision floating-point numbers. Value: `%s`.', y ) );\n\t}\n\t// Convert the input arrays to \"base\" ndarrays:\n\txc = ndarraylike2ndarray( x );\n\tyc = ndarraylike2ndarray( y );\n\n\t// Resolve the input array shapes:\n\txsh = xc.shape;\n\tysh = yc.shape;\n\n\t// Validate that we've been provided non-zero-dimensional arrays...\n\tif ( xsh.length < 1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have at least one dimension.' ) );\n\t}\n\tif ( ysh.length < 1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have at least one dimension.' ) );\n\t}\n\t// Validate that the dimension argument is a negative integer...\n\tif ( arguments.length > 2 ) {\n\t\tdim = arguments[ 2 ];\n\t\tif ( !isNegativeInteger( dim ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a negative integer. Value: `%s`.', dim ) );\n\t\t}\n\t} else {\n\t\tdim = -1;\n\t}\n\t// Validate that a provided dimension index is within bounds **before** broadcasting...\n\tdm = min( xsh.length, ysh.length ) - 1;\n\tdim = normalizeIndex( dim, dm );\n\tif ( dim === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a value on the interval: [%d,%d]. Value: `%d`.', -dm, -1, arguments[ 2 ] ) );\n\t}\n\t// Validate that the contracted dimension size is the same for both input arrays...\n\tS = xsh[ dim ];\n\tif ( ysh[ dim ] !== S ) {\n\t\tthrow new RangeError( format( 'invalid argument. The size of the contracted dimension must be the same for both input ndarrays. Dim(%s,%d) = %d. Dim(%s,%d) = %d.', 'x', dim, S, 'y', dim, ysh[ dim ] ) );\n\t}\n\t// Broadcast the input arrays to a common shape....\n\ttry {\n\t\ttmp = maybeBroadcastArrays( [ xc, yc ] );\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tthrow new Error( format( 'invalid arguments. Input ndarrays must be broadcast compatible. Shape(%s) = (%s). Shape(%s) = (%s).', 'x', xsh.join( ',' ), 'y', ysh.join( ',' ) ) );\n\t}\n\txc = tmp[ 0 ];\n\tyc = tmp[ 1 ];\n\n\t// Resolve the output array shape by excluding the contracted dimension:\n\tosh = without( xc.shape, dim );\n\n\t// Allocate an empty output array:\n\tout = empty( osh, {\n\t\t'dtype': xc.dtype,\n\t\t'order': xc.order\n\t});\n\n\t// If we are only provided one-dimensional input arrays, we can skip iterating over stacks...\n\tif ( osh.length === 0 ) {\n\t\tv = base( S, xc.data, xc.strides[0], xc.offset, yc.data, yc.strides[0], yc.offset ); // eslint-disable-line max-len\n\t\tout.iset( v );\n\t\treturn out;\n\t}\n\t// Create iterators for iterating over stacks of vectors:\n\txit = nditerStacks( xc, [ dim ] );\n\tyit = nditerStacks( yc, [ dim ] );\n\n\t// Compute the dot product for each pair of vectors...\n\tfor ( i = 0; i < numel( osh ); i++ ) {\n\t\tvx = xit.next().value;\n\t\tvy = yit.next().value;\n\t\tv = base( S, vx.data, vx.strides[0], vx.offset, vy.data, vy.strides[0], vy.offset ); // eslint-disable-line max-len\n\t\tout.iset( i, v );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default sdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as base } from './../../base/sswap';\nimport factory from './../../tools/swap-factory';\n\n\n// MAIN //\n\n/**\n* Interchanges two single-precision floating-point vectors.\n*\n* @name sswap\n* @type {Function}\n* @param {ndarrayLike} x - first input array\n* @param {ndarrayLike} y - second input array\n* @param {NegativeInteger} [dim=-1] - dimension along which to interchange elements\n* @throws {TypeError} first argument must be a ndarray containing single-precision floating-point numbers\n* @throws {TypeError} first argument must have at least one dimension\n* @throws {TypeError} second argument must be a ndarray containing single-precision floating-point numbers\n* @throws {TypeError} second argument must have at least one dimension\n* @throws {Error} both input arrays must have the same shape\n* @throws {RangeError} third argument is out-of-bounds\n* @throws {Error} cannot write to read-only array\n* @returns {ndarrayLike} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* sswap( x, y );\n*\n* var xbuf = x.data;\n* // returns <Float32Array>[ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n*\n* var ybuf = y.data;\n* // returns <Float32Array>[ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nvar sswap = factory( base, 'float32' );\n\n\n// EXPORTS //\n\nexport default sswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/base}\n*/\nimport base from './../base';\nsetReadOnly( ns, 'base', base );\n\n/**\n* @name ddot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ddot}\n*/\nimport ddot from './../ddot';\nsetReadOnly( ns, 'ddot', ddot );\n\n/**\n* @name dswap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/dswap}\n*/\nimport dswap from './../dswap';\nsetReadOnly( ns, 'dswap', dswap );\n\n/**\n* @name ext\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/ext}\n*/\nimport ext from './../ext';\nsetReadOnly( ns, 'ext', ext );\n\n/**\n* @name gdot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/gdot}\n*/\nimport gdot from './../gdot';\nsetReadOnly( ns, 'gdot', gdot );\n\n/**\n* @name gswap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/gswap}\n*/\nimport gswap from './../gswap';\nsetReadOnly( ns, 'gswap', gswap );\n\n/**\n* @name sdot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/sdot}\n*/\nimport sdot from './../sdot';\nsetReadOnly( ns, 'sdot', sdot );\n\n/**\n* @name sswap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/sswap}\n*/\nimport sswap from './../sswap';\nsetReadOnly( ns, 'sswap', sswap );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["diagonalTypes","DATA","slice","enumerated","unit","setReadOnly","main","enumeration","isDiagonalType","contains","layouts","isLayout","matrixTriangles","upper","lower","isMatrixTriangle","operationSides","left","right","isOperationSide","transpose","isTransposeOperation","ops","ns","scabs1","c","absf","realf","imagf","caxpy","N","ca","cx","strideX","offsetX","cy","strideY","offsetY","ix","iy","i","set","caddf","cmulf","get","ndarray","stride2offset","tmp","tryRequire","join","require$$0","caxpy$1","isError","ccopy","x","y","viewX","viewY","sx","sy","reinterpret","cscal","csrot","s","f32","cswap","j","dasum","stride","offset","sum","abs","M","daxpy","alpha","m","dcabs1","z","real","imag","dcopy","ddot","dot","hash","objectInverse","duplicates","enum2str","value","v","ENUM","str2enum","diagonal","tsml","tbig","ssml","sbig","dnrm2","notbig","sumsq","abig","amed","asml","ymax","ymin","scl","ax","abs2","FLOAT64_MAX","sqrt","drot","drotg","a","b","out","scale","sign","aa","ab","r","copysign","fcn","Float64Array","drotm","param","dflag","dh11","dh12","dh21","dh22","w","assign","dscal","dsdot","dfill","dspmv","order","uplo","AP","offsetAP","beta","temp1","temp2","jx","jy","kk","kx","ky","k","TypeError","format","RangeError","base","dspmv$1","dswap","dsymv","A","LDA","jmin","jmax","ox","oy","max","dsymv$1","dsyr","strideA1","strideA2","offsetA","isrm","ix0","ix1","sa0","sa1","i0","i1","oa","isRowMajor","sa2","dsyr$1","dsyr2","tmp1","tmp2","iy0","iy1","dsyr2$1","dtrmv","trans","diag","nonunit","isDiagonal","dtrmv$1","dznrm2","zx","dznrm2$1","gasum","gaxpy","gcopy","xbuf","ybuf","data","accessors","arraylike2object","accessorProtocol","gdot","gnrm2","ssq","pow","gscal","gswap","idamax","dmax","idx","isamax","smax","layout","operation","sasum","saxpy","float64ToFloat32","scasum","stemp","scasum$1","scnrm2","abs2f","FLOAT32_MAX","sqrtf","scnrm2$1","scopy","sdot","sdsdot","scalar","sfill","sscal","sgemv","xlen","ylen","isMatrixTranspose","sgemv$1","snrm2","srot","srotg","copysignf","Float32Array","srotm","sflag","sh11","sh12","sh21","sh22","sspmv","sspmv$1","sswap","ssymv","ssymv$1","ssyr","ssyr$1","ssyr2","ssyr2$1","strmv","strmv$1","zaxpy","za","zy","cadd","cmul","zaxpy$1","zcopy","zdrot","zscal","zswap","blas","dim","xsh","ysh","osh","xit","yit","xc","yc","vx","vy","dm","S","isFloat64ndarrayLike","ndarraylike2ndarray","shape","length","arguments","isNegativeInteger","min","normalizeIndex","maybeBroadcastArrays","err","Error","without","empty","dtype","strides","iset","nditerStacks","numel","next","factory","isValid","isFunction","isDataType","isndarrayLikeWithDataType","isndarrayLike","isReadOnly","hasEqualValues","assert","diagonalTypeEnum2Str","t","diagonalTypeStr2Enum","layoutEnum2Str","layoutStr2Enum","matrixTriangleEnum2Str","matrixTriangleStr2Enum","operationSideEnum2Str","operationSideStr2Enum","transposeOperationEnum2Str","transposeOperationStr2Enum","transposeOperations","dapx","dapxsumkbn","dapxsum","dapxsumkbn2","ccs","cs","cc","dapxsumors","BLOCKSIZE","dapxsumpw","s0","s1","s2","s3","s4","s5","s6","s7","n","floor","dasumpw","dcusumkbn","dcusum","dcusumkbn2","dcusumors","dcusumpw","cusum","dnanasumors","isnan","dnanasum","dnannsumkbn","strideOut","io","offsetOut","dnannsum","dnannsumkbn2","dnannsumors","sumpw","dnannsumpw","dnansumkbn","dnansum","dnansumkbn2","dnansumors","dnansumpw","drev","dsapxsumpw","dsapxsum","dsnannsumors","dsnansumpw","isnanf","dsnansum","dsnansumors","dsort2hp","parent","child","v1","v2","tx","ty","isPositiveZero","dsort2ins","flg","fx","lx","fy","ly","ux","isNegativeZero","NGAPS","GAPS","dsort2sh","gap","dsorthp","dsortins","u","dsortsh","dssumpw","dssum","dssumors","dsumkbn","dsum","dsumkbn2","dsumors","dsumpw","gapx","gapxsumkbn","gapxsum","gapxsumkbn2","gapxsumors","gapxsumpw","gasumpw","gcusumkbn","gcusum","gcusumkbn2","gcusumors","gcusumpw","gfill","o","gfillBy","clbk","thisArg","call","gnansumkbn","gnansum","gnansumkbn2","gnansumors","gnansumpw","grev","gsort2hp","gsort2ins","gsort2sh","gsorthp","gsortins","gsortsh","gsumkbn","gsum","gsumkbn2","gsumors","gsumpw","sapx","sapxsumkbn","sapxsum","sapxsumkbn2","sapxsumors","sapxsumpw","sasumpw","scusumkbn","scusum","scusumkbn2","scusumors","scusumpw","sdsapxsumpw","sdsapxsum","sdsnansumpw","sdsnansum","sdssumpw","sdssum","snansumkbn","snansum","snansumkbn2","snansumors","snansumpw","srev","ssort2hp","isPositiveZerof","ssort2ins","isNegativeZerof","ssort2sh","ssorthp","ssortins","ssortsh","ssumkbn","ssum","ssumkbn2","ssumors","ssumpw","isxf64","isxf32","isyf64","isyf32","isxa","isxv","isya","isyv","ndims","isFloat64Array","isFloat32Array","isCollection","swap","isFloat32ndarrayLike","ext"],"mappings":";;syMAoCA,SAASA,KACR,OAAOC,GAAKC,OACb,CCFA,SAASC,KAER,MAAO,CAEN,WAAY,IAGZC,KAAQ,IAEV,CCJAC,EAAAC,GAAA,OAAAC,ICKA,IAAIC,GAAiBC,EAAUT,sCCV/B,SAASU,KACR,OAAOT,GAAKC,OACb,CCFA,SAASC,KAER,MAAO,CAEN,YAAa,IAGb,eAAgB,IAElB,CCJAE,EAAAC,GAAA,OAAAC,ICKA,IAAII,GAAWF,EAAUC,2BCVzB,SAASE,KACR,OAAOX,GAAKC,OACb,CCFA,SAASC,KAER,MAAO,CAENU,MAAS,IAGTC,MAAS,IAEX,CCJAT,EAAAC,GAAA,OAAAC,ICKA,IAAIQ,GAAmBN,EAAUG,0BCVjC,SAASI,KACR,OAAOf,GAAKC,OACb,CCFA,SAASC,KAER,MAAO,CAENc,KAAQ,IAGRC,MAAS,IAEX,CCJAb,EAAAC,GAAA,OAAAC,ICKA,IAAIY,GAAkBV,EAAUO,4DCVhC,SAASN,KACR,OAAOT,GAAKC,OACb,CCFA,SAASC,KAER,MAAO,CAEN,eAAgB,IAGhBiB,UAAa,IAGb,sBAAuB,IAEzB,CCPAf,EAAAC,GAAA,OAAAC,ICKA,IAAIc,GAAuBZ,EAAUa,MCVrCC,GAAA,CAAA,unBAUAlB,EAAAkB,GAAA,iBAAAf,IAUAH,EAAAkB,GAAA,WAAAZ,IAUAN,EAAAkB,GAAA,mBAAAR,IAUAV,EAAAkB,GAAA,kBAAAJ,IAUAd,EAAAkB,GAAA,uBAAAF,m5DC7CA,SAASG,GAAQC,GAChB,OAAOC,EAAMC,EAAOF,IAAQC,EAAME,EAAOH,GAC1C,CCoBA,SAASI,GAAOC,EAAGC,EAAIC,EAAIC,EAASC,EAASC,EAAIC,EAASC,GACzD,IAAIC,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOK,EAER,GAAsB,IAAjBX,GAAQO,GACZ,OAAOI,EAIR,IAFAG,EAAKJ,EACLK,EAAKF,EACCG,EAAI,EAAGA,EAAIV,EAAGU,IACnBL,EAAGM,IAAKC,EAAOC,EAAOZ,EAAIC,EAAGY,IAAKN,IAAQH,EAAGS,IAAKL,IAAQA,GAC1DD,GAAML,EACNM,GAAMH,EAEP,OAAOD,CACR,CCtBA,SAASN,GAAOC,EAAGC,EAAIC,EAAIC,EAASE,EAAIC,GAGvC,OAAOS,GAASf,EAAGC,EAAIC,EAAIC,EAFlBa,EAAehB,EAAGG,GAEaE,EAAIC,EADnCU,EAAehB,EAAGM,GAE5B,CCnCA/B,EAAAwB,GAAA,UAAAgB,IC2CA,IASAE,GAAAC,GAAAC,EATAC,GAAAD,MCxEe,6CDiFf,gBAUAE,GATAC,EAAAL,IACAzC,GAEAyC,GE7BA,SAASM,GAAOvB,EAAGwB,EAAGrB,EAASsB,EAAGnB,GACjC,IAAIoB,EACAC,EACAC,EACAC,EACArB,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAIR,GAFAC,EAAQI,EAAaN,EAAG,GACxBG,EAAQG,EAAaL,EAAG,GACP,IAAZtB,GAA6B,IAAZG,EAAgB,CACrC,IAAMI,EAAI,EAAGA,EAAM,EAAFV,EAAKU,GAAK,EAC1BiB,EAAOjB,GAAMgB,EAAOhB,GACpBiB,EAAOjB,EAAE,GAAMgB,EAAOhB,EAAE,GAEzB,OAAOe,CACP,CAaD,IAXCjB,EADIL,EAAU,EACT,GAAK,EAAEH,GAAKG,EAEZ,EAGLM,EADIH,EAAU,EACT,GAAK,EAAEN,GAAKM,EAEZ,EAENsB,EAAe,EAAVzB,EACL0B,EAAe,EAAVvB,EACCI,EAAI,EAAGA,EAAIV,EAAGU,IACnBiB,EAAOlB,GAAOiB,EAAOlB,GACrBmB,EAAOlB,EAAG,GAAMiB,EAAOlB,EAAG,GAC1BA,GAAMoB,EACNnB,GAAMoB,EAEP,OAAOJ,CACR,CCvCA,SAASM,GAAO/B,EAAGC,EAAIC,EAAIC,EAASC,GACnC,IAAII,EACAE,EAEJ,GAAKV,GAAK,EACT,OAAOE,EAGR,IADAM,EAAKJ,EACCM,EAAI,EAAGA,EAAIV,EAAGU,IACnBR,EAAGS,IAAKE,EAAOZ,EAAIC,EAAGY,IAAKN,IAAQA,GACnCA,GAAML,EAEP,OAAOD,CACR,CCbA,SAAS6B,GAAO/B,EAAGC,EAAIC,EAAIC,GAE1B,OAAOY,GAASf,EAAGC,EAAIC,EAAIC,EADlBa,EAAehB,EAAGG,GAE5B,CCUA,SAAS6B,GAAOhC,EAAGE,EAAIC,EAASC,EAASC,EAAIC,EAASC,EAASZ,EAAGsC,GACjE,IAAIP,EACAC,EACAV,EACAW,EACAC,EACArB,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOK,EAUR,IARAqB,EAAQI,EAAa5B,EAAI,GACzByB,EAAQG,EAAazB,EAAI,GACzBV,EAAIuC,EAAKvC,GACTsC,EAAIC,EAAKD,GACTL,EAAe,EAAVzB,EACL0B,EAAe,EAAVvB,EACLE,EAAe,EAAVJ,EACLK,EAAe,EAAVF,EACCG,EAAI,EAAGA,EAAIV,EAAGU,IACnBO,EAAMiB,EAAKvC,EAAE+B,EAAOlB,IAAS0B,EAAKD,EAAEN,EAAOlB,IAC3CkB,EAAOlB,GAAOyB,EAAKvC,EAAEgC,EAAOlB,IAASyB,EAAKD,EAAEP,EAAOlB,IACnDkB,EAAOlB,GAAOS,EAEdA,EAAMiB,EAAKvC,EAAE+B,EAAOlB,EAAG,IAAQ0B,EAAKD,EAAEN,EAAOlB,EAAG,IAChDkB,EAAOlB,EAAG,GAAMyB,EAAKvC,EAAEgC,EAAOlB,EAAG,IAAQyB,EAAKD,EAAEP,EAAOlB,EAAG,IAC1DkB,EAAOlB,EAAG,GAAMS,EAEhBT,GAAMoB,EACNnB,GAAMoB,EAEP,OAAOxB,CACR,CCpCA,SAAS2B,GAAOhC,EAAGE,EAAIC,EAASE,EAAIC,EAASX,EAAGsC,GAG/C,OAAOlB,GAASf,EAAGE,EAAIC,EAFda,EAAehB,EAAGG,GAESE,EAAIC,EAD/BU,EAAehB,EAAGM,GAC0BX,EAAGsC,EACzD,CCPA,SAASE,GAAOnC,EAAGwB,EAAGrB,EAASsB,EAAGnB,GACjC,IAAIoB,EACAC,EACAV,EACAW,EACAC,EACArB,EACAC,EACAC,EACA0B,EAEJ,GAAKpC,GAAK,EACT,OAAOyB,EAIR,GAFAC,EAAQI,EAAaN,EAAG,GACxBG,EAAQG,EAAaL,EAAG,GACP,IAAZtB,GAA6B,IAAZG,EAAgB,CACrC,IAAMI,EAAI,EAAGA,EAAM,EAAFV,EAAKU,GAAK,EAC1BO,EAAMS,EAAOhB,GACbgB,EAAOhB,GAAMiB,EAAOjB,GACpBiB,EAAOjB,GAAMO,EAGbA,EAAMS,EADNU,EAAI1B,EAAI,GAERgB,EAAOU,GAAMT,EAAOS,GACpBT,EAAOS,GAAMnB,EAEd,OAAOQ,CACP,CAaD,IAXCjB,EADIL,EAAU,EACT,GAAK,EAAEH,GAAKG,EAEZ,EAGLM,EADIH,EAAU,EACT,GAAK,EAAEN,GAAKM,EAEZ,EAENsB,EAAe,EAAVzB,EACL0B,EAAe,EAAVvB,EACCI,EAAI,EAAGA,EAAIV,EAAGU,IACnBO,EAAMS,EAAOlB,GACbkB,EAAOlB,GAAOmB,EAAOlB,GACrBkB,EAAOlB,GAAOQ,EAEdA,EAAMS,EAAOlB,EAAG,GAChBkB,EAAOlB,EAAG,GAAMmB,EAAOlB,EAAG,GAC1BkB,EAAOlB,EAAG,GAAMQ,EAEhBT,GAAMoB,EACNnB,GAAMoB,EAEP,OAAOJ,CACR,CC3EA,SAASY,GAAOrC,EAAGwB,EAAGc,EAAQC,GAC7B,IAAIC,EACAhC,EACAE,EAGJ,GADA8B,EAAM,EACDxC,GAAK,EACT,OAAOwC,EAGR,IADAhC,EAAK+B,EACC7B,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,GAAOC,EAAKjB,EAAEhB,IACdA,GAAM8B,EAEP,OAAOE,CACR,CCfA,SAASH,GAAOrC,EAAGwB,EAAGc,GAErB,OAAOvB,GAASf,EAAGwB,EAAGc,EADbtB,EAAehB,EAAGsC,GAE5B,CClBA/D,EAAAgD,GAAA,WC6BA,SAAgBvB,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GACnD,IAAImB,EACAC,EACAC,EACAC,EACArB,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAQR,IANAC,EAAQI,EAAaN,EAAG,GACxBG,EAAQG,EAAaL,EAAG,GACxBG,EAAe,EAAVzB,EACL0B,EAAe,EAAVvB,EACLE,EAAe,EAAVJ,EACLK,EAAe,EAAVF,EACCG,EAAI,EAAGA,EAAIV,EAAGU,IACnBiB,EAAOlB,GAAOiB,EAAOlB,GACrBmB,EAAOlB,EAAG,GAAMiB,EAAOlB,EAAG,GAC1BA,GAAMoB,EACNnB,GAAMoB,EAEP,OAAOJ,CACR,ICtDAlD,EAAAwD,GAAA,UAAAhB,ICAAxC,EAAAyD,GAAA,UAAAjB,ICAAxC,EAAA4D,GAAA,WCsCA,SAAgBnC,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GACnD,IAAImB,EACAC,EACAV,EACAW,EACAC,EACArB,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAQR,IANAC,EAAQI,EAAaN,EAAG,GACxBG,EAAQG,EAAaL,EAAG,GACxBG,EAAe,EAAVzB,EACL0B,EAAe,EAAVvB,EACLE,EAAe,EAAVJ,EACLK,EAAe,EAAVF,EACCG,EAAI,EAAGA,EAAIV,EAAGU,IACnBO,EAAMS,EAAOlB,GACbkB,EAAOlB,GAAOmB,EAAOlB,GACrBkB,EAAOlB,GAAOQ,EAEdA,EAAMS,EAAOlB,EAAG,GAChBkB,EAAOlB,EAAG,GAAMmB,EAAOlB,EAAG,GAC1BkB,EAAOlB,EAAG,GAAMQ,EAEhBT,GAAMoB,EACNnB,GAAMoB,EAEP,OAAOJ,CACR,ICtEAlD,EAAA8D,GAAA,UAAAtB,ICPA,IAAI2B,GAAI,EA4BR,SAASC,GAAO3C,EAAG4C,EAAOpB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC1D,IAAIC,EACAC,EACAoC,EACAnC,EACJ,GAAKV,GAAK,GAAe,IAAV4C,EACd,OAAOnB,EAMR,GAJAjB,EAAKJ,EACLK,EAAKF,EAGY,IAAZJ,GAA6B,IAAZG,EAAgB,CAIrC,IAHAuC,EAAI7C,EAAI0C,IAGC,EACR,IAAMhC,EAAI,EAAGA,EAAImC,EAAGnC,IACnBe,EAAGhB,IAAQmC,EAAQpB,EAAGhB,GACtBA,GAAML,EACNM,GAAMH,EAGR,GAAKN,EAAI0C,GACR,OAAOjB,EAER,IAAMf,EAAImC,EAAGnC,EAAIV,EAAGU,GAAKgC,GACxBjB,EAAGhB,IAAQmC,EAAQpB,EAAGhB,GACtBiB,EAAGhB,EAAG,IAAOmC,EAAQpB,EAAGhB,EAAG,GAC3BiB,EAAGhB,EAAG,IAAOmC,EAAQpB,EAAGhB,EAAG,GAC3BiB,EAAGhB,EAAG,IAAOmC,EAAQpB,EAAGhB,EAAG,GAC3BA,GAAMkC,GACNjC,GAAMiC,GAEP,OAAOjB,CACP,CACD,IAAMf,EAAI,EAAGA,EAAIV,EAAGU,IACnBe,EAAGhB,IAAQmC,EAAQpB,EAAGhB,GACtBA,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CC3CA,SAASkB,GAAO3C,EAAG4C,EAAOpB,EAAGrB,EAASsB,EAAGnB,GAGxC,OAAKN,GAAK,GAAe,IAAV4C,EACPnB,EAIDV,GAASf,EAAG4C,EAAOpB,EAAGrB,EAFxBa,EAAehB,EAAGG,GAEmBsB,EAAGnB,EADxCU,EAAehB,EAAGM,GAExB,CCjBA,SAASwC,GAAQC,GAChB,OAAON,EAAKO,EAAKD,IAAON,EAAKQ,EAAKF,GACnC,CCdAxE,EAAAoE,GAAA,UAAA5B,ICPA,IAAI2B,GAAI,EA0BR,SAASQ,GAAOlD,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GACnD,IAAIC,EACAC,EACAoC,EACAnC,EACJ,GAAKV,GAAK,EACT,OAAOyB,EAMR,GAJAjB,EAAKJ,EACLK,EAAKF,EAGY,IAAZJ,GAA6B,IAAZG,EAAgB,CAIrC,IAHAuC,EAAI7C,EAAI0C,IAGC,EACR,IAAMhC,EAAI,EAAGA,EAAImC,EAAGnC,IACnBe,EAAGhB,GAAOe,EAAGhB,GACbA,GAAML,EACNM,GAAMH,EAGR,GAAKN,EAAI0C,GACR,OAAOjB,EAER,IAAMf,EAAImC,EAAGnC,EAAIV,EAAGU,GAAKgC,GACxBjB,EAAGhB,GAAOe,EAAGhB,GACbiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBA,GAAMkC,GACNjC,GAAMiC,GAEP,OAAOjB,CACP,CACD,IAAMf,EAAI,EAAGA,EAAIV,EAAGU,IACnBe,EAAGhB,GAAOe,EAAGhB,GACbA,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CC/CA,SAASyB,GAAOlD,EAAGwB,EAAGrB,EAASsB,EAAGnB,GAGjC,OAAKN,GAAK,EACFyB,EAIDV,GAASf,EAAGwB,EAAGrB,EAFjBa,EAAehB,EAAGG,GAEYsB,EAAGnB,EADjCU,EAAehB,EAAGM,GAExB,CC3BA/B,EAAA2E,GAAA,UAAAnC,ICPA,IAAI2B,GAAI,EA0BR,SAASS,GAAMnD,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAClD,IAAI6C,EACA5C,EACAC,EACAoC,EACAnC,EAGJ,GADA0C,EAAM,EACDpD,GAAK,EACT,OAAOoD,EAMR,GAJA5C,EAAKJ,EACLK,EAAKF,EAGY,IAAZJ,GAA6B,IAAZG,EAAgB,CAIrC,IAHAuC,EAAI7C,EAAI0C,IAGC,EACR,IAAMhC,EAAI,EAAGA,EAAImC,EAAGnC,IACnB0C,GAAS5B,EAAGhB,GAAOiB,EAAGhB,GACtBD,GAAM,EACNC,GAAM,EAGR,GAAKT,EAAI0C,GACR,OAAOU,EAER,IAAM1C,EAAImC,EAAGnC,EAAIV,EAAGU,GAAKgC,GACxBU,GAAS5B,EAAGhB,GAAOiB,EAAGhB,GAAWe,EAAGhB,EAAG,GAAMiB,EAAGhB,EAAG,GAAUe,EAAGhB,EAAG,GAAMiB,EAAGhB,EAAG,GAAUe,EAAGhB,EAAG,GAAMiB,EAAGhB,EAAG,GAAUe,EAAGhB,EAAG,GAAMiB,EAAGhB,EAAG,GACvID,GAAMkC,GACNjC,GAAMiC,GAEP,OAAOU,CACP,CACD,IAAM1C,EAAI,EAAGA,EAAIV,EAAGU,IACnB0C,GAAO5B,EAAGhB,GAAOiB,EAAGhB,GACpBD,GAAML,EACNM,GAAMH,EAEP,OAAO8C,CACR,CC3CA,SAASD,GAAMnD,EAAGwB,EAAGrB,EAASsB,EAAGnB,GAGhC,OAAKN,GAAK,EACF,EAIDe,GAASf,EAAGwB,EAAGrB,EAFjBa,EAAehB,EAAGG,GAEYsB,EAAGnB,EADjCU,EAAehB,EAAGM,GAExB,CC3BA/B,EAAA4E,GAAA,UAAApC,ICDA,IAAIsC,GAAOC,EnDUH,CAEN,WAAY,IAGZhF,KAAQ,KmDf+B,CACxCiF,YAAc,IAqBf,SAASC,GAAUC,GAClB,IAAIC,EAAIL,GAAMI,GACd,MAAsB,iBAANC,EAAmBA,EAAI,IACxC,CC1BA,IAAIC,GpDWI,CAEN,WAAY,IAGZrF,KAAQ,KoDGV,SAASsF,GAAUC,GAClB,IAAIH,EAAIC,GAAME,GACd,MAAsB,iBAANH,EAAmBA,EAAI,IACxC,CClBA,IAAII,GAAO,uBACPC,GAAO,qBACPC,GAAO,sBACPC,GAAO,uBAsBX,SAASC,GAAOlE,EAAGwB,EAAGc,EAAQC,GAC7B,IAAI4B,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAnE,EACAE,EAEJ,GAAKV,GAAK,EACT,OAAO,EAcR,IAZAQ,EAAK+B,EAGL4B,GAAS,EAETC,EAAQ,EACRC,EAAO,EACPC,EAAO,EACPC,EAAO,EACPG,EAAM,EAGAhE,EAAI,EAAGA,EAAIV,EAAGU,KACnBiE,EAAKlC,EAAKjB,EAAGhB,KACHuD,IACTM,GAAQO,EAAMD,EAAKV,IACnBE,GAAS,GACEQ,EAAKb,GACXK,IACJI,GAAQK,EAAMD,EAAKX,KAGpBM,GAAUK,EAAKA,EAEhBnE,GAAM8B,EAiCP,OA9BK+B,EAAO,IAENC,EAAO,GAASA,EAAOO,GAAmBP,GAASA,KACvDD,GAAYC,EAAOL,GAASA,IAE7BS,EAAM,EAAMT,GACZG,EAAQC,GACGE,EAAO,EAEbD,EAAO,GAAOA,EAAOO,GAAiBP,GAASA,GACnDA,EAAOQ,EAAMR,IACbC,EAAOO,EAAMP,GAASP,IACVM,GACXG,EAAOH,EACPE,EAAOD,IAEPE,EAAOF,EACPC,EAAOF,GAERI,EAAM,EACNN,EAAUI,EAAOA,GAAW,EAAMI,EAAMH,EAAOD,MAE/CE,EAAM,EAAMV,GACZI,EAAQG,IAITG,EAAM,EACNN,EAAQE,GAEFQ,EAAMV,GAAUM,CACxB,CCtFA,SAASR,GAAOlE,EAAGwB,EAAGc,GAErB,OAAOvB,GAASf,EAAGwB,EAAGc,EADbtB,EAAehB,EAAGsC,GAE5B,CCDA,SAASyC,GAAM/E,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,EAASZ,EAAGsC,GAC9D,IAAIhB,EACAT,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAKR,IAHAjB,EAAKJ,EACLK,EAAKF,EAECG,EAAI,EAAGA,EAAIV,EAAGU,IACnBO,EAAQtB,EAAI6B,EAAGhB,GAAWyB,EAAIR,EAAGhB,GACjCgB,EAAGhB,GAASd,EAAI8B,EAAGhB,GAAWwB,EAAIT,EAAGhB,GACrCgB,EAAGhB,GAAOS,EACVT,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CChBA,SAASsD,GAAM/E,EAAGwB,EAAGrB,EAASsB,EAAGnB,EAASX,EAAGsC,GAI5C,OAAKjC,GAAK,EACFyB,EAIDV,GAASf,EAAGwB,EAAGrB,EAFjBa,EAAehB,EAAGG,GAEYsB,EAAGnB,EADjCU,EAAehB,EAAGM,GAC4BX,EAAGsC,EACvD,CCdA,SAAS+C,GAAOC,EAAGC,EAAGC,EAAK7C,EAAQC,GAClC,IAAI6C,EACAC,EACAC,EACAC,EACAC,EACA7F,EACAsC,EACAc,EAiCJ,OA/BAuC,EAAK7C,EAAKwC,GACVM,EAAK9C,EAAKyC,GAETG,EAAOI,EAAU,EADbH,EAAKC,EACaN,EAEAC,GAGR,KADfE,EAAQE,EAAKC,IAEZ5F,EAAI,EACJsC,EAAI,EACJuD,EAAI,EACJzC,EAAI,IAEJyC,EAAIJ,EAAQN,EAAMF,EAAMK,EAAEG,GAAUR,EAAMM,EAAEE,IAE5CzF,EAAIsF,GADJO,GAAKH,GAELpD,EAAIiD,EAAIM,EACRzC,EAAI,EACCuC,EAAKC,EACTxC,EAAId,EACa,IAANtC,IACXoD,EAAI,EAAMpD,IAGZsF,EAAIO,EACJN,EAAInC,EACJoC,EAAK5C,GAAW0C,EAChBE,EAAK5C,EAASD,GAAW4C,EACzBC,EAAK5C,EAAW,EAAID,GAAa3C,EACjCwF,EAAK5C,EAAW,EAAID,GAAaL,EAC1BkD,CACR,CCjDA,SAASH,GAAOC,EAAGC,GAElB,OAAOQ,GAAKT,EAAGC,EADL,IAAIS,EAAc,GACL,EAAG,EAC3B,CCIA,SAASC,GAAO5F,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,EAASsF,GAC5D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACA1F,EACAC,EACAC,EACAyF,EACApD,EAGJ,GADA+C,EAAQD,EAAO,GACV7F,GAAK,IAAgB,IAAX8F,EACd,OAAOrE,EAIR,GAFAjB,EAAKJ,EACLK,EAAKF,EACAJ,IAAYG,GAAWH,EAAU,EAAI,CACzC,GAAK2F,EAAQ,EAAM,CAKlB,IAJAC,EAAOF,EAAO,GACdG,EAAOH,EAAO,GACdI,EAAOJ,EAAO,GACdK,EAAOL,EAAO,GACRnF,EAAI,EAAGA,EAAIV,EAAGU,IACnByF,EAAI3E,EAAGhB,GACPuC,EAAItB,EAAGjB,GACPgB,EAAGhB,GAAS2F,EAAIJ,EAAWhD,EAAIiD,EAC/BvE,EAAGjB,GAAS2F,EAAIF,EAAWlD,EAAImD,EAC/B1F,GAAML,EAEP,OAAOsB,CACP,CACD,GAAe,IAAVqE,EAAgB,CAGpB,IAFAE,EAAOH,EAAO,GACdI,EAAOJ,EAAO,GACRnF,EAAI,EAAGA,EAAIV,EAAGU,IACnByF,EAAI3E,EAAGhB,GACPuC,EAAItB,EAAGjB,GACPgB,EAAGhB,GAAO2F,EAAMpD,EAAIiD,EACpBvE,EAAGjB,GAAS2F,EAAIF,EAASlD,EACzBvC,GAAML,EAEP,OAAOsB,CACP,CAGD,IAFAsE,EAAOF,EAAO,GACdK,EAAOL,EAAO,GACRnF,EAAI,EAAGA,EAAIV,EAAGU,IACnByF,EAAI3E,EAAGhB,GACPuC,EAAItB,EAAGjB,GACPgB,EAAGhB,GAAS2F,EAAIJ,EAAShD,EACzBtB,EAAGjB,GAAcuC,EAAImD,EAAVC,EACX3F,GAAML,EAEP,OAAOsB,CACP,CACD,GAAKqE,EAAQ,EAAM,CAKlB,IAJAC,EAAOF,EAAO,GACdG,EAAOH,EAAO,GACdI,EAAOJ,EAAO,GACdK,EAAOL,EAAO,GACRnF,EAAI,EAAGA,EAAIV,EAAGU,IACnByF,EAAI3E,EAAGhB,GACPuC,EAAItB,EAAGhB,GACPe,EAAGhB,GAAS2F,EAAIJ,EAAWhD,EAAIiD,EAC/BvE,EAAGhB,GAAS0F,EAAIF,EAAWlD,EAAImD,EAC/B1F,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACP,CACD,GAAe,IAAVqE,EAAgB,CAGpB,IAFAE,EAAOH,EAAO,GACdI,EAAOJ,EAAO,GACRnF,EAAI,EAAGA,EAAIV,EAAGU,IACnByF,EAAI3E,EAAGhB,GACPuC,EAAItB,EAAGhB,GACPe,EAAGhB,GAAO2F,EAAMpD,EAAIiD,EACpBvE,EAAGhB,GAAS0F,EAAIF,EAASlD,EACzBvC,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACP,CAGD,IAFAsE,EAAOF,EAAO,GACdK,EAAOL,EAAO,GACRnF,EAAI,EAAGA,EAAIV,EAAGU,IACnByF,EAAI3E,EAAGhB,GACPuC,EAAItB,EAAGhB,GACPe,EAAGhB,GAAS2F,EAAIJ,EAAShD,EACzBtB,EAAGhB,GAAcsC,EAAImD,EAAVC,EACX3F,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CC3FA,SAASmE,GAAO5F,EAAGwB,EAAGrB,EAASsB,EAAGnB,EAASuF,GAG1C,OAAO9E,GAASf,EAAGwB,EAAGrB,EAFba,EAAehB,EAAGG,GAEQsB,EAAGnB,EAD7BU,EAAehB,EAAGM,GACwBuF,EACpD,CCzBAtH,EAAA2F,GAAA,UAAAnD,ICAAxC,EAAAwG,GAAA,UAAAhE,IC2BAxC,EAAAC,GAAA,SAAA4H,IC3BA7H,EAAAqH,GAAA,UAAA7E,ICPA,IAAI2B,GAAI,EAuBR,SAAS2D,GAAOrG,EAAG4C,EAAOpB,EAAGc,EAAQC,GACpC,IAAI/B,EACAqC,EACAnC,EAEJ,GAAKV,GAAK,GAAe,IAAV4C,EACd,OAAOpB,EAKR,GAHAhB,EAAK+B,EAGW,IAAXD,EAAe,CAInB,IAHAO,EAAI7C,EAAI0C,IAGC,EACR,IAAMhC,EAAI,EAAGA,EAAImC,EAAGnC,IACnBc,EAAGhB,IAAQoC,EACXpC,GAAM8B,EAGR,GAAKtC,EAAI0C,GACR,OAAOlB,EAER,IAAMd,EAAImC,EAAGnC,EAAIV,EAAGU,GAAKgC,GACxBlB,EAAGhB,IAAQoC,EACXpB,EAAGhB,EAAG,IAAOoC,EACbpB,EAAGhB,EAAG,IAAOoC,EACbpB,EAAGhB,EAAG,IAAOoC,EACbpB,EAAGhB,EAAG,IAAOoC,EACbpC,GAAMkC,GAEP,OAAOlB,CACP,CACD,IAAMd,EAAI,EAAGA,EAAIV,EAAGU,IACnBc,EAAGhB,IAAQoC,EACXpC,GAAM8B,EAEP,OAAOd,CACR,CCvCA,SAAS6E,GAAOrG,EAAG4C,EAAOpB,EAAGc,GAE5B,OAAOvB,GAASf,EAAG4C,EAAOpB,EAAGc,EADpBtB,EAAehB,EAAGsC,GAE5B,CCnBA/D,EAAA8H,GAAA,UAAAtF,ICPA,IAAI2B,GAAI,EA0BR,SAAS4D,GAAOtG,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GACnD,IAAI6C,EACA5C,EACAC,EACAoC,EACAnC,EAGJ,GADA0C,EAAM,EACDpD,GAAK,EACT,OAAOoD,EAMR,GAJA5C,EAAKJ,EACLK,EAAKF,EAGY,IAAZJ,GAA6B,IAAZG,EAAgB,CAIrC,IAHAuC,EAAI7C,EAAI0C,IAGC,EACR,IAAMhC,EAAI,EAAGA,EAAImC,EAAGnC,IACnB0C,GAAO5B,EAAGhB,GAAOiB,EAAGhB,GACpBD,GAAM,EACNC,GAAM,EAGR,GAAKT,EAAI0C,GACR,OAAOU,EAER,IAAM1C,EAAImC,EAAGnC,EAAIV,EAAGU,GAAKgC,GACxBU,GAAS5B,EAAEhB,GAAIiB,EAAEhB,GAAUe,EAAEhB,EAAG,GAAGiB,EAAEhB,EAAG,GAASe,EAAEhB,EAAG,GAAGiB,EAAEhB,EAAG,GAASe,EAAEhB,EAAG,GAAGiB,EAAEhB,EAAG,GAASe,EAAEhB,EAAG,GAAGiB,EAAEhB,EAAG,GAC1GD,GAAMkC,GACNjC,GAAMiC,GAEP,OAAOU,CACP,CACD,IAAM1C,EAAI,EAAGA,EAAIV,EAAGU,IACnB0C,GAAO5B,EAAGhB,GAAOiB,EAAGhB,GACpBD,GAAML,EACNM,GAAMH,EAEP,OAAO8C,CACR,CC3CA,SAASkD,GAAOtG,EAAGwB,EAAGrB,EAASsB,EAAGnB,GAGjC,OAAKN,GAAK,EACF,EAIDe,GAASf,EAAGwB,EAAGrB,EAFjBa,EAAehB,EAAGG,GAEYsB,EAAGnB,EADjCU,EAAehB,EAAGM,GAExB,CC3BA/B,EAAA+H,GAAA,UAAAvF,IC7BA,ICsBI2B,GAAI,EAuBR,SAAS6D,GAAOvG,EAAG4C,EAAOpB,EAAGrB,EAASC,GACrC,IAAII,EACAqC,EACAnC,EAEJ,GAAKV,GAAK,EACT,OAAOwB,EAKR,GAHAhB,EAAKJ,EAGY,IAAZD,EAAgB,CAIpB,IAHA0C,EAAI7C,EAAI0C,IAGC,EACR,IAAMhC,EAAI,EAAGA,EAAImC,EAAGnC,IACnBc,EAAGhB,GAAOoC,EACVpC,GAAML,EAGR,GAAKH,EAAI0C,GACR,OAAOlB,EAER,IAAMd,EAAImC,EAAGnC,EAAIV,EAAGU,GAAKgC,GACxBlB,EAAGhB,GAAOoC,EACVpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpC,GAAMkC,GAEP,OAAOlB,CACP,CACD,IAAMd,EAAI,EAAGA,EAAIV,EAAGU,IACnBc,EAAGhB,GAAOoC,EACVpC,GAAML,EAEP,OAAOqB,CACR,CC1CA,SAAS+E,GAAOvG,EAAG4C,EAAOpB,EAAGrB,GAC5B,OAAOY,GAASf,EAAG4C,EAAOpB,EAAGrB,EAASa,EAAehB,EAAGG,GACzD,CCUA,SAASqG,GAAOC,EAAOC,EAAM1G,EAAG4C,EAAO+D,EAAIC,EAAUpF,EAAGrB,EAASC,EAASyG,EAAMpF,EAAGnB,EAASC,GAC3F,IAAIuG,EACAC,EACAvG,EACAC,EACAuG,EACAC,EACAC,EACAC,EACAC,EACAhF,EACAiF,EAEJ,GAAW,IAANrH,GAAuB,IAAV4C,GAA0B,IAATiE,EAClC,OAAOpF,EAUR,GAPc,IAAToF,IACU,IAATA,EACJN,GAAOvG,EAAG,EAAKyB,EAAGnB,EAASC,GAE3B8F,GAAOrG,EAAG6G,EAAMpF,EAAGnB,EAASC,IAGf,IAAVqC,EACJ,OAAOnB,EAMR,GAHA0F,EAAK/G,EACLgH,EAAK7G,EACL2G,EAAKN,EAEQ,cAAVH,GAAkC,UAATC,GACf,iBAAVD,GAAqC,UAATC,EAC7B,CAGD,IAFAM,EAAKG,EACLF,EAAKG,EACChF,EAAI,EAAGA,EAAIpC,EAAGoC,IAAM,CAMzB,IALA0E,EAAQlE,EAAQpB,EAAGwF,GACnBD,EAAQ,EACRtF,EAAGwF,IAAQH,EAAQH,EAAIO,GACvB1G,EAAKwG,EACLvG,EAAKwG,EACCI,EAAIH,EAAK,EAAGG,EAAIH,EAAKlH,EAAIoC,EAAGiF,IACjC7G,GAAML,EAENsB,EADAhB,GAAMH,IACKwG,EAAQH,EAAIU,GACvBN,GAASJ,EAAIU,GAAM7F,EAAGhB,GAEvBiB,EAAGwF,IAAQrE,EAAQmE,EACnBC,GAAM7G,EACN8G,GAAM3G,EACN4G,GAAMlH,EAAIoC,CACV,CACD,OAAOX,CACP,CAID,IAFAuF,EAAKG,EACLF,EAAKG,EACChF,EAAI,EAAGA,EAAIpC,EAAGoC,IAAM,CAKzB,IAJA0E,EAAQlE,EAAQpB,EAAGwF,GACnBD,EAAQ,EACRvG,EAAK2G,EACL1G,EAAK2G,EACCC,EAAIH,EAAIG,EAAIH,EAAK9E,EAAGiF,IACzB5F,EAAGhB,IAAQqG,EAAQH,EAAIU,GACvBN,GAASJ,EAAIU,GAAM7F,EAAGhB,GACtBA,GAAML,EACNM,GAAMH,EAEPmB,EAAGwF,IAAUH,EAAQH,EAAIO,EAAK9E,GAAUQ,EAAQmE,EAChDC,GAAM7G,EACN8G,GAAM3G,EACN4G,GAAM9E,EAAI,CACV,CACD,OAAOX,CACR,CCxEA,SAAS+E,GAAOC,EAAOC,EAAM1G,EAAG4C,EAAO+D,EAAInF,EAAGrB,EAAS0G,EAAMpF,EAAGnB,GAI/D,IAAMzB,GAAU4H,GACf,MAAM,IAAIa,UAAWC,EAAQ,uEAAwEd,IAEtG,IAAMxH,GAAkByH,GACvB,MAAM,IAAIY,UAAWC,EAAQ,wHAAyHb,IAEvJ,GAAK1G,EAAI,EACR,MAAM,IAAIwH,WAAYD,EAAQ,+EAAgFvH,IAE/G,GAAiB,IAAZG,EACJ,MAAM,IAAIqH,WAAYD,EAAQ,oEAAqEpH,IAEpG,GAAiB,IAAZG,EACJ,MAAM,IAAIkH,WAAYD,EAAQ,kEAAmEjH,IAIlG,OAAOmH,GAAMhB,EAAOC,EAAM1G,EAAG4C,EAAO+D,EAAI,EAAGnF,EAAGrB,EAFpCa,EAAehB,EAAGG,GAEoC0G,EAAMpF,EAAGnB,EAD/DU,EAAehB,EAAGM,GAE7B,CCtDA/B,EAAAgI,GAAA,UAAAxF,ICAAxC,EAAAiI,GAAA,WCkCA,SAAgBC,EAAOC,EAAM1G,EAAG4C,EAAO+D,EAAIC,EAAUpF,EAAGrB,EAASC,EAASyG,EAAMpF,EAAGnB,EAASC,GAC3F,IAAM1B,GAAU4H,GACf,MAAM,IAAIa,UAAWC,EAAQ,uEAAwEd,IAEtG,IAAMxH,GAAkByH,GACvB,MAAM,IAAIY,UAAWC,EAAQ,wHAAyHb,IAEvJ,GAAK1G,EAAI,EACR,MAAM,IAAIwH,WAAYD,EAAQ,+EAAgFvH,IAE/G,GAAiB,IAAZG,EACJ,MAAM,IAAIqH,WAAYD,EAAQ,mEAAoEpH,IAEnG,GAAiB,IAAZG,EACJ,MAAM,IAAIkH,WAAYD,EAAQ,oEAAqEjH,IAEpG,OAAOmH,GAAMhB,EAAOC,EAAM1G,EAAG4C,EAAO+D,EAAIC,EAAUpF,EAAGrB,EAASC,EAASyG,EAAMpF,EAAGnB,EAASC,EAC1F,IC9BA,IASAU,GAAAC,GAAAC,EATAC,GAAAD,MRlDe,6CQ2Df,gBAUAuG,GATApG,EAAAL,IACAzC,GAEAyC,GCzCIyB,GAAI,EA2BR,SAASiF,GAAO3H,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GACnD,IAAIU,EACAT,EACAC,EACAoC,EACAnC,EACJ,GAAKV,GAAK,EACT,OAAOyB,EAMR,GAJAjB,EAAKJ,EACLK,EAAKF,EAGY,IAAZJ,GAA6B,IAAZG,EAAgB,CAIrC,IAHAuC,EAAI7C,EAAI0C,IAGC,EACR,IAAMhC,EAAI,EAAGA,EAAImC,EAAGnC,IACnBO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOiB,EAAGhB,GACbgB,EAAGhB,GAAOQ,EACVT,GAAML,EACNM,GAAMH,EAGR,GAAKN,EAAI0C,GACR,OAAOjB,EAER,IAAMf,EAAImC,EAAGnC,EAAIV,EAAGU,GAAKgC,GACxBzB,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOiB,EAAGhB,GACbgB,EAAGhB,GAAOQ,EAEVA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMiB,EAAGhB,EAAG,GAClBgB,EAAGhB,EAAG,GAAMQ,EAEZA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMiB,EAAGhB,EAAG,GAClBgB,EAAGhB,EAAG,GAAMQ,EAEZT,GAAMkC,GACNjC,GAAMiC,GAEP,OAAOjB,CACP,CACD,IAAMf,EAAI,EAAGA,EAAIV,EAAGU,IACnBO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOiB,EAAGhB,GACbgB,EAAGhB,GAAOQ,EACVT,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CCxDA,SAASkG,GAAO3H,EAAGwB,EAAGrB,EAASsB,EAAGnB,GAGjC,OAAKN,GAAK,EACFyB,EAIDV,GAASf,EAAGwB,EAAGrB,EAFjBa,EAAehB,EAAGG,GAEYsB,EAAGnB,EADjCU,EAAehB,EAAGM,GAExB,CC5BA/B,EAAAoJ,GAAA,UAAA5G,ICkCA,SAAS6G,GAAOnB,EAAOC,EAAM1G,EAAG4C,EAAOiF,EAAGC,EAAKtG,EAAGrB,EAAS0G,EAAMpF,EAAGnB,GACnE,IAAIwG,EACAC,EACAgB,EACAC,EACAxH,EACAC,EACAuG,EACAC,EACAgB,EACAC,EACArG,EACAnB,EACA0B,EACAiF,EAEJ,IAAMxI,GAAU4H,GACf,MAAM,IAAIa,UAAW,uEAAwEb,GAE9F,IAAMxH,GAAkByH,GACvB,MAAM,IAAIY,UAAW,yHAA0HZ,GAEhJ,GAAK1G,EAAI,EACR,MAAM,IAAIwH,WAAY,+EAAgFxH,GAEvG,GAAK8H,EAAMK,EAAK,EAAGnI,GAClB,MAAM,IAAIwH,WAAY,4FAA6FxH,EAAG8H,GAEvH,GAAiB,IAAZ3H,EACJ,MAAM,IAAIqH,WAAY,mEAAoErH,GAE3F,GAAiB,IAAZG,EACJ,MAAM,IAAIkH,WAAY,qEAAsElH,GAE7F,GAAW,IAANN,GAAuB,IAAV4C,GAA0B,IAATiE,EAClC,OAAOpF,EAeR,GAXAI,EAAKvB,EACS,IAATuG,IACU,IAATA,EACJN,GAAOvG,EAAG,EAAKyB,EAAGnB,IAEbuB,EAAK,IACTA,GAAMA,GAEPwE,GAAOrG,EAAG6G,EAAMpF,EAAGI,KAGN,IAAVe,EACJ,OAAOnB,EAaR,GAVCwG,EADI9H,EAAU,EACT,GAEE,EAAIH,GAAMG,EAGjB+H,EADI5H,EAAU,EACT,GAEE,EAAIN,GAAMM,EAIL,cAAVmG,GAAkC,UAATC,GACf,iBAAVD,GAAqC,UAATC,EAC7B,CAGD,IAFAlG,EAAKyH,EACLxH,EAAKyH,EACCxH,EAAI,EAAGA,EAAIV,EAAGU,IAAM,CAQzB,IAPAoG,EAAQlE,EAAQpB,EAAGhB,GACnBuG,EAAQ,EAERiB,EAAOhI,EACPgH,EAAKiB,GAFLF,EAAOrH,EAAI,GAEMP,EACjB8G,EAAKiB,EAAOH,EAAKzH,EACjBmB,EAAGhB,IAAQqG,EAAQe,EAAKC,EAAMpH,EAAMA,GAC9B0B,EAAI2F,EAAM3F,EAAI4F,EAAM5F,IACzBiF,EAAMS,EAAMpH,EAAM0B,EAClBX,EAAGwF,IAAQH,EAAQe,EAAGR,GACtBN,GAASvF,EAAGwF,GAAOa,EAAGR,GACtBL,GAAM7G,EACN8G,GAAM3G,EAEPmB,EAAGhB,IAAQmC,EAAQmE,EACnBvG,GAAML,EACNM,GAAMH,CACN,CACD,OAAOmB,CACP,CAID,IAFAjB,EAAKyH,GAASjI,EAAI,GAAMG,EACxBM,EAAKyH,GAASlI,EAAI,GAAMM,EAClBI,EAAIV,EAAI,EAAGU,GAAK,EAAGA,IAAM,CAQ9B,IAPAoG,EAAQlE,EAAQpB,EAAGhB,GACnBuG,EAAQ,EAERiB,EAAOtH,EACPsG,EAAKiB,GAFLF,EAAO,GAEY5H,EACnB8G,EAAKiB,EAAOH,EAAOzH,EACnBmB,EAAGhB,IAAQqG,EAAQe,EAAKC,EAAMpH,EAAMA,GAC9B0B,EAAI2F,EAAM3F,EAAI4F,EAAM5F,IACzBiF,EAAMS,EAAMpH,EAAM0B,EAClBX,EAAGwF,IAAQH,EAAQe,EAAGR,GACtBN,GAASvF,EAAGwF,GAAOa,EAAGR,GACtBL,GAAM7G,EACN8G,GAAM3G,EAEPmB,EAAGhB,IAAQmC,EAAQmE,EACnBvG,GAAML,EACNM,GAAMH,CACN,CACD,OAAOmB,CACR,CCpJAlD,EAAAqJ,GAAA,WCoCA,SAAgBnB,EAAOC,EAAM1G,EAAG4C,EAAOiF,EAAGC,EAAKtG,EAAGrB,EAASC,EAASyG,EAAMpF,EAAGnB,EAASC,GACrF,IAAIuG,EACAC,EACAgB,EACAC,EACAxH,EACAC,EACAuG,EACAC,EACAgB,EACAC,EACAxH,EACA0B,EACAiF,EAEJ,IAAMxI,GAAU4H,GACf,MAAM,IAAIa,UAAW,uEAAwEb,GAE9F,IAAMxH,GAAkByH,GACvB,MAAM,IAAIY,UAAW,yHAA0HZ,GAEhJ,GAAK1G,EAAI,EACR,MAAM,IAAIwH,WAAY,+EAAgFxH,GAEvG,GAAK8H,EAAMK,EAAK,EAAGnI,GAClB,MAAM,IAAIwH,WAAY,4FAA6FxH,EAAG8H,GAEvH,GAAiB,IAAZ3H,EACJ,MAAM,IAAIqH,WAAY,mEAAoErH,GAE3F,GAAiB,IAAZG,EACJ,MAAM,IAAIkH,WAAY,oEAAqElH,GAE5F,GAAW,IAANN,GAAuB,IAAV4C,GAA0B,IAATiE,EAClC,OAAOpF,EAUR,GAPc,IAAToF,IACU,IAATA,EACJN,GAAOvG,EAAG,EAAKyB,EAAGnB,EAASC,GAE3B8F,GAAOrG,EAAG6G,EAAMpF,EAAGnB,EAASC,IAGf,IAAVqC,EACJ,OAAOnB,EAMR,GAJAwG,EAAK7H,EACL8H,EAAK3H,EAIQ,cAAVkG,GAAkC,UAATC,GACf,iBAAVD,GAAqC,UAATC,EAC7B,CAGD,IAFAlG,EAAKyH,EACLxH,EAAKyH,EACCxH,EAAI,EAAGA,EAAIV,EAAGU,IAAM,CAQzB,IAPAoG,EAAQlE,EAAQpB,EAAGhB,GACnBuG,EAAQ,EAERiB,EAAOhI,EACPgH,EAAKiB,GAFLF,EAAOrH,EAAI,GAEQP,EACnB8G,EAAKiB,EAAOH,EAAOzH,EACnBmB,EAAGhB,IAAQqG,EAAQe,EAAKC,EAAMpH,EAAMA,GAC9B0B,EAAI2F,EAAM3F,EAAI4F,EAAM5F,IACzBiF,EAAMS,EAAMpH,EAAM0B,EAClBX,EAAGwF,IAAQH,EAAQe,EAAGR,GACtBN,GAASvF,EAAGwF,GAAOa,EAAGR,GACtBL,GAAM7G,EACN8G,GAAM3G,EAEPmB,EAAGhB,IAAQmC,EAAQmE,EACnBvG,GAAML,EACNM,GAAMH,CACN,CACD,OAAOmB,CACP,CAID,IAFAjB,EAAKyH,GAASjI,EAAI,GAAMG,EACxBM,EAAKyH,GAASlI,EAAI,GAAMM,EAClBI,EAAIV,EAAI,EAAGU,GAAK,EAAGA,IAAM,CAQ9B,IAPAoG,EAAQlE,EAAQpB,EAAGhB,GACnBuG,EAAQ,EAERiB,EAAOtH,EACPsG,EAAKiB,GAFLF,EAAO,GAEY5H,EACnB8G,EAAKiB,EAAOH,EAAOzH,EACnBmB,EAAGhB,IAAQqG,EAAQe,EAAKC,EAAMpH,EAAMA,GAC9B0B,EAAI2F,EAAM3F,EAAI4F,EAAM5F,IACzBiF,EAAMS,EAAMpH,EAAM0B,EAClBX,EAAGwF,IAAQH,EAAQe,EAAGR,GACtBN,GAASvF,EAAGwF,GAAOa,EAAGR,GACtBL,GAAM7G,EACN8G,GAAM3G,EAEPmB,EAAGhB,IAAQmC,EAAQmE,EACnBvG,GAAML,EACNM,GAAMH,CACN,CACD,OAAOmB,CACR,ICpHA,IASAR,GAAAC,GAAAC,EATAC,GAAAD,MClDe,6CD2Df,gBAUAiH,GATA9G,EAAAL,IACAzC,GAEAyC,GEXA,SAASoH,GAAM3B,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAASC,EAASyH,EAAGS,EAAUC,EAAUC,GAC1E,IAAIC,EACAxH,EACAyH,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAf,EAaJ,IAXAQ,EAAOQ,EAAY,CAAEX,EAAUC,MAG9BK,EAAML,EACNM,EAAMP,IAGNM,EAAMN,EACNO,EAAMN,GAEPN,EAAK7H,GAEDqI,GAAiB,UAAT/B,GACT+B,GAAiB,UAAT/B,EACT,CAED,IADAiC,EAAMV,EACAc,EAAK,EAAGA,EAAK/I,EAAG+I,IAAO,CAC5B,GAAkB,IAAbvH,EAAGmH,GAIP,IAHA1H,EAAM2B,EAAQpB,EAAGmH,GACjBK,EAAKR,EAAWK,EAAIE,EACpBL,EAAMT,EACAa,EAAK,EAAGA,GAAMC,EAAID,IACvBjB,EAAGmB,EAAIJ,EAAIE,IAAStH,EAAGkH,GAAQzH,EAC/ByH,GAAOvI,EAGTwI,GAAOxI,CACP,CACD,OAAO0H,CACP,CAGD,IADAc,EAAMV,EACAc,EAAK,EAAGA,EAAK/I,EAAG+I,IAAO,CAC5B,GAAkB,IAAbvH,EAAGmH,GAIP,IAHA1H,EAAM2B,EAAQpB,EAAGmH,GACjBK,EAAKR,EAAWK,EAAIE,EACpBL,EAAMC,EACAG,EAAKC,EAAID,EAAK9I,EAAG8I,IACtBjB,EAAGmB,EAAIJ,EAAIE,IAAStH,EAAGkH,GAAQzH,EAC/ByH,GAAOvI,EAGTwI,GAAOxI,CACP,CACD,OAAO0H,CACR,CClDA,SAASQ,GAAM5B,EAAOC,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAAS0H,EAAGC,GACpD,IAAIe,EACAK,EAGJ,IAAMrK,GAAU4H,GACf,MAAM,IAAIa,UAAWC,EAAQ,uEAAwEd,IAEtG,IAAMxH,GAAkByH,GACvB,MAAM,IAAIY,UAAWC,EAAQ,yHAA0Hb,IAExJ,GAAK1G,EAAI,EACR,MAAM,IAAIwH,WAAYD,EAAQ,+EAAgFvH,IAE/G,GAAiB,IAAZG,EACJ,MAAM,IAAIqH,WAAYD,EAAQ,kEAAmEpH,IAElG,GAAK2H,EAAMK,EAAK,EAAGnI,GAClB,MAAM,IAAIwH,WAAYD,EAAQ,6FAA8FvH,EAAG8H,IAEhI,OAAW,IAAN9H,GAAqB,IAAV4C,EACRiF,GAEO,iBAAVpB,GACJoC,EAAM,EACNK,EAAMpB,IAENe,EAAMf,EACNoB,EAAM,GAGAzB,GAAMf,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAD3Ba,EAAehB,EAAGG,GACsB0H,EAAGgB,EAAKK,EAAK,GAC3D,CC9DA3K,EAAA8J,GAAA,WC2BA,SAAe3B,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAASC,EAASyH,EAAGS,EAAUC,EAAUC,GAC1E,IAAMvJ,GAAkByH,GACvB,MAAM,IAAIY,UAAWC,EAAQ,wHAAyHb,IAEvJ,GAAK1G,EAAI,EACR,MAAM,IAAIwH,WAAYD,EAAQ,gFAAiFvH,IAEhH,GAAiB,IAAZG,EACJ,MAAM,IAAIqH,WAAYD,EAAQ,kEAAmEpH,IAElG,OAAW,IAANH,GAAqB,IAAV4C,EACRiF,EAEDJ,GAAMf,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAASC,EAASyH,EAAGS,EAAUC,EAAUC,EAC1E,ICtBA,IASAvH,GAAAC,GAAAC,EATAC,GAAAD,MChDe,4CDyDf,gBAUAgI,GATA7H,EAAAL,IACAzC,GAEAyC,GELA,SAASmI,GAAO1C,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,EAASsH,EAAGS,EAAUC,EAAUC,GAChG,IAAIa,EACAC,EACAb,EACAC,EACAC,EACAY,EACAC,EACAZ,EACAC,EACAC,EACAC,EACAC,EACAf,EACAC,EAgBJ,IAdAO,EAAOQ,EAAY,CAAEX,EAAUC,MAG9BK,EAAML,EACNM,EAAMP,IAGNM,EAAMN,EACNO,EAAMN,GAIPI,EAFAV,EAAK7H,EAGLoJ,EAFAtB,EAAK3H,EAIFkI,GAAiB,UAAT/B,IACP+B,GAAiB,UAAT/B,EACV,CACD,IAAMqC,EAAK,EAAGA,EAAK/I,EAAG+I,IAAO,CAC5B,GAAoB,IAAbvH,EAAGmH,IAAkC,IAAblH,EAAG+H,GAMjC,IALAH,EAAOzG,EAAQnB,EAAG+H,GAClBF,EAAO1G,EAAQpB,EAAGmH,GAClBK,EAAKR,EAAWK,EAAIE,EACpBL,EAAMT,EACNsB,EAAMrB,EACAY,EAAK,EAAGA,GAAMC,EAAID,IACvBjB,EAAGmB,EAAIJ,EAAIE,IAAWtH,EAAGkH,GAAQW,EAAW5H,EAAG8H,GAAQD,EACvDZ,GAAOvI,EACPoJ,GAAOjJ,EAGTqI,GAAOxI,EACPqJ,GAAOlJ,CACP,CACD,OAAOuH,CACP,CAED,IAAMkB,EAAK,EAAGA,EAAK/I,EAAG+I,IAAO,CAC5B,GAAoB,IAAbvH,EAAGmH,IAAkC,IAAblH,EAAG+H,GAMjC,IALAH,EAAOzG,EAAQnB,EAAG+H,GAClBF,EAAO1G,EAAQpB,EAAGmH,GAClBK,EAAKR,EAAWK,EAAIE,EACpBL,EAAMC,EACNY,EAAMC,EACAV,EAAKC,EAAID,EAAK9I,EAAG8I,IACtBjB,EAAGmB,EAAIJ,EAAIE,IAAWtH,EAAGkH,GAAQW,EAAW5H,EAAG8H,GAAQD,EACvDZ,GAAOvI,EACPoJ,GAAOjJ,EAGTqI,GAAOxI,EACPqJ,GAAOlJ,CACP,CACD,OAAOuH,CACR,CChEA,SAASuB,GAAO3C,EAAOC,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAASsB,EAAGnB,EAASuH,EAAGC,GACjE,IAAIe,EACAK,EAIJ,IAAMrK,GAAU4H,GACf,MAAM,IAAIa,UAAWC,EAAQ,uEAAwEd,IAEtG,IAAMxH,GAAkByH,GACvB,MAAM,IAAIY,UAAWC,EAAQ,yHAA0Hb,IAExJ,GAAK1G,EAAI,EACR,MAAM,IAAIwH,WAAYD,EAAQ,+EAAgFvH,IAE/G,GAAiB,IAAZG,EACJ,MAAM,IAAIqH,WAAYD,EAAQ,kEAAmEpH,IAElG,GAAiB,IAAZG,EACJ,MAAM,IAAIkH,WAAYD,EAAQ,mEAAoEpH,IAEnG,GAAK2H,EAAMK,EAAK,EAAGnI,GAClB,MAAM,IAAIwH,WAAYD,EAAQ,4FAA6FvH,EAAG8H,IAE/H,OAAW,IAAN9H,GAAqB,IAAV4C,EACRiF,GAEO,iBAAVpB,GACJoC,EAAM,EACNK,EAAMpB,IAENe,EAAMf,EACNoB,EAAM,GAIAzB,GAAMf,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAF3Ba,EAAehB,EAAGG,GAEsBsB,EAAGnB,EAD3CU,EAAehB,EAAGM,GACsCuH,EAAGgB,EAAKK,EAAK,GAC3E,CCtEA3K,EAAA6K,GAAA,WCgCA,SAAgB1C,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,EAASsH,EAAGS,EAAUC,EAAUC,GAChG,IAAMvJ,GAAkByH,GACvB,MAAM,IAAIY,UAAWC,EAAQ,yHAA0Hb,IAExJ,GAAK1G,EAAI,EACR,MAAM,IAAIwH,WAAYD,EAAQ,gFAAiFvH,IAEhH,GAAiB,IAAZG,EACJ,MAAM,IAAIqH,WAAYD,EAAQ,kEAAmEpH,IAElG,GAAiB,IAAZG,EACJ,MAAM,IAAIkH,WAAYD,EAAQ,mEAAoEpH,IAEnG,OAAW,IAANH,GAAqB,IAAV4C,EACRiF,EAEDJ,GAAMf,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,EAASsH,EAAGS,EAAUC,EAAUC,EAC/F,IC5BA,IASAvH,GAAAC,GAAAC,EATAC,GAAAD,MClDe,6CD2Df,gBAUAsI,GATAnI,EAAAL,IACAzC,GAEAyC,GEVA,SAASyI,GAAOhD,EAAMiD,EAAOC,EAAM5J,EAAG6H,EAAGS,EAAUC,EAAUC,EAAShH,EAAGrB,EAASC,GACjF,IAAIyJ,EACApB,EACAxH,EACA2H,EACAC,EACAH,EACAC,EACAG,EACAC,EACAC,EACAf,EAkBJ,GAbA4B,EAAqB,aAATD,GADZnB,EAAOQ,EAAY,CAAEX,EAAUC,MAK9BK,EAAML,EACNM,EAAMP,IAGNM,EAAMN,EACNO,EAAMN,GAEPN,EAAK7H,GAGDqI,GAAkB,iBAAVkB,GAAqC,UAATjD,GACrC+B,GAAkB,iBAAVkB,GAAqC,UAATjD,EACrC,CAED,IADAiC,EAAMV,EACAc,EAAK,EAAGA,EAAK/I,EAAG+I,IAAO,CAC5B,GAAkB,IAAbvH,EAAGmH,GAAgB,CAIvB,IAHA1H,EAAMO,EAAGmH,GACTK,EAAKR,EAAWK,EAAIE,EACpBL,EAAMT,EACAa,EAAK,EAAGA,EAAKC,EAAID,IACtBtH,EAAGkH,IAASzH,EAAM4G,EAAGmB,EAAIJ,EAAIE,GAC7BJ,GAAOvI,EAEH0J,IACJrI,EAAGmH,IAASd,EAAGmB,EAAIJ,EAAIG,GAExB,CACDJ,GAAOxI,CACP,CACD,OAAOqB,CACP,CACD,IACIiH,GAAkB,iBAAVkB,GAAqC,UAATjD,GACrC+B,GAAkB,iBAAVkB,GAAqC,UAATjD,EACrC,CAGD,IADAiC,EADAV,IAAQjI,EAAI,GAAMG,EAEZ4I,EAAK/I,EAAE,EAAG+I,GAAM,EAAGA,IAAO,CAC/B,GAAkB,IAAbvH,EAAGmH,GAAgB,CAIvB,IAHA1H,EAAMO,EAAGmH,GACTK,EAAKR,EAAWK,EAAIE,EACpBL,EAAMT,EACAa,EAAK9I,EAAE,EAAG8I,EAAKC,EAAID,IACxBtH,EAAGkH,IAASzH,EAAM4G,EAAGmB,EAAIJ,EAAIE,GAC7BJ,GAAOvI,EAEH0J,IACJrI,EAAGmH,IAASd,EAAGmB,EAAIJ,EAAIG,GAExB,CACDJ,GAAOxI,CACP,CACD,OAAOqB,CACP,CACD,IACIiH,GAAkB,iBAAVkB,GAAqC,UAATjD,GACrC+B,GAAkB,iBAAVkB,GAAqC,UAATjD,EACrC,CAED,IADAiC,EAAMV,GAASjI,EAAI,GAAMG,EACnB4I,EAAK/I,EAAE,EAAG+I,GAAM,EAAGA,IAAO,CAO/B,IANA9H,EAAMO,EAAGmH,GACTK,EAAKR,EAAWK,EAAIE,EACpBL,EAAMC,EACDkB,IACJ5I,GAAO4G,EAAGmB,EAAIJ,EAAIG,IAEbD,EAAKC,EAAG,EAAGD,GAAM,EAAGA,IAEzB7H,GAAOO,EADPkH,GAAOvI,GACW0H,EAAGmB,EAAIJ,EAAIE,GAE9BtH,EAAGmH,GAAQ1H,EACX0H,GAAOxI,CACP,CACD,OAAOqB,CACP,CAGD,IADAmH,EAAMV,EACAc,EAAK,EAAGA,EAAK/I,EAAG+I,IAAO,CAO5B,IANA9H,EAAMO,EAAGmH,GACTK,EAAKR,EAAWK,EAAIE,EACpBL,EAAMC,EACDkB,IACJ5I,GAAO4G,EAAGmB,EAAIJ,EAAIG,IAEbD,EAAKC,EAAG,EAAGD,EAAK9I,EAAG8I,IAExB7H,GAAOO,EADPkH,GAAOvI,GACW0H,EAAGmB,EAAIJ,EAAIE,GAE9BtH,EAAGmH,GAAQ1H,EACX0H,GAAOxI,CACP,CACD,OAAOqB,CACR,CCrGA,SAASkI,GAAOjD,EAAOC,EAAMiD,EAAOC,EAAM5J,EAAG6H,EAAGC,EAAKtG,EAAGrB,GACvD,IAAI0I,EACAK,EAGJ,IAAMrK,GAAU4H,GACf,MAAM,IAAIa,UAAWC,EAAQ,uEAAwEd,IAEtG,IAAMxH,GAAkByH,GACvB,MAAM,IAAIY,UAAWC,EAAQ,wHAAyHb,IAEvJ,IAAMnH,GAAsBoK,GAC3B,MAAM,IAAIrC,UAAWC,EAAQ,qFAAsFoC,IAEpH,IAAMG,GAAYF,GACjB,MAAM,IAAItC,UAAWC,EAAQ,gFAAiFqC,IAE/G,GAAK5J,EAAI,EACR,MAAM,IAAIwH,WAAYD,EAAQ,+EAAgFvH,IAE/G,GAAK8H,EAAMK,EAAK,EAAGnI,GAClB,MAAM,IAAIwH,WAAYD,EAAQ,8FAA+FvH,EAAG8H,IAEjI,GAAiB,IAAZ3H,EACJ,MAAM,IAAIqH,WAAYD,EAAQ,kEAAmEpH,IAElG,OAAW,IAANH,EACGwB,GAEO,iBAAViF,GACJoC,EAAM,EACNK,EAAMpB,IAENe,EAAMf,EACNoB,EAAM,GAGAzB,GAAMf,EAAMiD,EAAOC,EAAM5J,EAAG6H,EAAGgB,EAAKK,EAAK,EAAG1H,EAAGrB,EADjDa,EAAehB,EAAGG,IAExB,CCzEA5B,EAAAmL,GAAA,WCgCA,SAAgBhD,EAAMiD,EAAOC,EAAM5J,EAAG6H,EAAGS,EAAUC,EAAUC,EAAShH,EAAGrB,EAASC,GACjF,IAAMnB,GAAkByH,GACvB,MAAM,IAAIY,UAAWC,EAAQ,uHAAwHb,IAEtJ,IAAMnH,GAAsBoK,GAC3B,MAAM,IAAIrC,UAAWC,EAAQ,sFAAuFoC,IAErH,IAAMG,GAAYF,GACjB,MAAM,IAAItC,UAAWC,EAAQ,+EAAgFqC,IAE9G,GAAK5J,EAAI,EACR,MAAM,IAAIwH,WAAYD,EAAQ,gFAAiFvH,IAEhH,GAAiB,IAAZG,EACJ,MAAM,IAAIqH,WAAYD,EAAQ,kEAAmEpH,IAElG,OAAW,IAANH,EACGwB,EAEDiG,GAAMf,EAAMiD,EAAOC,EAAM5J,EAAG6H,EAAGS,EAAUC,EAAUC,EAAShH,EAAGrB,EAASC,EAChF,ICjCA,IASAa,GAAAC,GAAAC,EATAC,GAAAD,MChDe,6CDyDf,gBAUA4I,GATAzI,EAAAL,IACAzC,GAEAyC,GE7BI6C,GAAO,uBACPC,GAAO,qBACPC,GAAO,sBACPC,GAAO,uBAsBX,SAAS+F,GAAQhK,EAAGiK,EAAI9J,EAASC,GAChC,IAAI+D,EACAC,EACA1C,EACA2C,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAnE,EACAoB,EACAlB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAiBR,IAdA0B,EAAQI,EAAamI,EAAI,GACzBrI,EAAe,EAAVzB,EACLK,EAAe,EAAVJ,EAGL+D,GAAS,EAETC,EAAQ,EACRC,EAAO,EACPC,EAAO,EACPC,EAAO,EACPG,EAAM,EAGAhE,EAAI,EAAGA,EAAIV,EAAGU,KACnBiE,EAAKlC,EAAKf,EAAOlB,KACPuD,IACTM,GAAQO,EAAMD,EAAKV,IACnBE,GAAS,GACEQ,EAAKb,GACXK,IACJI,GAAQK,EAAMD,EAAKX,KAGpBM,GAAQK,EAAKA,GAEdA,EAAKlC,EAAKf,EAAOlB,EAAK,KACZuD,IACTM,GAAQO,EAAMD,EAAKV,IACnBE,GAAS,GACEQ,EAAKb,GACXK,IACJI,GAAQK,EAAMD,EAAKX,KAGpBM,GAAQK,EAAKA,EAEdnE,GAAMoB,EAiCP,OA9BKyC,EAAO,IAENC,EAAO,GAASA,EAAOO,GAAmBP,GAASA,KACvDD,GAAUC,EAAOL,GAASA,IAE3BS,EAAM,EAAMT,GACZG,EAAQC,GACGE,EAAO,EAEbD,EAAO,GAAOA,EAAOO,GAAiBP,GAASA,GACnDA,EAAOQ,EAAMR,IACbC,EAAOO,EAAMP,GAASP,IACVM,GACXG,EAAOH,EACPE,EAAOD,IAEPE,EAAOF,EACPC,EAAOF,GAERI,EAAM,EACNN,EAAUI,EAAOA,GAAW,EAAMI,EAAMH,EAAOD,MAE/CE,EAAM,EAAMV,GACZI,EAAQG,IAITG,EAAM,EACNN,EAAQE,GAEFQ,EAAMV,GAAUM,CACxB,CCvGA,SAASsF,GAAQhK,EAAGiK,EAAI9J,GACvB,OAAOY,GAASf,EAAGiK,EAAI9J,EAASa,EAAehB,EAAGG,GACnD,CCjBA5B,EAAAyL,GAAA,UAAAjJ,ICiBA,IASAE,GAAAC,GAAAC,EATAC,GAAAD,MC9Ce,8CDuDf,gBAUA+I,GATA5I,EAAAL,IACAzC,GAEAyC,GEbA,SAASkJ,GAAOnK,EAAGwB,EAAGc,GACrB,IAAIE,EACAK,EACAnC,EAGJ,GADA8B,EAAM,EACDxC,GAAK,GAAKsC,GAAU,EACxB,OAAOE,EAGR,GAAgB,IAAXF,EAAe,CAInB,IAHAO,EAAI7C,EA9BE,GAiCG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnB8B,GAAOC,EAAKjB,EAAEd,IAGhB,GAAKV,EAtCC,EAuCL,OAAOwC,EAER,IAAM9B,EAAImC,EAAGnC,EAAIV,EAAGU,GAzCd,EA0CL8B,GAAOC,EAAIjB,EAAEd,IAAM+B,EAAIjB,EAAEd,EAAE,IAAM+B,EAAIjB,EAAEd,EAAE,IAAM+B,EAAIjB,EAAEd,EAAE,IAAM+B,EAAIjB,EAAEd,EAAE,IAAM+B,EAAIjB,EAAEd,EAAE,IAEpF,OAAO8B,CACP,CAED,IADAxC,GAAKsC,EACC5B,EAAI,EAAGA,EAAIV,EAAGU,GAAK4B,EACxBE,GAAOC,EAAKjB,EAAEd,IAEf,OAAO8B,CACR,CC1BAjE,EAAAC,GAAA,WCLA,SAAgBwB,EAAGwB,EAAGc,EAAQC,GAC7B,IAAIC,EACAhC,EACAqC,EACAnC,EAGJ,GADA8B,EAAM,EACDxC,GAAK,EACT,OAAOwC,EAKR,GAHAhC,EAAK+B,EAGW,IAAXD,EAAe,CAInB,IAHAO,EAAI7C,EAlCE,GAqCG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnB8B,GAAOC,EAAKjB,EAAEhB,IACdA,GAAM8B,EAGR,GAAKtC,EA3CC,EA4CL,OAAOwC,EAER,IAAM9B,EAAImC,EAAGnC,EAAIV,EAAGU,GA9Cd,EA+CL8B,GAAOC,EAAKjB,EAAEhB,IAAQiC,EAAKjB,EAAEhB,EAAG,IAAOiC,EAAKjB,EAAEhB,EAAG,IAAOiC,EAAKjB,EAAEhB,EAAG,IAAOiC,EAAKjB,EAAEhB,EAAG,IAAOiC,EAAKjB,EAAEhB,EAAG,IACpGA,GAhDK,EAkDN,OAAOgC,CACP,CACD,IAAM9B,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,GAAOC,EAAKjB,EAAEhB,IACdA,GAAM8B,EAEP,OAAOE,CACR,ICtCA,SAAS4H,GAAOpK,EAAG4C,EAAOpB,EAAGrB,EAASsB,EAAGnB,GACxC,IAAIE,EACAC,EACAoC,EACAnC,EACJ,GAAKV,GAAK,GAAe,IAAV4C,EACd,OAAOnB,EAGR,GAAiB,IAAZtB,GAA6B,IAAZG,EAAgB,CAIrC,IAHAuC,EAAI7C,EAlCE,GAqCG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnBe,EAAGf,IAAOkC,EAAQpB,EAAGd,GAGvB,GAAKV,EA1CC,EA2CL,OAAOyB,EAER,IAAMf,EAAImC,EAAGnC,EAAIV,EAAGU,GA7Cd,EA8CLe,EAAGf,IAAOkC,EAAQpB,EAAGd,GACrBe,EAAGf,EAAE,IAAOkC,EAAQpB,EAAGd,EAAE,GACzBe,EAAGf,EAAE,IAAOkC,EAAQpB,EAAGd,EAAE,GACzBe,EAAGf,EAAE,IAAOkC,EAAQpB,EAAGd,EAAE,GAE1B,OAAOe,CACP,CAWD,IATCjB,EADIL,EAAU,GACR,EAAEH,GAAKG,EAER,EAGLM,EADIH,EAAU,GACR,EAAEN,GAAKM,EAER,EAEAI,EAAI,EAAGA,EAAIV,EAAGU,IACnBe,EAAGhB,IAAQmC,EAAQpB,EAAGhB,GACtBA,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CCxBA,SAAS4I,GAAOrK,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GACnD,IAAI+J,EACAC,EACA5J,EACAG,EACAN,EACAC,EACAC,EAYJ,IATA4J,EAAO9I,EAAEgJ,KACTD,EAAO9I,EAAE+I,KAGT1J,EAAMU,EAAEiJ,UAAW,GACnB9J,EAAMc,EAAEgJ,UAAW,GAEnBjK,EAAKJ,EACLK,EAAKF,EACCG,EAAI,EAAGA,EAAIV,EAAGU,IACnBC,EAAK4J,EAAM9J,EAAIK,EAAKwJ,EAAM9J,IAC1BA,GAAML,EACNM,GAAMH,EAEP,OAAOkB,CACR,CCrCAjD,EAAAC,GAAA,WCPA,SAAgBwB,EAAG4C,EAAOpB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC1D,IAAIC,EACAC,EACAoC,EACAnC,EACJ,GAAKV,GAAK,GAAe,IAAV4C,EACd,OAAOnB,EAMR,GAJAjB,EAAKJ,EACLK,EAAKF,EAGY,IAAZJ,GAA6B,IAAZG,EAAgB,CAIrC,IAHAuC,EAAI7C,EAvCE,GA0CG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnBe,EAAGhB,IAAQmC,EAAQpB,EAAGhB,GACtBA,GAAML,EACNM,GAAMH,EAGR,GAAKN,EAjDC,EAkDL,OAAOyB,EAER,IAAMf,EAAImC,EAAGnC,EAAIV,EAAGU,GApDd,EAqDLe,EAAGhB,IAAQmC,EAAQpB,EAAGhB,GACtBiB,EAAGhB,EAAG,IAAOmC,EAAQpB,EAAGhB,EAAG,GAC3BiB,EAAGhB,EAAG,IAAOmC,EAAQpB,EAAGhB,EAAG,GAC3BiB,EAAGhB,EAAG,IAAOmC,EAAQpB,EAAGhB,EAAG,GAC3BA,GAzDK,EA0DLC,GA1DK,EA4DN,OAAOgB,CACP,CACD,IAAMf,EAAI,EAAGA,EAAIV,EAAGU,IACnBe,EAAGhB,IAAQmC,EAAQpB,EAAGhB,GACtBA,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,ICxCA,SAAS4I,GAAOrK,EAAGwB,EAAGrB,EAASsB,EAAGnB,GACjC,IAAIE,EACAC,EACAwH,EACAC,EACArF,EACAnC,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAIR,GAFAwG,EAAKyC,EAAkBlJ,GACvB0G,EAAKwC,EAAkBjJ,GAClBwG,EAAG0C,kBAAoBzC,EAAGyC,iBAY9B,OADAF,GAAWzK,EAAGiI,EAAI9H,EATjBK,EADIL,EAAU,GACR,EAAEH,GAAKG,EAER,EAOyB+H,EAAI5H,EAJlCG,EADIH,EAAU,GACR,EAAEN,GAAKM,EAER,GAGC4H,EAAGsC,KAGX,GAAiB,IAAZrK,GAA6B,IAAZG,EAAgB,CAIrC,IAHAuC,EAAI7C,EAnDE,GAsDG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnBe,EAAGf,GAAMc,EAAGd,GAGd,GAAKV,EA3DC,EA4DL,OAAOyB,EAER,IAAMf,EAAImC,EAAGnC,EAAIV,EAAGU,GA9Dd,EA+DLe,EAAGf,GAAMc,EAAGd,GACZe,EAAGf,EAAE,GAAMc,EAAGd,EAAE,GAChBe,EAAGf,EAAE,GAAMc,EAAGd,EAAE,GAChBe,EAAGf,EAAE,GAAMc,EAAGd,EAAE,GAChBe,EAAGf,EAAE,GAAMc,EAAGd,EAAE,GAChBe,EAAGf,EAAE,GAAMc,EAAGd,EAAE,GAChBe,EAAGf,EAAE,GAAMc,EAAGd,EAAE,GAChBe,EAAGf,EAAE,GAAMc,EAAGd,EAAE,GAEjB,OAAOe,CACP,CAWD,IATCjB,EADIL,EAAU,GACR,EAAEH,GAAKG,EAER,EAGLM,EADIH,EAAU,GACR,EAAEN,GAAKM,EAER,EAEAI,EAAI,EAAGA,EAAIV,EAAGU,IACnBe,EAAGhB,GAAOe,EAAGhB,GACbA,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CCjEAlD,EAAAC,GAAA,WCDA,SAAgBwB,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GACnD,IAAIC,EACAC,EACAwH,EACAC,EACArF,EACAnC,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAIR,GAFAwG,EAAKyC,EAAkBlJ,GACvB0G,EAAKwC,EAAkBjJ,GAClBwG,EAAG0C,kBAAoBzC,EAAGyC,iBAE9B,OADAF,GAAWzK,EAAGiI,EAAI9H,EAASC,EAAS8H,EAAI5H,EAASC,GAC1C2H,EAAGsC,KAMX,GAJAhK,EAAKJ,EACLK,EAAKF,EAGY,IAAZJ,GAA6B,IAAZG,EAAgB,CAIrC,IAHAuC,EAAI7C,EA9CE,GAiDG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnBe,EAAGhB,GAAOe,EAAGhB,GACbA,GAAML,EACNM,GAAMH,EAGR,GAAKN,EAxDC,EAyDL,OAAOyB,EAER,IAAMf,EAAImC,EAAGnC,EAAIV,EAAGU,GA3Dd,EA4DLe,EAAGhB,GAAOe,EAAGhB,GACbiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBA,GApEK,EAqELC,GArEK,EAuEN,OAAOgB,CACP,CACD,IAAMf,EAAI,EAAGA,EAAIV,EAAGU,IACnBe,EAAGhB,GAAOe,EAAGhB,GACbA,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,IC/DA,SAASmJ,GAAM5K,EAAGwB,EAAGrB,EAASsB,EAAGnB,GAChC,IAAI8C,EACA5C,EACAC,EACAoC,EACAnC,EAGJ,GADA0C,EAAM,EACDpD,GAAK,EACT,OAAOoD,EAGR,GAAiB,IAAZjD,GAA6B,IAAZG,EAAgB,CAIrC,IAHAuC,EAAI7C,EAnCE,GAsCG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnB0C,GAAO5B,EAAGd,GAAMe,EAAGf,GAGrB,GAAKV,EA3CC,EA4CL,OAAOoD,EAER,IAAM1C,EAAImC,EAAGnC,EAAIV,EAAGU,GA9Cd,EA+CL0C,GAAS5B,EAAEd,GAAGe,EAAEf,GAASc,EAAEd,EAAE,GAAGe,EAAEf,EAAE,GAASc,EAAEd,EAAE,GAAGe,EAAEf,EAAE,GAASc,EAAEd,EAAE,GAAGe,EAAEf,EAAE,GAASc,EAAEd,EAAE,GAAGe,EAAEf,EAAE,GAEjG,OAAO0C,CACP,CAWD,IATC5C,EADIL,EAAU,GACP,EAAEH,GAAMG,EAEV,EAGLM,EADIH,EAAU,GACP,EAAEN,GAAMM,EAEV,EAEAI,EAAI,EAAGA,EAAIV,EAAGU,IACnB0C,GAAS5B,EAAGhB,GAAOiB,EAAGhB,GACtBD,GAAML,EACNM,GAAMH,EAEP,OAAO8C,CACR,CCnEA,IAAIV,GAAI,EAwBR,SAASkI,GAAM5K,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAClD,IAAI6C,EACA5C,EACAC,EACAoC,EACAnC,EAGJ,GADA0C,EAAM,EACDpD,GAAK,EACT,OAAOoD,EAMR,GAJA5C,EAAKJ,EACLK,EAAKF,EAGY,IAAZJ,GAA6B,IAAZG,EAAgB,CAIrC,IAHAuC,EAAI7C,EAAI0C,IAGC,EACR,IAAMhC,EAAI,EAAGA,EAAImC,EAAGnC,IACnB0C,GAAS5B,EAAGhB,GAAOiB,EAAGhB,GACtBD,GAAM,EACNC,GAAM,EAGR,GAAKT,EAAI0C,GACR,OAAOU,EAER,IAAM1C,EAAImC,EAAGnC,EAAIV,EAAGU,GAAKgC,GACxBU,GAAS5B,EAAEhB,GAAIiB,EAAEhB,GAAUe,EAAEhB,EAAG,GAAGiB,EAAEhB,EAAG,GAASe,EAAEhB,EAAG,GAAGiB,EAAEhB,EAAG,GAASe,EAAEhB,EAAG,GAAGiB,EAAEhB,EAAG,GAASe,EAAEhB,EAAG,GAAGiB,EAAEhB,EAAG,GAC1GD,GAAMkC,GACNjC,GAAMiC,GAEP,OAAOU,CACP,CACD,IAAM1C,EAAI,EAAGA,EAAIV,EAAGU,IACnB0C,GAAO5B,EAAGhB,GAAOiB,EAAGhB,GACpBD,GAAML,EACNM,GAAMH,EAEP,OAAO8C,CACR,CC7CA,SAASyH,GAAO7K,EAAGwB,EAAGc,GACrB,IAAI8C,EACA0F,EACAnG,EACAjE,EAEJ,GAAKV,GAAK,GAAKsC,GAAU,EACxB,OAAO,EAER,GAAW,IAANtC,EACJ,OAAOyC,EAAKjB,EAAG,IAKhB,IAHA4D,EAAQ,EACR0F,EAAM,EACN9K,GAAKsC,EACC5B,EAAI,EAAGA,EAAIV,EAAGU,GAAK4B,EACR,IAAXd,EAAGd,KAEF0E,GADLT,EAAKlC,EAAKjB,EAAGd,MAEZoK,EAAM,EAAQA,EAAMC,EAAK3F,EAAMT,EAAI,GACnCS,EAAQT,GAERmG,GAAOC,EAAKpG,EAAGS,EAAO,IAIzB,OAAOA,EAAQN,EAAMgG,EACtB,CCjBAvM,EAAAC,GAAA,UAAAuC,ICAAxC,EAAAC,GAAA,WCNA,SAAgBwB,EAAGwB,EAAGc,EAAQC,GAC7B,IAAI6C,EACA0F,EACAnG,EACAnE,EACAE,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,EACJ,OAAOyC,EAAKjB,EAAGe,IAKhB,IAHA/B,EAAK+B,EACL6C,EAAQ,EACR0F,EAAM,EACApK,EAAI,EAAGA,EAAIV,EAAGU,IACF,IAAZc,EAAGhB,KAEF4E,GADLT,EAAKlC,EAAKjB,EAAGhB,MAEZsK,EAAM,EAAQA,EAAMC,EAAK3F,EAAMT,EAAI,GACnCS,EAAQT,GAERmG,GAAOC,EAAKpG,EAAGS,EAAO,IAGxB5E,GAAM8B,EAEP,OAAO8C,EAAQN,EAAMgG,EACtB,IClCA,SAASE,GAAOhL,EAAG4C,EAAOpB,EAAGc,GAC5B,IAAIO,EACAnC,EAEJ,GAAKV,GAAK,GAAKsC,GAAU,GAAc,IAAVM,EAC5B,OAAOpB,EAGR,GAAgB,IAAXc,EAAe,CAInB,IAHAO,EAAI7C,EA7BE,GAgCG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,GAAK,EACxBc,EAAGd,IAAOkC,EAGZ,GAAK5C,EArCC,EAsCL,OAAOwB,EAER,IAAMd,EAAImC,EAAGnC,EAAIV,EAAGU,GAxCd,EAyCLc,EAAGd,IAAOkC,EACVpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EAEb,OAAOpB,CACP,CAED,IADAxB,GAAKsC,EACC5B,EAAI,EAAGA,EAAIV,EAAGU,GAAK4B,EACxBd,EAAGd,IAAOkC,EAEX,OAAOpB,CACR,CCNA,SAASyJ,GAAOjL,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GACnD,IAAI+J,EACAC,EACA5J,EACAG,EACAG,EACAT,EACAC,EACAC,EAYJ,IATA4J,EAAO9I,EAAEgJ,KACTD,EAAO9I,EAAE+I,KAGT1J,EAAMU,EAAEiJ,UAAW,GACnB9J,EAAMc,EAAEgJ,UAAW,GAEnBjK,EAAKJ,EACLK,EAAKF,EACCG,EAAI,EAAGA,EAAIV,EAAGU,IACnBO,EAAMH,EAAKwJ,EAAM9J,GACjBG,EAAK2J,EAAM9J,EAAIM,EAAKyJ,EAAM9J,IAC1BE,EAAK4J,EAAM9J,EAAIQ,GACfT,GAAML,EACNM,GAAMH,EAEP,OAAOkB,CACR,CC/CAjD,EAAAC,GAAA,WCRA,SAAgBwB,EAAG4C,EAAOpB,EAAGc,EAAQC,GACpC,IAAI/B,EACAqC,EACAnC,EAEJ,GAAKV,GAAK,GAAe,IAAV4C,EACd,OAAOpB,EAKR,GAHAhB,EAAK+B,EAGW,IAAXD,EAAe,CAInB,IAHAO,EAAI7C,EAjCE,GAoCG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnBc,EAAGhB,IAAQoC,EACXpC,GAAM8B,EAGR,GAAKtC,EA1CC,EA2CL,OAAOwB,EAER,IAAMd,EAAImC,EAAGnC,EAAIV,EAAGU,GA7Cd,EA8CLc,EAAGd,IAAOkC,EACVpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EAEb,OAAOpB,CACP,CACD,IAAMd,EAAI,EAAGA,EAAIV,EAAGU,IACnBc,EAAGhB,IAAQoC,EACXpC,GAAM8B,EAEP,OAAOd,CACR,IC9BA,SAASyJ,GAAOjL,EAAGwB,EAAGrB,EAASsB,EAAGnB,GACjC,IAAIW,EACAT,EACAC,EACAwH,EACAC,EACArF,EACAnC,EACA0B,EAEJ,GAAKpC,GAAK,EACT,OAAOyB,EAIR,GAFAwG,EAAKyC,EAAkBlJ,GACvB0G,EAAKwC,EAAkBjJ,GAClBwG,EAAG0C,kBAAoBzC,EAAGyC,iBAY9B,OADAF,GAAWzK,EAAGiI,EAAI9H,EATjBK,EADIL,EAAU,GACR,EAAEH,GAAKG,EAER,EAOyB+H,EAAI5H,EAJlCG,EADIH,EAAU,GACR,EAAEN,GAAKM,EAER,GAGC4H,EAAGsC,KAGX,GAAiB,IAAZrK,GAA6B,IAAZG,EAAgB,CAIrC,IAHAuC,EAAI7C,EAtDE,GAyDG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnBO,EAAMO,EAAGd,GACTc,EAAGd,GAAMe,EAAGf,GACZe,EAAGf,GAAMO,EAGX,GAAKjB,EAhEC,EAiEL,OAAOyB,EAER,IAAMf,EAAImC,EAAGnC,EAAIV,EAAGU,GAnEd,EAoELO,EAAMO,EAAGd,GACTc,EAAGd,GAAMe,EAAGf,GACZe,EAAGf,GAAMO,EAGTA,EAAMO,EADNY,EAAI1B,EAAI,GAERc,EAAGY,GAAMX,EAAGW,GACZX,EAAGW,GAAMnB,EAGTA,EAAMO,EADNY,GAAK,GAELZ,EAAGY,GAAMX,EAAGW,GACZX,EAAGW,GAAMnB,EAEV,OAAOQ,CACP,CAWD,IATCjB,EADIL,EAAU,GACR,EAAEH,GAAKG,EAER,EAGLM,EADIH,EAAU,GACR,EAAEN,GAAKM,EAER,EAEAI,EAAI,EAAGA,EAAIV,EAAGU,IACnBO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOiB,EAAGhB,GACbgB,EAAGhB,GAAOQ,EACVT,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CCtGA,IAAIiB,GAAI,EAyBR,SAASuI,GAAOjL,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GACnD,IAAIU,EACAT,EACAC,EACAwH,EACAC,EACArF,EACAnC,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAIR,GAFAwG,EAAKyC,EAAkBlJ,GACvB0G,EAAKwC,EAAkBjJ,GAClBwG,EAAG0C,kBAAoBzC,EAAGyC,iBAE9B,OADAF,GAAWzK,EAAGiI,EAAI9H,EAASC,EAAS8H,EAAI5H,EAASC,GAC1C2H,EAAGsC,KAMX,GAJAhK,EAAKJ,EACLK,EAAKF,EAGY,IAAZJ,GAA6B,IAAZG,EAAgB,CAIrC,IAHAuC,EAAI7C,EAAI0C,IAGC,EACR,IAAMhC,EAAI,EAAGA,EAAImC,EAAGnC,IACnBO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOiB,EAAGhB,GACbgB,EAAGhB,GAAOQ,EACVT,GAAML,EACNM,GAAMH,EAGR,GAAKN,EAAI0C,GACR,OAAOjB,EAER,IAAMf,EAAImC,EAAGnC,EAAIV,EAAGU,GAAKgC,GACxBzB,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOiB,EAAGhB,GACbgB,EAAGhB,GAAOQ,EAEVA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMiB,EAAGhB,EAAG,GAClBgB,EAAGhB,EAAG,GAAMQ,EAEZA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMiB,EAAGhB,EAAG,GAClBgB,EAAGhB,EAAG,GAAMQ,EAEZT,GAAMkC,GACNjC,GAAMiC,GAEP,OAAOjB,CACP,CACD,IAAMf,EAAI,EAAGA,EAAIV,EAAGU,IACnBO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOiB,EAAGhB,GACbgB,EAAGhB,GAAOQ,EACVT,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CC1EA,SAASyJ,GAAQlL,EAAGwB,EAAGrB,GACtB,IAAIgL,EACAC,EACA5K,EACAkD,EACAhD,EAEJ,GAAKV,EAAI,GAAKG,GAAW,EACxB,OAAQ,EAGT,GADAiL,EAAM,EACK,IAANpL,EACJ,OAAOoL,EAER,GAAgB,IAAZjL,EAAgB,CAGnB,IADAgL,EAAO1I,EAAKjB,EAAG,IACTd,EAAI,EAAGA,EAAIV,EAAGU,KACnBgD,EAAIjB,EAAKjB,EAAGd,KACHyK,IACRC,EAAM1K,EACNyK,EAAOzH,GAGT,OAAO0H,CACP,CAID,IAFAD,EAAO1I,EAAKjB,EAAG,IACfhB,EAAKL,EACCO,EAAI,EAAGA,EAAIV,EAAGU,KACnBgD,EAAIjB,EAAKjB,EAAGhB,KACH2K,IACRC,EAAM1K,EACNyK,EAAOzH,GAERlD,GAAML,EAEP,OAAOiL,CACR,CCrCA,SAASC,GAAQrL,EAAGwB,EAAGrB,EAASC,GAC/B,IAAIkL,EACAF,EACA5K,EACAkD,EACAhD,EAEJ,GAAKV,EAAI,EACR,OAAQ,EAGT,GADAoL,EAAM,EACK,IAANpL,EACJ,OAAOoL,EAIR,IAFAE,EAAO1L,EAAM4B,EAAGpB,IAChBI,EAAKJ,EAAUD,EACTO,EAAI,EAAGA,EAAIV,EAAGU,KACnBgD,EAAI9D,EAAM4B,EAAGhB,KACJ8K,IACRF,EAAM1K,EACN4K,EAAO5H,GAERlD,GAAML,EAEP,OAAOiL,CACR,CCzBA,SAASC,GAAQrL,EAAGwB,EAAGrB,GAEtB,OAAOY,GAASf,EAAGwB,EAAGrB,EADba,EAAehB,EAAGG,GAE5B,CCQA5B,EAAAC,GAAA,UAAAuC,IC1BAxC,EAAA2M,GAAA,WCeA,SAAiBlL,EAAGwB,EAAGrB,EAASC,GAC/B,IAAI+K,EACAC,EACA5K,EACAkD,EACAhD,EAEJ,GAAKV,EAAI,EACR,OAAQ,EAGT,GADAoL,EAAM,EACK,IAANpL,EACJ,OAAOoL,EAIR,IAFAD,EAAO1I,EAAKjB,EAAGpB,IACfI,EAAKJ,EAAUD,EACTO,EAAI,EAAGA,EAAIV,EAAGU,KACnBgD,EAAIjB,EAAKjB,EAAGhB,KACH2K,IACRC,EAAM1K,EACNyK,EAAOzH,GAERlD,GAAML,EAEP,OAAOiL,CACR,ICxCA7M,EAAA8M,GAAA,UAAAtK,ICDA,IAAIsC,GAAOC,ExIUH,CAEN,YAAa,IAGb,eAAgB,KwIfuB,CACxCC,YAAc,IAqBf,SAASC,GAAU+H,GAClB,IAAI7H,EAAIL,GAAMkI,GACd,MAAsB,iBAAN7H,EAAmBA,EAAI,IACxC,CC1BA,IAAIC,GzIWI,CAEN,YAAa,IAGb,eAAgB,KyIGlB,SAASC,GAAU2H,GAClB,IAAI7H,EAAIC,GAAM4H,GACd,MAAsB,iBAAN7H,EAAmBA,EAAI,IACxC,CCrBA,IAAIL,GAAOC,EtIUH,CAENvE,MAAS,IAGTC,MAAS,KsIf8B,CACxCuE,YAAc,IAqBf,SAASC,GAAUC,GAClB,IAAIC,EAAIL,GAAMI,GACd,MAAsB,iBAANC,EAAmBA,EAAI,IACxC,CC1BA,IAAIC,GvIWI,CAEN5E,MAAS,IAGTC,MAAS,KuIGX,SAAS4E,GAAUH,GAClB,IAAIC,EAAIC,GAAMF,GACd,MAAsB,iBAANC,EAAmBA,EAAI,IACxC,CCrBA,IAAIL,GAAOC,EpIUH,CAENnE,KAAQ,IAGRC,MAAS,KoIf8B,CACxCmE,YAAc,IAqBf,SAASC,GAAUgI,GAClB,IAAI9H,EAAIL,GAAMmI,GACd,MAAsB,iBAAN9H,EAAmBA,EAAI,IACxC,CC1BA,IAAIC,GrIWI,CAENxE,KAAQ,IAGRC,MAAS,KqIGX,SAASwE,GAAU4H,GAClB,IAAI9H,EAAIC,GAAM6H,GACd,MAAsB,iBAAN9H,EAAmBA,EAAI,IACxC,CCJA,SAAS+H,GAAOzL,EAAGwB,EAAGc,EAAQC,GAC7B,IAAIC,EACAhC,EACAE,EAGJ,GADA8B,EAAM,EACDxC,GAAK,EACT,OAAOwC,EAGR,IADAhC,EAAK+B,EACC7B,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,EAAMN,EAAKM,EAAM5C,EAAM4B,EAAGhB,KAC1BA,GAAM8B,EAEP,OAAOE,CACR,CChBA,SAASiJ,GAAOzL,EAAGwB,EAAGc,GAErB,OAAOvB,GAASf,EAAGwB,EAAGc,EADbtB,EAAehB,EAAGsC,GAE5B,CClBA/D,EAAAkN,GAAA,UAAA1K,ICFA,IAAI2B,GAAI,EA4BR,SAASgJ,GAAO1L,EAAG4C,EAAOpB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC1D,IAAIC,EACAC,EACAoC,EACAnC,EACJ,GAAKV,GAAK,GAAe,IAAV4C,EACd,OAAOnB,EAMR,GAJAjB,EAAKJ,EACLK,EAAKF,EAGY,IAAZJ,GAA6B,IAAZG,EAAgB,CAIrC,IAHAuC,EAAI7C,EAAI0C,IAGC,EACR,IAAMhC,EAAI,EAAGA,EAAImC,EAAGnC,IACnBe,EAAGhB,IAAQkL,EAAkB/I,EAAQpB,EAAGhB,IACxCA,GAAML,EACNM,GAAMH,EAGR,GAAKN,EAAI0C,GACR,OAAOjB,EAER,IAAMf,EAAImC,EAAGnC,EAAIV,EAAGU,GAAKgC,GACxBjB,EAAGhB,IAAQkL,EAAkB/I,EAAQpB,EAAGhB,IACxCiB,EAAGhB,EAAG,IAAOkL,EAAkB/I,EAAQpB,EAAGhB,EAAG,IAC7CiB,EAAGhB,EAAG,IAAOkL,EAAkB/I,EAAQpB,EAAGhB,EAAG,IAC7CiB,EAAGhB,EAAG,IAAOkL,EAAkB/I,EAAQpB,EAAGhB,EAAG,IAC7CA,GAAMkC,GACNjC,GAAMiC,GAEP,OAAOjB,CACP,CACD,IAAMf,EAAI,EAAGA,EAAIV,EAAGU,IACnBe,EAAGhB,IAAQkL,EAAkB/I,EAAQpB,EAAGhB,IACxCA,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CChDA,SAASiK,GAAO1L,EAAG4C,EAAOpB,EAAGrB,EAASsB,EAAGnB,GAGxC,OAAKN,GAAK,GAAe,IAAV4C,EACPnB,EAIDV,GAASf,EAAG4C,EAAOpB,EAAGrB,EAFxBa,EAAehB,EAAGG,GAEmBsB,EAAGnB,EADxCU,EAAehB,EAAGM,GAExB,CC7BA/B,EAAAmN,GAAA,UAAA3K,ICgBA,SAAS6K,GAAQ5L,EAAGE,EAAIC,EAASC,GAChC,IAAIyL,EACAnK,EACAlB,EACAoB,EACAlB,EAGJ,GADAmL,EAAQ,EACH7L,GAAK,GAAKG,GAAW,EACzB,OAAO0L,EAKR,IAHAnK,EAAQI,EAAa5B,EAAI,GACzB0B,EAAe,EAAVzB,EACLK,EAAe,EAAVJ,EACCM,EAAI,EAAGA,EAAIV,EAAGU,IACnBmL,GAASjM,EAAM8B,EAAOlB,IAASZ,EAAM8B,EAAOlB,EAAG,IAC/CA,GAAMoB,EAEP,OAAOiK,CACR,CCrBA,SAASD,GAAQ5L,EAAGE,EAAIC,GACvB,OAAOY,GAASf,EAAGE,EAAIC,EAAS,EACjC,CChBA5B,EAAAqN,GAAA,UAAA7K,ICiBA,IASAE,GAAAC,GAAAC,EATAC,GAAAD,MC9Ce,8CDuDf,gBAUA2K,GATAxK,EAAAL,IACAzC,GAEAyC,GE1BI6C,GAAO,cACPC,GAAO,YACPC,GAAO,aACPC,GAAO,cAsBX,SAAS8H,GAAQ/L,EAAGE,EAAIC,EAASC,GAChC,IAAI+D,EACAC,EACA1C,EACA2C,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAnE,EACAoB,EACAlB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAiBR,IAdA0B,EAAQI,EAAa5B,EAAI,GACzB0B,EAAe,EAAVzB,EACLK,EAAe,EAAVJ,EAGL+D,GAAS,EAETC,EAAQ,EACRC,EAAO,EACPC,EAAO,EACPC,EAAO,EACPG,EAAM,EAGAhE,EAAI,EAAGA,EAAIV,EAAGU,KACnBiE,EAAK/E,EAAM8B,EAAOlB,KACRuD,IACTM,EAAOnC,EAAKmC,EAAO2H,EAAOrH,EAAKV,KAC/BE,GAAS,GACEQ,EAAKb,GACXK,IACJI,EAAOrC,EAAKqC,EAAOyH,EAAOrH,EAAKX,MAGhCM,EAAOpC,EAAKoC,EAAOpC,EAAKyC,EAAKA,KAE9BA,EAAK/E,EAAM8B,EAAOlB,EAAK,KACbuD,IACTM,EAAOnC,EAAKmC,EAAO2H,EAAOrH,EAAKV,KAC/BE,GAAS,GACEQ,EAAKb,GACXK,IACJI,EAAOrC,EAAKqC,EAAOyH,EAAOrH,EAAKX,MAGhCM,EAAOpC,EAAKoC,EAAOpC,EAAKyC,EAAKA,IAE9BnE,GAAMoB,EAiCP,OA9BKyC,EAAO,IAENC,EAAO,GAASA,EAAO2H,GAAmB3H,GAASA,KACvDD,EAAOnC,EAAKmC,EAAOnC,EAAKA,EAAKoC,EAAOL,IAASA,MAE9CS,EAAMxC,EAAK,EAAM+B,IACjBG,EAAQC,GACGE,EAAO,EAEbD,EAAO,GAAOA,EAAO2H,GAAiB3H,GAASA,GACnDA,EAAO4H,EAAO5H,IACdC,EAAOrC,EAAKgK,EAAO3H,GAASP,KAChBM,GACXG,EAAOH,EACPE,EAAOD,IAEPE,EAAOF,EACPC,EAAOF,GAERI,EAAM,EACNN,EAAQlC,EAAKA,EAAKsC,EAAOA,GAAStC,EAAK,EAAM8J,EAAOvH,EAAOD,OAE3DE,EAAMxC,EAAK,EAAM8B,IACjBI,EAAQG,IAITG,EAAM,EACNN,EAAQE,GAEFpC,EAAKgK,EAAO9H,GAAUM,EAC9B,CCxGA,SAASqH,GAAQ/L,EAAGE,EAAIC,GACvB,OAAOY,GAASf,EAAGE,EAAIC,EAASa,EAAehB,EAAGG,GACnD,CCjBA5B,EAAAwN,GAAA,UAAAhL,ICiBA,IASAE,GAAAC,GAAAC,EATAC,GAAAD,MC9Ce,8CDuDf,gBAUAgL,GATA7K,EAAAL,IACAzC,GAEAyC,GErCIyB,GAAI,EA0BR,SAAS0J,GAAOpM,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GACnD,IAAIC,EACAC,EACAoC,EACAnC,EACJ,GAAKV,GAAK,EACT,OAAOyB,EAMR,GAJAjB,EAAKJ,EACLK,EAAKF,EAGY,IAAZJ,GAA6B,IAAZG,EAAgB,CAIrC,IAHAuC,EAAI7C,EAAI0C,IAGC,EACR,IAAMhC,EAAI,EAAGA,EAAImC,EAAGnC,IACnBe,EAAGhB,GAAOe,EAAGhB,GACbA,GAAML,EACNM,GAAMH,EAGR,GAAKN,EAAI0C,GACR,OAAOjB,EAER,IAAMf,EAAImC,EAAGnC,EAAIV,EAAGU,GAAKgC,GACxBjB,EAAGhB,GAAOe,EAAGhB,GACbiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBiB,EAAGhB,EAAG,GAAMe,EAAGhB,EAAG,GAClBA,GAAMkC,GACNjC,GAAMiC,GAEP,OAAOjB,CACP,CACD,IAAMf,EAAI,EAAGA,EAAIV,EAAGU,IACnBe,EAAGhB,GAAOe,EAAGhB,GACbA,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CC/CA,SAAS2K,GAAOpM,EAAGwB,EAAGrB,EAASsB,EAAGnB,GAGjC,OAAKN,GAAK,EACFyB,EAIDV,GAASf,EAAGwB,EAAGrB,EAFjBa,EAAehB,EAAGG,GAEYsB,EAAGnB,EADjCU,EAAehB,EAAGM,GAExB,CCRA,SAAS+L,GAAMrM,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAClD,IAAI6C,EACA5C,EACAC,EACAC,EAGJ,GADA0C,EAAM,EACDpD,GAAK,EACT,OAAOoD,EAIR,IAFA5C,EAAKJ,EACLK,EAAKF,EACCG,EAAI,EAAGA,EAAIV,EAAGU,IACnB0C,EAAMuI,EAAkBvI,EAAMuI,EAAkBnK,EAAGhB,GAAOiB,EAAGhB,KAC7DD,GAAML,EACNM,GAAMH,EAEP,OAAO8C,CACR,CCnBA,SAASiJ,GAAMrM,EAAGwB,EAAGrB,EAASsB,EAAGnB,GAGhC,OAAKN,GAAK,EACF,EAIDe,GAASf,EAAGwB,EAAGrB,EAFjBa,EAAehB,EAAGG,GAEYsB,EAAGnB,EADjCU,EAAehB,EAAGM,GAExB,CC3BA/B,EAAA6N,GAAA,UAAArL,ICAAxC,EAAA8N,GAAA,UAAAtL,ICFA,IAAI2B,GAAI,EA2BR,SAAS4J,GAAQtM,EAAGuM,EAAQ/K,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC5D,IAAI6C,EACA5C,EACAC,EACAoC,EACAnC,EAGJ,GADA0C,EAAMmJ,EACDvM,GAAK,EACT,OAAO2L,EAAkBvI,GAM1B,GAJA5C,EAAKJ,EACLK,EAAKF,EAGY,IAAZJ,GAA6B,IAAZG,EAAgB,CAIrC,IAHAuC,EAAI7C,EAAI0C,IAGC,EACR,IAAMhC,EAAI,EAAGA,EAAImC,EAAGnC,IACnB0C,GAAO5B,EAAGhB,GAAOiB,EAAGhB,GACpBD,GAAM,EACNC,GAAM,EAGR,GAAKT,EAAI0C,GACR,OAAOiJ,EAAkBvI,GAE1B,IAAM1C,EAAImC,EAAGnC,EAAIV,EAAGU,GAAKgC,GACxBU,GAAS5B,EAAEhB,GAAIiB,EAAEhB,GAAUe,EAAEhB,EAAG,GAAGiB,EAAEhB,EAAG,GAASe,EAAEhB,EAAG,GAAGiB,EAAEhB,EAAG,GAASe,EAAEhB,EAAG,GAAGiB,EAAEhB,EAAG,GAASe,EAAEhB,EAAG,GAAGiB,EAAEhB,EAAG,GAC1GD,GAAMkC,GACNjC,GAAMiC,GAEP,OAAOiJ,EAAkBvI,EACzB,CACD,IAAM1C,EAAI,EAAGA,EAAIV,EAAGU,IACnB0C,GAAO5B,EAAGhB,GAAOiB,EAAGhB,GACpBD,GAAML,EACNM,GAAMH,EAEP,OAAOqL,EAAkBvI,EAC1B,CC/CA,SAASkJ,GAAQtM,EAAGuM,EAAQ/K,EAAGrB,EAASsB,EAAGnB,GAG1C,OAAKN,GAAK,EACF2L,EAAkBY,GAInBxL,GAASf,EAAGuM,EAAQ/K,EAAGrB,EAFzBa,EAAehB,EAAGG,GAEoBsB,EAAGnB,EADzCU,EAAehB,EAAGM,GAExB,CC7BA/B,EAAA+N,GAAA,UAAAvL,IC7BA,ICsBI2B,GAAI,EAuBR,SAAS8J,GAAOxM,EAAG4C,EAAOpB,EAAGrB,EAASC,GACrC,IAAII,EACAqC,EACAnC,EAEJ,GAAKV,GAAK,EACT,OAAOwB,EAKR,GAHAhB,EAAKJ,EAGY,IAAZD,EAAgB,CAIpB,IAHA0C,EAAI7C,EAAI0C,IAGC,EACR,IAAMhC,EAAI,EAAGA,EAAImC,EAAGnC,IACnBc,EAAGhB,GAAOoC,EACVpC,GAAML,EAGR,GAAKH,EAAI0C,GACR,OAAOlB,EAER,IAAMd,EAAImC,EAAGnC,EAAIV,EAAGU,GAAKgC,GACxBlB,EAAGhB,GAAOoC,EACVpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpC,GAAMkC,GAEP,OAAOlB,CACP,CACD,IAAMd,EAAI,EAAGA,EAAIV,EAAGU,IACnBc,EAAGhB,GAAOoC,EACVpC,GAAML,EAEP,OAAOqB,CACR,CC1CA,SAASgL,GAAOxM,EAAG4C,EAAOpB,EAAGrB,GAC5B,OAAOY,GAASf,EAAG4C,EAAOpB,EAAGrB,EAASa,EAAehB,EAAGG,GACzD,CClBA5B,EAAAiO,GAAA,UAAAzL,ICPA,IAAI2B,GAAI,EAsBR,SAAS+J,GAAOzM,EAAG4C,EAAOpB,EAAGc,GAC5B,IAAI5B,EACAmC,EAEJ,GAAK7C,GAAK,GAAKsC,GAAU,GAAc,IAAVM,EAC5B,OAAOpB,EAGR,GAAgB,IAAXc,EAAe,CAInB,IAHAO,EAAI7C,EAAI0C,IAGC,EACR,IAAMhC,EAAI,EAAGA,EAAImC,EAAGnC,IACnBc,EAAGd,IAAOkC,EAGZ,GAAK5C,EAAI0C,GACR,OAAOlB,EAER,IAAMd,EAAImC,EAAGnC,EAAIV,EAAGU,GAAKgC,GACxBlB,EAAGd,IAAOkC,EACVpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EAEb,OAAOpB,CACP,CAED,IADAxB,GAAKsC,EACC5B,EAAI,EAAGA,EAAIV,EAAGU,GAAK4B,EACxBd,EAAGd,IAAOkC,EAEX,OAAOpB,CACR,CCxDA,IAAIkB,GAAI,EAwBR,SAAS+J,GAAOzM,EAAG4C,EAAOpB,EAAGc,EAAQC,GACpC,IAAI/B,EACAE,EACAmC,EAEJ,GAAK7C,GAAK,GAAe,IAAV4C,EACd,OAAOpB,EAKR,GAHAhB,EAAK+B,EAGW,IAAXD,EAAe,CAInB,IAHAO,EAAI7C,EAAI0C,IAGC,EACR,IAAMhC,EAAI,EAAGA,EAAImC,EAAGnC,IACnBc,EAAGhB,IAAQoC,EACXpC,GAAM8B,EAGR,GAAKtC,EAAI0C,GACR,OAAOlB,EAER,IAAMd,EAAImC,EAAGnC,EAAIV,EAAGU,GAAKgC,GACxBlB,EAAGd,IAAOkC,EACVpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EACZpC,GAAMkC,GAEP,OAAOlB,CACP,CACD,IAAMd,EAAI,EAAGA,EAAIV,EAAGU,IACnBc,EAAGhB,IAAQoC,EACXpC,GAAM8B,EAEP,OAAOd,CACR,CCxBA,SAASkL,GAAO/C,EAAOjH,EAAG1C,EAAG4C,EAAOiF,EAAGS,EAAUC,EAAUC,EAAShH,EAAGrB,EAASC,EAASyG,EAAMpF,EAAGnB,EAASC,GAC1G,IAAIkI,EACAkE,EACAC,EACA3L,EACA0H,EACAa,EACAZ,EACAC,EACAE,EACAD,EACAE,EA6BJ,IAzBAP,EAAOQ,EAAY,CAAEX,EAAUC,MAG9BK,EAAML,EACNM,EAAMP,IAGNM,EAAMN,EACNO,EAAMN,GAEQ,iBAAVoB,GACJgD,EAAO3M,EACP4M,EAAOlK,IAEPiK,EAAOjK,EACPkK,EAAO5M,GAGM,IAAT6G,IACU,IAATA,EACJ2F,GAAOI,EAAM,EAAKnL,EAAGnB,EAASC,GAE9BkM,GAAOG,EAAM/F,EAAMpF,EAAGnB,EAASC,IAGlB,IAAVqC,EACJ,OAAOnB,EAGR,IACIgH,GAAkB,iBAAVkB,GACTlB,GAAkB,iBAAVkB,EACT,CAED,IADAhB,EAAMvI,EACA2I,EAAK,EAAGA,EAAK4D,EAAM5D,IAAO,CAI/B,IAHA9H,EAAMiB,EAAKU,EAAQpB,EAAGmH,IACtBK,EAAKR,EAAWK,EAAIE,EACpBS,EAAMjJ,EACAuI,EAAK,EAAGA,EAAK8D,EAAM9D,IACxBrH,EAAG+H,IAAStH,EAAK2F,EAAGmB,EAAIJ,EAAIE,GAAQ7H,GACpCuI,GAAOlJ,EAERqI,GAAOxI,CACP,CACD,OAAOsB,CACP,CAKD,IADA+H,EAAMjJ,EACAwI,EAAK,EAAGA,EAAK6D,EAAM7D,IAAO,CAI/B,IAHA9H,EAAM,EACN0H,EAAMvI,EACN4I,EAAKR,EAAWK,EAAIE,EACdD,EAAK,EAAGA,EAAK6D,EAAM7D,IACxB7H,GAAOiB,EAAK2F,EAAGmB,EAAIJ,EAAIE,GAAQtH,EAAGmH,IAClCA,GAAOxI,EAERsB,EAAG+H,IAAStH,EAAKU,EAAQ3B,GACzBuI,GAAOlJ,CACP,CACD,OAAOmB,CACR,CCzEA,SAASiL,GAAOjG,EAAOkD,EAAOjH,EAAG1C,EAAG4C,EAAOiF,EAAGC,EAAKtG,EAAGrB,EAAS0G,EAAMpF,EAAGnB,GACvE,IAAIqM,EACAC,EACA/D,EACAK,EAIJ,IAAMrK,GAAU4H,GACf,MAAM,IAAIa,UAAWC,EAAQ,uEAAwEd,IAEtG,IAAMoG,GAAmBlD,GACxB,MAAM,IAAIrC,UAAWC,EAAQ,sFAAuFoC,IAErH,GAAKjH,EAAI,EACR,MAAM,IAAI8E,WAAYD,EAAQ,+EAAgF7E,IAE/G,GAAK1C,EAAI,EACR,MAAM,IAAIwH,WAAYD,EAAQ,gFAAiFvH,IAEhH,GAAiB,IAAZG,EACJ,MAAM,IAAIqH,WAAYD,EAAQ,uDAE/B,GAAiB,IAAZjH,EACJ,MAAM,IAAIkH,WAAYD,EAAQ,yDAG/B,OAAW,IAAN7E,GAAiB,IAAN1C,GAAuB,IAAV4C,GAA0B,IAATiE,EACtCpF,GAEO,iBAAVkI,GACJgD,EAAO3M,EACP4M,EAAOlK,IAEPiK,EAAOjK,EACPkK,EAAO5M,GAIO,iBAAVyG,GACJoC,EAAM,EACNK,EAAMpB,IAENe,EAAMf,EACNoB,EAAM,GAEAzB,GAAMkC,EAAOjH,EAAG1C,EAAG4C,EAAOiF,EAAGgB,EAAKK,EAAK,EAAG1H,EAAGrB,EAT/Ca,EAAe2L,EAAMxM,GASuC0G,EAAMpF,EAAGnB,EARrEU,EAAe4L,EAAMtM,IAS3B,CCnFA/B,EAAAkO,GAAA,UAAA1L,ICAAxC,EAAAmO,GAAA,WCmCA,SAAgB/C,EAAOjH,EAAG1C,EAAG4C,EAAOiF,EAAGS,EAAUC,EAAUC,EAAShH,EAAGrB,EAASC,EAASyG,EAAMpF,EAAGnB,EAASC,GAC1G,IAAMsM,GAAmBlD,GACxB,MAAM,IAAIrC,UAAWC,EAAQ,sFAAuFoC,IAErH,GAAKjH,EAAI,EACR,MAAM,IAAI8E,WAAYD,EAAQ,+EAAgF7E,IAE/G,GAAK1C,EAAI,EACR,MAAM,IAAIwH,WAAYD,EAAQ,gFAAiFvH,IAEhH,GAAiB,IAAZG,EACJ,MAAM,IAAIqH,WAAYD,EAAQ,0DAE/B,GAAiB,IAAZjH,EACJ,MAAM,IAAIkH,WAAYD,EAAQ,2DAG/B,OAAW,IAAN7E,GAAiB,IAAN1C,GAAuB,IAAV4C,GAA0B,IAATiE,EACtCpF,EAEDgG,GAAMkC,EAAOjH,EAAG1C,EAAG4C,EAAOiF,EAAGS,EAAUC,EAAUC,EAAShH,EAAGrB,EAASC,EAASyG,EAAMpF,EAAGnB,EAASC,EACzG,ICnCA,IASAU,GAAAC,GAAAC,EATAC,GAAAD,MXlDe,6CW2Df,gBAUA2L,GATAxL,EAAAL,IACAzC,GAEAyC,GC/BI6C,GAAO,cACPC,GAAO,YACPC,GAAO,aACPC,GAAO,cAsBX,SAAS8I,GAAO/M,EAAGwB,EAAGc,EAAQC,GAC7B,IAAI4B,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAnE,EACAE,EAEJ,GAAKV,GAAK,EACT,OAAO,EAcR,IAZAQ,EAAK+B,EAGL4B,GAAS,EAETC,EAAQ,EACRC,EAAO,EACPC,EAAO,EACPC,EAAO,EACPG,EAAM,EAGAhE,EAAI,EAAGA,EAAIV,EAAGU,KACnBiE,EAAK/E,EAAM4B,EAAGhB,KACJuD,IACTM,EAAOnC,EAAKmC,EAAO2H,EAAOrH,EAAKV,KAC/BE,GAAS,GACEQ,EAAKb,GACXK,IACJI,EAAOrC,EAAKqC,EAAOyH,EAAOrH,EAAKX,MAGhCM,EAAOpC,EAAKoC,EAAOpC,EAAKyC,EAAKA,IAE9BnE,GAAM8B,EAiCP,OA9BK+B,EAAO,IAENC,EAAO,GAASA,EAAO2H,GAAmB3H,GAASA,KACvDD,EAAOnC,EAAKmC,EAAOnC,EAAKA,EAAKoC,EAAOL,IAASA,MAE9CS,EAAMxC,EAAK,EAAM+B,IACjBG,EAAQC,GACGE,EAAO,EAEbD,EAAO,GAAOA,EAAO2H,GAAiB3H,GAASA,GACnDA,EAAO4H,EAAO5H,IACdC,EAAOrC,EAAKgK,EAAO3H,GAASP,KAChBM,GACXG,EAAOH,EACPE,EAAOD,IAEPE,EAAOF,EACPC,EAAOF,GAERI,EAAM,EACNN,EAAQlC,EAAKA,EAAKsC,EAAOA,GAAStC,EAAK,EAAM8J,EAAOvH,EAAOD,OAE3DE,EAAMxC,EAAK,EAAM8B,IACjBI,EAAQG,IAITG,EAAM,EACNN,EAAQE,GAEFpC,EAAKgK,EAAO9H,GAAUM,EAC9B,CCvFA,SAASqI,GAAO/M,EAAGwB,EAAGc,GAErB,OAAOvB,GAASf,EAAGwB,EAAGc,EADbtB,EAAehB,EAAGsC,GAE5B,CCIA,SAAS0K,GAAMhN,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,EAASZ,EAAGsC,GAC9D,IAAIhB,EACAT,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAMR,IAJA9B,EAAIuC,EAAKvC,GACTsC,EAAIC,EAAKD,GACTzB,EAAKJ,EACLK,EAAKF,EACCG,EAAI,EAAGA,EAAIV,EAAGU,IACnBO,EAAMiB,EAAKvC,EAAI6B,EAAGhB,IAAS0B,EAAKD,EAAIR,EAAGhB,IACvCgB,EAAGhB,GAAOyB,EAAKvC,EAAI8B,EAAGhB,IAASyB,EAAKD,EAAIT,EAAGhB,IAC3CgB,EAAGhB,GAAOS,EACVT,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CCtBA,SAASuL,GAAMhN,EAAGwB,EAAGrB,EAASsB,EAAGnB,EAASX,EAAGsC,GAG5C,OAAOlB,GAASf,EAAGwB,EAAGrB,EAFba,EAAehB,EAAGG,GAEQsB,EAAGnB,EAD7BU,EAAehB,EAAGM,GACwBX,EAAGsC,EACvD,CCPA,SAASgL,GAAOhI,EAAGC,EAAGC,EAAK7C,EAAQC,GAClC,IAAI6C,EACAC,EACAC,EACAC,EACAC,EACA7F,EACAsC,EACAc,EAiCJ,OA/BAuC,EAAK1F,EAAMqF,GACXM,EAAK3F,EAAMsF,GAEVG,EAAO6H,EAAW,EADd5H,EAAKC,EACcN,EAEAC,GAGT,KADfE,EAAQuG,EAAkBrG,EAAKC,KAE9B5F,EAAI,EACJsC,EAAI,EACJuD,EAAI,EACJzC,EAAI,IAEJyC,EAAImG,EAAkBvG,EAAQ8G,EAAOP,EAAkBK,EAAOL,EAAkB1G,EAAEG,IAAY4G,EAAOL,EAAkBzG,EAAEE,OACzHI,EAAImG,EAAkBnG,EAAIH,GAC1B1F,EAAIgM,EAAkB1G,EAAIO,GAC1BvD,EAAI0J,EAAkBzG,EAAIM,GAC1BzC,EAAI,EACCuC,EAAKC,EACTxC,EAAId,EACa,IAANtC,IACXoD,EAAI4I,EAAkB,EAAMhM,KAG9BsF,EAAIO,EACJN,EAAInC,EACJoC,EAAK5C,GAAW0C,EAChBE,EAAK5C,EAASD,GAAW4C,EACzBC,EAAK5C,EAAW,EAAID,GAAa3C,EACjCwF,EAAK5C,EAAW,EAAID,GAAaL,EAC1BkD,CACR,CClDA,SAAS8H,GAAOhI,EAAGC,GAElB,OAAOQ,GAAKT,EAAGC,EADL,IAAIiI,EAAc,GACL,EAAG,EAC3B,CCSA,SAASC,GAAOpN,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,EAASsF,GAC5D,IAAIwH,EACAC,EACAC,EACAC,EACAC,EACAjN,EACAC,EACAC,EACAyF,EACApD,EAGJ,GADAsK,EAAQxH,EAAO,GACV7F,GAAK,IAAgB,IAAXqN,EACd,OAAO5L,EAIR,GAFAjB,EAAKJ,EACLK,EAAKF,EACAJ,IAAYG,GAAWH,EAAU,EAAI,CACzC,GAAKkN,EAAQ,EAAM,CAKlB,IAJAC,EAAOzH,EAAO,GACd0H,EAAO1H,EAAO,GACd2H,EAAO3H,EAAO,GACd4H,EAAO5H,EAAO,GACRnF,EAAI,EAAGA,EAAIV,EAAGU,IACnByF,EAAI3E,EAAGhB,GACPuC,EAAItB,EAAGjB,GACPgB,EAAGhB,GAAO0B,EAAKA,EAAKiE,EAAImH,GAASpL,EAAKa,EAAIwK,IAC1C9L,EAAGjB,GAAO0B,EAAKA,EAAKiE,EAAIqH,GAAStL,EAAKa,EAAI0K,IAC1CjN,GAAML,EAEP,OAAOsB,CACP,CACD,GAAe,IAAV4L,EAAgB,CAGpB,IAFAE,EAAO1H,EAAO,GACd2H,EAAO3H,EAAO,GACRnF,EAAI,EAAGA,EAAIV,EAAGU,IACnByF,EAAI3E,EAAGhB,GACPuC,EAAItB,EAAGjB,GACPgB,EAAGhB,GAAO0B,EAAKiE,EAAIjE,EAAKa,EAAIwK,IAC5B9L,EAAGjB,GAAO0B,EAAKA,EAAKiE,EAAIqH,GAASzK,GACjCvC,GAAML,EAEP,OAAOsB,CACP,CAGD,IAFA6L,EAAOzH,EAAO,GACd4H,EAAO5H,EAAO,GACRnF,EAAI,EAAGA,EAAIV,EAAGU,IACnByF,EAAI3E,EAAGhB,GACPuC,EAAItB,EAAGjB,GACPgB,EAAGhB,GAAO0B,EAAKA,EAAKiE,EAAImH,GAASvK,GACjCtB,EAAGjB,GAAO0B,GAAMiE,EAAIjE,EAAKa,EAAI0K,IAC7BjN,GAAML,EAEP,OAAOsB,CACP,CACD,GAAK4L,EAAQ,EAAM,CAKlB,IAJAC,EAAOzH,EAAO,GACd0H,EAAO1H,EAAO,GACd2H,EAAO3H,EAAO,GACd4H,EAAO5H,EAAO,GACRnF,EAAI,EAAGA,EAAIV,EAAGU,IACnByF,EAAI3E,EAAGhB,GACPuC,EAAItB,EAAGhB,GACPe,EAAGhB,GAAO0B,EAAKA,EAAKiE,EAAImH,GAASpL,EAAKa,EAAIwK,IAC1C9L,EAAGhB,GAAOyB,EAAKA,EAAKiE,EAAIqH,GAAStL,EAAKa,EAAI0K,IAC1CjN,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACP,CACD,GAAe,IAAV4L,EAAgB,CAGpB,IAFAE,EAAO1H,EAAO,GACd2H,EAAO3H,EAAO,GACRnF,EAAI,EAAGA,EAAIV,EAAGU,IACnByF,EAAI3E,EAAGhB,GACPuC,EAAItB,EAAGhB,GACPe,EAAGhB,GAAO0B,EAAKiE,EAAIjE,EAAKa,EAAIwK,IAC5B9L,EAAGhB,GAAOyB,EAAKA,EAAKiE,EAAIqH,GAASzK,GACjCvC,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACP,CAGD,IAFA6L,EAAOzH,EAAO,GACd4H,EAAO5H,EAAO,GACRnF,EAAI,EAAGA,EAAIV,EAAGU,IACnByF,EAAI3E,EAAGhB,GACPuC,EAAItB,EAAGhB,GACPe,EAAGhB,GAAO0B,EAAKA,EAAKiE,EAAImH,GAASvK,GACjCtB,EAAGhB,GAAOyB,GAAMiE,EAAIjE,EAAKa,EAAI0K,IAC7BjN,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CChGA,SAAS2L,GAAOpN,EAAGwB,EAAGrB,EAASsB,EAAGnB,EAASuF,GAG1C,OAAO9E,GAASf,EAAGwB,EAAGrB,EAFba,EAAehB,EAAGG,GAEQsB,EAAGnB,EAD7BU,EAAehB,EAAGM,GACwBuF,EACpD,CCzBAtH,EAAAwO,GAAA,UAAAhM,ICAAxC,EAAAyO,GAAA,UAAAjM,IC2BAxC,EAAAC,GAAA,SAAA4H,IC3BA7H,EAAA6O,GAAA,UAAArM,ICgCA,SAAS2M,GAAOjH,EAAOC,EAAM1G,EAAG4C,EAAO+D,EAAInF,EAAGrB,EAAS0G,EAAMpF,EAAGnB,GAC/D,IAAIwG,EACAC,EACAvG,EACAC,EACAuG,EACAC,EACAC,EACAC,EACAC,EACAvF,EACAO,EACAiF,EAEJ,IAAMxI,GAAU4H,GACf,MAAM,IAAIa,UAAW,uEAAwEb,GAE9F,IAAMxH,GAAkByH,GACvB,MAAM,IAAIY,UAAW,wHAAyHZ,GAE/I,GAAK1G,EAAI,EACR,MAAM,IAAIwH,WAAY,+EAAgFxH,GAEvG,GAAiB,IAAZG,EACJ,MAAM,IAAIqH,WAAY,oEAAqErH,GAE5F,GAAiB,IAAZG,EACJ,MAAM,IAAIkH,WAAY,kEAAmElH,GAE1F,GAAW,IAANN,GAAuB,IAAV4C,GAA0B,IAATiE,EAClC,OAAOpF,EAcR,GAXAI,EAAKvB,EACS,IAATuG,IACU,IAATA,EACJ2F,GAAOxM,EAAG,EAAKyB,EAAGnB,IAEbA,EAAU,IACduB,GAAMA,GAEP4K,GAAOzM,EAAG6G,EAAMpF,EAAGI,KAGN,IAAVe,EACJ,OAAOnB,EAcR,GAXC0F,EADIhH,EAAU,EACT,GAEE,EAAIH,GAAMG,EAGjBiH,EADI9G,EAAU,EACT,GAEE,EAAIN,GAAMM,EAGlB4G,EAAK,EAEQ,cAAVT,GAAkC,UAATC,GACf,iBAAVD,GAAqC,UAATC,EAC7B,CAGD,IAFAM,EAAKG,EACLF,EAAKG,EACChF,EAAI,EAAGA,EAAIpC,EAAGoC,IAAM,CAMzB,IALA0E,EAAQ5E,EAAKU,EAAQpB,EAAGwF,IACxBD,EAAQ,EACRtF,EAAGwF,IAAQ/E,EAAK4E,EAAQH,EAAIO,IAC5B1G,EAAKwG,EACLvG,EAAKwG,EACCI,EAAIH,EAAK,EAAGG,EAAIH,EAAKlH,EAAIoC,EAAGiF,IACjC7G,GAAML,EAENsB,EADAhB,GAAMH,IACK4B,EAAK4E,EAAQH,EAAIU,IAC5BN,GAAS7E,EAAKyE,EAAIU,GAAM7F,EAAGhB,IAE5BiB,EAAGwF,IAAQ/E,EAAKU,EAAQmE,GACxBC,GAAM7G,EACN8G,GAAM3G,EACN4G,GAAMlH,EAAIoC,CACV,CACD,OAAOX,CACP,CAID,IAFAuF,EAAKG,EACLF,EAAKG,EACChF,EAAI,EAAGA,EAAIpC,EAAGoC,IAAM,CAKzB,IAJA0E,EAAQ5E,EAAKU,EAAQpB,EAAGwF,IACxBD,EAAQ,EACRvG,EAAK2G,EACL1G,EAAK2G,EACCC,EAAIH,EAAIG,EAAIH,EAAK9E,EAAGiF,IACzB5F,EAAGhB,IAAQyB,EAAK4E,EAAQH,EAAIU,IAC5BN,GAAS7E,EAAKyE,EAAIU,GAAM7F,EAAGhB,IAC3BA,GAAML,EACNM,GAAMH,EAEPmB,EAAGwF,IAAQ/E,EAAKA,EAAK4E,EAAQH,EAAIO,EAAK9E,IAAQF,EAAKU,EAAQmE,IAC3DC,GAAM7G,EACN8G,GAAM3G,EACN4G,GAAM9E,EAAI,CACV,CACD,OAAOX,CACR,CCxIAlD,EAAAmP,GAAA,WCkCA,SAAgBjH,EAAOC,EAAM1G,EAAG4C,EAAO+D,EAAInF,EAAGrB,EAASC,EAASyG,EAAMpF,EAAGnB,EAASC,GACjF,IAAIuG,EACAC,EACAvG,EACAC,EACAuG,EACAC,EACAC,EACAC,EACAC,EACAhF,EACAiF,EAEJ,IAAMxI,GAAU4H,GACf,MAAM,IAAIa,UAAW,uEAAwEb,GAE9F,IAAMxH,GAAkByH,GACvB,MAAM,IAAIY,UAAW,wHAAyHZ,GAE/I,GAAK1G,EAAI,EACR,MAAM,IAAIwH,WAAY,+EAAgFxH,GAEvG,GAAiB,IAAZG,EACJ,MAAM,IAAIqH,WAAY,oEAAqErH,GAE5F,GAAiB,IAAZG,EACJ,MAAM,IAAIkH,WAAY,qEAAsElH,GAE7F,GAAW,IAANN,GAAuB,IAAV4C,GAA0B,IAATiE,EAClC,OAAOpF,EAUR,GAPc,IAAToF,IACU,IAATA,EACJ2F,GAAOxM,EAAG,EAAKyB,EAAGnB,EAASC,GAE3BkM,GAAOzM,EAAG6G,EAAMpF,EAAGnB,EAASC,IAGf,IAAVqC,EACJ,OAAOnB,EAMR,GAHA0F,EAAK/G,EACLgH,EAAK7G,EACL2G,EAAK,EAEQ,cAAVT,GAAkC,UAATC,GACf,iBAAVD,GAAqC,UAATC,EAC7B,CAGD,IAFAM,EAAKG,EACLF,EAAKG,EACChF,EAAI,EAAGA,EAAIpC,EAAGoC,IAAM,CAMzB,IALA0E,EAAQ5E,EAAKU,EAAQpB,EAAGwF,IACxBD,EAAQ,EACRtF,EAAGwF,IAAQ/E,EAAK4E,EAAQH,EAAIO,IAC5B1G,EAAKwG,EACLvG,EAAKwG,EACCI,EAAIH,EAAK,EAAGG,EAAIH,EAAKlH,EAAIoC,EAAGiF,IACjC7G,GAAML,EAENsB,EADAhB,GAAMH,IACK4B,EAAK4E,EAAQH,EAAIU,IAC5BN,GAAS7E,EAAKyE,EAAIU,GAAM7F,EAAGhB,IAE5BiB,EAAGwF,IAAQ/E,EAAKU,EAAQmE,GACxBC,GAAM7G,EACN8G,GAAM3G,EACN4G,GAAMlH,EAAIoC,CACV,CACD,OAAOX,CACP,CAID,IAFAuF,EAAKG,EACLF,EAAKG,EACChF,EAAI,EAAGA,EAAIpC,EAAGoC,IAAM,CAKzB,IAJA0E,EAAQ5E,EAAKU,EAAQpB,EAAGwF,IACxBD,EAAQ,EACRvG,EAAK2G,EACL1G,EAAK2G,EACCC,EAAIH,EAAIG,EAAIH,EAAK9E,EAAGiF,IACzB5F,EAAGhB,IAAQyB,EAAK4E,EAAQH,EAAIU,IAC5BN,GAAS7E,EAAKyE,EAAIU,GAAM7F,EAAGhB,IAC3BA,GAAML,EACNM,GAAMH,EAEPmB,EAAGwF,IAAQ/E,EAAKA,EAAK4E,EAAQH,EAAIO,EAAK9E,IAAQF,EAAKU,EAAQmE,IAC3DC,GAAM7G,EACN8G,GAAM3G,EACN4G,GAAM9E,EAAI,CACV,CACD,OAAOX,CACR,ICxGA,IASAR,GAAAC,GAAAC,EATAC,GAAAD,MClDe,6CD2Df,gBAUAwM,GATArM,EAAAL,IACAzC,GAEAyC,GEzCIyB,GAAI,EA2BR,SAASkL,GAAO5N,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GACnD,IAAIU,EACAT,EACAC,EACAoC,EACAnC,EACJ,GAAKV,GAAK,EACT,OAAOyB,EAMR,GAJAjB,EAAKJ,EACLK,EAAKF,EAGY,IAAZJ,GAA6B,IAAZG,EAAgB,CAIrC,IAHAuC,EAAI7C,EAAI0C,IAGC,EACR,IAAMhC,EAAI,EAAGA,EAAImC,EAAGnC,IACnBO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOiB,EAAGhB,GACbgB,EAAGhB,GAAOQ,EACVT,GAAML,EACNM,GAAMH,EAGR,GAAKN,EAAI0C,GACR,OAAOjB,EAER,IAAMf,EAAImC,EAAGnC,EAAIV,EAAGU,GAAKgC,GACxBzB,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOiB,EAAGhB,GACbgB,EAAGhB,GAAOQ,EAEVA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMiB,EAAGhB,EAAG,GAClBgB,EAAGhB,EAAG,GAAMQ,EAEZA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMiB,EAAGhB,EAAG,GAClBgB,EAAGhB,EAAG,GAAMQ,EAEZT,GAAMkC,GACNjC,GAAMiC,GAEP,OAAOjB,CACP,CACD,IAAMf,EAAI,EAAGA,EAAIV,EAAGU,IACnBO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOiB,EAAGhB,GACbgB,EAAGhB,GAAOQ,EACVT,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CCxDA,SAASmM,GAAO5N,EAAGwB,EAAGrB,EAASsB,EAAGnB,GAGjC,OAAKN,GAAK,EACFyB,EAIDV,GAASf,EAAGwB,EAAGrB,EAFjBa,EAAehB,EAAGG,GAEYsB,EAAGnB,EADjCU,EAAehB,EAAGM,GAExB,CC5BA/B,EAAAqP,GAAA,UAAA7M,ICmCA,SAAS8M,GAAOpH,EAAOC,EAAM1G,EAAG4C,EAAOiF,EAAGC,EAAKtG,EAAGrB,EAAS0G,EAAMpF,EAAGnB,GACnE,IAAIwG,EACAC,EACAgB,EACAC,EACAxH,EACAC,EACAuG,EACAC,EACAgB,EACAC,EACAxH,EACA0B,EACAiF,EAEJ,IAAMxI,GAAU4H,GACf,MAAM,IAAIa,UAAW,uEAAwEb,GAE9F,IAAMxH,GAAkByH,GACvB,MAAM,IAAIY,UAAW,yHAA0HZ,GAEhJ,GAAK1G,EAAI,EACR,MAAM,IAAIwH,WAAY,+EAAgFxH,GAEvG,GAAK8H,EAAMK,EAAK,EAAGnI,GAClB,MAAM,IAAIwH,WAAY,4FAA6FxH,EAAG8H,GAEvH,GAAiB,IAAZ3H,EACJ,MAAM,IAAIqH,WAAY,mEAAoErH,GAE3F,GAAiB,IAAZG,EACJ,MAAM,IAAIkH,WAAY,qEAAsElH,GAE7F,GAAW,IAANN,GAAuB,IAAV4C,GAA0B,IAATiE,EAClC,OAAOpF,EAaR,GAVc,IAAToF,IACU,IAATA,EACJ2F,GAAOxM,EAAG,EAAKyB,EAAGnB,IAEbA,EAAU,IACdA,GAAWA,GAEZmM,GAAOzM,EAAG6G,EAAMpF,EAAGnB,KAGN,IAAVsC,EACJ,OAAOnB,EAaR,GAVCwG,EADI9H,EAAU,EACT,GAEE,EAAIH,GAAMG,EAGjB+H,EADI5H,EAAU,EACT,GAEE,EAAIN,GAAMM,EAIL,cAAVmG,GAAkC,UAATC,GACf,iBAAVD,GAAqC,UAATC,EAC7B,CAGD,IAFAlG,EAAKyH,EACLxH,EAAKyH,EACCxH,EAAI,EAAGA,EAAIV,EAAGU,IAAM,CAQzB,IAPAoG,EAAQ5E,EAAKU,EAAQpB,EAAGhB,IACxBuG,EAAQ,EAERiB,EAAOhI,EACPgH,EAAKiB,GAFLF,EAAOrH,EAAI,GAEMP,EACjB8G,EAAKiB,EAAOH,EAAKzH,EACjBmB,EAAGhB,IAAQyB,EAAK4E,EAAQe,EAAGC,EAAIpH,EAAGA,IAC5B0B,EAAI2F,EAAM3F,EAAI4F,EAAM5F,IACzBiF,EAAMS,EAAIpH,EAAM0B,EAChBX,EAAGwF,IAAQ/E,EAAK4E,EAAQe,EAAER,IAC1BN,EAAQ7E,EAAK6E,EAAQ7E,EAAKV,EAAEwF,GAAMa,EAAER,KACpCL,GAAM7G,EACN8G,GAAM3G,EAEPmB,EAAGhB,IAAQyB,EAAKU,EAAQmE,GACxBvG,GAAML,EACNM,GAAMH,CACN,CACD,OAAOmB,CACP,CAID,IAFAjB,EAAKyH,GAAQjI,EAAE,GAAGG,EAClBM,EAAKyH,GAAQlI,EAAE,GAAGM,EACZI,EAAIV,EAAE,EAAGU,GAAK,EAAGA,IAAM,CAQ5B,IAPAoG,EAAQ5E,EAAKU,EAAQpB,EAAGhB,IACxBuG,EAAQ,EAERiB,EAAOtH,EACPsG,EAAKiB,GAFLF,EAAO,GAEU5H,EACjB8G,EAAKiB,EAAOH,EAAKzH,EACjBmB,EAAGhB,IAAQyB,EAAK4E,EAAQe,EAAGC,EAAIpH,EAAGA,IAC5B0B,EAAI2F,EAAM3F,EAAI4F,EAAM5F,IACzBiF,EAAMS,EAAIpH,EAAM0B,EAChBX,EAAGwF,IAAQ/E,EAAK4E,EAAQe,EAAER,IAC1BN,EAAQ7E,EAAK6E,EAAQ7E,EAAKV,EAAEwF,GAAMa,EAAER,KACpCL,GAAM7G,EACN8G,GAAM3G,EAEPmB,EAAGhB,IAAQyB,EAAKU,EAAQmE,GACxBvG,GAAML,EACNM,GAAMH,CACN,CACD,OAAOmB,CACR,CClJAlD,EAAAsP,GAAA,WCqCA,SAAgBpH,EAAOC,EAAM1G,EAAG4C,EAAOiF,EAAGC,EAAKtG,EAAGrB,EAASC,EAASyG,EAAMpF,EAAGnB,EAASC,GACrF,IAAIuG,EACAC,EACAgB,EACAC,EACAxH,EACAC,EACAuG,EACAC,EACAgB,EACAC,EACAxH,EACA0B,EACAiF,EAEJ,IAAMxI,GAAU4H,GACf,MAAM,IAAIa,UAAW,uEAAwEb,GAE9F,IAAMxH,GAAkByH,GACvB,MAAM,IAAIY,UAAW,yHAA0HZ,GAEhJ,GAAK1G,EAAI,EACR,MAAM,IAAIwH,WAAY,+EAAgFxH,GAEvG,GAAK8H,EAAMK,EAAK,EAAGnI,GAClB,MAAM,IAAIwH,WAAY,4FAA6FxH,EAAG8H,GAEvH,GAAiB,IAAZ3H,EACJ,MAAM,IAAIqH,WAAY,mEAAoErH,GAE3F,GAAiB,IAAZG,EACJ,MAAM,IAAIkH,WAAY,oEAAqElH,GAE5F,GAAW,IAANN,GAAuB,IAAV4C,GAA0B,IAATiE,EAClC,OAAOpF,EAUR,GAPc,IAAToF,IACU,IAATA,EACJ2F,GAAOxM,EAAG,EAAKyB,EAAGnB,EAASC,GAE3BkM,GAAOzM,EAAG6G,EAAMpF,EAAGnB,EAASC,IAGf,IAAVqC,EACJ,OAAOnB,EAMR,GAJAwG,EAAK7H,EACL8H,EAAK3H,EAIQ,cAAVkG,GAAkC,UAATC,GACf,iBAAVD,GAAqC,UAATC,EAC7B,CAGD,IAFAlG,EAAKyH,EACLxH,EAAKyH,EACCxH,EAAI,EAAGA,EAAIV,EAAGU,IAAM,CAQzB,IAPAoG,EAAQ5E,EAAKU,EAAQpB,EAAGhB,IACxBuG,EAAQ,EAERiB,EAAOhI,EACPgH,EAAKiB,GAFLF,EAAOrH,EAAI,GAEMP,EACjB8G,EAAKiB,EAAOH,EAAKzH,EACjBmB,EAAGhB,IAAQyB,EAAK4E,EAAQe,EAAGC,EAAIpH,EAAGA,IAC5B0B,EAAI2F,EAAM3F,EAAI4F,EAAM5F,IACzBiF,EAAMS,EAAIpH,EAAM0B,EAChBX,EAAGwF,IAAQ/E,EAAK4E,EAAQe,EAAER,IAC1BN,EAAQ7E,EAAK6E,EAAQ7E,EAAKV,EAAEwF,GAAMa,EAAER,KACpCL,GAAM7G,EACN8G,GAAM3G,EAEPmB,EAAGhB,IAAQyB,EAAKU,EAAQmE,GACxBvG,GAAML,EACNM,GAAMH,CACN,CACD,OAAOmB,CACP,CAID,IAFAjB,EAAKyH,GAAQjI,EAAE,GAAGG,EAClBM,EAAKyH,GAAQlI,EAAE,GAAGM,EACZI,EAAIV,EAAE,EAAGU,GAAK,EAAGA,IAAM,CAQ5B,IAPAoG,EAAQ5E,EAAKU,EAAQpB,EAAGhB,IACxBuG,EAAQ,EAERiB,EAAOtH,EACPsG,EAAKiB,GAFLF,EAAO,GAEU5H,EACjB8G,EAAKiB,EAAOH,EAAKzH,EACjBmB,EAAGhB,IAAQyB,EAAK4E,EAAQe,EAAGC,EAAIpH,EAAGA,IAC5B0B,EAAI2F,EAAM3F,EAAI4F,EAAM5F,IACzBiF,EAAMS,EAAIpH,EAAM0B,EAChBX,EAAGwF,IAAQ/E,EAAK4E,EAAQe,EAAER,IAC1BN,EAAQ7E,EAAK6E,EAAQ7E,EAAKV,EAAEwF,GAAMa,EAAER,KACpCL,GAAM7G,EACN8G,GAAM3G,EAEPmB,EAAGhB,IAAQyB,EAAKU,EAAQmE,GACxBvG,GAAML,EACNM,GAAMH,CACN,CACD,OAAOmB,CACR,ICrHA,IASAR,GAAAC,GAAAC,EATAC,GAAAD,MClDe,6CD2Df,gBAUA2M,GATAxM,EAAAL,IACAzC,GAEAyC,GEVA,SAAS8M,GAAMrH,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAASC,EAASyH,EAAGS,EAAUC,EAAUC,GAC1E,IAAIC,EACAxH,EACAyH,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAf,EAaJ,IAXAQ,EAAOQ,EAAY,CAAEX,EAAUC,MAG9BK,EAAML,EACNM,EAAMP,IAGNM,EAAMN,EACNO,EAAMN,GAEPN,EAAK7H,EAEFqI,GAAiB,UAAT/B,IACP+B,GAAiB,UAAT/B,EACV,CAED,IADAiC,EAAMV,EACAc,EAAK,EAAGA,EAAK/I,EAAG+I,IAAO,CAC5B,GAAkB,IAAbvH,EAAGmH,GAIP,IAHA1H,EAAMiB,EAAKU,EAAQpB,EAAGmH,IACtBK,EAAKR,EAAWK,EAAIE,EACpBL,EAAMT,EACAa,EAAK,EAAGA,GAAMC,EAAID,IACvBjB,EAAGmB,EAAIJ,EAAIE,IAAS5G,EAAKV,EAAGkH,GAAQzH,GACpCyH,GAAOvI,EAGTwI,GAAOxI,CACP,CACD,OAAO0H,CACP,CAGD,IADAc,EAAMV,EACAc,EAAK,EAAGA,EAAK/I,EAAG+I,IAAO,CAC5B,GAAkB,IAAbvH,EAAGmH,GAIP,IAHA1H,EAAMiB,EAAKU,EAAQpB,EAAGmH,IACtBK,EAAKR,EAAWK,EAAIE,EACpBL,EAAMC,EACAG,EAAKC,EAAID,EAAK9I,EAAG8I,IACtBjB,EAAGmB,EAAIJ,EAAIE,IAAS5G,EAAKV,EAAGkH,GAAQzH,GACpCyH,GAAOvI,EAGTwI,GAAOxI,CACP,CACD,OAAO0H,CACR,CCnDA,SAASkG,GAAMtH,EAAOC,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAAS0H,EAAGC,GACpD,IAAIe,EACAK,EAGJ,IAAMrK,GAAU4H,GACf,MAAM,IAAIa,UAAWC,EAAQ,uEAAwEd,IAEtG,IAAMxH,GAAkByH,GACvB,MAAM,IAAIY,UAAWC,EAAQ,yHAA0Hb,IAExJ,GAAK1G,EAAI,EACR,MAAM,IAAIwH,WAAYD,EAAQ,+EAAgFvH,IAE/G,GAAiB,IAAZG,EACJ,MAAM,IAAIqH,WAAYD,EAAQ,kEAAmEpH,IAElG,GAAK2H,EAAMK,EAAK,EAAGnI,GAClB,MAAM,IAAIwH,WAAYD,EAAQ,6FAA8FvH,EAAG8H,IAEhI,OAAW,IAAN9H,GAAqB,IAAV4C,EACRiF,GAEO,iBAAVpB,GACJoC,EAAM,EACNK,EAAMpB,IAENe,EAAMf,EACNoB,EAAM,GAGAzB,GAAMf,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAD3Ba,EAAehB,EAAGG,GACsB0H,EAAGgB,EAAKK,EAAK,GAC3D,CC9DA3K,EAAAwP,GAAA,WC2BA,SAAerH,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAASC,EAASyH,EAAGS,EAAUC,EAAUC,GAC1E,IAAMvJ,GAAkByH,GACvB,MAAM,IAAIY,UAAWC,EAAQ,wHAAyHb,IAEvJ,GAAK1G,EAAI,EACR,MAAM,IAAIwH,WAAYD,EAAQ,gFAAiFvH,IAEhH,GAAiB,IAAZG,EACJ,MAAM,IAAIqH,WAAYD,EAAQ,kEAAmEpH,IAElG,OAAW,IAANH,GAAqB,IAAV4C,EACRiF,EAEDJ,GAAMf,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAASC,EAASyH,EAAGS,EAAUC,EAAUC,EAC1E,ICtBA,IASAvH,GAAAC,GAAAC,EATAC,GAAAD,MChDe,4CDyDf,gBAUA6M,GATA1M,EAAAL,IACAzC,GAEAyC,GEJA,SAASgN,GAAOvH,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,EAASsH,EAAGS,EAAUC,EAAUC,GAChG,IAAIa,EACAC,EACAb,EACAC,EACAC,EACAY,EACAC,EACAZ,EACAC,EACAC,EACAC,EACAC,EACAf,EACAC,EAgBJ,IAdAO,EAAOQ,EAAY,CAAEX,EAAUC,MAG9BK,EAAML,EACNM,EAAMP,IAGNM,EAAMN,EACNO,EAAMN,GAIPI,EAFAV,EAAK7H,EAGLoJ,EAFAtB,EAAK3H,EAIFkI,GAAiB,UAAT/B,IACP+B,GAAiB,UAAT/B,EACV,CACD,IAAMqC,EAAK,EAAGA,EAAK/I,EAAG+I,IAAO,CAC5B,GAAoB,IAAbvH,EAAGmH,IAAkC,IAAblH,EAAG+H,GAMjC,IALAH,EAAOnH,EAAKU,EAAQnB,EAAG+H,IACvBF,EAAOpH,EAAKU,EAAQpB,EAAGmH,IACvBK,EAAKR,EAAWK,EAAIE,EACpBL,EAAMT,EACNsB,EAAMrB,EACAY,EAAK,EAAGA,GAAMC,EAAID,IACvBjB,EAAGmB,EAAIJ,EAAIE,IAAS5G,EAAKA,EAAKV,EAAGkH,GAAQW,GAASnH,EAAKT,EAAG8H,GAAQD,IAClEZ,GAAOvI,EACPoJ,GAAOjJ,EAGTqI,GAAOxI,EACPqJ,GAAOlJ,CACP,CACD,OAAOuH,CACP,CAED,IAAMkB,EAAK,EAAGA,EAAK/I,EAAG+I,IAAO,CAC5B,GAAoB,IAAbvH,EAAGmH,IAAkC,IAAblH,EAAG+H,GAMjC,IALAH,EAAOnH,EAAKU,EAAQnB,EAAG+H,IACvBF,EAAOpH,EAAKU,EAAQpB,EAAGmH,IACvBK,EAAKR,EAAWK,EAAIE,EACpBL,EAAMC,EACNY,EAAMC,EACAV,EAAKC,EAAID,EAAK9I,EAAG8I,IACtBjB,EAAGmB,EAAIJ,EAAIE,IAAS5G,EAAKA,EAAKV,EAAGkH,GAAQW,GAASnH,EAAKT,EAAG8H,GAAQD,IAClEZ,GAAOvI,EACPoJ,GAAOjJ,EAGTqI,GAAOxI,EACPqJ,GAAOlJ,CACP,CACD,OAAOuH,CACR,CCjEA,SAASoG,GAAOxH,EAAOC,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAASsB,EAAGnB,EAASuH,EAAGC,GACjE,IAAIe,EACAK,EAIJ,IAAMrK,GAAU4H,GACf,MAAM,IAAIa,UAAWC,EAAQ,uEAAwEd,IAEtG,IAAMxH,GAAkByH,GACvB,MAAM,IAAIY,UAAWC,EAAQ,yHAA0Hb,IAExJ,GAAK1G,EAAI,EACR,MAAM,IAAIwH,WAAYD,EAAQ,+EAAgFvH,IAE/G,GAAiB,IAAZG,EACJ,MAAM,IAAIqH,WAAYD,EAAQ,kEAAmEpH,IAElG,GAAiB,IAAZG,EACJ,MAAM,IAAIkH,WAAYD,EAAQ,mEAAoEpH,IAEnG,GAAK2H,EAAMK,EAAK,EAAGnI,GAClB,MAAM,IAAIwH,WAAYD,EAAQ,4FAA6FvH,EAAG8H,IAE/H,OAAW,IAAN9H,GAAqB,IAAV4C,EACRiF,GAEO,iBAAVpB,GACJoC,EAAM,EACNK,EAAMpB,IAENe,EAAMf,EACNoB,EAAM,GAIAzB,GAAMf,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAF3Ba,EAAehB,EAAGG,GAEsBsB,EAAGnB,EAD3CU,EAAehB,EAAGM,GACsCuH,EAAGgB,EAAKK,EAAK,GAC3E,CCtEA3K,EAAA0P,GAAA,WCgCA,SAAgBvH,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,EAASsH,EAAGS,EAAUC,EAAUC,GAChG,IAAMvJ,GAAkByH,GACvB,MAAM,IAAIY,UAAWC,EAAQ,yHAA0Hb,IAExJ,GAAK1G,EAAI,EACR,MAAM,IAAIwH,WAAYD,EAAQ,gFAAiFvH,IAEhH,GAAiB,IAAZG,EACJ,MAAM,IAAIqH,WAAYD,EAAQ,kEAAmEpH,IAElG,GAAiB,IAAZG,EACJ,MAAM,IAAIkH,WAAYD,EAAQ,mEAAoEpH,IAEnG,OAAW,IAANH,GAAqB,IAAV4C,EACRiF,EAEDJ,GAAMf,EAAM1G,EAAG4C,EAAOpB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,EAASsH,EAAGS,EAAUC,EAAUC,EAC/F,IC5BA,IASAvH,GAAAC,GAAAC,EATAC,GAAAD,MClDe,6CD2Df,gBAUA+M,GATA5M,EAAAL,IACAzC,GAEAyC,GETA,SAASkN,GAAOzH,EAAMiD,EAAOC,EAAM5J,EAAG6H,EAAGS,EAAUC,EAAUC,EAAShH,EAAGrB,EAASC,GACjF,IAAIyJ,EACApB,EACAxH,EACA2H,EACAC,EACAH,EACAC,EACAG,EACAC,EACAC,EACAf,EAkBJ,GAbA4B,EAAqB,aAATD,GADZnB,EAAOQ,EAAY,CAAEX,EAAUC,MAK9BK,EAAML,EACNM,EAAMP,IAGNM,EAAMN,EACNO,EAAMN,GAEPN,EAAK7H,GAGDqI,GAAkB,iBAAVkB,GAAqC,UAATjD,GACrC+B,GAAkB,iBAAVkB,GAAqC,UAATjD,EACrC,CAED,IADAiC,EAAMV,EACAc,EAAK,EAAGA,EAAK/I,EAAG+I,IAAO,CAC5B,GAAkB,IAAbvH,EAAGmH,GAAgB,CAIvB,IAHA1H,EAAMO,EAAGmH,GACTK,EAAKR,EAAWK,EAAIE,EACpBL,EAAMT,EACAa,EAAK,EAAGA,EAAKC,EAAID,IACtBtH,EAAGkH,GAAQxG,EAAKV,EAAGkH,GAAQxG,EAAKjB,EAAM4G,EAAGmB,EAAIJ,EAAIE,KACjDJ,GAAOvI,EAEH0J,IACJrI,EAAGmH,GAAQzG,EAAKV,EAAGmH,GAAQd,EAAGmB,EAAIJ,EAAIG,IAEvC,CACDJ,GAAOxI,CACP,CACD,OAAOqB,CACP,CACD,IACIiH,GAAkB,iBAAVkB,GAAqC,UAATjD,GACrC+B,GAAkB,iBAAVkB,GAAqC,UAATjD,EACrC,CAGD,IADAiC,EADAV,IAAQjI,EAAI,GAAMG,EAEZ4I,EAAK/I,EAAE,EAAG+I,GAAM,EAAGA,IAAO,CAC/B,GAAkB,IAAbvH,EAAGmH,GAAgB,CAIvB,IAHA1H,EAAMO,EAAGmH,GACTK,EAAKR,EAAWK,EAAIE,EACpBL,EAAMT,EACAa,EAAK9I,EAAE,EAAG8I,EAAKC,EAAID,IACxBtH,EAAGkH,GAAQxG,EAAKV,EAAGkH,GAAQxG,EAAKjB,EAAM4G,EAAGmB,EAAIJ,EAAIE,KACjDJ,GAAOvI,EAEH0J,IACJrI,EAAGmH,GAAQzG,EAAKV,EAAGmH,GAAQd,EAAGmB,EAAIJ,EAAIG,IAEvC,CACDJ,GAAOxI,CACP,CACD,OAAOqB,CACP,CACD,IACIiH,GAAkB,iBAAVkB,GAAqC,UAATjD,GACrC+B,GAAkB,iBAAVkB,GAAqC,UAATjD,EACrC,CAED,IADAiC,EAAMV,GAASjI,EAAI,GAAMG,EACnB4I,EAAK/I,EAAE,EAAG+I,GAAM,EAAGA,IAAO,CAO/B,IANA9H,EAAMO,EAAGmH,GACTK,EAAKR,EAAWK,EAAIE,EACpBL,EAAMC,EACDkB,IACJ5I,EAAMiB,EAAKjB,EAAM4G,EAAGmB,EAAIJ,EAAIG,KAEvBD,EAAKC,EAAG,EAAGD,GAAM,EAAGA,IAEzB7H,EAAMiB,EAAKjB,EAAMiB,EAAKV,EADtBkH,GAAOvI,GAC0B0H,EAAGmB,EAAIJ,EAAIE,KAE7CtH,EAAGmH,GAAQ1H,EACX0H,GAAOxI,CACP,CACD,OAAOqB,CACP,CAGD,IADAmH,EAAMV,EACAc,EAAK,EAAGA,EAAK/I,EAAG+I,IAAO,CAO5B,IANA9H,EAAMO,EAAGmH,GACTK,EAAKR,EAAWK,EAAIE,EACpBL,EAAMC,EACDkB,IACJ5I,EAAMiB,EAAKjB,EAAM4G,EAAGmB,EAAIJ,EAAIG,KAEvBD,EAAKC,EAAG,EAAGD,EAAK9I,EAAG8I,IAExB7H,EAAMiB,EAAKjB,EAAMiB,EAAKV,EADtBkH,GAAOvI,GAC0B0H,EAAGmB,EAAIJ,EAAIE,KAE7CtH,EAAGmH,GAAQ1H,EACX0H,GAAOxI,CACP,CACD,OAAOqB,CACR,CCtGA,SAAS2M,GAAO1H,EAAOC,EAAMiD,EAAOC,EAAM5J,EAAG6H,EAAGC,EAAKtG,EAAGrB,GACvD,IAAI0I,EACAK,EAGJ,IAAMrK,GAAU4H,GACf,MAAM,IAAIa,UAAWC,EAAQ,uEAAwEd,IAEtG,IAAMxH,GAAkByH,GACvB,MAAM,IAAIY,UAAWC,EAAQ,wHAAyHb,IAEvJ,IAAMnH,GAAsBoK,GAC3B,MAAM,IAAIrC,UAAWC,EAAQ,qFAAsFoC,IAEpH,IAAMG,GAAYF,GACjB,MAAM,IAAItC,UAAWC,EAAQ,gFAAiFqC,IAE/G,GAAK5J,EAAI,EACR,MAAM,IAAIwH,WAAYD,EAAQ,+EAAgFvH,IAE/G,GAAK8H,EAAMK,EAAK,EAAGnI,GAClB,MAAM,IAAIwH,WAAYD,EAAQ,8FAA+FvH,EAAG8H,IAEjI,GAAiB,IAAZ3H,EACJ,MAAM,IAAIqH,WAAYD,EAAQ,kEAAmEpH,IAElG,OAAW,IAANH,EACGwB,GAEO,iBAAViF,GACJoC,EAAM,EACNK,EAAMpB,IAENe,EAAMf,EACNoB,EAAM,GAGAzB,GAAMf,EAAMiD,EAAOC,EAAM5J,EAAG6H,EAAGgB,EAAKK,EAAK,EAAG1H,EAAGrB,EADjDa,EAAehB,EAAGG,IAExB,CCzEA5B,EAAA4P,GAAA,WCgCA,SAAgBzH,EAAMiD,EAAOC,EAAM5J,EAAG6H,EAAGS,EAAUC,EAAUC,EAAShH,EAAGrB,EAASC,GACjF,IAAMnB,GAAkByH,GACvB,MAAM,IAAIY,UAAWC,EAAQ,uHAAwHb,IAEtJ,IAAMnH,GAAsBoK,GAC3B,MAAM,IAAIrC,UAAWC,EAAQ,sFAAuFoC,IAErH,IAAMG,GAAYF,GACjB,MAAM,IAAItC,UAAWC,EAAQ,+EAAgFqC,IAE9G,GAAK5J,EAAI,EACR,MAAM,IAAIwH,WAAYD,EAAQ,gFAAiFvH,IAEhH,GAAiB,IAAZG,EACJ,MAAM,IAAIqH,WAAYD,EAAQ,kEAAmEpH,IAElG,OAAW,IAANH,EACGwB,EAEDiG,GAAMf,EAAMiD,EAAOC,EAAM5J,EAAG6H,EAAGS,EAAUC,EAAUC,EAAShH,EAAGrB,EAASC,EAChF,ICjCA,IASAa,GAAAC,GAAAC,EATAC,GAAAD,MChDe,6CDyDf,gBAUAiN,GATA9M,EAAAL,IACAzC,GAEAyC,GEjCIoC,GAAOC,ElNUH,CAEN,eAAgB,IAGhBhE,UAAa,IAGb,sBAAuB,KkNlBgB,CACxCiE,YAAc,IAqBf,SAASC,GAAUgI,GAClB,IAAI9H,EAAIL,GAAMmI,GACd,MAAsB,iBAAN9H,EAAmBA,EAAI,IACxC,CC1BA,IAAIC,GnNWI,CAEN,eAAgB,IAGhBrE,UAAa,IAGb,sBAAuB,KmNAzB,SAASsE,GAAU4H,GAClB,IAAI9H,EAAIC,GAAM6H,GACd,MAAsB,iBAAN9H,EAAmBA,EAAI,IACxC,CCcA,SAAS2K,GAAOrO,EAAGsO,EAAIrE,EAAI9J,EAASC,EAASmO,EAAIjO,EAASC,GACzD,IAAIC,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOuO,EAER,GAAsB,IAAjBzL,GAAQwL,GACZ,OAAOC,EAIR,IAFA/N,EAAKJ,EACLK,EAAKF,EACCG,EAAI,EAAGA,EAAIV,EAAGU,IACnB6N,EAAG5N,IAAK6N,EAAMC,EAAMH,EAAIrE,EAAGnJ,IAAKN,IAAQ+N,EAAGzN,IAAKL,IAAQA,GACxDD,GAAML,EACNM,GAAMH,EAEP,OAAOiO,CACR,CCtBA,SAASF,GAAOrO,EAAGsO,EAAIrE,EAAI9J,EAASoO,EAAIjO,GAGvC,OAAOS,GAASf,EAAGsO,EAAIrE,EAAI9J,EAFlBa,EAAehB,EAAGG,GAEaoO,EAAIjO,EADnCU,EAAehB,EAAGM,GAE5B,CCnCA/B,EAAA8P,GAAA,UAAAtN,IC2CA,IASAE,GAAAC,GAAAC,EATAC,GAAAD,MCxEe,6CDiFf,gBAUAuN,GATApN,EAAAL,IACAzC,GAEAyC,GE7BA,SAAS0N,GAAO3O,EAAGwB,EAAGrB,EAASsB,EAAGnB,GACjC,IAAIoB,EACAC,EACAC,EACAC,EACArB,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAIR,GAFAC,EAAQI,EAAaN,EAAG,GACxBG,EAAQG,EAAaL,EAAG,GACP,IAAZtB,GAA6B,IAAZG,EAAgB,CACrC,IAAMI,EAAI,EAAGA,EAAM,EAAFV,EAAKU,GAAK,EAC1BiB,EAAOjB,GAAMgB,EAAOhB,GACpBiB,EAAOjB,EAAE,GAAMgB,EAAOhB,EAAE,GAEzB,OAAOe,CACP,CAaD,IAXCjB,EADIL,EAAU,EACT,GAAK,EAAEH,GAAKG,EAEZ,EAGLM,EADIH,EAAU,EACT,GAAK,EAAEN,GAAKM,EAEZ,EAENsB,EAAe,EAAVzB,EACL0B,EAAe,EAAVvB,EACCI,EAAI,EAAGA,EAAIV,EAAGU,IACnBiB,EAAOlB,GAAOiB,EAAOlB,GACrBmB,EAAOlB,EAAG,GAAMiB,EAAOlB,EAAG,GAC1BA,GAAMoB,EACNnB,GAAMoB,EAEP,OAAOJ,CACR,CC3BA,SAASmN,GAAO5O,EAAGiK,EAAI9J,EAASC,EAASmO,EAAIjO,EAASC,EAASZ,EAAGsC,GACjE,IAAIP,EACAC,EACAV,EACAW,EACAC,EACArB,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOuO,EAQR,IANA7M,EAAQI,EAAamI,EAAI,GACzBtI,EAAQG,EAAayM,EAAI,GACzB3M,EAAe,EAAVzB,EACL0B,EAAe,EAAVvB,EACLE,EAAe,EAAVJ,EACLK,EAAe,EAAVF,EACCG,EAAI,EAAGA,EAAIV,EAAGU,IACnBO,EAAQtB,EAAE+B,EAAOlB,GAAWyB,EAAEN,EAAOlB,GACrCkB,EAAOlB,GAASd,EAAEgC,EAAOlB,GAAWwB,EAAEP,EAAOlB,GAC7CkB,EAAOlB,GAAOS,EAEdA,EAAQtB,EAAE+B,EAAOlB,EAAG,GAAUyB,EAAEN,EAAOlB,EAAG,GAC1CkB,EAAOlB,EAAG,GAAQd,EAAEgC,EAAOlB,EAAG,GAAUwB,EAAEP,EAAOlB,EAAG,GACpDkB,EAAOlB,EAAG,GAAMS,EAEhBT,GAAMoB,EACNnB,GAAMoB,EAEP,OAAO0M,CACR,CCjCA,SAASK,GAAO5O,EAAGiK,EAAI9J,EAASoO,EAAIjO,EAASX,EAAGsC,GAG/C,OAAOlB,GAASf,EAAGiK,EAAI9J,EAFda,EAAehB,EAAGG,GAESoO,EAAIjO,EAD/BU,EAAehB,EAAGM,GAC0BX,EAAGsC,EACzD,CChBA,SAAS4M,GAAO7O,EAAGsO,EAAIrE,EAAI9J,GAC1B,IAAIK,EACAE,EAEJ,GAAKV,GAAK,GAAKG,GAAW,EACzB,OAAO8J,EAER,GAAiB,IAAZ9J,EAAgB,CAEpB,IAAMO,EAAI,EAAGA,EAAIV,EAAGU,IACnBuJ,EAAGtJ,IAAK8N,EAAMH,EAAIrE,EAAGnJ,IAAKJ,IAAOA,GAElC,OAAOuJ,CACP,CAGD,IADAzJ,EAAK,EACCE,EAAI,EAAGA,EAAIV,EAAGU,IACnBuJ,EAAGtJ,IAAK8N,EAAMH,EAAIrE,EAAGnJ,IAAKN,IAAQA,GAClCA,GAAML,EAEP,OAAO8J,CACR,CCZA,SAAS6E,GAAO9O,EAAGwB,EAAGrB,EAASsB,EAAGnB,GACjC,IAAIoB,EACAC,EACAV,EACAW,EACAC,EACArB,EACAC,EACAC,EACA0B,EAEJ,GAAKpC,GAAK,EACT,OAAOyB,EAIR,GAFAC,EAAQI,EAAaN,EAAG,GACxBG,EAAQG,EAAaL,EAAG,GACP,IAAZtB,GAA6B,IAAZG,EAAgB,CACrC,IAAMI,EAAI,EAAGA,EAAM,EAAFV,EAAKU,GAAK,EAC1BO,EAAMS,EAAOhB,GACbgB,EAAOhB,GAAMiB,EAAOjB,GACpBiB,EAAOjB,GAAMO,EAGbA,EAAMS,EADNU,EAAI1B,EAAI,GAERgB,EAAOU,GAAMT,EAAOS,GACpBT,EAAOS,GAAMnB,EAEd,OAAOQ,CACP,CAaD,IAXCjB,EADIL,EAAU,EACT,GAAM,EAAEH,GAAMG,EAEd,EAGLM,EADIH,EAAU,EACT,GAAM,EAAEN,GAAMM,EAEd,EAENsB,EAAe,EAAVzB,EACL0B,EAAe,EAAVvB,EACCI,EAAI,EAAGA,EAAIV,EAAGU,IACnBO,EAAMS,EAAOlB,GACbkB,EAAOlB,GAAOmB,EAAOlB,GACrBkB,EAAOlB,GAAOQ,EAEdA,EAAMS,EAAOlB,EAAG,GAChBkB,EAAOlB,EAAG,GAAMmB,EAAOlB,EAAG,GAC1BkB,EAAOlB,EAAG,GAAMQ,EAEhBT,GAAMoB,EACNnB,GAAMoB,EAEP,OAAOJ,CACR,CC1FAlD,EAAAoQ,GAAA,WC6BA,SAAgB3O,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GACnD,IAAImB,EACAC,EACAC,EACAC,EACArB,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAQR,IANAC,EAAQI,EAAaN,EAAG,GACxBG,EAAQG,EAAaL,EAAG,GACxBG,EAAe,EAAVzB,EACL0B,EAAe,EAAVvB,EACLE,EAAe,EAAVJ,EACLK,EAAe,EAAVF,EACCG,EAAI,EAAGA,EAAIV,EAAGU,IACnBiB,EAAOlB,GAAOiB,EAAOlB,GACrBmB,EAAOlB,EAAG,GAAMiB,EAAOlB,EAAG,GAC1BA,GAAMoB,EACNnB,GAAMoB,EAEP,OAAOJ,CACR,ICtDAlD,EAAAqQ,GAAA,UAAA7N,ICAAxC,EAAAsQ,GAAA,WC4BA,SAAgB7O,EAAGsO,EAAIrE,EAAI9J,EAASC,GACnC,IAAII,EACAE,EAEJ,GAAKV,GAAK,GAAKG,GAAW,EACzB,OAAO8J,EAGR,IADAzJ,EAAKJ,EACCM,EAAI,EAAGA,EAAIV,EAAGU,IACnBuJ,EAAGtJ,IAAK8N,EAAMH,EAAIrE,EAAGnJ,IAAKN,IAAQA,GAClCA,GAAML,EAEP,OAAO8J,CACR,ICzCA1L,EAAAuQ,GAAA,WCsCA,SAAgB9O,EAAGwB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GACnD,IAAImB,EACAC,EACAV,EACAW,EACAC,EACArB,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAQR,IANAC,EAAQI,EAAaN,EAAG,GACxBG,EAAQG,EAAaL,EAAG,GACxBG,EAAe,EAAVzB,EACL0B,EAAe,EAAVvB,EACLE,EAAe,EAAVJ,EACLK,EAAe,EAAVF,EACCG,EAAI,EAAGA,EAAIV,EAAGU,IACnBO,EAAMS,EAAOlB,GACbkB,EAAOlB,GAAOmB,EAAOlB,GACrBkB,EAAOlB,GAAOQ,EAEdA,EAAMS,EAAOlB,EAAG,GAChBkB,EAAOlB,EAAG,GAAMmB,EAAOlB,EAAG,GAC1BkB,EAAOlB,EAAG,GAAMQ,EAEhBT,GAAMoB,EACNnB,GAAMoB,EAEP,OAAOJ,CACR,IC/DA,IAAAsN,GAAA,CAAA,EC+BA,SAAS5L,GAAM3B,EAAGC,GACjB,IAAIuN,EACAC,EACAC,EACAC,EACAC,EACAC,EACAlK,EACAlE,EACAqO,EACAC,EACAC,EACAC,EACAC,EACAC,EACAjM,EACAhD,EAEJ,IAAMkP,EAAsBpO,GAC3B,MAAM,IAAI8F,UAAWC,EAAQ,uHAAwH/F,IAEtJ,IAAMoO,EAAsBnO,GAC3B,MAAM,IAAI6F,UAAWC,EAAQ,wHAAyH9F,IAWvJ,GARA6N,EAAKO,EAAqBrO,GAC1B+N,EAAKM,EAAqBpO,GAG1BwN,EAAMK,EAAGQ,MACTZ,EAAMK,EAAGO,MAGJb,EAAIc,OAAS,EACjB,MAAM,IAAIzI,UAAWC,EAAQ,uEAE9B,GAAK2H,EAAIa,OAAS,EACjB,MAAM,IAAIzI,UAAWC,EAAQ,wEAG9B,GAAKyI,UAAUD,OAAS,GAEvB,IAAME,EADNjB,EAAMgB,UAAW,IAEhB,MAAM,IAAI1I,UAAWC,EAAQ,4EAA6EyH,SAG3GA,GAAO,EAKR,GAFAU,EAAKQ,EAAKjB,EAAIc,OAAQb,EAAIa,QAAW,GAEvB,KADdf,EAAMmB,EAAgBnB,EAAKU,IAE1B,MAAM,IAAIlI,WAAYD,EAAQ,2FAA4FmI,GAAK,EAAGM,UAAW,KAI9I,GADAL,EAAIV,EAAKD,GACJE,EAAKF,KAAUW,EACnB,MAAM,IAAInI,WAAYD,EAAQ,qIAAsI,IAAKyH,EAAKW,EAAG,IAAKX,EAAKE,EAAKF,KAGjM,IACC/N,EAAMmP,EAAsB,CAAEd,EAAIC,GAClC,CAAC,MAAQc,GACT,MAAM,IAAIC,MAAO/I,EAAQ,sGAAuG,IAAK0H,EAAI9N,KAAM,KAAO,IAAK+N,EAAI/N,KAAM,MACrK,CAcD,GAbAmO,EAAKrO,EAAK,GACVsO,EAAKtO,EAAK,GAGVkO,EAAMoB,EAASjB,EAAGQ,MAAOd,GAGzB7J,EAAMqL,EAAOrB,EAAK,CACjBsB,MAASnB,EAAGmB,MACZhK,MAAS6I,EAAG7I,QAIO,IAAf0I,EAAIY,OAGR,OAFArM,EAAI+D,GAAMkI,EAAGL,EAAG9E,KAAM8E,EAAGoB,QAAQ,GAAIpB,EAAG/M,OAAQgN,EAAG/E,KAAM+E,EAAGmB,QAAQ,GAAInB,EAAGhN,QAC3E4C,EAAIwL,KAAMjN,GACHyB,EAOR,IAJAiK,EAAMwB,EAActB,EAAI,CAAEN,IAC1BK,EAAMuB,EAAcrB,EAAI,CAAEP,IAGpBtO,EAAI,EAAGA,EAAImQ,EAAO1B,GAAOzO,IAC9B8O,EAAKJ,EAAI0B,OAAOrN,MAChBgM,EAAKJ,EAAIyB,OAAOrN,MAChBC,EAAI+D,GAAMkI,EAAGH,EAAGhF,KAAMgF,EAAGkB,QAAQ,GAAIlB,EAAGjN,OAAQkN,EAAGjF,KAAMiF,EAAGiB,QAAQ,GAAIjB,EAAGlN,QAC3E4C,EAAIwL,KAAMjQ,EAAGgD,GAEd,OAAOyB,CACR,CC/FA,SAAS4L,GAAStJ,EAAMgJ,GACvB,IAAIO,EACJ,IAAMC,EAAYxJ,GACjB,MAAM,IAAIH,UAAWC,EAAQ,oEAAqEE,IAEnG,IAAMyJ,EAAYT,IAAqB,OAAVA,EAC5B,MAAM,IAAInJ,UAAWC,EAAQ,sEAAuEkJ,IAGrG,OADAO,EAAU,EAUV,SAAyBvN,GACxB,OAAO0N,EAA2B1N,EAAOgN,EACzC,EAZsCW,EA8BvC,SAAe5P,EAAGC,GACjB,IAAIuN,EACAC,EACAC,EACAE,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3P,EACAU,EACJ,IAAMsQ,EAASxP,GACd,MAAM,IAAI8F,UAAWC,EAAQ,6GAA8G/F,IAE5I,IAAMwP,EAASvP,GACd,MAAM,IAAI6F,UAAWC,EAAQ,8GAA+G9F,IAE7I,GAAK4P,EAAY7P,IAAO6P,EAAY5P,GACnC,MAAM,IAAI6O,MAAO,sDAWlB,GARAhB,EAAKO,EAAqBrO,GAC1B+N,EAAKM,EAAqBpO,GAG1BwN,EAAMK,EAAGQ,MACTZ,EAAMK,EAAGO,MAGJb,EAAIc,OAAS,EACjB,MAAM,IAAIzI,UAAWC,EAAQ,uEAE9B,GAAK2H,EAAIa,OAAS,EACjB,MAAM,IAAIzI,UAAWC,EAAQ,wEAG9B,IAAM+J,EAAgBrC,EAAKC,GAC1B,MAAM,IAAIoB,MAAO,+EAGlB,GAAKN,UAAUD,OAAS,GAEvB,IAAME,EADNjB,EAAMgB,UAAW,IAEhB,MAAM,IAAI1I,UAAWC,EAAQ,4EAA6EyH,SAG3GA,GAAO,EAKR,GAFAU,EAAKQ,EAAKjB,EAAIc,OAAQb,EAAIa,QAAW,GAEvB,KADdf,EAAMmB,GAAgBnB,EAAKU,IAE1B,MAAM,IAAIlI,WAAYD,EAAQ,2FAA4FmI,GAAK,EAAGM,UAAW,KAM9I,GAHAL,EAAIV,EAAKD,GAGW,IAAfC,EAAIc,OAER,OADAtI,EAAMkI,EAAGL,EAAG9E,KAAM8E,EAAGoB,QAAQ,GAAIpB,EAAG/M,OAAQgN,EAAG/E,KAAM+E,EAAGmB,QAAQ,GAAInB,EAAGhN,QAChEd,EAUR,IAPAzB,EAAI6Q,GAAON,EAAStB,EAAKD,IAGzBI,EAAMwB,EAActB,EAAI,CAAEN,IAC1BK,EAAMuB,EAAcrB,EAAI,CAAEP,IAGpBtO,EAAI,EAAGA,EAAIV,EAAGU,IACnB8O,EAAKJ,EAAI0B,OAAOrN,MAChBgM,EAAKJ,EAAIyB,OAAOrN,MAChBgE,EAAMkI,EAAGH,EAAGhF,KAAMgF,EAAGkB,QAAQ,GAAIlB,EAAGjN,OAAQkN,EAAGjF,KAAMiF,EAAGiB,QAAQ,GAAIjB,EAAGlN,QAExE,OAAOd,CACP,CACF,CF3IAlD,EAAAwQ,GAAA,SAAAwC,IAUAhT,EAAAwQ,GAAA,QAAAhP,IAUAxB,EAAAwQ,GAAA,QAAAxN,IAUAhD,EAAAwQ,GAAA,QAAAhN,IAUAxD,EAAAwQ,GAAA,QAAA/M,IAUAzD,EAAAwQ,GAAA,QAAA5M,IAUA5D,EAAAwQ,GAAA,QAAA1M,IAUA9D,EAAAwQ,GAAA,QAAApM,IAUApE,EAAAwQ,GAAA,SAAAjM,IAUAvE,EAAAwQ,GAAA,QAAA7L,IAUA3E,EAAAwQ,GAAA,OAAA5L,IAUA5E,EAAAwQ,GAAA,uBAAAyC,IAUAjT,EAAAwQ,GAAA,2BG5HA,SAAkBtL,GACjB,IAAIgO,SAAahO,EACjB,MAAW,WAANgO,EACKjO,GAAUC,GAAYA,EAAQ,KAE7B,WAANgO,EACG7N,GAAUH,GAEX,IACR,IH6HAlF,EAAAwQ,GAAA,0BIxIA,SAAkBtL,GACjB,IAAIgO,SAAahO,EACjB,MAAW,WAANgO,EAC2B,OAAtB7N,GAAUH,GAAqB,KAAOA,EAErC,WAANgO,EACGjO,GAAUC,GAEX,IACR,IJyIAlF,EAAAwQ,GAAA,uBAAA2C,IAUAnT,EAAAwQ,GAAA,gBAAA7Q,IAUAK,EAAAwQ,GAAA,QAAA7K,IAUA3F,EAAAwQ,GAAA,OAAAhK,IAUAxG,EAAAwQ,GAAA,QAAA/J,IAUAzG,EAAAwQ,GAAA,QAAAnJ,IAUArH,EAAAwQ,GAAA,QAAA1I,IAUA9H,EAAAwQ,GAAA,QAAAzI,IAUA/H,EAAAwQ,GAAA,QAAAvI,IAUAjI,EAAAwQ,GAAA,QAAApH,IAUApJ,EAAAwQ,GAAA,QAAAnH,IAUArJ,EAAAwQ,GAAA,OAAA1G,IAUA9J,EAAAwQ,GAAA,QAAA3F,IAUA7K,EAAAwQ,GAAA,QAAArF,IAUAnL,EAAAwQ,GAAA,SAAA/E,IAUAzL,EAAAwQ,GAAA,QAAA5E,IAUA5L,EAAAwQ,GAAA,QAAA3E,IAUA7L,EAAAwQ,GAAA,QAAA1E,IAUA9L,EAAAwQ,GAAA,OAAAnE,IAUArM,EAAAwQ,GAAA,QAAAlE,IAUAtM,EAAAwQ,GAAA,QAAA/D,IAUAzM,EAAAwQ,GAAA,QAAA9D,IAUA1M,EAAAwQ,GAAA,SAAA7D,IAUA3M,EAAAwQ,GAAA,SAAA1D,IAUA9M,EAAAwQ,GAAA,iBAAA4C,IAUApT,EAAAwQ,GAAA,qBK1YA,SAAkBxD,GACjB,IAAIkG,SAAalG,EACjB,MAAW,WAANkG,EACKjO,GAAU+H,GAAaA,EAAS,KAE/B,WAANkG,EACG7N,GAAU2H,GAEX,IACR,IL2YAhN,EAAAwQ,GAAA,oBMtZA,SAAkBxD,GACjB,IAAIkG,SAAalG,EACjB,MAAW,WAANkG,EAC4B,OAAvB7N,GAAU2H,GAAsB,KAAOA,EAEtC,WAANkG,EACGjO,GAAU+H,GAEX,IACR,INuZAhN,EAAAwQ,GAAA,iBAAA6C,IAUArT,EAAAwQ,GAAA,UAAAnQ,IAUAL,EAAAwQ,GAAA,yBAAA8C,IAUAtT,EAAAwQ,GAAA,6BO5bA,SAAkBtL,GACjB,IAAIgO,SAAahO,EACjB,MAAW,WAANgO,EACKjO,GAAUC,GAAYA,EAAQ,KAE7B,WAANgO,EACG7N,GAAUH,GAEX,IACR,IP6bAlF,EAAAwQ,GAAA,4BQxcA,SAAkBtL,GACjB,IAAIgO,SAAahO,EACjB,MAAW,WAANgO,EAC2B,OAAtB7N,GAAUH,GAAqB,KAAOA,EAErC,WAANgO,EACGjO,GAAUC,GAEX,IACR,IRycAlF,EAAAwQ,GAAA,yBAAA+C,IAUAvT,EAAAwQ,GAAA,kBAAAjQ,IAUAP,EAAAwQ,GAAA,wBAAAgD,IAUAxT,EAAAwQ,GAAA,4BS9eA,SAAkBvD,GACjB,IAAIiG,SAAajG,EACjB,MAAW,WAANiG,EACKjO,GAAUgI,GAAgBA,EAAY,KAErC,WAANiG,EACG7N,GAAU4H,GAEX,IACR,IT+eAjN,EAAAwQ,GAAA,2BU1fA,SAAkBvD,GACjB,IAAIiG,SAAajG,EACjB,MAAW,WAANiG,EAC+B,OAA1B7N,GAAU4H,GAAyB,KAAOA,EAEzC,WAANiG,EACGjO,GAAUgI,GAEX,IACR,IV2fAjN,EAAAwQ,GAAA,wBAAAiD,IAUAzT,EAAAwQ,GAAA,iBAAA7P,IAUAX,EAAAwQ,GAAA,QAAAtD,IAUAlN,EAAAwQ,GAAA,QAAArD,IAUAnN,EAAAwQ,GAAA,SAAArP,IAUAnB,EAAAwQ,GAAA,SAAAnD,IAUArN,EAAAwQ,GAAA,SAAAhD,IAUAxN,EAAAwQ,GAAA,QAAA3C,IAUA7N,EAAAwQ,GAAA,OAAA1C,IAUA9N,EAAAwQ,GAAA,SAAAzC,IAUA/N,EAAAwQ,GAAA,QAAArC,IAUAnO,EAAAwQ,GAAA,QAAAhC,IAUAxO,EAAAwQ,GAAA,OAAA/B,IAUAzO,EAAAwQ,GAAA,QAAA9B,IAUA1O,EAAAwQ,GAAA,QAAA3B,IAUA7O,EAAAwQ,GAAA,QAAAtC,IAUAlO,EAAAwQ,GAAA,QAAArB,IAUAnP,EAAAwQ,GAAA,QAAAnB,IAUArP,EAAAwQ,GAAA,QAAAlB,IAUAtP,EAAAwQ,GAAA,OAAAhB,IAUAxP,EAAAwQ,GAAA,QAAAd,IAUA1P,EAAAwQ,GAAA,QAAAZ,IAUA5P,EAAAwQ,GAAA,6BAAAkD,IAUA1T,EAAAwQ,GAAA,iCWxuBA,SAAkBvD,GACjB,IAAIiG,SAAajG,EACjB,MAAW,WAANiG,EACKjO,GAAUgI,GAAgBA,EAAY,KAErC,WAANiG,EACG7N,GAAU4H,GAEX,IACR,IXyuBAjN,EAAAwQ,GAAA,gCYpvBA,SAAkBvD,GACjB,IAAIiG,SAAajG,EACjB,MAAW,WAANiG,EAC+B,OAA1B7N,GAAU4H,GAAyB,KAAOA,EAEzC,WAANiG,EACGjO,GAAUgI,GAEX,IACR,IZqvBAjN,EAAAwQ,GAAA,6BAAAmD,IAUA3T,EAAAwQ,GAAA,sBAAAoD,IAUA5T,EAAAwQ,GAAA,QAAAV,IAUA9P,EAAAwQ,GAAA,QAAAJ,IAUApQ,EAAAwQ,GAAA,QAAAH,IAUArQ,EAAAwQ,GAAA,QAAAF,IAUAtQ,EAAAwQ,GAAA,QAAAD,IatyBG,IAACnH,GAAQoJ,GAAStJ,GAAM,WCtCvB/E,GAAI,EAwBR,SAAS0P,GAAMpS,EAAG4C,EAAOpB,EAAGrB,EAASC,GACpC,IAAII,EACAqC,EACAnC,EAEJ,GAAKV,GAAK,GAAe,IAAV4C,EACd,OAAOpB,EAKR,GAHAhB,EAAKJ,EAGY,IAAZD,EAAgB,CAIpB,IAHA0C,EAAI7C,EAAI0C,IAGC,EACR,IAAMhC,EAAI,EAAGA,EAAImC,EAAGnC,IACnBc,EAAGhB,IAAQoC,EACXpC,GAAML,EAGR,GAAKH,EAAI0C,GACR,OAAOlB,EAER,IAAMd,EAAImC,EAAGnC,EAAIV,EAAGU,GAAKgC,GACxBlB,EAAGhB,IAAQoC,EACXpB,EAAGhB,EAAG,IAAOoC,EACbpB,EAAGhB,EAAG,IAAOoC,EACbpB,EAAGhB,EAAG,IAAOoC,EACbpB,EAAGhB,EAAG,IAAOoC,EACbpC,GAAMkC,GAEP,OAAOlB,CACP,CACD,IAAMd,EAAI,EAAGA,EAAIV,EAAGU,IACnBc,EAAGhB,IAAQoC,EACXpC,GAAML,EAEP,OAAOqB,CACR,CCxCA,SAAS4Q,GAAMpS,EAAG4C,EAAOpB,EAAGrB,GAC3B,OAAOY,GAASf,EAAG4C,EAAOpB,EAAGrB,EAASa,EAAehB,EAAGG,GACzD,CCMA,SAASkS,GAAYrS,EAAG4C,EAAOpB,EAAGrB,EAASC,GAC1C,IAAIoC,EACAhC,EACAkD,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAuB,IAAZG,EACf,OAAOyC,EAAQpB,EAAGpB,GAKnB,IAHAI,EAAKJ,EACLoC,EAAM,EACN7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIjP,GADJkB,EAAId,EAAQpB,EAAGhB,IAEViC,EAAKD,IAASC,EAAKiB,GACvB/D,GAAM6C,EAAIiP,EAAK/N,EAEf/D,GAAM+D,EAAE+N,EAAKjP,EAEdA,EAAMiP,EACNjR,GAAML,EAEP,OAAOqC,EAAM7C,CACd,CC5BA,SAAS0S,GAAYrS,EAAG4C,EAAOpB,EAAGrB,GACjC,OAAOY,GAASf,EAAG4C,EAAOpB,EAAGrB,EAASa,EAAehB,EAAGG,GACzD,CCXA,SAASmS,GAAStS,EAAG4C,EAAOpB,EAAGrB,EAASC,GACvC,OAAOiS,GAAYrS,EAAG4C,EAAOpB,EAAGrB,EAASC,EAC1C,CCDA,SAASkS,GAAStS,EAAG4C,EAAOpB,EAAGrB,GAC9B,OAAOY,GAASf,EAAG4C,EAAOpB,EAAGrB,EAASa,EAAehB,EAAGG,GACzD,CCKA,SAASoS,GAAavS,EAAG4C,EAAOpB,EAAGrB,EAASC,GAC3C,IAAIoC,EACAgQ,EACAhS,EACAiS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAuB,IAAZG,EACf,OAAOyC,EAAQpB,EAAG,GAMnB,IAJAhB,EAAKJ,EACLoC,EAAM,EACNgQ,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIjP,GADJkB,EAAId,EAAQpB,EAAGhB,IAGdb,EADI8C,EAAKD,IAASC,EAAKiB,GAClBlB,EAAIiP,EAAK/N,EAETA,EAAE+N,EAAKjP,EAEbA,EAAMiP,EACNA,EAAIgB,EAAK9S,EAER+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GAChB8S,EAAGhB,EAAK9R,EAERA,EAAE8R,EAAKgB,EAEdA,EAAKhB,EACLe,GAAOE,EACPlS,GAAML,EAEP,OAAOqC,EAAMiQ,EAAKD,CACnB,CCxCA,SAASD,GAAavS,EAAG4C,EAAOpB,EAAGrB,GAClC,OAAOY,GAASf,EAAG4C,EAAOpB,EAAGrB,EAASa,EAAehB,EAAGG,GACzD,CChBA,SAASwS,GAAY3S,EAAG4C,EAAOpB,EAAGrB,EAASC,GAC1C,IAAIoC,EACAhC,EACAE,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAuB,IAAZG,EACf,OAAOyC,EAAQpB,EAAG,GAInB,IAFAhB,EAAKJ,EACLoC,EAAM,EACA9B,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,GAAOI,EAAQpB,EAAGhB,GAClBA,GAAML,EAEP,OAAOqC,CACR,CCZA,SAASmQ,GAAY3S,EAAG4C,EAAOpB,EAAGrB,GACjC,OAAOY,GAASf,EAAG4C,EAAOpB,EAAGrB,EAASa,EAAehB,EAAGG,GACzD,CCnBA5B,EAAA6T,GAAA,UAAArR,ICAAxC,EAAA8T,GAAA,UAAAtR,ICAAxC,EAAA+T,GAAA,UAAAvR,ICAAxC,EAAAgU,GAAA,UAAAxR,ICAAxC,EAAAoU,GAAA,UAAA5R,ICDA,IAAI6R,GAAY,IA+BhB,SAASC,GAAW7S,EAAG4C,EAAOpB,EAAGrB,EAASC,GACzC,IAAII,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAuB,IAAZG,EACf,OAAOyC,EAAQpB,EAAGpB,GAGnB,GADAI,EAAKJ,EACAJ,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKW,EAAQpB,EAAGhB,GAChBA,GAAML,EAEP,OAAO8B,CACP,CACD,GAAKjC,GAAK4S,GAAY,CAarB,IAXAE,EAAKlQ,EAAQpB,EAAGhB,GAChBuS,EAAKnQ,EAAQpB,EAAGhB,EAAGL,GACnB6S,EAAKpQ,EAAQpB,EAAGhB,EAAI,EAAEL,GACtB8S,EAAKrQ,EAAQpB,EAAGhB,EAAI,EAAEL,GACtB+S,EAAKtQ,EAAQpB,EAAGhB,EAAI,EAAEL,GACtBgT,EAAKvQ,EAAQpB,EAAGhB,EAAI,EAAEL,GACtBiT,EAAKxQ,EAAQpB,EAAGhB,EAAI,EAAEL,GACtBkT,EAAKzQ,EAAQpB,EAAGhB,EAAI,EAAEL,GACtBK,GAAM,EAAIL,EAEVuC,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,GAAMlQ,EAAQpB,EAAGhB,GACjBuS,GAAMnQ,EAAQpB,EAAGhB,EAAGL,GACpB6S,GAAMpQ,EAAQpB,EAAGhB,EAAI,EAAEL,GACvB8S,GAAMrQ,EAAQpB,EAAGhB,EAAI,EAAEL,GACvB+S,GAAMtQ,EAAQpB,EAAGhB,EAAI,EAAEL,GACvBgT,GAAMvQ,EAAQpB,EAAGhB,EAAI,EAAEL,GACvBiT,GAAMxQ,EAAQpB,EAAGhB,EAAI,EAAEL,GACvBkT,GAAMzQ,EAAQpB,EAAGhB,EAAI,EAAEL,GACvBK,GAAM,EAAIL,EAMX,IAHA8B,EAAM6Q,EAAGC,GAAOC,EAAGC,IAASC,EAAGC,GAAOC,EAAGC,IAGhC3S,EAAIV,EAAGU,IACfuB,GAAKW,EAAQpB,EAAGhB,GAChBA,GAAML,EAEP,OAAO8B,CACP,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAEN6S,GADPS,GAAKA,EAAI,EACY1Q,EAAOpB,EAAGrB,EAASK,GAAOqS,GAAW7S,EAAEsT,EAAG1Q,EAAOpB,EAAGrB,EAASK,EAAI8S,EAAEnT,EACzF,CC1EA,SAAS0S,GAAW7S,EAAG4C,EAAOpB,EAAGrB,GAChC,OAAOY,GAASf,EAAG4C,EAAOpB,EAAGrB,EAASa,EAAehB,EAAGG,GACzD,CC3BA5B,EAAAsU,GAAA,UAAA9R,ICAA,IAAI6R,GAAY,IA8BhB,SAASY,GAASxT,EAAGwB,EAAGrB,EAASC,GAChC,IAAII,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAuB,IAAZG,EACf,OAAOsC,EAAKjB,EAAGpB,IAGhB,GADAI,EAAKJ,EACAJ,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKQ,EAAKjB,EAAGhB,IACbA,GAAML,EAEP,OAAO8B,CACP,CACD,GAAKjC,GAAK4S,GAAY,CAarB,IAXAE,EAAKrQ,EAAKjB,EAAGhB,IACbuS,EAAKtQ,EAAKjB,EAAGhB,EAAGL,IAChB6S,EAAKvQ,EAAKjB,EAAGhB,EAAI,EAAEL,IACnB8S,EAAKxQ,EAAKjB,EAAGhB,EAAI,EAAEL,IACnB+S,EAAKzQ,EAAKjB,EAAGhB,EAAI,EAAEL,IACnBgT,EAAK1Q,EAAKjB,EAAGhB,EAAI,EAAEL,IACnBiT,EAAK3Q,EAAKjB,EAAGhB,EAAI,EAAEL,IACnBkT,EAAK5Q,EAAKjB,EAAGhB,EAAI,EAAEL,IACnBK,GAAM,EAAIL,EAEVuC,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,GAAMrQ,EAAKjB,EAAGhB,IACduS,GAAMtQ,EAAKjB,EAAGhB,EAAGL,IACjB6S,GAAMvQ,EAAKjB,EAAGhB,EAAI,EAAEL,IACpB8S,GAAMxQ,EAAKjB,EAAGhB,EAAI,EAAEL,IACpB+S,GAAMzQ,EAAKjB,EAAGhB,EAAI,EAAEL,IACpBgT,GAAM1Q,EAAKjB,EAAGhB,EAAI,EAAEL,IACpBiT,GAAM3Q,EAAKjB,EAAGhB,EAAI,EAAEL,IACpBkT,GAAM5Q,EAAKjB,EAAGhB,EAAI,EAAEL,IACpBK,GAAM,EAAIL,EAMX,IAHA8B,EAAM6Q,EAAGC,GAAOC,EAAGC,IAASC,EAAGC,GAAOC,EAAGC,IAGhC3S,EAAIV,EAAGU,IACfuB,GAAKQ,EAAKjB,EAAGhB,IACbA,GAAML,EAEP,OAAO8B,CACP,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAENwT,GADPF,GAAKA,EAAI,EACU9R,EAAGrB,EAASK,GAAOgT,GAASxT,EAAEsT,EAAG9R,EAAGrB,EAASK,EAAI8S,EAAEnT,EACvE,CC3EA,SAASqT,GAASxT,EAAGwB,EAAGrB,GACvB,OAAOY,GAASf,EAAGwB,EAAGrB,EAASa,EAAehB,EAAGG,GAClD,CCEA,SAASsT,GAAWzT,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC5D,IAAIC,EACAC,EACAwB,EACAyB,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAMR,IAJAjB,EAAKJ,EACLK,EAAKF,EACL0B,EAAIO,EACJ7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIxP,GADJyB,EAAIlC,EAAGhB,IAEFiC,EAAKR,IAAOQ,EAAKiB,GACrB/D,GAAMsC,EAAEwP,EAAK/N,EAEb/D,GAAM+D,EAAE+N,EAAKxP,EAEdA,EAAIwP,EACJhQ,EAAGhB,GAAOwB,EAAItC,EACda,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CC/BA,SAASgS,GAAWzT,EAAGwC,EAAKhB,EAAGrB,EAASsB,EAAGnB,GAE1C,OADAS,GAASf,EAAGwC,EAAKhB,EAAGrB,EAASa,EAAehB,EAAGG,GAAWsB,EAAGnB,EAASU,EAAehB,EAAGM,IACjFmB,CACR,CCVA,SAASiS,GAAQ1T,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GACzD,OAAOkT,GAAWzT,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,EAC5D,CCHA,SAASmT,GAAQ1T,EAAGwC,EAAKhB,EAAGrB,EAASsB,EAAGnB,GACvC,OAAOS,GAASf,EAAGwC,EAAKhB,EAAGrB,EAASa,EAAehB,EAAGG,GAAWsB,EAAGnB,EAASU,EAAehB,EAAGM,GAChG,CCQA,SAASqT,GAAY3T,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC7D,IAAIiS,EACAhS,EACAC,EACAgS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAOR,IALAjB,EAAKJ,EACLK,EAAKF,EAELiS,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIjP,GADJkB,EAAIlC,EAAGhB,IAGNb,EADI8C,EAAKD,IAASC,EAAKiB,GAClBlB,EAAIiP,EAAK/N,EAETA,EAAE+N,EAAKjP,EAEbA,EAAMiP,EACNA,EAAIgB,EAAK9S,EAER+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GAChB8S,EAAGhB,EAAK9R,EAERA,EAAE8R,EAAKgB,EAEdA,EAAKhB,EACLe,GAAOE,EAEPjR,EAAGhB,GAAO+B,EAAMiQ,EAAKD,EACrBhS,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CC3CA,SAASkS,GAAY3T,EAAGwC,EAAKhB,EAAGrB,EAASsB,EAAGnB,GAE3C,OADAS,GAASf,EAAGwC,EAAKhB,EAAGrB,EAASa,EAAehB,EAAGG,GAAWsB,EAAGnB,EAASU,EAAehB,EAAGM,IACjFmB,CACR,CChBA,SAASmS,GAAW5T,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC5D,IAAIC,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAIR,IAFAjB,EAAKJ,EACLK,EAAKF,EACCG,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,GAAOhB,EAAGhB,GACViB,EAAGhB,GAAO+B,EACVhC,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CCbA,SAASmS,GAAW5T,EAAGwC,EAAKhB,EAAGrB,EAASsB,EAAGnB,GAE1C,OADAS,GAASf,EAAGwC,EAAKhB,EAAGrB,EAASa,EAAehB,EAAGG,GAAWsB,EAAGnB,EAASU,EAAehB,EAAGM,IACjFmB,CACR,CCtBAlD,EAAAiV,GAAA,UAAAzS,ICAAxC,EAAAkV,GAAA,UAAA1S,ICAAxC,EAAAmV,GAAA,UAAA3S,ICAAxC,EAAAoV,GAAA,UAAA5S,ICAAxC,EAAAqV,GAAA,UAAA7S,ICDA,IAAI6R,GAAY,IAmChB,SAASiB,GAAU7T,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC3D,IAAIC,EACAC,EACAwB,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAIR,GAFAjB,EAAKJ,EACLK,EAAKF,EACAP,GAAK4S,GAAY,CAErB,IADA3Q,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKT,EAAGhB,GACRiB,EAAGhB,GAAO+B,EAAMP,EAChBzB,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACP,CAKD,OAHAoS,GADAP,EAAIC,GAAOvT,EAAE,GACAwC,EAAKhB,EAAGrB,EAASK,EAAIiB,EAAGnB,EAASG,GAE9CoT,GAAU7T,EAAEsT,EAAG7R,EADfhB,IAAO6S,EAAE,GAAKhT,GACUkB,EAAGrB,EAASK,EAAI8S,EAAEnT,EAAUsB,EAAGnB,EAASG,EAAGH,GAC5DmB,CACR,CCnCA,SAASoS,GAAU7T,EAAGwC,EAAKhB,EAAGrB,EAASsB,EAAGnB,GAIzC,OAAKN,GAAK,EACFyB,EAYDqS,GAAO9T,EAAGwC,EAAKhB,EAAGrB,EAVpBA,EAAU,GACR,EAAEH,GAAKG,EAER,EAOgCsB,EAAGnB,EALpCA,EAAU,GACR,EAAEN,GAAKM,EAER,EAGP,CC5BA,SAASyT,GAAa/T,EAAGwB,EAAGc,GAC3B,IAAIE,EACAhC,EACAkD,EACAhD,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAG,IACP,EAEDiB,EAAKjB,EAAG,IAQhB,IALChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACA9B,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACa,IAAfwT,GAAOtQ,KACXlB,GAAOC,EAAKiB,IAEblD,GAAM8B,EAEP,OAAOE,CACR,CC7BA,SAASuR,GAAa/T,EAAGwB,EAAGc,EAAQC,GACnC,IAAIC,EACAhC,EACAkD,EACAhD,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAGe,IACP,EAEDE,EAAKjB,EAAGe,IAIhB,IAFA/B,EAAK+B,EACLC,EAAM,EACA9B,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACa,IAAfwT,GAAOtQ,KACXlB,GAAOC,EAAKiB,IAEblD,GAAM8B,EAEP,OAAOE,CACR,CC3BA,SAASyR,GAAUjU,EAAGwB,EAAGc,GACxB,OAAOyR,GAAa/T,EAAGwB,EAAGc,EAC3B,CCUA,SAAS4R,GAAalU,EAAGwB,EAAGrB,EAASgF,EAAKgP,GACzC,IAAI3R,EACAhC,EACA4T,EACA1Q,EACA+N,EACA9R,EACA2T,EACA5S,EAaJ,GAVCF,EADIL,EAAU,GACR,EAAEH,GAAKG,EAER,EAGLiU,EADID,EAAY,GACVA,EAED,EAEN3R,EAAM,EACDxC,GAAK,EAGT,OAFAmF,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,EAER,GAAW,IAANnF,GAAuB,IAAZG,EACf,OAAK6T,GAAOxS,EAAGhB,KACd2E,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,IAERA,EAAKiP,GAAO5S,EAAGhB,GACf2E,EAAKiP,EAAGD,GAAc,EACfhP,GAIR,IAFAxF,EAAI,EACJ2T,EAAI,EACE5S,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACa,IAAfwT,GAAOtQ,KACX+N,EAAIjP,EAAMkB,EACLjB,EAAKD,IAASC,EAAKiB,GACvB/D,GAAM6C,EAAIiP,EAAK/N,EAEf/D,GAAM+D,EAAE+N,EAAKjP,EAEdA,EAAMiP,EACN6B,GAAK,GAEN9S,GAAML,EAIP,OAFAgF,EAAKiP,GAAO5R,EAAM7C,EAClBwF,EAAKiP,EAAGD,GAAcb,EACfnO,CACR,CCrDA,SAAS+O,GAAalU,EAAGwB,EAAGrB,EAASC,EAAS+E,EAAKgP,EAAWE,GAC7D,IAAI7R,EACAhC,EACA4T,EACA1Q,EACA+N,EACA9R,EACA2T,EACA5S,EAMJ,GAJAF,EAAKJ,EACLgU,EAAKC,EAEL7R,EAAM,EACDxC,GAAK,EAGT,OAFAmF,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,EAER,GAAW,IAANnF,GAAuB,IAAZG,EACf,OAAK6T,GAAOxS,EAAGhB,KACd2E,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,IAERA,EAAKiP,GAAO5S,EAAGhB,GACf2E,EAAKiP,EAAGD,GAAc,EACfhP,GAIR,IAFAxF,EAAI,EACJ2T,EAAI,EACE5S,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACa,IAAfwT,GAAOtQ,KACX+N,EAAIjP,EAAMkB,EACLjB,EAAKD,IAASC,EAAKiB,GACvB/D,GAAM6C,EAAIiP,EAAK/N,EAEf/D,GAAM+D,EAAE+N,EAAKjP,EAEdA,EAAMiP,EACN6B,GAAK,GAEN9S,GAAML,EAIP,OAFAgF,EAAKiP,GAAO5R,EAAM7C,EAClBwF,EAAKiP,EAAGD,GAAcb,EACfnO,CACR,CC3DA,SAASmP,GAAUtU,EAAGwB,EAAGrB,EAASgF,EAAKgP,GACtC,OAAOD,GAAalU,EAAGwB,EAAGrB,EAASgF,EAAKgP,EACzC,CCOA,SAASI,GAAcvU,EAAGwB,EAAGrB,EAASgF,EAAKgP,GAC1C,IAAI3R,EACAgQ,EACAC,EACAC,EACAlS,EACA4T,EACA1Q,EACA+N,EACA9R,EACA2T,EACA5S,EAaJ,GAVCF,EADIL,EAAU,GACR,EAAEH,GAAKG,EAER,EAGLiU,EADID,EAAY,GACVA,EAED,EAEN3R,EAAM,EACDxC,GAAK,EAGT,OAFAmF,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,EAER,GAAW,IAANnF,GAAuB,IAAZG,EACf,OAAK6T,GAAOxS,EAAGhB,KACd2E,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,IAERA,EAAKiP,GAAO5S,EAAGhB,GACf2E,EAAKiP,EAAGD,GAAc,EACfhP,GAKR,IAHAqN,EAAM,EACNC,EAAK,EACLa,EAAI,EACE5S,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACa,IAAfwT,GAAOtQ,KACX+N,EAAIjP,EAAMkB,EAET/D,EADI8C,EAAKD,IAASC,EAAKiB,GAClBlB,EAAIiP,EAAK/N,EAETA,EAAE+N,EAAKjP,EAEbA,EAAMiP,EACNA,EAAIgB,EAAK9S,EAER+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GAChB8S,EAAGhB,EAAK9R,EAERA,EAAE8R,EAAKgB,EAEdA,EAAKhB,EACLe,GAAOE,EACPY,GAAK,GAEN9S,GAAML,EAIP,OAFAgF,EAAKiP,GAAO5R,EAAMiQ,EAAKD,EACvBrN,EAAKiP,EAAGD,GAAcb,EACfnO,CACR,CC5EA,SAASqP,GAAaxU,EAAGwB,EAAGrB,EAASgF,EAAKgP,GACzC,IAAI3R,EACAhC,EACA4T,EACAd,EACA5S,EAaJ,GAVCF,EADIL,EAAU,GACR,EAAEH,GAAKG,EAER,EAGLiU,EADID,EAAY,GACVA,EAED,EAEN3R,EAAM,EACDxC,GAAK,EAGT,OAFAmF,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,EAER,GAAW,IAANnF,GAAuB,IAAZG,EACf,OAAK6T,GAAOxS,EAAGhB,KACd2E,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,IAERA,EAAKiP,GAAO5S,EAAGhB,GACf2E,EAAKiP,EAAGD,GAAc,EACfhP,GAGR,IADAmO,EAAI,EACE5S,EAAI,EAAGA,EAAIV,EAAGU,KACO,IAArBsT,GAAOxS,EAAGhB,MACdgC,GAAOhB,EAAGhB,GACV8S,GAAK,GAEN9S,GAAML,EAIP,OAFAgF,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAcb,EACfnO,CACR,CC7DA5G,EAAAsV,GAAA,UAAA9S,ICAAxC,EAAAwV,GAAA,UAAAhT,ICAAxC,EAAA0V,GAAA,WCgBA,SAAmBjU,EAAGwB,EAAGc,EAAQC,GAChC,OAAOwR,GAAa/T,EAAGwB,EAAGc,EAAQC,EACnC,IClBAhE,EAAA2V,GAAA,UAAAnT,ICAAxC,EAAA+V,GAAA,WCmBA,SAAmBtU,EAAGwB,EAAGrB,EAASC,EAAS+E,EAAKgP,EAAWE,GAC1D,OAAOH,GAAalU,EAAGwB,EAAGrB,EAASC,EAAS+E,EAAKgP,EAAWE,EAC7D,ICrBA9V,EAAAgW,GAAA,WC4BA,SAAuBvU,EAAGwB,EAAGrB,EAASC,EAAS+E,EAAKgP,EAAWE,GAC9D,IAAI7R,EACAgQ,EACAC,EACAC,EACAlS,EACA4T,EACA1Q,EACA+N,EACA9R,EACA2T,EACA5S,EAMJ,GAJAF,EAAKJ,EACLgU,EAAKC,EAEL7R,EAAM,EACDxC,GAAK,EAGT,OAFAmF,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,EAER,GAAW,IAANnF,GAAuB,IAAZG,EACf,OAAK6T,GAAOxS,EAAGhB,KACd2E,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,IAERA,EAAKiP,GAAO5S,EAAGhB,GACf2E,EAAKiP,EAAGD,GAAc,EACfhP,GAKR,IAHAqN,EAAM,EACNC,EAAK,EACLa,EAAI,EACE5S,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACa,IAAfwT,GAAOtQ,KACX+N,EAAIjP,EAAMkB,EAET/D,EADI8C,EAAKD,IAASC,EAAKiB,GAClBlB,EAAIiP,EAAK/N,EAETA,EAAE+N,EAAKjP,EAEbA,EAAMiP,EACNA,EAAIgB,EAAK9S,EAER+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GAChB8S,EAAGhB,EAAK9R,EAERA,EAAE8R,EAAKgB,EAEdA,EAAKhB,EACLe,GAAOE,EACPY,GAAK,GAEN9S,GAAML,EAIP,OAFAgF,EAAKiP,GAAO5R,EAAMiQ,EAAKD,EACvBrN,EAAKiP,EAAGD,GAAcb,EACfnO,CACR,ICxFA5G,EAAAiW,GAAA,WCmBA,SAAsBxU,EAAGwB,EAAGrB,EAASC,EAAS+E,EAAKgP,EAAWE,GAC7D,IAAI7R,EACAhC,EACA4T,EACAd,EACA5S,EAMJ,GAJAF,EAAKJ,EACLgU,EAAKC,EAEL7R,EAAM,EACDxC,GAAK,EAGT,OAFAmF,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,EAER,GAAW,IAANnF,GAAuB,IAAZG,EACf,OAAK6T,GAAOxS,EAAGhB,KACd2E,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,IAERA,EAAKiP,GAAO5S,EAAGhB,GACf2E,EAAKiP,EAAGD,GAAc,EACfhP,GAGR,IADAmO,EAAI,EACE5S,EAAI,EAAGA,EAAIV,EAAGU,KACO,IAArBsT,GAAOxS,EAAGhB,MACdgC,GAAOhB,EAAGhB,GACV8S,GAAK,GAEN9S,GAAML,EAIP,OAFAgF,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAcb,EACfnO,CACR,ICxDA,IAAIyN,GAAY,IAqChB,SAAS6B,GAAOzU,EAAGwB,EAAGrB,EAASC,EAAS+E,EAAKgP,EAAWE,GACvD,IAAI7T,EACA4T,EACAtB,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5P,EACAhD,EAEJ,GAAKV,GAAK,EACT,OAAOmF,EAIR,GAFA3E,EAAKJ,EACLgU,EAAKC,EACM,IAANrU,GAAuB,IAAZG,EACf,OAAK6T,GAAOxS,EAAGhB,MAGf2E,EAAKiP,IAAQ5S,EAAGhB,GAChB2E,EAAKiP,EAAGD,IAAe,GAHfhP,EAMT,GAAKnF,EAAI,EAAI,CAIZ,IAFAiC,EAAI,EACJqR,EAAI,EACE5S,EAAI,EAAGA,EAAIV,EAAGU,KACnBgD,EAAIlC,EAAGhB,KACIkD,IACVzB,GAAKyB,EACL4P,GAAK,GAEN9S,GAAML,EAIP,OAFAgF,EAAKiP,IAAQnS,EACbkD,EAAKiP,EAAGD,IAAeb,EAChBnO,CACP,CACD,GAAKnF,GAAK4S,GAAY,CAarB,IAXAE,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAI,EAEJ5Q,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,GAC1BgD,EAAIlC,EAAGhB,KACIkD,IACVoP,GAAMpP,EACN4P,GAAK,IAGN5P,EAAIlC,EADJhB,GAAML,KAEKuD,IACVqP,GAAMrP,EACN4P,GAAK,IAGN5P,EAAIlC,EADJhB,GAAML,KAEKuD,IACVsP,GAAMtP,EACN4P,GAAK,IAGN5P,EAAIlC,EADJhB,GAAML,KAEKuD,IACVuP,GAAMvP,EACN4P,GAAK,IAGN5P,EAAIlC,EADJhB,GAAML,KAEKuD,IACVwP,GAAMxP,EACN4P,GAAK,IAGN5P,EAAIlC,EADJhB,GAAML,KAEKuD,IACVyP,GAAMzP,EACN4P,GAAK,IAGN5P,EAAIlC,EADJhB,GAAML,KAEKuD,IACV0P,GAAM1P,EACN4P,GAAK,IAGN5P,EAAIlC,EADJhB,GAAML,KAEKuD,IACV2P,GAAM3P,EACN4P,GAAK,GAEN9S,GAAML,EAMP,IAHA8B,EAAM6Q,EAAGC,GAAOC,EAAGC,IAASC,EAAGC,GAAOC,EAAGC,IAGhC3S,EAAIV,EAAGU,KACfgD,EAAIlC,EAAGhB,KACIkD,IACVzB,GAAKyB,EACL4P,GAAK,GAEN9S,GAAML,EAIP,OAFAgF,EAAKiP,IAAQnS,EACbkD,EAAKiP,EAAGD,IAAeb,EAChBnO,CACP,CAMD,OAJAmO,EAAIC,GAAOvT,EAAE,GAEbyU,GADAnB,GAAKA,EAAI,EACC9R,EAAGrB,EAASK,EAAI2E,EAAKgP,EAAWE,GAC1CI,GAAOzU,EAAEsT,EAAG9R,EAAGrB,EAASK,EAAI8S,EAAEnT,EAAUgF,EAAKgP,EAAWE,GACjDlP,CACR,CC/IA,SAASuP,GAAY1U,EAAGwB,EAAGrB,EAASgF,EAAKgP,GACxC,IAAI3T,EACA4T,EAcJ,OAZC5T,EADIL,EAAU,GACR,EAAEH,GAAKG,EAER,EAONgF,EAJCiP,EADID,EAAY,GACVA,EAED,GAEM,EACZhP,EAAKiP,EAAGD,GAAc,EACtBM,GAAOzU,EAAGwB,EAAGrB,EAASK,EAAI2E,EAAKgP,EAAWC,GACnCjP,CACR,CClBA,SAASwP,GAAY3U,EAAGwB,EAAGc,GAC1B,IAAIE,EACAhC,EACAkD,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAG,IACP,EAEDA,EAAG,GASX,IANChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACN7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACa,IAAfwT,GAAOtQ,KACX+N,EAAIjP,EAAMkB,EACLjB,EAAKD,IAASC,EAAKiB,GACvB/D,GAAM6C,EAAIiP,EAAK/N,EAEf/D,GAAM+D,EAAE+N,EAAKjP,EAEdA,EAAMiP,GAEPjR,GAAM8B,EAEP,OAAOE,EAAM7C,CACd,CCtCA,SAASgV,GAAY3U,EAAGwB,EAAGc,EAAQC,GAClC,IAAIC,EACAhC,EACAkD,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAGe,IACP,EAEDf,EAAGe,GAKX,IAHA/B,EAAK+B,EACLC,EAAM,EACN7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACa,IAAfwT,GAAOtQ,KACX+N,EAAIjP,EAAMkB,EACLjB,EAAKD,IAASC,EAAKiB,GACvB/D,GAAM6C,EAAIiP,EAAK/N,EAEf/D,GAAM+D,EAAE+N,EAAKjP,EAEdA,EAAMiP,GAEPjR,GAAM8B,EAEP,OAAOE,EAAM7C,CACd,CC5CA,SAASiV,GAAS5U,EAAGwB,EAAGc,GACvB,OAAOqS,GAAY3U,EAAGwB,EAAGc,EAC1B,CCQA,SAASuS,GAAa7U,EAAGwB,EAAGc,GAC3B,IAAIE,EACAgQ,EACAhS,EACAiS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAG,IACP,EAEDA,EAAG,GAUX,IAPChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACNgQ,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACa,IAAfwT,GAAOtQ,KACX+N,EAAIjP,EAAMkB,EAET/D,EADI8C,EAAKD,IAASC,EAAKiB,GAClBlB,EAAIiP,EAAK/N,EAETA,EAAE+N,EAAKjP,EAEbA,EAAMiP,EACNA,EAAIgB,EAAK9S,EAER+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GAChB8S,EAAGhB,EAAK9R,EAERA,EAAE8R,EAAKgB,EAEdA,EAAKhB,EACLe,GAAOE,GAERlS,GAAM8B,EAEP,OAAOE,EAAMiQ,EAAKD,CACnB,CC3DA,SAASsC,GAAY9U,EAAGwB,EAAGc,GAC1B,IAAIE,EACAhC,EACAE,EAGJ,GADA8B,EAAM,EACDxC,GAAK,EACT,OAAOwC,EAER,GAAW,IAANxC,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAG,IACPgB,EAEDhB,EAAG,GAOX,IAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEA5B,EAAI,EAAGA,EAAIV,EAAGU,KACO,IAArBsT,GAAOxS,EAAGhB,MACdgC,GAAOhB,EAAGhB,IAEXA,GAAM8B,EAEP,OAAOE,CACR,CC1CAjE,EAAAmW,GAAA,WC2BA,SAAqB1U,EAAGwB,EAAGrB,EAASC,EAAS+E,EAAKgP,EAAWE,GAI5D,OAHAlP,EAAKkP,GAAc,EACnBlP,EAAKkP,EAAUF,GAAc,EAC7BM,GAAOzU,EAAGwB,EAAGrB,EAASC,EAAS+E,EAAKgP,EAAWE,GACxClP,CACR,IChCA5G,EAAAoW,GAAA,UAAA5T,ICAAxC,EAAAqW,GAAA,WCeA,SAAkB5U,EAAGwB,EAAGc,EAAQC,GAC/B,OAAOoS,GAAY3U,EAAGwB,EAAGc,EAAQC,EAClC,ICjBAhE,EAAAsW,GAAA,WCwBA,SAAsB7U,EAAGwB,EAAGc,EAAQC,GACnC,IAAIC,EACAgQ,EACAhS,EACAiS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAGe,IACP,EAEDf,EAAGe,GAMX,IAJA/B,EAAK+B,EACLC,EAAM,EACNgQ,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACa,IAAfwT,GAAOtQ,KACX+N,EAAIjP,EAAMkB,EAET/D,EADI8C,EAAKD,IAASC,EAAKiB,GAClBlB,EAAIiP,EAAK/N,EAETA,EAAE+N,EAAKjP,EAEbA,EAAMiP,EACNA,EAAIgB,EAAK9S,EAER+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GAChB8S,EAAGhB,EAAK9R,EAERA,EAAE8R,EAAKgB,EAEdA,EAAKhB,EACLe,GAAOE,GAERlS,GAAM8B,EAEP,OAAOE,EAAMiQ,EAAKD,CACnB,ICtEAjU,EAAAuW,GAAA,WCeA,SAAqB9U,EAAGwB,EAAGc,EAAQC,GAClC,IAAIC,EACAhC,EACAE,EAGJ,GADA8B,EAAM,EACDxC,GAAK,EACT,OAAOwC,EAER,GAAW,IAANxC,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAGe,IACPC,EAEDhB,EAAGe,GAGX,IADA/B,EAAK+B,EACC7B,EAAI,EAAGA,EAAIV,EAAGU,KACO,IAArBsT,GAAOxS,EAAGhB,MACdgC,GAAOhB,EAAGhB,IAEXA,GAAM8B,EAEP,OAAOE,CACR,ICtCA,IAAIoQ,GAAY,IA8BhB,SAASmC,GAAW/U,EAAGwB,EAAGc,EAAQC,GACjC,IAAI/B,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAGe,IACP,EAEDf,EAAGe,GAGX,GADA/B,EAAK+B,EACAvC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,KACO,IAArBsT,GAAOxS,EAAGhB,MACdyB,GAAKT,EAAGhB,IAETA,GAAM8B,EAEP,OAAOL,CACP,CACD,GAAKjC,GAAK4S,GAAY,CAoBrB,IAlBAE,EAAOkB,GAAOxS,EAAGhB,IAAW,EAAMgB,EAAGhB,GAErCuS,EAAOiB,GAAOxS,EADdhB,GAAM8B,IACsB,EAAMd,EAAGhB,GAErCwS,EAAOgB,GAAOxS,EADdhB,GAAM8B,IACsB,EAAMd,EAAGhB,GAErCyS,EAAOe,GAAOxS,EADdhB,GAAM8B,IACsB,EAAMd,EAAGhB,GAErC0S,EAAOc,GAAOxS,EADdhB,GAAM8B,IACsB,EAAMd,EAAGhB,GAErC2S,EAAOa,GAAOxS,EADdhB,GAAM8B,IACsB,EAAMd,EAAGhB,GAErC4S,EAAOY,GAAOxS,EADdhB,GAAM8B,IACsB,EAAMd,EAAGhB,GAErC6S,EAAOW,GAAOxS,EADdhB,GAAM8B,IACsB,EAAMd,EAAGhB,GACrCA,GAAM8B,EAENI,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,GAAQkB,GAAOxS,EAAGhB,IAAW,EAAMgB,EAAGhB,GAEtCuS,GAAQiB,GAAOxS,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtCwS,GAAQgB,GAAOxS,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtCyS,GAAQe,GAAOxS,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC0S,GAAQc,GAAOxS,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC2S,GAAQa,GAAOxS,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC4S,GAAQY,GAAOxS,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC6S,GAAQW,GAAOxS,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GACtCA,GAAM8B,EAMP,IAHAL,EAAM6Q,EAAGC,GAAOC,EAAGC,IAASC,EAAGC,GAAOC,EAAGC,IAGhC3S,EAAIV,EAAGU,KACW,IAArBsT,GAAOxS,EAAGhB,MACdyB,GAAKT,EAAGhB,IAETA,GAAM8B,EAEP,OAAOL,CACP,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAEN+U,GADPzB,GAAKA,EAAI,EACY9R,EAAGc,EAAQ9B,GAAOuU,GAAW/U,EAAEsT,EAAG9R,EAAGc,EAAQ9B,EAAI8S,EAAEhR,EACzE,CChGA,SAASyS,GAAW/U,EAAGwB,EAAGc,GACzB,IAAI9B,EACAyB,EACAvB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAG,IACP,EAEDA,EAAG,GAOX,GAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEDtC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,KACO,IAArBsT,GAAOxS,EAAGhB,MACdyB,GAAKT,EAAGhB,IAETA,GAAM8B,EAEP,OAAOL,CACP,CACD,OAAOO,GAAKxC,EAAGwB,EAAGc,EAAQ9B,EAC3B,CCvDAjC,EAAAwW,GAAA,UAAAhU,ICmBA,SAASiU,GAAMhV,EAAGwB,EAAGc,GACpB,IAAIrB,EACAT,EACAC,EACAoC,EACAyQ,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAOwB,EAKR,GAHA8R,EAAIC,GAAOvT,EAAE,GAGG,IAAXsC,EAAe,CAKnB,GAHA7B,EAAKT,EAAI,GADT6C,EAAIyQ,EApCE,GAwCG,EACR,IAAM9S,EAAK,EAAGA,EAAKqC,EAAGrC,IACrBS,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EACVR,GAAM,EAGR,GAAK6S,EAhDC,EAiDL,OAAO9R,EAER,IAAMhB,EAAKqC,EAAGrC,EAAK8S,EAAG9S,GAnDhB,EAoDLS,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EAEVA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMgB,EAAGf,EAAG,GAClBe,EAAGf,EAAG,GAAMQ,EAEZA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMgB,EAAGf,EAAG,GAClBe,EAAGf,EAAG,GAAMQ,EAEZR,GAhEK,EAkEN,OAAOe,CACP,CAOD,IADAf,GAJCD,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,IAEMtC,EAAE,GAAGsC,EACX5B,EAAI,EAAGA,EAAI4S,EAAG5S,IACnBO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EACVT,GAAM8B,EACN7B,GAAM6B,EAEP,OAAOd,CACR,CChFAjD,EAAAyW,GAAA,WCoBA,SAAehV,EAAGwB,EAAGc,EAAQC,GAC5B,IAAItB,EACAT,EACAC,EACAoC,EACAyQ,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAOwB,EAMR,GAJA8R,EAAIC,GAAOvT,EAAE,GACbQ,EAAK+B,EAGW,IAAXD,EAAe,CAKnB,GAHA7B,EAAKD,EAAKR,EAAI,GADd6C,EAAIyQ,EAtCE,GA0CG,EACR,IAAM5S,EAAI,EAAGA,EAAImC,EAAGnC,IACnBO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EACVT,GAAM8B,EACN7B,GAAM6B,EAGR,GAAKgR,EAnDC,EAoDL,OAAO9R,EAER,IAAMd,EAAImC,EAAGnC,EAAI4S,EAAG5S,GAtDd,EAuDLO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EAEVA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMgB,EAAGf,EAAG,GAClBe,EAAGf,EAAG,GAAMQ,EAEZA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMgB,EAAGf,EAAG,GAClBe,EAAGf,EAAG,GAAMQ,EAEZT,GAnEK,EAoELC,GApEK,EAsEN,OAAOe,CACP,CAED,IADAf,EAAKD,GAAOR,EAAE,GAAGsC,EACX5B,EAAI,EAAGA,EAAI4S,EAAG5S,IACnBO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EACVT,GAAM8B,EACN7B,GAAM6B,EAEP,OAAOd,CACR,IChFA,IAAIoR,GAAY,IA+BhB,SAASqC,GAAYjV,EAAG4C,EAAOpB,EAAGc,EAAQC,GACzC,IAAI/B,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOM,EAAQpB,EAAGe,GAGnB,GADA/B,EAAK+B,EACAvC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKW,EAAQpB,EAAGhB,GAChBA,GAAM8B,EAEP,OAAOL,CACP,CACD,GAAKjC,GAAK4S,GAAY,CAarB,IAXAE,EAAKlQ,EAAQpB,EAAGhB,GAChBuS,EAAKnQ,EAAQpB,EAAGhB,EAAG8B,GACnB0Q,EAAKpQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB2Q,EAAKrQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB4Q,EAAKtQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB6Q,EAAKvQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB8Q,EAAKxQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB+Q,EAAKzQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB9B,GAAM,EAAI8B,EAEVI,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,GAAMlQ,EAAQpB,EAAGhB,GACjBuS,GAAMnQ,EAAQpB,EAAGhB,EAAG8B,GACpB0Q,GAAMpQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB2Q,GAAMrQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB4Q,GAAMtQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB6Q,GAAMvQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB8Q,GAAMxQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB+Q,GAAMzQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB9B,GAAM,EAAI8B,EAMX,IAHAL,EAAM6Q,EAAGC,GAAOC,EAAGC,IAASC,EAAGC,GAAOC,EAAGC,IAGhC3S,EAAIV,EAAGU,IACfuB,GAAKW,EAAQpB,EAAGhB,GAChBA,GAAM8B,EAEP,OAAOL,CACP,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAENiV,GADP3B,GAAKA,EAAI,EACa1Q,EAAOpB,EAAGc,EAAQ9B,GAAOyU,GAAYjV,EAAEsT,EAAG1Q,EAAOpB,EAAGc,EAAQ9B,EAAI8S,EAAEhR,EACzF,CC3EA,SAAS2S,GAAYjV,EAAG4C,EAAOpB,EAAGc,GACjC,IAAI9B,EACAyB,EACAvB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOM,EAAQpB,EAAG,GAOnB,GAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEDtC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKW,EAAQpB,EAAGhB,GAChBA,GAAM8B,EAEP,OAAOL,CACP,CACD,OAAOO,GAAKxC,EAAG4C,EAAOpB,EAAGc,EAAQ9B,EAClC,CCnCA,SAAS0U,GAAUlV,EAAG4C,EAAOpB,EAAGc,GAC/B,OAAO2S,GAAYjV,EAAG4C,EAAOpB,EAAGc,EACjC,CCCA,SAAS6S,GAAcnV,EAAGwB,EAAGrB,EAASgF,EAAKgP,GAC1C,IAAI3R,EACAhC,EACA4T,EACAd,EACA5S,EAaJ,GAVCF,EADIL,EAAU,GACR,EAAEH,GAAKG,EAER,EAGLiU,EADID,EAAY,GACVA,EAED,EAEN3R,EAAM,EACDxC,GAAK,EAGT,OAFAmF,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,EAER,GAAW,IAANnF,GAAuB,IAAZG,EACf,OAAK6T,GAAOxS,EAAGhB,KACd2E,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,IAERA,EAAKiP,GAAO5S,EAAGhB,GACf2E,EAAKiP,EAAGD,GAAc,EACfhP,GAGR,IADAmO,EAAI,EACE5S,EAAI,EAAGA,EAAIV,EAAGU,KACO,IAArBsT,GAAOxS,EAAGhB,MACdgC,GAAOhB,EAAGhB,GACV8S,GAAK,GAEN9S,GAAML,EAIP,OAFAgF,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAcb,EACfnO,CACR,CC9DA5G,EAAA0W,GAAA,UAAAlU,ICAAxC,EAAA2W,GAAA,WCgBA,SAAmBlV,EAAG4C,EAAOpB,EAAGc,EAAQC,GACvC,OAAO0S,GAAYjV,EAAG4C,EAAOpB,EAAGc,EAAQC,EACzC,IClBAhE,EAAA4W,GAAA,WCoBA,SAAuBnV,EAAGwB,EAAGrB,EAASC,EAAS+E,EAAKgP,EAAWE,GAC9D,IAAI7R,EACAhC,EACA4T,EACAd,EACA5S,EAMJ,GAJAF,EAAKJ,EACLgU,EAAKC,EAEL7R,EAAM,EACDxC,GAAK,EAGT,OAFAmF,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,EAER,GAAW,IAANnF,GAAuB,IAAZG,EACf,OAAK6T,GAAOxS,EAAGhB,KACd2E,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,IAERA,EAAKiP,GAAO5S,EAAGhB,GACf2E,EAAKiP,EAAGD,GAAc,EACfhP,GAGR,IADAmO,EAAI,EACE5S,EAAI,EAAGA,EAAIV,EAAGU,KACO,IAArBsT,GAAOxS,EAAGhB,MACdgC,GAAOhB,EAAGhB,GACV8S,GAAK,GAEN9S,GAAML,EAIP,OAFAgF,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAcb,EACfnO,CACR,ICzDA,IAAIyN,GAAY,IA8BhB,SAASwC,GAAYpV,EAAGwB,EAAGc,EAAQC,GAClC,IAAI/B,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK+S,GAAQ7T,EAAGe,IACR,EAEDf,EAAGe,GAGX,GADA/B,EAAK+B,EACAvC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,KACQ,IAAtB2U,GAAQ7T,EAAGhB,MACfyB,GAAKT,EAAGhB,IAETA,GAAM8B,EAEP,OAAOL,CACP,CACD,GAAKjC,GAAK4S,GAAY,CAoBrB,IAlBAE,EAAOuC,GAAQ7T,EAAGhB,IAAW,EAAMgB,EAAGhB,GAEtCuS,EAAOsC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtCwS,EAAOqC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtCyS,EAAOoC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC0S,EAAOmC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC2S,EAAOkC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC4S,EAAOiC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC6S,EAAOgC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GACtCA,GAAM8B,EAENI,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,GAAQuC,GAAQ7T,EAAGhB,IAAW,EAAMgB,EAAGhB,GAEvCuS,GAAQsC,GAAQ7T,EADhBhB,GAAM8B,IACwB,EAAMd,EAAGhB,GAEvCwS,GAAQqC,GAAQ7T,EADhBhB,GAAM8B,IACwB,EAAMd,EAAGhB,GAEvCyS,GAAQoC,GAAQ7T,EADhBhB,GAAM8B,IACwB,EAAMd,EAAGhB,GAEvC0S,GAAQmC,GAAQ7T,EADhBhB,GAAM8B,IACwB,EAAMd,EAAGhB,GAEvC2S,GAAQkC,GAAQ7T,EADhBhB,GAAM8B,IACwB,EAAMd,EAAGhB,GAEvC4S,GAAQiC,GAAQ7T,EADhBhB,GAAM8B,IACwB,EAAMd,EAAGhB,GAEvC6S,GAAQgC,GAAQ7T,EADhBhB,GAAM8B,IACwB,EAAMd,EAAGhB,GACvCA,GAAM8B,EAMP,IAHAL,EAAM6Q,EAAGC,GAAOC,EAAGC,IAASC,EAAGC,GAAOC,EAAGC,IAGhC3S,EAAIV,EAAGU,KACY,IAAtB2U,GAAQ7T,EAAGhB,MACfyB,GAAKT,EAAGhB,IAETA,GAAM8B,EAEP,OAAOL,CACP,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAENoV,GADP9B,GAAKA,EAAI,EACa9R,EAAGc,EAAQ9B,GAAO4U,GAAYpV,EAAEsT,EAAG9R,EAAGc,EAAQ9B,EAAI8S,EAAEhR,EAC3E,CCjGA,SAAS8S,GAAYpV,EAAGwB,EAAGc,GAC1B,IAAI9B,EACAyB,EACAvB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK+S,GAAQ7T,EAAG,IACR,EAEDA,EAAG,GAOX,GAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEDtC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,KACQ,IAAtB2U,GAAQ7T,EAAGhB,MACfyB,GAAKT,EAAGhB,IAETA,GAAM8B,EAEP,OAAOL,CACP,CACD,OAAOO,GAAKxC,EAAGwB,EAAGc,EAAQ9B,EAC3B,CCvCA,SAAS8U,GAAUtV,EAAGwB,EAAGc,GACxB,OAAO8S,GAAYpV,EAAGwB,EAAGc,EAC1B,CCFA,SAASiT,GAAavV,EAAGwB,EAAGc,GAC3B,IAAIE,EACAhC,EACAE,EAGJ,GADA8B,EAAM,EACDxC,GAAK,EACT,OAAOwC,EAER,GAAW,IAANxC,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAG,IACPgB,EAEDhB,EAAG,GAOX,IAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEA5B,EAAI,EAAGA,EAAIV,EAAGU,KACO,IAArBsT,GAAOxS,EAAGhB,MACdgC,GAAOhB,EAAGhB,IAEXA,GAAM8B,EAEP,OAAOE,CACR,CCRA,SAASgT,GAAUxV,EAAGyG,EAAOjF,EAAGrB,EAASsB,EAAGnB,GAC3C,IAAIF,EACAG,EACAkV,EACAC,EACAC,EACAC,EACAC,EACAC,EACAtV,EACAC,EACA6S,EACAlR,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAwBR,IArBKiF,EAAQ,IACZtG,IAAY,EACZG,IAAY,GAGZF,EADID,EAAU,GACH,EAAEH,GAAKG,EAER,EAGVI,EADID,EAAU,GACH,EAAEN,GAAKM,EAER,EAGXgT,EAAItT,EAGJyV,EAASlC,GAAOvT,EAAI,KAGL,CACd,GAAKyV,EAAS,EAGbI,EAAKrU,EAAGpB,GADRqV,GAAU,GACctV,GACxB2V,EAAKrU,EAAGlB,EAASkV,EAAOnV,OAClB,CAKN,GAAW,KAHXgT,GAAK,GAIJ,OAAO9R,EAIRqU,EAAKrU,EADLhB,EAAKJ,EAAWkT,EAAEnT,GAGlB2V,EAAKrU,EADLhB,EAAKF,EAAW+S,EAAEhT,GAIlBkB,EAAGhB,GAAOgB,EAAGpB,GACbqB,EAAGhB,GAAOgB,EAAGlB,EACb,CASD,IAFAmV,EAAW,GAHXtT,EAAIqT,GAGY,EAERC,EAAQpC,KAEfjM,EAAIqO,EAAQ,GACHpC,KACRqC,EAAKnU,EAAGpB,EAASiH,EAAElH,KACnByV,EAAKpU,EAAGpB,EAASsV,EAAMvV,KAGP6T,GAAO2B,IAASA,IAAOC,GAAMG,GAAgBJ,MAC5DD,GAAS,IAIXC,EAAKnU,EAAGpB,EAASsV,EAAMvV,IACb0V,GAAM7B,GAAO2B,IAAUA,IAAOE,GAAME,GAAgBJ,KAE7DnU,EAAGpB,EAASgC,EAAEjC,GAAawV,EAC3BlU,EAAGlB,EAAS6B,EAAE9B,GAAamB,EAAGlB,EAASmV,EAAMpV,GAM7CoV,EAAW,GAHXtT,EAAIsT,GAGY,EAOlBlU,EAAGpB,EAASgC,EAAEjC,GAAa0V,EAC3BpU,EAAGlB,EAAS6B,EAAE9B,GAAawV,CAC3B,CACF,CCnHA,SAASE,GAAWhW,EAAGyG,EAAOjF,EAAGrB,EAASsB,EAAGnB,GAC5C,IAAI2V,EACAzV,EACAwG,EACAkP,EACAC,EACA1V,EACAwG,EACAmP,EACAC,EACA7G,EACAC,EACA6G,EACA5V,EAEJ,GAAKV,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAgBR,GAbKiF,EAAQ,IACZtG,IAAY,EACZG,IAAY,GAERA,EAAU,GACd8V,GAAM,EAAEpW,GAAKM,EACb+V,EAAK,IAELD,EAAK,EACLC,GAAMrW,EAAE,GAAKM,GAEdG,EAAK2V,EAAK9V,EAELH,EAAU,EAAI,CAOlB,IAJAgW,EAAK,EACL3V,GAFA0V,GAAM,EAAElW,GAAKG,GAEHA,EAGJO,EAAI,EAAGA,EAAIV,EAAGU,IAKnB,GAJA8O,EAAKhO,EAAGhB,GACRiP,EAAKhO,EAAGhB,GAGHuT,GAAOxE,GAAO,CAKlB,IAJAxI,EAAKxG,EACLyG,EAAKxG,EAGGuG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG7G,GAChBsB,EAAGwF,GAAOxF,EAAGwF,EAAG3G,GAChB0G,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAG2U,GAAO3G,EACV/N,EAAG4U,GAAO5G,CACd,KAAU,CAMN,IALAwG,EAAMM,GAAgB/G,GACtBxI,EAAKxG,EAAKL,EACV8G,EAAKxG,EAAKH,EAGF0G,GAAMkP,OACbI,EAAK9U,EAAGwF,KACGwI,IAAQyG,GAAOK,IAAO9G,IAA+B,IAAzB+G,GAAgBD,KAIvD9U,EAAGwF,EAAG7G,GAAYmW,EAClB7U,EAAGwF,EAAG3G,GAAYmB,EAAGwF,GACrBD,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAGwF,EAAG7G,GAAYqP,EAClB/N,EAAGwF,EAAG3G,GAAYmP,EAClBjP,GAAML,EACNM,GAAMH,CACN,CAEF,OAAOkB,CACP,CAOD,IAJA2U,GAAMnW,EAAE,GAAKG,EACbK,GAFA0V,EAAK,GAEK/V,EAGJO,EAAI,EAAGA,EAAIV,EAAGU,IAKnB,GAJA8O,EAAKhO,EAAGhB,GACRiP,EAAKhO,EAAGhB,GAGHuT,GAAOxE,GAAO,CAKlB,IAJAxI,EAAKxG,EACLyG,EAAKxG,EAGGuG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG7G,GAChBsB,EAAGwF,GAAOxF,EAAGwF,EAAG3G,GAChB0G,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAG2U,GAAO3G,EACV/N,EAAG4U,GAAO5G,CACb,KAAS,CAMN,IALAwG,EAAMM,GAAgB/G,GACtBxI,EAAKxG,EAAKL,EACV8G,EAAKxG,EAAKH,EAGF0G,GAAMkP,OACbI,EAAK9U,EAAGwF,KACGwI,IAAQyG,GAAOK,IAAO9G,IAA+B,IAAzB+G,GAAgBD,KAIvD9U,EAAGwF,EAAG7G,GAAYmW,EAClB7U,EAAGwF,EAAG3G,GAAYmB,EAAGwF,GACrBD,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAGwF,EAAG7G,GAAYqP,EAClB/N,EAAGwF,EAAG3G,GAAYmP,EAClBjP,GAAML,EACNM,GAAMH,CACN,CAEF,OAAOkB,CACR,CC1JAjD,EAAA6W,GAAA,UAAArU,ICAAxC,EAAA+W,GAAA,WCeA,SAAmBtV,EAAGwB,EAAGc,EAAQC,GAChC,OAAO6S,GAAYpV,EAAGwB,EAAGc,EAAQC,EAClC,ICjBAhE,EAAAgX,GAAA,WCeA,SAAsBvV,EAAGwB,EAAGc,EAAQC,GACnC,IAAIC,EACAhC,EACAE,EAGJ,GADA8B,EAAM,EACDxC,GAAK,EACT,OAAOwC,EAER,GAAW,IAANxC,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAGe,IACPC,EAEDhB,EAAGe,GAGX,IADA/B,EAAK+B,EACC7B,EAAI,EAAGA,EAAIV,EAAGU,KACO,IAArBsT,GAAOxS,EAAGhB,MACdgC,GAAOhB,EAAGhB,IAEXA,GAAM8B,EAEP,OAAOE,CACR,ICtCAjE,EAAAiX,GAAA,WCoCA,SAAmBxV,EAAGyG,EAAOjF,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC7D,IAAIkV,EACAC,EACAC,EACAC,EACAC,EACAC,EACAtV,EACAC,EACA6S,EACAlR,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAgBR,IAbKiF,EAAQ,IAGZrG,IAAYJ,EAAE,IAFdG,IAAY,GAGZI,IAAYP,EAAE,IAFdM,IAAY,IAKbgT,EAAItT,EAGJyV,EAASlC,GAAOvT,EAAI,KAGL,CACd,GAAKyV,EAAS,EAGbI,EAAKrU,EAAGpB,GADRqV,GAAU,GACctV,GACxB2V,EAAKrU,EAAGlB,EAASkV,EAAOnV,OAClB,CAKN,GAAW,KAHXgT,GAAK,GAIJ,OAAO9R,EAIRqU,EAAKrU,EADLhB,EAAKJ,EAAWkT,EAAEnT,GAGlB2V,EAAKrU,EADLhB,EAAKF,EAAW+S,EAAEhT,GAIlBkB,EAAGhB,GAAOgB,EAAGpB,GACbqB,EAAGhB,GAAOgB,EAAGlB,EACb,CASD,IAFAmV,EAAW,GAHXtT,EAAIqT,GAGY,EAERC,EAAQpC,KAEfjM,EAAIqO,EAAQ,GACHpC,KACRqC,EAAKnU,EAAGpB,EAASiH,EAAElH,KACnByV,EAAKpU,EAAGpB,EAASsV,EAAMvV,KAGP6T,GAAO2B,IAASA,IAAOC,GAAMG,GAAgBJ,MAC5DD,GAAS,IAIXC,EAAKnU,EAAGpB,EAASsV,EAAMvV,IACb0V,GAAM7B,GAAO2B,IAAUA,IAAOE,GAAME,GAAgBJ,KAE7DnU,EAAGpB,EAASgC,EAAEjC,GAAawV,EAC3BlU,EAAGlB,EAAS6B,EAAE9B,GAAamB,EAAGlB,EAASmV,EAAMpV,GAM7CoV,EAAW,GAHXtT,EAAIsT,GAGY,EAOlBlU,EAAGpB,EAASgC,EAAEjC,GAAa0V,EAC3BpU,EAAGlB,EAAS6B,EAAE9B,GAAawV,CAC3B,CACF,ICnIAvX,EAAAyX,GAAA,WC0BA,SAAoBhW,EAAGyG,EAAOjF,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC9D,IAAI0V,EACAzV,EACAwG,EACAkP,EACAC,EACA1V,EACAwG,EACAmP,EACAC,EACA7G,EACAC,EACA6G,EACA5V,EAEJ,GAAKV,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAiBR,GAdKiF,EAAQ,IAGZrG,IAAYJ,EAAE,IAFdG,IAAY,GAGZI,IAAYP,EAAE,IAFdM,IAAY,IAKb6V,GADAD,EAAK9V,IACOJ,EAAE,GAAGG,EACjBK,EAAK0V,EAAK/V,EAGVkW,GADAD,EAAK7V,IACOP,EAAE,GAAGM,EACjBG,EAAK2V,EAAK9V,EAELH,EAAU,EAAI,CAIlB,IAAMO,EAAI,EAAGA,EAAIV,EAAGU,IAKnB,GAJA8O,EAAKhO,EAAGhB,GACRiP,EAAKhO,EAAGhB,GAGHuT,GAAOxE,GAAO,CAKlB,IAJAxI,EAAKxG,EACLyG,EAAKxG,EAGGuG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG7G,GAChBsB,EAAGwF,GAAOxF,EAAGwF,EAAG3G,GAChB0G,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAG2U,GAAO3G,EACV/N,EAAG4U,GAAO5G,CACd,KAAU,CAMN,IALAwG,EAAMM,GAAgB/G,GACtBxI,EAAKxG,EAAKL,EACV8G,EAAKxG,EAAKH,EAGF0G,GAAMkP,OACbI,EAAK9U,EAAGwF,KACGwI,IAAQyG,GAAOK,IAAO9G,IAA+B,IAAzB+G,GAAgBD,KAIvD9U,EAAGwF,EAAG7G,GAAYmW,EAClB7U,EAAGwF,EAAG3G,GAAYmB,EAAGwF,GACrBD,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAGwF,EAAG7G,GAAYqP,EAClB/N,EAAGwF,EAAG3G,GAAYmP,EAClBjP,GAAML,EACNM,GAAMH,CACN,CAEF,OAAOkB,CACP,CAID,IAAMd,EAAI,EAAGA,EAAIV,EAAGU,IAKnB,GAJA8O,EAAKhO,EAAGhB,GACRiP,EAAKhO,EAAGhB,GAGHuT,GAAOxE,GAAO,CAKlB,IAJAxI,EAAKxG,EACLyG,EAAKxG,EAGGuG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG7G,GAChBsB,EAAGwF,GAAOxF,EAAGwF,EAAG3G,GAChB0G,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAG2U,GAAO3G,EACV/N,EAAG4U,GAAO5G,CACb,KAAS,CAMN,IALAwG,EAAMM,GAAgB/G,GACtBxI,EAAKxG,EAAKL,EACV8G,EAAKxG,EAAKH,EAGF0G,GAAMkP,OACbI,EAAK9U,EAAGwF,KACGwI,IAAQyG,GAAOK,IAAO9G,IAA+B,IAAzB+G,GAAgBD,KAIvD9U,EAAGwF,EAAG7G,GAAYmW,EAClB7U,EAAGwF,EAAG3G,GAAYmB,EAAGwF,GACrBD,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAGwF,EAAG7G,GAAYqP,EAClB/N,EAAGwF,EAAG3G,GAAYmP,EAClBjP,GAAML,EACNM,GAAMH,CACN,CAEF,OAAOkB,CACR,sCCvJIgV,GAAQC,GAAK1G,OAuCjB,SAAS2G,GAAU1W,EAAGyG,EAAOjF,EAAGrB,EAASsB,EAAGnB,GAC3C,IAAIF,EACAG,EACA0V,EACAU,EACAnH,EACAC,EACA6G,EACA5V,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAiBR,IAdKiF,EAAQ,IACZtG,IAAY,EACZG,IAAY,GAGZF,EADID,EAAU,GACH,EAAEH,GAAKG,EAER,EAGVI,EADID,EAAU,GACH,EAAEN,GAAKM,EAER,EAELI,EAAI,EAAGA,EAAI8V,GAAO9V,IAEvB,IAAM0B,EADNuU,EAAMF,GAAM/V,GACG0B,EAAIpC,EAAGoC,IAIrB,GAHAoN,EAAKhO,EAAGpB,EAASgC,EAAEjC,IAGd6T,GAAOxE,GAAZ,CAOA,IAJAC,EAAKhO,EAAGlB,EAAS6B,EAAE9B,GAGnB2V,EAAMM,GAAgB/G,GAChBnI,EAAIjF,EAAGiF,GAAKsP,OACjBL,EAAK9U,EAAGpB,GAAUiH,EAAEsP,GAAKxW,KACdqP,IAAQyG,GAAOK,IAAO9G,GAFXnI,GAAKsP,EAK3BnV,EAAGpB,EAASiH,EAAElH,GAAamW,EAC3B7U,EAAGlB,EAAS8G,EAAE/G,GAAamB,EAAGlB,GAAU8G,EAAEsP,GAAKrW,GAEhDkB,EAAGpB,EAASiH,EAAElH,GAAaqP,EAC3B/N,EAAGlB,EAAS8G,EAAE/G,GAAamP,CAd1B,CAiBH,OAAOjO,CACR,CC/FA,IAAIgV,GAAQC,GAAK1G,OC0BjB,SAAS6G,GAAS5W,EAAGyG,EAAOjF,EAAGc,GAC9B,IAAIC,EACAkT,EACAC,EACAC,EACAC,EACAtC,EACA7B,EACA/Q,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAkBR,IAfKiF,EAAQ,IACZnE,IAAW,GAGXC,EADID,EAAS,GACH,EAAEtC,GAAKsC,EAER,EAGVgR,EAAItT,EAGJyV,EAASlC,GAAOvT,EAAI,KAGL,CACd,GAAKyV,EAAS,EAGbhE,EAAIjQ,EAAGe,GADPkT,GAAU,GACYnT,OAChB,CAKN,GAAW,KAHXgR,GAAK,GAIJ,OAAO9R,EAIRiQ,EAAIjQ,EADJd,EAAI6B,EAAU+Q,EAAEhR,GAIhBd,EAAGd,GAAMc,EAAGe,EACZ,CASD,IAFAmT,EAAW,GAHXtT,EAAIqT,GAGY,EAERC,EAAQpC,KAEfjM,EAAIqO,EAAQ,GACHpC,KACRqC,EAAKnU,EAAGe,EAAQ8E,EAAE/E,KAClBsT,EAAKpU,EAAGe,EAAQmT,EAAMpT,KAGN0R,GAAO2B,IAASA,IAAOC,GAAMG,GAAgBJ,MAC5DD,GAAS,IAIXC,EAAKnU,EAAGe,EAAQmT,EAAMpT,IACZmP,GAAKuC,GAAO2B,IAAUA,IAAOlE,GAAKsE,GAAgBJ,KAE3DnU,EAAGe,EAAQH,EAAEE,GAAYqT,EAMzBD,EAAW,GAHXtT,EAAIsT,GAGY,EAOlBlU,EAAGe,EAAQH,EAAEE,GAAYmP,CACzB,CACF,CCpGA,SAASoF,GAAU7W,EAAGyG,EAAOjF,EAAGc,GAC/B,IAAI2T,EACAzV,EACAwG,EACAkP,EACAC,EACAzS,EACAoT,EACApW,EAEJ,GAAKV,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAMR,GAHKiF,EAAQ,IACZnE,IAAW,GAEPA,EAAS,EAAI,CAOjB,IAJA6T,EAAK,EACL3V,GAFA0V,GAAM,EAAElW,GAAKsC,GAEHA,EAGJ5B,EAAI,EAAGA,EAAIV,EAAGU,IAInB,GAHAgD,EAAIlC,EAAGhB,GAGFwT,GAAOtQ,GAAM,CAIjB,IAHAsD,EAAKxG,EAGGwG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG1E,GAChB0E,GAAM1E,EAEPd,EAAG2U,GAAOzS,CACd,KAAU,CAKN,IAJAuS,EAAMM,GAAgB7S,GACtBsD,EAAKxG,EAAK8B,EAGF0E,GAAMkP,OACbY,EAAItV,EAAGwF,KACGtD,IAAOuS,GAAOa,IAAMpT,IAA6B,IAAxB6S,GAAgBO,KAInDtV,EAAGwF,EAAG1E,GAAWwU,EACjB9P,GAAM1E,EAEPd,EAAGwF,EAAG1E,GAAWoB,EACjBlD,GAAM8B,CACN,CAEF,OAAOd,CACP,CAOD,IAJA2U,GAAMnW,EAAE,GAAKsC,EACb9B,GAFA0V,EAAK,GAEK5T,EAGJ5B,EAAI,EAAGA,EAAIV,EAAGU,IAInB,GAHAgD,EAAIlC,EAAGhB,GAGFwT,GAAOtQ,GAAM,CAIjB,IAHAsD,EAAKxG,EAGGwG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG1E,GAChB0E,GAAM1E,EAEPd,EAAG2U,GAAOzS,CACb,KAAS,CAKN,IAJAuS,EAAMM,GAAgB7S,GACtBsD,EAAKxG,EAAK8B,EAGF0E,GAAMkP,OACbY,EAAItV,EAAGwF,KACGtD,IAAOuS,GAAOa,IAAMpT,IAA6B,IAAxB6S,GAAgBO,KAInDtV,EAAGwF,EAAG1E,GAAWwU,EACjB9P,GAAM1E,EAEPd,EAAGwF,EAAG1E,GAAWoB,EACjBlD,GAAM8B,CACN,CAEF,OAAOd,CACR,CC/GAjD,EAAAmY,GAAA,WHyCA,SAAmB1W,EAAGyG,EAAOjF,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC7D,IAAI0V,EACAU,EACAnH,EACAC,EACA6G,EACA5V,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EASR,IANKiF,EAAQ,IAGZrG,IAAYJ,EAAE,IAFdG,IAAY,GAGZI,IAAYP,EAAE,IAFdM,IAAY,IAIPI,EAAI,EAAGA,EAAI8V,GAAO9V,IAEvB,IAAM0B,EADNuU,EAAMF,GAAM/V,GACG0B,EAAIpC,EAAGoC,IAIrB,GAHAoN,EAAKhO,EAAGpB,EAASgC,EAAEjC,IAGd6T,GAAOxE,GAAZ,CAOA,IAJAC,EAAKhO,EAAGlB,EAAS6B,EAAE9B,GAGnB2V,EAAMM,GAAgB/G,GAChBnI,EAAIjF,EAAGiF,GAAKsP,OACjBL,EAAK9U,EAAGpB,GAAUiH,EAAEsP,GAAKxW,KACdqP,IAAQyG,GAAOK,IAAO9G,GAFXnI,GAAKsP,EAK3BnV,EAAGpB,EAASiH,EAAElH,GAAamW,EAC3B7U,EAAGlB,EAAS8G,EAAE/G,GAAamB,EAAGlB,GAAU8G,EAAEsP,GAAKrW,GAEhDkB,EAAGpB,EAASiH,EAAElH,GAAaqP,EAC3B/N,EAAGlB,EAAS8G,EAAE/G,GAAamP,CAd1B,CAiBH,OAAOjO,CACR,IIvFAjD,EAAAqY,GAAA,WC2BA,SAAkB5W,EAAGyG,EAAOjF,EAAGc,EAAQC,GACtC,IAAIkT,EACAC,EACAC,EACAC,EACAtC,EACA7B,EACA/Q,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAcR,IAXKiF,EAAQ,IAEZlE,IAAWvC,EAAE,IADbsC,IAAW,IAIZgR,EAAItT,EAGJyV,EAASlC,GAAOvT,EAAI,KAGL,CACd,GAAKyV,EAAS,EAGbhE,EAAIjQ,EAAGe,GADPkT,GAAU,GACYnT,OAChB,CAKN,GAAW,KAHXgR,GAAK,GAIJ,OAAO9R,EAIRiQ,EAAIjQ,EADJd,EAAI6B,EAAU+Q,EAAEhR,GAIhBd,EAAGd,GAAMc,EAAGe,EACZ,CASD,IAFAmT,EAAW,GAHXtT,EAAIqT,GAGY,EAERC,EAAQpC,KAEfjM,EAAIqO,EAAQ,GACHpC,KACRqC,EAAKnU,EAAGe,EAAQ8E,EAAE/E,KAClBsT,EAAKpU,EAAGe,EAAQmT,EAAMpT,KAGN0R,GAAO2B,IAASA,IAAOC,GAAMG,GAAgBJ,MAC5DD,GAAS,IAIXC,EAAKnU,EAAGe,EAAQmT,EAAMpT,IACZmP,GAAKuC,GAAO2B,IAAUA,IAAOlE,GAAKsE,GAAgBJ,KAE3DnU,EAAGe,EAAQH,EAAEE,GAAYqT,EAMzBD,EAAW,GAHXtT,EAAIsT,GAGY,EAOlBlU,EAAGe,EAAQH,EAAEE,GAAYmP,CACzB,CACF,IChHAlT,EAAAsY,GAAA,WCiBA,SAAmB7W,EAAGyG,EAAOjF,EAAGc,EAAQC,GACvC,IAAI0T,EACAzV,EACAwG,EACAkP,EACAC,EACAzS,EACAoT,EACApW,EAEJ,GAAKV,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAWR,GARKiF,EAAQ,IAEZlE,IAAWvC,EAAE,IADbsC,IAAW,IAIZ6T,GADAD,EAAK3T,IACOvC,EAAE,GAAGsC,EACjB9B,EAAK0V,EAAK5T,EAELA,EAAS,EAAI,CAIjB,IAAM5B,EAAI,EAAGA,EAAIV,EAAGU,IAInB,GAHAgD,EAAIlC,EAAGhB,GAGFwT,GAAOtQ,GAAM,CAIjB,IAHAsD,EAAKxG,EAGGwG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG1E,GAChB0E,GAAM1E,EAEPd,EAAG2U,GAAOzS,CACd,KAAU,CAKN,IAJAuS,EAAMM,GAAgB7S,GACtBsD,EAAKxG,EAAK8B,EAGF0E,GAAMkP,OACbY,EAAItV,EAAGwF,KACGtD,IAAOuS,GAAOa,IAAMpT,IAA6B,IAAxB6S,GAAgBO,KAInDtV,EAAGwF,EAAG1E,GAAWwU,EACjB9P,GAAM1E,EAEPd,EAAGwF,EAAG1E,GAAWoB,EACjBlD,GAAM8B,CACN,CAEF,OAAOd,CACP,CAID,IAAMd,EAAI,EAAGA,EAAIV,EAAGU,IAInB,GAHAgD,EAAIlC,EAAGhB,GAGFwT,GAAOtQ,GAAM,CAIjB,IAHAsD,EAAKxG,EAGGwG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG1E,GAChB0E,GAAM1E,EAEPd,EAAG2U,GAAOzS,CACb,KAAS,CAKN,IAJAuS,EAAMM,GAAgB7S,GACtBsD,EAAKxG,EAAK8B,EAGF0E,GAAMkP,OACbY,EAAItV,EAAGwF,KACGtD,IAAOuS,GAAOa,IAAMpT,IAA6B,IAAxB6S,GAAgBO,KAInDtV,EAAGwF,EAAG1E,GAAWwU,EACjB9P,GAAM1E,EAEPd,EAAGwF,EAAG1E,GAAWoB,EACjBlD,GAAM8B,CACN,CAEF,OAAOd,CACR,sCC/GIgV,GAAQC,GAAK1G,OA+BjB,SAASgH,GAAS/W,EAAGyG,EAAOjF,EAAGc,GAC9B,IAAIC,EACA0T,EACAU,EACAjT,EACAoT,EACApW,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAWR,IARKiF,EAAQ,IACZnE,IAAW,GAGXC,EADID,EAAS,GACH,EAAEtC,GAAKsC,EAER,EAEJ5B,EAAI,EAAGA,EAAI8V,GAAO9V,IAEvB,IAAM0B,EADNuU,EAAMF,GAAM/V,GACG0B,EAAIpC,EAAGoC,IAIrB,GAHAsB,EAAIlC,EAAGe,EAAQH,EAAEE,IAGZ0R,GAAOtQ,GAAZ,CAKA,IADAuS,EAAMM,GAAgB7S,GAChB2D,EAAIjF,EAAGiF,GAAKsP,OACjBG,EAAItV,EAAGe,GAAS8E,EAAEsP,GAAKrU,KACboB,IAAOuS,GAAOa,IAAMpT,GAFR2D,GAAKsP,EAK3BnV,EAAGe,EAAQ8E,EAAE/E,GAAYwU,EAE1BtV,EAAGe,EAAQ8E,EAAE/E,GAAYoB,CAVxB,CAaH,OAAOlC,CACR,CC3EA,IAAIgV,GAAQC,GAAK1G,OCAjBxR,EAAAwY,GAAA,WDgCA,SAAkB/W,EAAGyG,EAAOjF,EAAGc,EAAQC,GACtC,IAAI0T,EACAU,EACAjT,EACAoT,EACApW,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAOR,IAJKiF,EAAQ,IAEZlE,IAAWvC,EAAE,IADbsC,IAAW,IAGN5B,EAAI,EAAGA,EAAI8V,GAAO9V,IAEvB,IAAM0B,EADNuU,EAAMF,GAAM/V,GACG0B,EAAIpC,EAAGoC,IAIrB,GAHAsB,EAAIlC,EAAGe,EAAQH,EAAEE,IAGZ0R,GAAOtQ,GAAZ,CAKA,IADAuS,EAAMM,GAAgB7S,GAChB2D,EAAIjF,EAAGiF,GAAKsP,OACjBG,EAAItV,EAAGe,GAAS8E,EAAEsP,GAAKrU,KACboB,IAAOuS,GAAOa,IAAMpT,GAFR2D,GAAKsP,EAK3BnV,EAAGe,EAAQ8E,EAAE/E,GAAYwU,EAE1BtV,EAAGe,EAAQ8E,EAAE/E,GAAYoB,CAVxB,CAaH,OAAOlC,CACR,IExEA,IAAIoR,GAAY,IA8BhB,SAASoE,GAAShX,EAAGwB,EAAGc,EAAQC,GAC/B,IAAI/B,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAGe,GAGX,GADA/B,EAAK+B,EACAvC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKT,EAAGhB,GACRA,GAAM8B,EAEP,OAAOL,CACP,CACD,GAAKjC,GAAK4S,GAAY,CAarB,IAXAE,EAAKtR,EAAGhB,GACRuS,EAAKvR,EAAGhB,EAAG8B,GACX0Q,EAAKxR,EAAGhB,EAAI,EAAE8B,GACd2Q,EAAKzR,EAAGhB,EAAI,EAAE8B,GACd4Q,EAAK1R,EAAGhB,EAAI,EAAE8B,GACd6Q,EAAK3R,EAAGhB,EAAI,EAAE8B,GACd8Q,EAAK5R,EAAGhB,EAAI,EAAE8B,GACd+Q,EAAK7R,EAAGhB,EAAI,EAAE8B,GACd9B,GAAM,EAAI8B,EAEVI,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,GAAMtR,EAAGhB,GACTuS,GAAMvR,EAAGhB,EAAG8B,GACZ0Q,GAAMxR,EAAGhB,EAAI,EAAE8B,GACf2Q,GAAMzR,EAAGhB,EAAI,EAAE8B,GACf4Q,GAAM1R,EAAGhB,EAAI,EAAE8B,GACf6Q,GAAM3R,EAAGhB,EAAI,EAAE8B,GACf8Q,GAAM5R,EAAGhB,EAAI,EAAE8B,GACf+Q,GAAM7R,EAAGhB,EAAI,EAAE8B,GACf9B,GAAM,EAAI8B,EAMX,IAHAL,EAAM6Q,EAAGC,GAAOC,EAAGC,IAASC,EAAGC,GAAOC,EAAGC,IAGhC3S,EAAIV,EAAGU,IACfuB,GAAKT,EAAGhB,GACRA,GAAM8B,EAEP,OAAOL,CACP,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAENgX,GADP1D,GAAKA,EAAI,EACU9R,EAAGc,EAAQ9B,GAAOwW,GAAShX,EAAEsT,EAAG9R,EAAGc,EAAQ9B,EAAI8S,EAAEhR,EACrE,CC3EA,SAAS0U,GAAShX,EAAGwB,EAAGc,GACvB,IAAI9B,EACAyB,EACAvB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAG,GAOX,GAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEDtC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKT,EAAGhB,GACRA,GAAM8B,EAEP,OAAOL,CACP,CACD,OAAOO,GAAKxC,EAAGwB,EAAGc,EAAQ9B,EAC3B,CClCA,SAASyW,GAAOjX,EAAGwB,EAAGc,GACrB,OAAO0U,GAAShX,EAAGwB,EAAGc,EACvB,CCjBA/D,EAAAyY,GAAA,UAAAjW,ICAAxC,EAAA0Y,GAAA,WCeA,SAAgBjX,EAAGwB,EAAGc,EAAQC,GAC7B,OAAOyU,GAAShX,EAAGwB,EAAGc,EAAQC,EAC/B,ICHA,SAAS2U,GAAUlX,EAAGwB,EAAGc,GACxB,IAAIE,EACAhC,EACAqC,EACAnC,EAGJ,GADA8B,EAAM,EACDxC,GAAK,EACT,OAAOwC,EAER,GAAW,IAANxC,GAAsB,IAAXsC,EACf,OAAOd,EAAG,GAGX,GAAgB,IAAXc,EAAe,CAInB,IAHAO,EAAI7C,EApCE,GAuCG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnB8B,GAAOhB,EAAGd,GAGZ,GAAKV,EA5CC,EA6CL,OAAOwC,EAER,IAAM9B,EAAImC,EAAGnC,EAAIV,EAAGU,GA/Cd,EAgDL8B,GAAOhB,EAAEd,GAAKc,EAAEd,EAAE,GAAKc,EAAEd,EAAE,GAAKc,EAAEd,EAAE,GAAKc,EAAEd,EAAE,GAAKc,EAAEd,EAAE,GAEvD,OAAO8B,CACP,CAMD,IAJChC,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEA5B,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,GAAOhB,EAAGhB,GACVA,GAAM8B,EAEP,OAAOE,CACR,CChCA,SAAS2U,GAASnX,EAAGwB,EAAGc,GACvB,IAAIE,EACAhC,EACAkD,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAG,GASX,IANChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACN7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIjP,GADJkB,EAAIlC,EAAGhB,IAEFiC,EAAKD,IAASC,EAAKiB,GACvB/D,GAAM6C,EAAIiP,EAAK/N,EAEf/D,GAAM+D,EAAE+N,EAAKjP,EAEdA,EAAMiP,EACNjR,GAAM8B,EAEP,OAAOE,EAAM7C,CACd,CC/BA,SAASwX,GAASnX,EAAGwB,EAAGc,EAAQC,GAC/B,IAAIC,EACAhC,EACAkD,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAGe,GAKX,IAHA/B,EAAK+B,EACLC,EAAM,EACN7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIjP,GADJkB,EAAIlC,EAAGhB,IAEFiC,EAAKD,IAASC,EAAKiB,GACvB/D,GAAM6C,EAAIiP,EAAK/N,EAEf/D,GAAM+D,EAAE+N,EAAKjP,EAEdA,EAAMiP,EACNjR,GAAM8B,EAEP,OAAOE,EAAM7C,CACd,CCvCA,SAASyX,GAAMpX,EAAGwB,EAAGc,GACpB,OAAO6U,GAASnX,EAAGwB,EAAGc,EACvB,CCMA,SAAS+U,GAAUrX,EAAGwB,EAAGc,GACxB,IAAIE,EACAgQ,EACAhS,EACAiS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAG,GAUX,IAPChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACNgQ,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIjP,GADJkB,EAAIlC,EAAGhB,IAGNb,EADI8C,EAAKD,IAASC,EAAKiB,GAClBlB,EAAIiP,EAAK/N,EAETA,EAAE+N,EAAKjP,EAEbA,EAAMiP,EACNA,EAAIgB,EAAK9S,EAER+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GAChB8S,EAAGhB,EAAK9R,EAERA,EAAE8R,EAAKgB,EAEdA,EAAKhB,EACLe,GAAOE,EACPlS,GAAM8B,EAEP,OAAOE,EAAMiQ,EAAKD,CACnB,CCpEAjU,EAAA2Y,GAAA,WCeA,SAAmBlX,EAAGwB,EAAGc,EAAQC,GAChC,IAAIC,EACAhC,EACAqC,EACAnC,EAGJ,GADA8B,EAAM,EACDxC,GAAK,EACT,OAAOwC,EAER,GAAW,IAANxC,GAAsB,IAAXsC,EACf,OAAOd,EAAGe,GAKX,GAHA/B,EAAK+B,EAGW,IAAXD,EAAe,CAInB,IAHAO,EAAI7C,EAvCE,GA0CG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnB8B,GAAOhB,EAAGhB,GACVA,GAAM8B,EAGR,GAAKtC,EAhDC,EAiDL,OAAOwC,EAER,IAAM9B,EAAImC,EAAGnC,EAAIV,EAAGU,GAnDd,EAoDL8B,GAAOhB,EAAEhB,GAAMgB,EAAEhB,EAAG,GAAKgB,EAAEhB,EAAG,GAAKgB,EAAEhB,EAAG,GAAKgB,EAAEhB,EAAG,GAAKgB,EAAEhB,EAAG,GAC5DA,GArDK,EAuDN,OAAOgC,CACP,CACD,IAAM9B,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,GAAOhB,EAAGhB,GACVA,GAAM8B,EAEP,OAAOE,CACR,ICvDAjE,EAAA4Y,GAAA,UAAApW,ICAAxC,EAAA6Y,GAAA,WCiBA,SAAepX,EAAGwB,EAAGc,EAAQC,GAC5B,OAAO4U,GAASnX,EAAGwB,EAAGc,EAAQC,EAC/B,ICnBAhE,EAAA8Y,GAAA,WCyBA,SAAmBrX,EAAGwB,EAAGc,EAAQC,GAChC,IAAIC,EACAgQ,EACAhS,EACAiS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAGe,GAMX,IAJA/B,EAAK+B,EACLC,EAAM,EACNgQ,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIjP,GADJkB,EAAIlC,EAAGhB,IAGNb,EADI8C,EAAKD,IAASC,EAAKiB,GAClBlB,EAAIiP,EAAK/N,EAETA,EAAE+N,EAAKjP,EAEbA,EAAMiP,EACNA,EAAIgB,EAAK9S,EAER+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GAChB8S,EAAGhB,EAAK9R,EAERA,EAAE8R,EAAKgB,EAEdA,EAAKhB,EACLe,GAAOE,EACPlS,GAAM8B,EAEP,OAAOE,EAAMiQ,EAAKD,CACnB,ICnDA,SAAS8E,GAAStX,EAAGwB,EAAGc,GACvB,IAAIE,EACAhC,EACAqC,EACAnC,EAGJ,GADA8B,EAAM,EACDxC,GAAK,EACT,OAAOwC,EAER,GAAW,IAANxC,GAAsB,IAAXsC,EACf,OAAOd,EAAG,GAGX,GAAgB,IAAXc,EAAe,CAInB,IAHAO,EAAI7C,EArCE,GAwCG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnB8B,GAAOhB,EAAGd,GAGZ,GAAKV,EA7CC,EA8CL,OAAOwC,EAER,IAAM9B,EAAImC,EAAGnC,EAAIV,EAAGU,GAhDd,EAiDL8B,GAAOhB,EAAEd,GAAKc,EAAEd,EAAE,GAAKc,EAAEd,EAAE,GAAKc,EAAEd,EAAE,GAAKc,EAAEd,EAAE,GAAKc,EAAEd,EAAE,GAEvD,OAAO8B,CACP,CAMD,IAJChC,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEA5B,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,GAAOhB,EAAGhB,GACVA,GAAM8B,EAEP,OAAOE,CACR,CCxDAjE,EAAA+Y,GAAA,WCeA,SAAkBtX,EAAGwB,EAAGc,EAAQC,GAC/B,IAAIC,EACAhC,EACAqC,EACAnC,EAGJ,GADA8B,EAAM,EACDxC,GAAK,EACT,OAAOwC,EAER,GAAW,IAANxC,GAAsB,IAAXsC,EACf,OAAOd,EAAGe,GAKX,GAHA/B,EAAK+B,EAGW,IAAXD,EAAe,CAInB,IAHAO,EAAI7C,EAvCE,GA0CG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnB8B,GAAOhB,EAAGhB,GACVA,GAAM8B,EAGR,GAAKtC,EAhDC,EAiDL,OAAOwC,EAER,IAAM9B,EAAImC,EAAGnC,EAAIV,EAAGU,GAnDd,EAoDL8B,GAAOhB,EAAEhB,GAAMgB,EAAEhB,EAAG,GAAKgB,EAAEhB,EAAG,GAAKgB,EAAEhB,EAAG,GAAKgB,EAAEhB,EAAG,GAAKgB,EAAEhB,EAAG,GAC5DA,GArDK,EAuDN,OAAOgC,CACP,CACD,IAAM9B,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,GAAOhB,EAAGhB,GACVA,GAAM8B,EAEP,OAAOE,CACR,ICxDA,IAAIoQ,GAAY,IA8BhB,SAAS2E,GAAQvX,EAAGwB,EAAGc,EAAQC,GAC9B,IAAI/B,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAGe,GAGX,GADA/B,EAAK+B,EACAvC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKT,EAAGhB,GACRA,GAAM8B,EAEP,OAAOL,CACP,CACD,GAAKjC,GAAK4S,GAAY,CAarB,IAXAE,EAAKtR,EAAGhB,GACRuS,EAAKvR,EAAGhB,EAAG8B,GACX0Q,EAAKxR,EAAGhB,EAAI,EAAE8B,GACd2Q,EAAKzR,EAAGhB,EAAI,EAAE8B,GACd4Q,EAAK1R,EAAGhB,EAAI,EAAE8B,GACd6Q,EAAK3R,EAAGhB,EAAI,EAAE8B,GACd8Q,EAAK5R,EAAGhB,EAAI,EAAE8B,GACd+Q,EAAK7R,EAAGhB,EAAI,EAAE8B,GACd9B,GAAM,EAAI8B,EAEVI,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,GAAMtR,EAAGhB,GACTuS,GAAMvR,EAAGhB,EAAG8B,GACZ0Q,GAAMxR,EAAGhB,EAAI,EAAE8B,GACf2Q,GAAMzR,EAAGhB,EAAI,EAAE8B,GACf4Q,GAAM1R,EAAGhB,EAAI,EAAE8B,GACf6Q,GAAM3R,EAAGhB,EAAI,EAAE8B,GACf8Q,GAAM5R,EAAGhB,EAAI,EAAE8B,GACf+Q,GAAM7R,EAAGhB,EAAI,EAAE8B,GACf9B,GAAM,EAAI8B,EAMX,IAHAL,EAAM6Q,EAAGC,GAAOC,EAAGC,IAASC,EAAGC,GAAOC,EAAGC,IAGhC3S,EAAIV,EAAGU,IACfuB,GAAKT,EAAGhB,GACRA,GAAM8B,EAEP,OAAOL,CACP,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAENuX,GADPjE,GAAKA,EAAI,EACS9R,EAAGc,EAAQ9B,GAAO+W,GAAQvX,EAAEsT,EAAG9R,EAAGc,EAAQ9B,EAAI8S,EAAEhR,EACnE,CC3EA,SAASiV,GAAQvX,EAAGwB,EAAGc,GACtB,IAAI9B,EACAyB,EACAvB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAG,GAOX,GAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEDtC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKT,EAAGhB,GACRA,GAAM8B,EAEP,OAAOL,CACP,CACD,OAAOO,GAAKxC,EAAGwB,EAAGc,EAAQ9B,EAC3B,CCjDAjC,EAAAgZ,GAAA,UAAAxW,ICaA,SAASyW,GAAMxX,EAAG4C,EAAOpB,EAAGc,GAC3B,IAAI9B,EACAE,EACAmC,EAEJ,GAAK7C,GAAK,GAAe,IAAV4C,EACd,OAAOpB,EAGR,GAAgB,IAAXc,EAAe,CAInB,IAHAO,EAAI7C,EA9BE,GAiCG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnBc,EAAGd,IAAOkC,EAGZ,GAAK5C,EAtCC,EAuCL,OAAOwB,EAER,IAAMd,EAAImC,EAAGnC,EAAIV,EAAGU,GAzCd,EA0CLc,EAAGd,IAAOkC,EACVpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EAEb,OAAOpB,CACP,CAMD,IAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEA5B,EAAI,EAAGA,EAAIV,EAAGU,IACnBc,EAAGhB,IAAQoC,EACXpC,GAAM8B,EAEP,OAAOd,CACR,CC/BA,SAASiW,GAAYzX,EAAG4C,EAAOpB,EAAGc,GACjC,IAAIE,EACAhC,EACAkD,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOM,EAAQpB,EAAG,GASnB,IANChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACN7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIjP,GADJkB,EAAId,EAAQpB,EAAGhB,IAEViC,EAAKD,IAASC,EAAKiB,GACvB/D,GAAM6C,EAAIiP,EAAK/N,EAEf/D,GAAM+D,EAAE+N,EAAKjP,EAEdA,EAAMiP,EACNjR,GAAM8B,EAEP,OAAOE,EAAM7C,CACd,CC9BA,SAAS8X,GAAYzX,EAAG4C,EAAOpB,EAAGc,EAAQC,GACzC,IAAIC,EACAhC,EACAkD,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOM,EAAQpB,EAAGe,GAKnB,IAHA/B,EAAK+B,EACLC,EAAM,EACN7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIjP,GADJkB,EAAId,EAAQpB,EAAGhB,IAEViC,EAAKD,IAASC,EAAKiB,GACvB/D,GAAM6C,EAAIiP,EAAK/N,EAEf/D,GAAM+D,EAAE+N,EAAKjP,EAEdA,EAAMiP,EACNjR,GAAM8B,EAEP,OAAOE,EAAM7C,CACd,CCxCA,SAAS+X,GAAS1X,EAAG4C,EAAOpB,EAAGc,GAC9B,OAAOmV,GAAYzX,EAAG4C,EAAOpB,EAAGc,EACjC,CCMA,SAASqV,GAAa3X,EAAG4C,EAAOpB,EAAGc,GAClC,IAAIE,EACAgQ,EACAhS,EACAiS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOM,EAAQpB,EAAG,GAUnB,IAPChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACNgQ,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIjP,GADJkB,EAAId,EAAQpB,EAAGhB,IAGdb,EADI8C,EAAKD,IAASC,EAAKiB,GAClBlB,EAAIiP,EAAK/N,EAETA,EAAE+N,EAAKjP,EAEbA,EAAMiP,EACNA,EAAIgB,EAAK9S,EAER+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GAChB8S,EAAGhB,EAAK9R,EAERA,EAAE8R,EAAKgB,EAEdA,EAAKhB,EACLe,GAAOE,EACPlS,GAAM8B,EAEP,OAAOE,EAAMiQ,EAAKD,CACnB,CC1DA,SAASoF,GAAY5X,EAAG4C,EAAOpB,EAAGc,GACjC,IAAIE,EACAhC,EACAE,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOM,EAAQpB,EAAG,GAQnB,IALChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACA9B,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,GAAOI,EAAQpB,EAAGhB,GAClBA,GAAM8B,EAEP,OAAOE,CACR,CCTAjE,EAAAC,GAAA,WCPA,SAAewB,EAAG4C,EAAOpB,EAAGc,EAAQC,GACnC,IAAI/B,EACAqC,EACAnC,EAEJ,GAAKV,GAAK,GAAe,IAAV4C,EACd,OAAOpB,EAKR,GAHAhB,EAAK+B,EAGW,IAAXD,EAAe,CAInB,IAHAO,EAAI7C,EAlCE,GAqCG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnBc,EAAGhB,IAAQoC,EACXpC,GAAM8B,EAGR,GAAKtC,EA3CC,EA4CL,OAAOwB,EAER,IAAMd,EAAImC,EAAGnC,EAAIV,EAAGU,GA9Cd,EA+CLc,EAAGhB,IAAQoC,EACXpB,EAAGhB,EAAG,IAAOoC,EACbpB,EAAGhB,EAAG,IAAOoC,EACbpB,EAAGhB,EAAG,IAAOoC,EACbpB,EAAGhB,EAAG,IAAOoC,EACbpC,GApDK,EAsDN,OAAOgB,CACP,CACD,IAAMd,EAAI,EAAGA,EAAIV,EAAGU,IACnBc,EAAGhB,IAAQoC,EACXpC,GAAM8B,EAEP,OAAOd,CACR,IC7BAjD,EAAAC,GAAA,UAAAuC,ICAAxC,EAAAC,GAAA,WCRA,SAAkBwB,EAAG4C,EAAOpB,EAAGc,EAAQC,GACtC,OAAOkV,GAAYzX,EAAG4C,EAAOpB,EAAGc,EAAQC,EACzC,ICMAhE,EAAAC,GAAA,WCAA,SAAsBwB,EAAG4C,EAAOpB,EAAGc,EAAQC,GAC1C,IAAIC,EACAgQ,EACAhS,EACAiS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOM,EAAQpB,EAAG,GAMnB,IAJAhB,EAAK+B,EACLC,EAAM,EACNgQ,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIjP,GADJkB,EAAId,EAAQpB,EAAGhB,IAGdb,EADI8C,EAAKD,IAASC,EAAKiB,GAClBlB,EAAIiP,EAAK/N,EAETA,EAAE+N,EAAKjP,EAEbA,EAAMiP,EACNA,EAAIgB,EAAK9S,EAER+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GAChB8S,EAAGhB,EAAK9R,EAERA,EAAE8R,EAAKgB,EAEdA,EAAKhB,EACLe,GAAOE,EACPlS,GAAM8B,EAEP,OAAOE,EAAMiQ,EAAKD,CACnB,ICzCAjU,EAAAC,GAAA,WCbA,SAAqBwB,EAAG4C,EAAOpB,EAAGc,EAAQC,GACzC,IAAIC,EACAhC,EACAE,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOM,EAAQpB,EAAGe,GAInB,IAFA/B,EAAK+B,EACLC,EAAM,EACA9B,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,GAAOI,EAAQpB,EAAGhB,GAClBA,GAAM8B,EAEP,OAAOE,CACR,IC/BA,IAAIoQ,GAAY,IAgChB,SAASiF,GAAW7X,EAAG4C,EAAOpB,EAAGc,EAAQC,GACxC,IAAI/B,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOM,EAAQpB,EAAGe,GAGnB,GADA/B,EAAK+B,EACAvC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKW,EAAQpB,EAAGhB,GAChBA,GAAM8B,EAEP,OAAOL,CACP,CACD,GAAKjC,GAAK4S,GAAY,CAarB,IAXAE,EAAKlQ,EAAQpB,EAAGhB,GAChBuS,EAAKnQ,EAAQpB,EAAGhB,EAAG8B,GACnB0Q,EAAKpQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB2Q,EAAKrQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB4Q,EAAKtQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB6Q,EAAKvQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB8Q,EAAKxQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB+Q,EAAKzQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB9B,GAAM,EAAI8B,EAEVI,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,GAAMlQ,EAAQpB,EAAGhB,GACjBuS,GAAMnQ,EAAQpB,EAAGhB,EAAG8B,GACpB0Q,GAAMpQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB2Q,GAAMrQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB4Q,GAAMtQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB6Q,GAAMvQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB8Q,GAAMxQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB+Q,GAAMzQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB9B,GAAM,EAAI8B,EAMX,IAHAL,EAAM6Q,EAAGC,GAAOC,EAAGC,IAASC,EAAGC,GAAOC,EAAGC,IAGhC3S,EAAIV,EAAGU,IACfuB,GAAKW,EAAQpB,EAAGhB,GAChBA,GAAM8B,EAEP,OAAOL,CACP,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAEN6X,GADPvE,GAAKA,EAAI,EACY1Q,EAAOpB,EAAGc,EAAQ9B,GAAOqX,GAAW7X,EAAEsT,EAAG1Q,EAAOpB,EAAGc,EAAQ9B,EAAI8S,EAAEhR,EACvF,CC9EA,SAASuV,GAAW7X,EAAG4C,EAAOpB,EAAGc,GAChC,IAAI9B,EACAyB,EACAvB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOM,EAAQpB,EAAG,GAOnB,GAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEDtC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKW,EAAQpB,EAAGhB,GAChBA,GAAM8B,EAEP,OAAOL,CACP,CACD,OAAOO,GAAKxC,EAAG4C,EAAOpB,EAAGc,EAAQ9B,EAClC,CCvBAjC,EAAAC,GAAA,UAAAuC,ICzBA,IAAI6R,GAAY,IA+BhB,SAASkF,GAAS9X,EAAGwB,EAAGc,EAAQC,GAC/B,IAAI/B,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOG,EAAKjB,EAAGe,IAGhB,GADA/B,EAAK+B,EACAvC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKQ,EAAKjB,EAAGhB,IACbA,GAAM8B,EAEP,OAAOL,CACP,CACD,GAAKjC,GAAK4S,GAAY,CAarB,IAXAE,EAAKrQ,EAAKjB,EAAGhB,IACbuS,EAAKtQ,EAAKjB,EAAGhB,EAAG8B,IAChB0Q,EAAKvQ,EAAKjB,EAAGhB,EAAI,EAAE8B,IACnB2Q,EAAKxQ,EAAKjB,EAAGhB,EAAI,EAAE8B,IACnB4Q,EAAKzQ,EAAKjB,EAAGhB,EAAI,EAAE8B,IACnB6Q,EAAK1Q,EAAKjB,EAAGhB,EAAI,EAAE8B,IACnB8Q,EAAK3Q,EAAKjB,EAAGhB,EAAI,EAAE8B,IACnB+Q,EAAK5Q,EAAKjB,EAAGhB,EAAI,EAAE8B,IACnB9B,GAAM,EAAI8B,EAEVI,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,GAAMrQ,EAAKjB,EAAGhB,IACduS,GAAMtQ,EAAKjB,EAAGhB,EAAG8B,IACjB0Q,GAAMvQ,EAAKjB,EAAGhB,EAAI,EAAE8B,IACpB2Q,GAAMxQ,EAAKjB,EAAGhB,EAAI,EAAE8B,IACpB4Q,GAAMzQ,EAAKjB,EAAGhB,EAAI,EAAE8B,IACpB6Q,GAAM1Q,EAAKjB,EAAGhB,EAAI,EAAE8B,IACpB8Q,GAAM3Q,EAAKjB,EAAGhB,EAAI,EAAE8B,IACpB+Q,GAAM5Q,EAAKjB,EAAGhB,EAAI,EAAE8B,IACpB9B,GAAM,EAAI8B,EAMX,IAHAL,EAAM6Q,EAAGC,GAAOC,EAAGC,IAASC,EAAGC,GAAOC,EAAGC,IAGhC3S,EAAIV,EAAGU,IACfuB,GAAKQ,EAAKjB,EAAGhB,IACbA,GAAM8B,EAEP,OAAOL,CACP,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAEN8X,GADPxE,GAAKA,EAAI,EACU9R,EAAGc,EAAQ9B,GAAOsX,GAAS9X,EAAEsT,EAAG9R,EAAGc,EAAQ9B,EAAI8S,EAAEhR,EACrE,CC/EA,SAASwV,GAAS9X,EAAGwB,EAAGc,GACvB,IAAI9B,EACAyB,EACAvB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOG,EAAKjB,EAAG,IAOhB,GAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEDtC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKQ,EAAKjB,EAAGhB,IACbA,GAAM8B,EAEP,OAAOL,CACP,CACD,OAAOO,GAAKxC,EAAGwB,EAAGc,EAAQ9B,EAC3B,CCvBA,SAASuX,GAAW/X,EAAGwC,EAAKhB,EAAGrB,EAASsB,EAAGnB,GAC1C,IAAIE,EACAC,EACAwB,EACAyB,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAcR,IAXCjB,EADIL,EAAU,GACR,EAAEH,GAAKG,EAER,EAGLM,EADIH,EAAU,GACR,EAAEN,GAAKM,EAER,EAEN2B,EAAIO,EACJ7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIxP,GADJyB,EAAIlC,EAAGhB,IAEFiC,EAAKR,IAAOQ,EAAKiB,GACrB/D,GAAMsC,EAAEwP,EAAK/N,EAEb/D,GAAM+D,EAAE+N,EAAKxP,EAEdA,EAAIwP,EACJhQ,EAAGhB,GAAOwB,EAAItC,EACda,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CCjCA,SAASsW,GAAW/X,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC5D,IAAIC,EACAC,EACAwB,EACAyB,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAMR,IAJAjB,EAAKJ,EACLK,EAAKF,EACL0B,EAAIO,EACJ7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIxP,GADJyB,EAAIlC,EAAGhB,IAEFiC,EAAKR,IAAOQ,EAAKiB,GACrB/D,GAAMsC,EAAEwP,EAAK/N,EAEb/D,GAAM+D,EAAE+N,EAAKxP,EAEdA,EAAIwP,EACJhQ,EAAGhB,GAAOwB,EAAItC,EACda,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CC3CA,SAASuW,GAAQhY,EAAGwC,EAAKhB,EAAGrB,EAASsB,EAAGnB,GACvC,OAAOyX,GAAW/X,EAAGwC,EAAKhB,EAAGrB,EAASsB,EAAGnB,EAC1C,CCMA,SAAS2X,GAAYjY,EAAGwC,EAAKhB,EAAGrB,EAASsB,EAAGnB,GAC3C,IAAIkS,EACAhS,EACAC,EACAgS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAcR,IAXCjB,EADIL,EAAU,GACR,EAAEH,GAAKG,EAER,EAGLM,EADIH,EAAU,GACR,EAAEN,GAAKM,EAER,EAENkS,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIjP,GADJkB,EAAIlC,EAAGhB,IAGNb,EADI8C,EAAKD,IAASC,EAAKiB,GAClBlB,EAAIiP,EAAK/N,EAETA,EAAE+N,EAAKjP,EAEbA,EAAMiP,EACNA,EAAIgB,EAAK9S,EAER+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GAChB8S,EAAGhB,EAAK9R,EAERA,EAAE8R,EAAKgB,EAEdA,EAAKhB,EACLe,GAAOE,EAEPjR,EAAGhB,GAAO+B,EAAMiQ,EAAKD,EACrBhS,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CC9DA,SAASyW,GAAWlY,EAAGwC,EAAKhB,EAAGrB,EAASsB,EAAGnB,GAC1C,IAAIE,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAYR,IATCjB,EADIL,EAAU,GACR,EAAEH,GAAKG,EAER,EAGLM,EADIH,EAAU,GACR,EAAEN,GAAKM,EAER,EAEAI,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,GAAOhB,EAAGhB,GACViB,EAAGhB,GAAO+B,EACVhC,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CCZAlD,EAAAC,GAAA,UAAAuC,ICEAxC,EAAAC,GAAA,UAAAuC,ICAAxC,EAAAC,GAAA,WCLA,SAAiBwB,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GACzD,OAAOwX,GAAW/X,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,EAC5D,ICGAhC,EAAAC,GAAA,WCGA,SAAqBwB,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC7D,IAAIiS,EACAhS,EACAC,EACAgS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAOR,IALAjB,EAAKJ,EACLK,EAAKF,EAELiS,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIjP,GADJkB,EAAIlC,EAAGhB,IAGNb,EADI8C,EAAKD,IAASC,EAAKiB,GAClBlB,EAAIiP,EAAK/N,EAETA,EAAE+N,EAAKjP,EAEbA,EAAMiP,EACNA,EAAIgB,EAAK9S,EAER+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GAChB8S,EAAGhB,EAAK9R,EAERA,EAAE8R,EAAKgB,EAEdA,EAAKhB,EACLe,GAAOE,EAEPjR,EAAGhB,GAAO+B,EAAMiQ,EAAKD,EACrBhS,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,IC7CAlD,EAAAC,GAAA,WCVA,SAAoBwB,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC5D,IAAIC,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAIR,IAFAjB,EAAKJ,EACLK,EAAKF,EACCG,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,GAAOhB,EAAGhB,GACViB,EAAGhB,GAAO+B,EACVhC,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,IClCA,IAAImR,GAAY,IAoChB,SAASuF,GAAUnY,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC3D,IAAIC,EACAC,EACAwB,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAIR,GAFAjB,EAAKJ,EACLK,EAAKF,EACAP,GAAK4S,GAAY,CAErB,IADA3Q,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKT,EAAGhB,GACRiB,EAAGhB,GAAO+B,EAAMP,EAChBzB,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACP,CAKD,OAHA0W,GADA7E,EAAIC,GAAOvT,EAAE,GACAwC,EAAKhB,EAAGrB,EAASK,EAAIiB,EAAGnB,EAASG,GAE9C0X,GAAUnY,EAAEsT,EAAG7R,EADfhB,IAAO6S,EAAE,GAAKhT,GACUkB,EAAGrB,EAASK,EAAI8S,EAAEnT,EAAUsB,EAAGnB,EAASG,EAAGH,GAC5DmB,CACR,CCtCA,SAAS0W,GAAUnY,EAAGwC,EAAKhB,EAAGrB,EAASsB,EAAGnB,GAIzC,OAAKN,GAAK,EACFyB,EAYDqS,GAAO9T,EAAGwC,EAAKhB,EAAGrB,EAVpBA,EAAU,GACR,EAAEH,GAAKG,EAER,EAOgCsB,EAAGnB,EALpCA,EAAU,GACR,EAAEN,GAAKM,EAER,EAGP,CCbA,SAAS8X,GAAOpY,EAAG4C,EAAOpB,EAAGc,EAAQC,GACpC,IAAI+H,EACA3J,EACAH,EACAE,EASJ,IANA4J,EAAO9I,EAAEgJ,KAGT7J,EAAMa,EAAEiJ,UAAW,GAEnBjK,EAAK+B,EACC7B,EAAI,EAAGA,EAAIV,EAAGU,IACnBC,EAAK2J,EAAM9J,EAAIoC,GACfpC,GAAM8B,EAEP,OAAOd,CACR,CCrBAjD,EAAAC,GAAA,UAAAuC,ICPA,SAASqX,GAAOpY,EAAG4C,EAAOpB,EAAGc,GAC5B,IAAI9B,EACAE,EACAmC,EACAwV,EAEJ,GAAKrY,GAAK,EACT,OAAOwB,EAGR,IADA6W,EAAI3N,EAAkBlJ,IACfmJ,iBAON,OADAF,GAAWzK,EAAG4C,EAAOyV,EAAG/V,EAJvB9B,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,GAGC+V,EAAE7N,KAGV,GAAgB,IAAXlI,EAAe,CAInB,IAHAO,EAAI7C,EAzCE,GA4CG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnBc,EAAGd,GAAMkC,EAGX,GAAK5C,EAjDC,EAkDL,OAAOwB,EAER,IAAMd,EAAImC,EAAGnC,EAAIV,EAAGU,GApDd,EAqDLc,EAAGd,GAAMkC,EACTpB,EAAGd,EAAE,GAAMkC,EACXpB,EAAGd,EAAE,GAAMkC,EACXpB,EAAGd,EAAE,GAAMkC,EACXpB,EAAGd,EAAE,GAAMkC,EACXpB,EAAGd,EAAE,GAAMkC,EACXpB,EAAGd,EAAE,GAAMkC,EACXpB,EAAGd,EAAE,GAAMkC,EAEZ,OAAOpB,CACP,CAMD,IAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEA5B,EAAI,EAAGA,EAAIV,EAAGU,IACnBc,EAAGhB,GAAOoC,EACVpC,GAAM8B,EAEP,OAAOd,CACR,CCrCA,SAAS8W,GAAStY,EAAGwB,EAAGc,EAAQC,EAAQgW,EAAMC,GAC7C,IAAIlO,EACA3J,EACAG,EACAN,EACAE,EAUJ,IAPA4J,EAAO9I,EAAEgJ,KAGT1J,EAAMU,EAAEiJ,UAAW,GACnB9J,EAAMa,EAAEiJ,UAAW,GAEnBjK,EAAK+B,EACC7B,EAAI,EAAGA,EAAIV,EAAGU,IACnBC,EAAK2J,EAAM9J,EAAI+X,EAAKE,KAAMD,EAAS1X,EAAKwJ,EAAM9J,GAAME,EAAGF,EAAIgB,IAC3DhB,GAAM8B,EAEP,OAAOd,CACR,CCrCA,SAAS8W,GAAStY,EAAGwB,EAAGc,EAAQiW,EAAMC,GACrC,IAAIhY,EACA6X,EACA3X,EAEJ,GAAKV,GAAK,EACT,OAAOwB,EAQR,GALChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,GAEN+V,EAAI3N,EAAkBlJ,IACfmJ,iBAEN,OADAF,GAAWzK,EAAGqY,EAAG/V,EAAQ9B,EAAI+X,EAAMC,GAC5BH,EAAE7N,KAEV,IAAM9J,EAAI,EAAGA,EAAIV,EAAGU,IACnBc,EAAGhB,GAAO+X,EAAKE,KAAMD,EAAShX,EAAGhB,GAAME,EAAGF,EAAIgB,GAC9ChB,GAAM8B,EAEP,OAAOd,CACR,CCpBA,SAASkX,GAAY1Y,EAAGwB,EAAGc,GAC1B,IAAIE,EACAhC,EACAkD,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAG,IACP,EAEDA,EAAG,GASX,IANChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACN7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACa,IAAfwT,GAAOtQ,KACX+N,EAAIjP,EAAMkB,EACLjB,EAAKD,IAASC,EAAKiB,GACvB/D,GAAM6C,EAAIiP,EAAK/N,EAEf/D,GAAM+D,EAAE+N,EAAKjP,EAEdA,EAAMiP,GAEPjR,GAAM8B,EAEP,OAAOE,EAAM7C,CACd,CCnCA,SAAS+Y,GAAY1Y,EAAGwB,EAAGc,EAAQC,GAClC,IAAIC,EACAhC,EACAkD,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAGe,IACP,EAEDf,EAAGe,GAKX,IAHA/B,EAAK+B,EACLC,EAAM,EACN7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACa,IAAfwT,GAAOtQ,KACX+N,EAAIjP,EAAMkB,EACLjB,EAAKD,IAASC,EAAKiB,GACvB/D,GAAM6C,EAAIiP,EAAK/N,EAEf/D,GAAM+D,EAAE+N,EAAKjP,EAEdA,EAAMiP,GAEPjR,GAAM8B,EAEP,OAAOE,EAAM7C,CACd,CC9CA,SAASgZ,GAAS3Y,EAAGwB,EAAGc,GACvB,OAAOoW,GAAY1Y,EAAGwB,EAAGc,EAC1B,CCOA,SAASsW,GAAa5Y,EAAGwB,EAAGc,GAC3B,IAAIE,EACAgQ,EACAhS,EACAiS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAG,IACP,EAEDA,EAAG,GAUX,IAPChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACNgQ,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACa,IAAfwT,GAAOtQ,KACX+N,EAAIjP,EAAMkB,EAET/D,EADI8C,EAAKD,IAASC,EAAKiB,GAClBlB,EAAIiP,EAAK/N,EAETA,EAAE+N,EAAKjP,EAEbA,EAAMiP,EACNA,EAAIgB,EAAK9S,EAER+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GAChB8S,EAAGhB,EAAK9R,EAERA,EAAE8R,EAAKgB,EAEdA,EAAKhB,EACLe,GAAOE,GAERlS,GAAM8B,EAEP,OAAOE,EAAMiQ,EAAKD,CACnB,CC3DA,SAASqG,GAAY7Y,EAAGwB,EAAGc,GAC1B,IAAI9B,EACAyB,EACAvB,EAGJ,GADAuB,EAAI,EACCjC,GAAK,EACT,OAAOiC,EAER,GAAW,IAANjC,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAG,IACPS,EAEDT,EAAG,GAOX,IAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEA5B,EAAI,EAAGA,EAAIV,EAAGU,KACO,IAArBsT,GAAOxS,EAAGhB,MACdyB,GAAKT,EAAGhB,IAETA,GAAM8B,EAEP,OAAOL,CACR,CClBA1D,EAAAC,GAAA,WCFA,SAAgBwB,EAAG4C,EAAOpB,EAAGc,EAAQC,GACpC,IAAI/B,EACAqC,EACAwV,EACA3X,EAEJ,GAAKV,GAAK,EACT,OAAOwB,EAGR,IADA6W,EAAI3N,EAAkBlJ,IACfmJ,iBAEN,OADAF,GAAWzK,EAAG4C,EAAOyV,EAAG/V,EAAQC,GACzB8V,EAAE7N,KAKV,GAHAhK,EAAK+B,EAGW,IAAXD,EAAe,CAInB,IAHAO,EAAI7C,EAvCE,GA0CG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnBc,EAAGhB,GAAOoC,EACVpC,GAAM8B,EAGR,GAAKtC,EAhDC,EAiDL,OAAOwB,EAER,IAAMd,EAAImC,EAAGnC,EAAIV,EAAGU,GAnDd,EAoDLc,EAAGhB,GAAOoC,EACVpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpB,EAAGhB,EAAG,GAAMoC,EACZpC,GA5DK,EA8DN,OAAOgB,CACP,CACD,IAAMd,EAAI,EAAGA,EAAIV,EAAGU,IACnBc,EAAGhB,GAAOoC,EACVpC,GAAM8B,EAEP,OAAOd,CACR,ICtCAjD,EAAAC,GAAA,WCVA,SAAkBwB,EAAGwB,EAAGc,EAAQC,EAAQgW,EAAMC,GAC7C,IAAIhY,EACA6X,EACA3X,EAEJ,GAAKV,GAAK,EACT,OAAOwB,EAGR,IADA6W,EAAI3N,EAAkBlJ,IACfmJ,iBAEN,OADAF,GAAWzK,EAAGqY,EAAG/V,EAAQC,EAAQgW,EAAMC,GAChCH,EAAE7N,KAGV,IADAhK,EAAK+B,EACC7B,EAAI,EAAGA,EAAIV,EAAGU,IACnBc,EAAGhB,GAAO+X,EAAKE,KAAMD,EAAShX,EAAGhB,GAAME,EAAGF,EAAIgB,GAC9ChB,GAAM8B,EAEP,OAAOd,CACR,ICdAjD,EAAAC,GAAA,UAAAuC,ICAAxC,EAAAC,GAAA,WCTA,SAAkBwB,EAAGwB,EAAGc,EAAQC,GAC/B,OAAOmW,GAAY1Y,EAAGwB,EAAGc,EAAQC,EAClC,ICOAhE,EAAAC,GAAA,WCAA,SAAsBwB,EAAGwB,EAAGc,EAAQC,GACnC,IAAIC,EACAgQ,EACAhS,EACAiS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAGe,IACP,EAEDf,EAAGe,GAMX,IAJA/B,EAAK+B,EACLC,EAAM,EACNgQ,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACa,IAAfwT,GAAOtQ,KACX+N,EAAIjP,EAAMkB,EAET/D,EADI8C,EAAKD,IAASC,EAAKiB,GAClBlB,EAAIiP,EAAK/N,EAETA,EAAE+N,EAAKjP,EAEbA,EAAMiP,EACNA,EAAIgB,EAAK9S,EAER+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GAChB8S,EAAGhB,EAAK9R,EAERA,EAAE8R,EAAKgB,EAEdA,EAAKhB,EACLe,GAAOE,GAERlS,GAAM8B,EAEP,OAAOE,EAAMiQ,EAAKD,CACnB,IC9CAjU,EAAAC,GAAA,WCTA,SAAqBwB,EAAGwB,EAAGc,EAAQC,GAClC,IAAI/B,EACAyB,EACAvB,EAGJ,GADAuB,EAAI,EACCjC,GAAK,EACT,OAAOiC,EAER,GAAW,IAANjC,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAGe,IACPN,EAEDT,EAAGe,GAGX,IADA/B,EAAK+B,EACC7B,EAAI,EAAGA,EAAIV,EAAGU,KACO,IAArBsT,GAAOxS,EAAGhB,MACdyB,GAAKT,EAAGhB,IAETA,GAAM8B,EAEP,OAAOL,CACR,ICvCA,IAAI2Q,GAAY,IA+BhB,SAASkG,GAAW9Y,EAAGwB,EAAGc,EAAQC,GACjC,IAAI/B,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAGe,IACP,EAEDf,EAAGe,GAGX,GADA/B,EAAK+B,EACAvC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,KACO,IAArBsT,GAAOxS,EAAGhB,MACdyB,GAAKT,EAAGhB,IAETA,GAAM8B,EAEP,OAAOL,CACP,CACD,GAAKjC,GAAK4S,GAAY,CAoBrB,IAlBAE,EAAOkB,GAAOxS,EAAGhB,IAAW,EAAMgB,EAAGhB,GAErCuS,EAAOiB,GAAOxS,EADdhB,GAAM8B,IACsB,EAAMd,EAAGhB,GAErCwS,EAAOgB,GAAOxS,EADdhB,GAAM8B,IACsB,EAAMd,EAAGhB,GAErCyS,EAAOe,GAAOxS,EADdhB,GAAM8B,IACsB,EAAMd,EAAGhB,GAErC0S,EAAOc,GAAOxS,EADdhB,GAAM8B,IACsB,EAAMd,EAAGhB,GAErC2S,EAAOa,GAAOxS,EADdhB,GAAM8B,IACsB,EAAMd,EAAGhB,GAErC4S,EAAOY,GAAOxS,EADdhB,GAAM8B,IACsB,EAAMd,EAAGhB,GAErC6S,EAAOW,GAAOxS,EADdhB,GAAM8B,IACsB,EAAMd,EAAGhB,GACrCA,GAAM8B,EAENI,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,GAAQkB,GAAOxS,EAAGhB,IAAW,EAAMgB,EAAGhB,GAEtCuS,GAAQiB,GAAOxS,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtCwS,GAAQgB,GAAOxS,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtCyS,GAAQe,GAAOxS,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC0S,GAAQc,GAAOxS,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC2S,GAAQa,GAAOxS,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC4S,GAAQY,GAAOxS,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC6S,GAAQW,GAAOxS,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GACtCA,GAAM8B,EAMP,IAHAL,EAAM6Q,EAAGC,GAAOC,EAAGC,IAASC,EAAGC,GAAOC,EAAGC,IAGhC3S,EAAIV,EAAGU,KACW,IAArBsT,GAAOxS,EAAGhB,MACdyB,GAAKT,EAAGhB,IAETA,GAAM8B,EAEP,OAAOL,CACP,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAEN8Y,GADPxF,GAAKA,EAAI,EACY9R,EAAGc,EAAQ9B,GAAOsY,GAAW9Y,EAAEsT,EAAG9R,EAAGc,EAAQ9B,EAAI8S,EAAEhR,EACzE,CCnGA,SAASwW,GAAW9Y,EAAGwB,EAAGc,GACzB,IAAI9B,EACAyB,EACAvB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK0R,GAAOxS,EAAG,IACP,EAEDA,EAAG,GAOX,GAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEDtC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,KACO,IAArBsT,GAAOxS,EAAGhB,MACdyB,GAAKT,EAAGhB,IAETA,GAAM8B,EAEP,OAAOL,CACP,CACD,OAAOO,GAAKxC,EAAGwB,EAAGc,EAAQ9B,EAC3B,CCjBA,SAASuY,GAAM/Y,EAAGwB,EAAGc,EAAQC,GAC5B,IAAI+H,EACA3J,EACAG,EACAG,EACAT,EACAC,EACA6S,EACA5S,EAYJ,IATA4J,EAAO9I,EAAEgJ,KAGT1J,EAAMU,EAAEiJ,UAAW,GACnB9J,EAAMa,EAAEiJ,UAAW,GAEnB6I,EAAIC,GAAOvT,EAAE,GAEbS,GADAD,EAAK+B,IACOvC,EAAE,GAAGsC,EACX5B,EAAI,EAAGA,EAAI4S,EAAG5S,IACnBO,EAAMH,EAAKwJ,EAAM9J,GACjBG,EAAK2J,EAAM9J,EAAIM,EAAKwJ,EAAM7J,IAC1BE,EAAK2J,EAAM7J,EAAIQ,GACfT,GAAM8B,EACN7B,GAAM6B,EAEP,OAAOd,CACR,CCvCAjD,EAAAC,GAAA,UAAAuC,ICNA,SAASgY,GAAM/Y,EAAGwB,EAAGc,GACpB,IAAIrB,EACAT,EACAC,EACA4X,EACAxV,EACAyQ,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAOwB,EAGR,IADA6W,EAAI3N,EAAkBlJ,IACfmJ,iBAON,OADAF,GAAWzK,EAAGqY,EAAG/V,EAJhB9B,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,GAGC+V,EAAE7N,KAKV,GAHA8I,EAAIC,GAAOvT,EAAE,GAGG,IAAXsC,EAAe,CAKnB,GAHA7B,EAAKT,EAAI,GADT6C,EAAIyQ,EA7CE,GAiDG,EACR,IAAM9S,EAAK,EAAGA,EAAKqC,EAAGrC,IACrBS,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EACVR,GAAM,EAGR,GAAK6S,EAzDC,EA0DL,OAAO9R,EAER,IAAMhB,EAAKqC,EAAGrC,EAAK8S,EAAG9S,GA5DhB,EA6DLS,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EAEVA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMgB,EAAGf,EAAG,GAClBe,EAAGf,EAAG,GAAMQ,EAEZA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMgB,EAAGf,EAAG,GAClBe,EAAGf,EAAG,GAAMQ,EAEZR,GAzEK,EA2EN,OAAOe,CACP,CAOD,IADAf,GAJCD,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,IAEMtC,EAAE,GAAGsC,EACX5B,EAAI,EAAGA,EAAI4S,EAAG5S,IACnBO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EACVT,GAAM8B,EACN7B,GAAM6B,EAEP,OAAOd,CACR,CC3DA,SAASwX,GAAUhZ,EAAGyG,EAAOjF,EAAGrB,EAASsB,EAAGnB,GAC3C,IAAIF,EACAG,EACAkV,EACAC,EACAC,EACAC,EACAC,EACAC,EACAtV,EACAC,EACA6S,EACAlR,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAwBR,IArBKiF,EAAQ,IACZtG,IAAY,EACZG,IAAY,GAGZF,EADID,EAAU,GACH,EAAEH,GAAKG,EAER,EAGVI,EADID,EAAU,GACH,EAAEN,GAAKM,EAER,EAGXgT,EAAItT,EAGJyV,EAASlC,GAAOvT,EAAI,KAGL,CACd,GAAKyV,EAAS,EAGbI,EAAKrU,EAAGpB,GADRqV,GAAU,GACctV,GACxB2V,EAAKrU,EAAGlB,EAASkV,EAAOnV,OAClB,CAKN,GAAW,KAHXgT,GAAK,GAIJ,OAAO9R,EAIRqU,EAAKrU,EADLhB,EAAKJ,EAAWkT,EAAEnT,GAGlB2V,EAAKrU,EADLhB,EAAKF,EAAW+S,EAAEhT,GAIlBkB,EAAGhB,GAAOgB,EAAGpB,GACbqB,EAAGhB,GAAOgB,EAAGlB,EACb,CASD,IAFAmV,EAAW,GAHXtT,EAAIqT,GAGY,EAERC,EAAQpC,KAEfjM,EAAIqO,EAAQ,GACHpC,KACRqC,EAAKnU,EAAGpB,EAASiH,EAAElH,KACnByV,EAAKpU,EAAGpB,EAASsV,EAAMvV,KAGP6T,GAAO2B,IAASA,IAAOC,GAAMG,GAAgBJ,MAC5DD,GAAS,IAIXC,EAAKnU,EAAGpB,EAASsV,EAAMvV,IACb0V,GAAM7B,GAAO2B,IAAUA,IAAOE,GAAME,GAAgBJ,KAE7DnU,EAAGpB,EAASgC,EAAEjC,GAAawV,EAC3BlU,EAAGlB,EAAS6B,EAAE9B,GAAamB,EAAGlB,EAASmV,EAAMpV,GAM7CoV,EAAW,GAHXtT,EAAIsT,GAGY,EAOlBlU,EAAGpB,EAASgC,EAAEjC,GAAa0V,EAC3BpU,EAAGlB,EAAS6B,EAAE9B,GAAawV,CAC3B,CACF,CCnHA,SAASmD,GAAWjZ,EAAGyG,EAAOjF,EAAGrB,EAASsB,EAAGnB,GAC5C,IAAI2V,EACAzV,EACAwG,EACAkP,EACAC,EACA1V,EACAwG,EACAmP,EACAC,EACA7G,EACAC,EACA6G,EACA5V,EAEJ,GAAKV,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAgBR,GAbKiF,EAAQ,IACZtG,IAAY,EACZG,IAAY,GAERA,EAAU,GACd8V,GAAM,EAAEpW,GAAKM,EACb+V,EAAK,IAELD,EAAK,EACLC,GAAMrW,EAAE,GAAKM,GAEdG,EAAK2V,EAAK9V,EAELH,EAAU,EAAI,CAOlB,IAJAgW,EAAK,EACL3V,GAFA0V,GAAM,EAAElW,GAAKG,GAEHA,EAGJO,EAAI,EAAGA,EAAIV,EAAGU,IAKnB,GAJA8O,EAAKhO,EAAGhB,GACRiP,EAAKhO,EAAGhB,GAGHuT,GAAOxE,GAAO,CAKlB,IAJAxI,EAAKxG,EACLyG,EAAKxG,EAGGuG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG7G,GAChBsB,EAAGwF,GAAOxF,EAAGwF,EAAG3G,GAChB0G,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAG2U,GAAO3G,EACV/N,EAAG4U,GAAO5G,CACd,KAAU,CAMN,IALAwG,EAAMM,GAAgB/G,GACtBxI,EAAKxG,EAAKL,EACV8G,EAAKxG,EAAKH,EAGF0G,GAAMkP,OACbI,EAAK9U,EAAGwF,KACGwI,IAAQyG,GAAOK,IAAO9G,IAA+B,IAAzB+G,GAAgBD,KAIvD9U,EAAGwF,EAAG7G,GAAYmW,EAClB7U,EAAGwF,EAAG3G,GAAYmB,EAAGwF,GACrBD,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAGwF,EAAG7G,GAAYqP,EAClB/N,EAAGwF,EAAG3G,GAAYmP,EAClBjP,GAAML,EACNM,GAAMH,CACN,CAEF,OAAOkB,CACP,CAOD,IAJA2U,GAAMnW,EAAE,GAAKG,EACbK,GAFA0V,EAAK,GAEK/V,EAGJO,EAAI,EAAGA,EAAIV,EAAGU,IAKnB,GAJA8O,EAAKhO,EAAGhB,GACRiP,EAAKhO,EAAGhB,GAGHuT,GAAOxE,GAAO,CAKlB,IAJAxI,EAAKxG,EACLyG,EAAKxG,EAGGuG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG7G,GAChBsB,EAAGwF,GAAOxF,EAAGwF,EAAG3G,GAChB0G,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAG2U,GAAO3G,EACV/N,EAAG4U,GAAO5G,CACb,KAAS,CAMN,IALAwG,EAAMM,GAAgB/G,GACtBxI,EAAKxG,EAAKL,EACV8G,EAAKxG,EAAKH,EAGF0G,GAAMkP,OACbI,EAAK9U,EAAGwF,KACGwI,IAAQyG,GAAOK,IAAO9G,IAA+B,IAAzB+G,GAAgBD,KAIvD9U,EAAGwF,EAAG7G,GAAYmW,EAClB7U,EAAGwF,EAAG3G,GAAYmB,EAAGwF,GACrBD,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAGwF,EAAG7G,GAAYqP,EAClB/N,EAAGwF,EAAG3G,GAAYmP,EAClBjP,GAAML,EACNM,GAAMH,CACN,CAEF,OAAOkB,CACR,CClIAjD,EAAAC,GAAA,WCFA,SAAewB,EAAGwB,EAAGc,EAAQC,GAC5B,IAAItB,EACAT,EACAC,EACA4X,EACAxV,EACAyQ,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAOwB,EAGR,IADA6W,EAAI3N,EAAkBlJ,IACfmJ,iBAEN,OADAF,GAAWzK,EAAGqY,EAAG/V,EAAQC,GAClB8V,EAAE7N,KAMV,GAJA8I,EAAIC,GAAOvT,EAAE,GACbQ,EAAK+B,EAGW,IAAXD,EAAe,CAKnB,GAHA7B,EAAKD,EAAKR,EAAI,GADd6C,EAAIyQ,EA1CE,GA8CG,EACR,IAAM5S,EAAI,EAAGA,EAAImC,EAAGnC,IACnBO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EACVT,GAAM8B,EACN7B,GAAM6B,EAGR,GAAKgR,EAvDC,EAwDL,OAAO9R,EAER,IAAMd,EAAImC,EAAGnC,EAAI4S,EAAG5S,GA1Dd,EA2DLO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EAEVA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMgB,EAAGf,EAAG,GAClBe,EAAGf,EAAG,GAAMQ,EAEZA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMgB,EAAGf,EAAG,GAClBe,EAAGf,EAAG,GAAMQ,EAEZT,GAvEK,EAwELC,GAxEK,EA0EN,OAAOe,CACP,CAED,IADAf,EAAKD,GAAOR,EAAE,GAAGsC,EACX5B,EAAI,EAAGA,EAAI4S,EAAG5S,IACnBO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EACVT,GAAM8B,EACN7B,GAAM6B,EAEP,OAAOd,CACR,ICnDAjD,EAAAC,GAAA,WCAA,SAAmBwB,EAAGyG,EAAOjF,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC7D,IAAIkV,EACAC,EACAC,EACAC,EACAC,EACAC,EACAtV,EACAC,EACA6S,EACAlR,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAgBR,IAbKiF,EAAQ,IAGZrG,IAAYJ,EAAE,IAFdG,IAAY,GAGZI,IAAYP,EAAE,IAFdM,IAAY,IAKbgT,EAAItT,EAGJyV,EAASlC,GAAOvT,EAAI,KAGL,CACd,GAAKyV,EAAS,EAGbI,EAAKrU,EAAGpB,GADRqV,GAAU,GACctV,GACxB2V,EAAKrU,EAAGlB,EAASkV,EAAOnV,OAClB,CAKN,GAAW,KAHXgT,GAAK,GAIJ,OAAO9R,EAIRqU,EAAKrU,EADLhB,EAAKJ,EAAWkT,EAAEnT,GAGlB2V,EAAKrU,EADLhB,EAAKF,EAAW+S,EAAEhT,GAIlBkB,EAAGhB,GAAOgB,EAAGpB,GACbqB,EAAGhB,GAAOgB,EAAGlB,EACb,CASD,IAFAmV,EAAW,GAHXtT,EAAIqT,GAGY,EAERC,EAAQpC,KAEfjM,EAAIqO,EAAQ,GACHpC,KACRqC,EAAKnU,EAAGpB,EAASiH,EAAElH,KACnByV,EAAKpU,EAAGpB,EAASsV,EAAMvV,KAGP6T,GAAO2B,IAASA,IAAOC,GAAMG,GAAgBJ,MAC5DD,GAAS,IAIXC,EAAKnU,EAAGpB,EAASsV,EAAMvV,IACb0V,GAAM7B,GAAO2B,IAAUA,IAAOE,GAAME,GAAgBJ,KAE7DnU,EAAGpB,EAASgC,EAAEjC,GAAawV,EAC3BlU,EAAGlB,EAAS6B,EAAE9B,GAAamB,EAAGlB,EAASmV,EAAMpV,GAM7CoV,EAAW,GAHXtT,EAAIsT,GAGY,EAOlBlU,EAAGpB,EAASgC,EAAEjC,GAAa0V,EAC3BpU,EAAGlB,EAAS6B,EAAE9B,GAAawV,CAC3B,CACF,IC/FAvX,EAAAC,GAAA,WCVA,SAAoBwB,EAAGyG,EAAOjF,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC9D,IAAI0V,EACAzV,EACAwG,EACAkP,EACAC,EACA1V,EACAwG,EACAmP,EACAC,EACA7G,EACAC,EACA6G,EACA5V,EAEJ,GAAKV,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAiBR,GAdKiF,EAAQ,IAGZrG,IAAYJ,EAAE,IAFdG,IAAY,GAGZI,IAAYP,EAAE,IAFdM,IAAY,IAKb6V,GADAD,EAAK9V,IACOJ,EAAE,GAAGG,EACjBK,EAAK0V,EAAK/V,EAGVkW,GADAD,EAAK7V,IACOP,EAAE,GAAGM,EACjBG,EAAK2V,EAAK9V,EAELH,EAAU,EAAI,CAIlB,IAAMO,EAAI,EAAGA,EAAIV,EAAGU,IAKnB,GAJA8O,EAAKhO,EAAGhB,GACRiP,EAAKhO,EAAGhB,GAGHuT,GAAOxE,GAAO,CAKlB,IAJAxI,EAAKxG,EACLyG,EAAKxG,EAGGuG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG7G,GAChBsB,EAAGwF,GAAOxF,EAAGwF,EAAG3G,GAChB0G,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAG2U,GAAO3G,EACV/N,EAAG4U,GAAO5G,CACd,KAAU,CAMN,IALAwG,EAAMM,GAAgB/G,GACtBxI,EAAKxG,EAAKL,EACV8G,EAAKxG,EAAKH,EAGF0G,GAAMkP,OACbI,EAAK9U,EAAGwF,KACGwI,IAAQyG,GAAOK,IAAO9G,IAA+B,IAAzB+G,GAAgBD,KAIvD9U,EAAGwF,EAAG7G,GAAYmW,EAClB7U,EAAGwF,EAAG3G,GAAYmB,EAAGwF,GACrBD,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAGwF,EAAG7G,GAAYqP,EAClB/N,EAAGwF,EAAG3G,GAAYmP,EAClBjP,GAAML,EACNM,GAAMH,CACN,CAEF,OAAOkB,CACP,CAID,IAAMd,EAAI,EAAGA,EAAIV,EAAGU,IAKnB,GAJA8O,EAAKhO,EAAGhB,GACRiP,EAAKhO,EAAGhB,GAGHuT,GAAOxE,GAAO,CAKlB,IAJAxI,EAAKxG,EACLyG,EAAKxG,EAGGuG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG7G,GAChBsB,EAAGwF,GAAOxF,EAAGwF,EAAG3G,GAChB0G,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAG2U,GAAO3G,EACV/N,EAAG4U,GAAO5G,CACb,KAAS,CAMN,IALAwG,EAAMM,GAAgB/G,GACtBxI,EAAKxG,EAAKL,EACV8G,EAAKxG,EAAKH,EAGF0G,GAAMkP,OACbI,EAAK9U,EAAGwF,KACGwI,IAAQyG,GAAOK,IAAO9G,IAA+B,IAAzB+G,GAAgBD,KAIvD9U,EAAGwF,EAAG7G,GAAYmW,EAClB7U,EAAGwF,EAAG3G,GAAYmB,EAAGwF,GACrBD,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAGwF,EAAG7G,GAAYqP,EAClB/N,EAAGwF,EAAG3G,GAAYmP,EAClBjP,GAAML,EACNM,GAAMH,CACN,CAEF,OAAOkB,CACR,sCCrJIgV,GAAQC,GAAK1G,OAqCjB,SAASmJ,GAAUlZ,EAAGyG,EAAOjF,EAAGrB,EAASsB,EAAGnB,GAC3C,IAAIF,EACAG,EACA0V,EACAU,EACAnH,EACAC,EACA6G,EACA5V,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAiBR,IAdKiF,EAAQ,IACZtG,IAAY,EACZG,IAAY,GAGZF,EADID,EAAU,GACH,EAAEH,GAAKG,EAER,EAGVI,EADID,EAAU,GACH,EAAEN,GAAKM,EAER,EAELI,EAAI,EAAGA,EAAI8V,GAAO9V,IAEvB,IAAM0B,EADNuU,EAAMF,GAAM/V,GACG0B,EAAIpC,EAAGoC,IAIrB,GAHAoN,EAAKhO,EAAGpB,EAASgC,EAAEjC,IAGd6T,GAAOxE,GAAZ,CAOA,IAJAC,EAAKhO,EAAGlB,EAAS6B,EAAE9B,GAGnB2V,EAAMM,GAAgB/G,GAChBnI,EAAIjF,EAAGiF,GAAKsP,OACjBL,EAAK9U,EAAGpB,GAAUiH,EAAEsP,GAAKxW,KACdqP,IAAQyG,GAAOK,IAAO9G,GAFXnI,GAAKsP,EAK3BnV,EAAGpB,EAASiH,EAAElH,GAAamW,EAC3B7U,EAAGlB,EAAS8G,EAAE/G,GAAamB,EAAGlB,GAAU8G,EAAEsP,GAAKrW,GAEhDkB,EAAGpB,EAASiH,EAAElH,GAAaqP,EAC3B/N,EAAGlB,EAAS8G,EAAE/G,GAAamP,CAd1B,CAiBH,OAAOjO,CACR,CC7FA,IAAIgV,GAAQC,GAAK1G,OCwBjB,SAASoJ,GAASnZ,EAAGyG,EAAOjF,EAAGc,GAC9B,IAAIC,EACAkT,EACAC,EACAC,EACAC,EACAtC,EACA7B,EACA/Q,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAkBR,IAfKiF,EAAQ,IACZnE,IAAW,GAGXC,EADID,EAAS,GACH,EAAEtC,GAAKsC,EAER,EAGVgR,EAAItT,EAGJyV,EAASlC,GAAOvT,EAAI,KAGL,CACd,GAAKyV,EAAS,EAGbhE,EAAIjQ,EAAGe,GADPkT,GAAU,GACYnT,OAChB,CAKN,GAAW,KAHXgR,GAAK,GAIJ,OAAO9R,EAIRiQ,EAAIjQ,EADJd,EAAI6B,EAAU+Q,EAAEhR,GAIhBd,EAAGd,GAAMc,EAAGe,EACZ,CASD,IAFAmT,EAAW,GAHXtT,EAAIqT,GAGY,EAERC,EAAQpC,KAEfjM,EAAIqO,EAAQ,GACHpC,KACRqC,EAAKnU,EAAGe,EAAQ8E,EAAE/E,KAClBsT,EAAKpU,EAAGe,EAAQmT,EAAMpT,KAGN0R,GAAO2B,IAASA,IAAOC,GAAMG,GAAgBJ,MAC5DD,GAAS,IAIXC,EAAKnU,EAAGe,EAAQmT,EAAMpT,IACZmP,GAAKuC,GAAO2B,IAAUA,IAAOlE,GAAKsE,GAAgBJ,KAE3DnU,EAAGe,EAAQH,EAAEE,GAAYqT,EAMzBD,EAAW,GAHXtT,EAAIsT,GAGY,EAOlBlU,EAAGe,EAAQH,EAAEE,GAAYmP,CACzB,CACF,CCpGA,SAAS2H,GAAUpZ,EAAGyG,EAAOjF,EAAGc,GAC/B,IAAI2T,EACAzV,EACAwG,EACAkP,EACAC,EACAzS,EACAoT,EACApW,EAEJ,GAAKV,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAMR,GAHKiF,EAAQ,IACZnE,IAAW,GAEPA,EAAS,EAAI,CAOjB,IAJA6T,EAAK,EACL3V,GAFA0V,GAAM,EAAElW,GAAKsC,GAEHA,EAGJ5B,EAAI,EAAGA,EAAIV,EAAGU,IAInB,GAHAgD,EAAIlC,EAAGhB,GAGFwT,GAAOtQ,GAAM,CAIjB,IAHAsD,EAAKxG,EAGGwG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG1E,GAChB0E,GAAM1E,EAEPd,EAAG2U,GAAOzS,CACd,KAAU,CAKN,IAJAuS,EAAMM,GAAgB7S,GACtBsD,EAAKxG,EAAK8B,EAGF0E,GAAMkP,OACbY,EAAItV,EAAGwF,KACGtD,IAAOuS,GAAOa,IAAMpT,IAA6B,IAAxB6S,GAAgBO,KAInDtV,EAAGwF,EAAG1E,GAAWwU,EACjB9P,GAAM1E,EAEPd,EAAGwF,EAAG1E,GAAWoB,EACjBlD,GAAM8B,CACN,CAEF,OAAOd,CACP,CAOD,IAJA2U,GAAMnW,EAAE,GAAKsC,EACb9B,GAFA0V,EAAK,GAEK5T,EAGJ5B,EAAI,EAAGA,EAAIV,EAAGU,IAInB,GAHAgD,EAAIlC,EAAGhB,GAGFwT,GAAOtQ,GAAM,CAIjB,IAHAsD,EAAKxG,EAGGwG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG1E,GAChB0E,GAAM1E,EAEPd,EAAG2U,GAAOzS,CACb,KAAS,CAKN,IAJAuS,EAAMM,GAAgB7S,GACtBsD,EAAKxG,EAAK8B,EAGF0E,GAAMkP,OACbY,EAAItV,EAAGwF,KACGtD,IAAOuS,GAAOa,IAAMpT,IAA6B,IAAxB6S,GAAgBO,KAInDtV,EAAGwF,EAAG1E,GAAWwU,EACjB9P,GAAM1E,EAEPd,EAAGwF,EAAG1E,GAAWoB,EACjBlD,GAAM8B,CACN,CAEF,OAAOd,CACR,CC3EAjD,EAAAC,GAAA,WHKA,SAAmBwB,EAAGyG,EAAOjF,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC7D,IAAI0V,EACAU,EACAnH,EACAC,EACA6G,EACA5V,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EASR,IANKiF,EAAQ,IAGZrG,IAAYJ,EAAE,IAFdG,IAAY,GAGZI,IAAYP,EAAE,IAFdM,IAAY,IAIPI,EAAI,EAAGA,EAAI8V,GAAO9V,IAEvB,IAAM0B,EADNuU,EAAMF,GAAM/V,GACG0B,EAAIpC,EAAGoC,IAIrB,GAHAoN,EAAKhO,EAAGpB,EAASgC,EAAEjC,IAGd6T,GAAOxE,GAAZ,CAOA,IAJAC,EAAKhO,EAAGlB,EAAS6B,EAAE9B,GAGnB2V,EAAMM,GAAgB/G,GAChBnI,EAAIjF,EAAGiF,GAAKsP,OACjBL,EAAK9U,EAAGpB,GAAUiH,EAAEsP,GAAKxW,KACdqP,IAAQyG,GAAOK,IAAO9G,GAFXnI,GAAKsP,EAK3BnV,EAAGpB,EAASiH,EAAElH,GAAamW,EAC3B7U,EAAGlB,EAAS8G,EAAE/G,GAAamB,EAAGlB,GAAU8G,EAAEsP,GAAKrW,GAEhDkB,EAAGpB,EAASiH,EAAElH,GAAaqP,EAC3B/N,EAAGlB,EAAS8G,EAAE/G,GAAamP,CAd1B,CAiBH,OAAOjO,CACR,II/DAjD,EAAAC,GAAA,WCGA,SAAkBwB,EAAGyG,EAAOjF,EAAGc,EAAQC,GACtC,IAAIkT,EACAC,EACAC,EACAC,EACAtC,EACA7B,EACA/Q,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAcR,IAXKiF,EAAQ,IAEZlE,IAAWvC,EAAE,IADbsC,IAAW,IAIZgR,EAAItT,EAGJyV,EAASlC,GAAOvT,EAAI,KAGL,CACd,GAAKyV,EAAS,EAGbhE,EAAIjQ,EAAGe,GADPkT,GAAU,GACYnT,OAChB,CAKN,GAAW,KAHXgR,GAAK,GAIJ,OAAO9R,EAIRiQ,EAAIjQ,EADJd,EAAI6B,EAAU+Q,EAAEhR,GAIhBd,EAAGd,GAAMc,EAAGe,EACZ,CASD,IAFAmT,EAAW,GAHXtT,EAAIqT,GAGY,EAERC,EAAQpC,KAEfjM,EAAIqO,EAAQ,GACHpC,KACRqC,EAAKnU,EAAGe,EAAQ8E,EAAE/E,KAClBsT,EAAKpU,EAAGe,EAAQmT,EAAMpT,KAGN0R,GAAO2B,IAASA,IAAOC,GAAMG,GAAgBJ,MAC5DD,GAAS,IAIXC,EAAKnU,EAAGe,EAAQmT,EAAMpT,IACZmP,GAAKuC,GAAO2B,IAAUA,IAAOlE,GAAKsE,GAAgBJ,KAE3DnU,EAAGe,EAAQH,EAAEE,GAAYqT,EAMzBD,EAAW,GAHXtT,EAAIsT,GAGY,EAOlBlU,EAAGe,EAAQH,EAAEE,GAAYmP,CACzB,CACF,ICxFAlT,EAAAC,GAAA,WCPA,SAAmBwB,EAAGyG,EAAOjF,EAAGc,EAAQC,GACvC,IAAI0T,EACAzV,EACAwG,EACAkP,EACAC,EACAzS,EACAoT,EACApW,EAEJ,GAAKV,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAWR,GARKiF,EAAQ,IAEZlE,IAAWvC,EAAE,IADbsC,IAAW,IAIZ6T,GADAD,EAAK3T,IACOvC,EAAE,GAAGsC,EACjB9B,EAAK0V,EAAK5T,EAELA,EAAS,EAAI,CAIjB,IAAM5B,EAAI,EAAGA,EAAIV,EAAGU,IAInB,GAHAgD,EAAIlC,EAAGhB,GAGFwT,GAAOtQ,GAAM,CAIjB,IAHAsD,EAAKxG,EAGGwG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG1E,GAChB0E,GAAM1E,EAEPd,EAAG2U,GAAOzS,CACd,KAAU,CAKN,IAJAuS,EAAMM,GAAgB7S,GACtBsD,EAAKxG,EAAK8B,EAGF0E,GAAMkP,OACbY,EAAItV,EAAGwF,KACGtD,IAAOuS,GAAOa,IAAMpT,IAA6B,IAAxB6S,GAAgBO,KAInDtV,EAAGwF,EAAG1E,GAAWwU,EACjB9P,GAAM1E,EAEPd,EAAGwF,EAAG1E,GAAWoB,EACjBlD,GAAM8B,CACN,CAEF,OAAOd,CACP,CAID,IAAMd,EAAI,EAAGA,EAAIV,EAAGU,IAInB,GAHAgD,EAAIlC,EAAGhB,GAGFwT,GAAOtQ,GAAM,CAIjB,IAHAsD,EAAKxG,EAGGwG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG1E,GAChB0E,GAAM1E,EAEPd,EAAG2U,GAAOzS,CACb,KAAS,CAKN,IAJAuS,EAAMM,GAAgB7S,GACtBsD,EAAKxG,EAAK8B,EAGF0E,GAAMkP,OACbY,EAAItV,EAAGwF,KACGtD,IAAOuS,GAAOa,IAAMpT,IAA6B,IAAxB6S,GAAgBO,KAInDtV,EAAGwF,EAAG1E,GAAWwU,EACjB9P,GAAM1E,EAEPd,EAAGwF,EAAG1E,GAAWoB,EACjBlD,GAAM8B,CACN,CAEF,OAAOd,CACR,sCC7GIgV,GAAQC,GAAK1G,OA6BjB,SAASsJ,GAASrZ,EAAGyG,EAAOjF,EAAGc,GAC9B,IAAIC,EACA0T,EACAU,EACAjT,EACAoT,EACApW,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAWR,IARKiF,EAAQ,IACZnE,IAAW,GAGXC,EADID,EAAS,GACH,EAAEtC,GAAKsC,EAER,EAEJ5B,EAAI,EAAGA,EAAI8V,GAAO9V,IAEvB,IAAM0B,EADNuU,EAAMF,GAAM/V,GACG0B,EAAIpC,EAAGoC,IAIrB,GAHAsB,EAAIlC,EAAGe,EAAQH,EAAEE,IAGZ0R,GAAOtQ,GAAZ,CAKA,IADAuS,EAAMM,GAAgB7S,GAChB2D,EAAIjF,EAAGiF,GAAKsP,OACjBG,EAAItV,EAAGe,GAAS8E,EAAEsP,GAAKrU,KACboB,IAAOuS,GAAOa,IAAMpT,GAFR2D,GAAKsP,EAK3BnV,EAAGe,EAAQ8E,EAAE/E,GAAYwU,EAE1BtV,EAAGe,EAAQ8E,EAAE/E,GAAYoB,CAVxB,CAaH,OAAOlC,CACR,CCzEA,IAAIgV,GAAQC,GAAK1G,OCqBjB,SAASuJ,GAAStZ,EAAGwB,EAAGc,GACvB,IAAIE,EACAhC,EACAkD,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAG,GASX,IANChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACN7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIjP,GADJkB,EAAIlC,EAAGhB,IAEFiC,EAAKD,IAASC,EAAKiB,GACvB/D,GAAM6C,EAAIiP,EAAK/N,EAEf/D,GAAM+D,EAAE+N,EAAKjP,EAEdA,EAAMiP,EACNjR,GAAM8B,EAEP,OAAOE,EAAM7C,CACd,CC9BA,SAAS2Z,GAAStZ,EAAGwB,EAAGc,EAAQC,GAC/B,IAAIC,EACAhC,EACAkD,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAGe,GAKX,IAHA/B,EAAK+B,EACLC,EAAM,EACN7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIjP,GADJkB,EAAIlC,EAAGhB,IAEFiC,EAAKD,IAASC,EAAKiB,GACvB/D,GAAM6C,EAAIiP,EAAK/N,EAEf/D,GAAM+D,EAAE+N,EAAKjP,EAEdA,EAAMiP,EACNjR,GAAM8B,EAEP,OAAOE,EAAM7C,CACd,CCxCA,SAAS4Z,GAAMvZ,EAAGwB,EAAGc,GACpB,OAAOgX,GAAStZ,EAAGwB,EAAGc,EACvB,CCMA,SAASkX,GAAUxZ,EAAGwB,EAAGc,GACxB,IAAIE,EACAgQ,EACAhS,EACAiS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAG,GAUX,IAPChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACNgQ,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIjP,GADJkB,EAAIlC,EAAGhB,IAGNb,EADI8C,EAAKD,IAASC,EAAKiB,GAClBlB,EAAIiP,EAAK/N,EAETA,EAAE+N,EAAKjP,EAEbA,EAAMiP,EACNA,EAAIgB,EAAK9S,EAER+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GAChB8S,EAAGhB,EAAK9R,EAERA,EAAE8R,EAAKgB,EAEdA,EAAKhB,EACLe,GAAOE,EACPlS,GAAM8B,EAEP,OAAOE,EAAMiQ,EAAKD,CACnB,CC5CAjU,EAAAC,GAAA,WLQA,SAAkBwB,EAAGyG,EAAOjF,EAAGc,EAAQC,GACtC,IAAI0T,EACAU,EACAjT,EACAoT,EACApW,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAOR,IAJKiF,EAAQ,IAEZlE,IAAWvC,EAAE,IADbsC,IAAW,IAGN5B,EAAI,EAAGA,EAAI8V,GAAO9V,IAEvB,IAAM0B,EADNuU,EAAMF,GAAM/V,GACG0B,EAAIpC,EAAGoC,IAIrB,GAHAsB,EAAIlC,EAAGe,EAAQH,EAAEE,IAGZ0R,GAAOtQ,GAAZ,CAKA,IADAuS,EAAMM,GAAgB7S,GAChB2D,EAAIjF,EAAGiF,GAAKsP,OACjBG,EAAItV,EAAGe,GAAS8E,EAAEsP,GAAKrU,KACboB,IAAOuS,GAAOa,IAAMpT,GAFR2D,GAAKsP,EAK3BnV,EAAGe,EAAQ8E,EAAE/E,GAAYwU,EAE1BtV,EAAGe,EAAQ8E,EAAE/E,GAAYoB,CAVxB,CAaH,OAAOlC,CACR,IM5CAjD,EAAAC,GAAA,UAAAuC,ICAAxC,EAAAC,GAAA,WCTA,SAAewB,EAAGwB,EAAGc,EAAQC,GAC5B,OAAO+W,GAAStZ,EAAGwB,EAAGc,EAAQC,EAC/B,ICOAhE,EAAAC,GAAA,WCDA,SAAmBwB,EAAGwB,EAAGc,EAAQC,GAChC,IAAIC,EACAgQ,EACAhS,EACAiS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAGe,GAMX,IAJA/B,EAAK+B,EACLC,EAAM,EACNgQ,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IAEnB+Q,EAAIjP,GADJkB,EAAIlC,EAAGhB,IAGNb,EADI8C,EAAKD,IAASC,EAAKiB,GAClBlB,EAAIiP,EAAK/N,EAETA,EAAE+N,EAAKjP,EAEbA,EAAMiP,EACNA,EAAIgB,EAAK9S,EAER+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GAChB8S,EAAGhB,EAAK9R,EAERA,EAAE8R,EAAKgB,EAEdA,EAAKhB,EACLe,GAAOE,EACPlS,GAAM8B,EAEP,OAAOE,EAAMiQ,EAAKD,CACnB,ICpDA,SAASiH,GAASzZ,EAAGwB,EAAGc,GACvB,IAAI9B,EACAqC,EACAZ,EACAvB,EAGJ,GADAuB,EAAI,EACCjC,GAAK,EACT,OAAOiC,EAER,GAAW,IAANjC,GAAsB,IAAXsC,EACf,OAAOd,EAAG,GAGX,GAAgB,IAAXc,EAAe,CAInB,IAHAO,EAAI7C,EAnCE,GAsCG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnBuB,GAAKT,EAAGd,GAGV,GAAKV,EA3CC,EA4CL,OAAOiC,EAER,IAAMvB,EAAImC,EAAGnC,EAAIV,EAAGU,GA9Cd,EA+CLuB,GAAKT,EAAEd,GAAKc,EAAEd,EAAE,GAAKc,EAAEd,EAAE,GAAKc,EAAEd,EAAE,GAAKc,EAAEd,EAAE,GAAKc,EAAEd,EAAE,GAErD,OAAOuB,CACP,CAMD,IAJCzB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEA5B,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKT,EAAGhB,GACRA,GAAM8B,EAEP,OAAOL,CACR,CC7BA1D,EAAAC,GAAA,WCTA,SAAkBwB,EAAGwB,EAAGc,EAAQC,GAC/B,IAAI/B,EACAqC,EACAZ,EACAvB,EAGJ,GADAuB,EAAI,EACCjC,GAAK,EACT,OAAOiC,EAER,GAAW,IAANjC,GAAsB,IAAXsC,EACf,OAAOd,EAAGe,GAKX,GAHA/B,EAAK+B,EAGW,IAAXD,EAAe,CAInB,IAHAO,EAAI7C,EAxCE,GA2CG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnBuB,GAAKT,EAAGhB,GACRA,GAAM8B,EAGR,GAAKtC,EAjDC,EAkDL,OAAOiC,EAER,IAAMvB,EAAImC,EAAGnC,EAAIV,EAAGU,GApDd,EAqDLuB,GAAKT,EAAEhB,GAAMgB,EAAEhB,EAAG,GAAKgB,EAAEhB,EAAG,GAAKgB,EAAEhB,EAAG,GAAKgB,EAAEhB,EAAG,GAAKgB,EAAEhB,EAAG,GAC1DA,GAtDK,EAwDN,OAAOyB,CACP,CACD,IAAMvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKT,EAAGhB,GACRA,GAAM8B,EAEP,OAAOL,CACR,ICzDA,IAAI2Q,GAAY,IA+BhB,SAAS8G,GAAQ1Z,EAAGwB,EAAGc,EAAQC,GAC9B,IAAI/B,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAGe,GAGX,GADA/B,EAAK+B,EACAvC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKT,EAAGhB,GACRA,GAAM8B,EAEP,OAAOL,CACP,CACD,GAAKjC,GAAK4S,GAAY,CAarB,IAXAE,EAAKtR,EAAGhB,GACRuS,EAAKvR,EAAGhB,EAAG8B,GACX0Q,EAAKxR,EAAGhB,EAAI,EAAE8B,GACd2Q,EAAKzR,EAAGhB,EAAI,EAAE8B,GACd4Q,EAAK1R,EAAGhB,EAAI,EAAE8B,GACd6Q,EAAK3R,EAAGhB,EAAI,EAAE8B,GACd8Q,EAAK5R,EAAGhB,EAAI,EAAE8B,GACd+Q,EAAK7R,EAAGhB,EAAI,EAAE8B,GACd9B,GAAM,EAAI8B,EAEVI,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,GAAMtR,EAAGhB,GACTuS,GAAMvR,EAAGhB,EAAG8B,GACZ0Q,GAAMxR,EAAGhB,EAAI,EAAE8B,GACf2Q,GAAMzR,EAAGhB,EAAI,EAAE8B,GACf4Q,GAAM1R,EAAGhB,EAAI,EAAE8B,GACf6Q,GAAM3R,EAAGhB,EAAI,EAAE8B,GACf8Q,GAAM5R,EAAGhB,EAAI,EAAE8B,GACf+Q,GAAM7R,EAAGhB,EAAI,EAAE8B,GACf9B,GAAM,EAAI8B,EAMX,IAHAL,EAAM6Q,EAAGC,GAAOC,EAAGC,IAASC,EAAGC,GAAOC,EAAGC,IAGhC3S,EAAIV,EAAGU,IACfuB,GAAKT,EAAGhB,GACRA,GAAM8B,EAEP,OAAOL,CACP,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAEN0Z,GADPpG,GAAKA,EAAI,EACS9R,EAAGc,EAAQ9B,GAAOkZ,GAAQ1Z,EAAEsT,EAAG9R,EAAGc,EAAQ9B,EAAI8S,EAAEhR,EACnE,CC9EA,SAASoX,GAAQ1Z,EAAGwB,EAAGc,GACtB,IAAI9B,EACAyB,EACAvB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAG,GAOX,GAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEDtC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKT,EAAGhB,GACRA,GAAM8B,EAEP,OAAOL,CACP,CACD,OAAOO,GAAKxC,EAAGwB,EAAGc,EAAQ9B,EAC3B,CCtBAjC,EAAAC,GAAA,UAAAuC,ICVA,SAAS4Y,GAAM3Z,EAAG4C,EAAOpB,EAAGc,GAC3B,IAAI9B,EACAE,EACAmC,EAEJ,GAAK7C,GAAK,GAAe,IAAV4C,EACd,OAAOpB,EAGR,GAAgB,IAAXc,EAAe,CAInB,IAHAO,EAAI7C,EAhCE,GAmCG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnBc,EAAGd,IAAOkC,EAGZ,GAAK5C,EAxCC,EAyCL,OAAOwB,EAER,IAAMd,EAAImC,EAAGnC,EAAIV,EAAGU,GA3Cd,EA4CLc,EAAGd,IAAOkC,EACVpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EACZpB,EAAGd,EAAE,IAAOkC,EAEb,OAAOpB,CACP,CAMD,IAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEA5B,EAAI,EAAGA,EAAIV,EAAGU,IACnBc,EAAGhB,IAAQoC,EACXpC,GAAM8B,EAEP,OAAOd,CACR,CC/BA,SAASoY,GAAY5Z,EAAG4C,EAAOpB,EAAGc,GACjC,IAAIE,EACAhC,EACAkD,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOqJ,EAAkB/I,EAAQpB,EAAG,IASrC,IANChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACN7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIiI,EAAkB/I,EAAQpB,EAAGhB,IACjCiR,EAAI9F,EAAkBnJ,EAAMkB,GAE3B/D,EADI8C,EAAKD,IAASC,EAAKiB,GACnBiI,EAAkBhM,EAAIgM,EAAkBA,EAAkBnJ,EAAIiP,GAAM/N,IAEpEiI,EAAkBhM,EAAIgM,EAAkBA,EAAkBjI,EAAE+N,GAAMjP,IAEvEA,EAAMiP,EACNjR,GAAM8B,EAEP,OAAOqJ,EAAkBnJ,EAAM7C,EAChC,CChCA,SAASia,GAAY5Z,EAAG4C,EAAOpB,EAAGc,EAAQC,GACzC,IAAIC,EACAhC,EACAkD,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOqJ,EAAkB/I,EAAQpB,EAAGe,IAKrC,IAHA/B,EAAK+B,EACLC,EAAM,EACN7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIiI,EAAkB/I,EAAQpB,EAAGhB,IACjCiR,EAAI9F,EAAkBnJ,EAAMkB,GAE3B/D,EADI8C,EAAKD,IAASC,EAAKiB,GACnBiI,EAAkBhM,EAAIgM,EAAkBA,EAAkBnJ,EAAIiP,GAAM/N,IAEpEiI,EAAkBhM,EAAIgM,EAAkBA,EAAkBjI,EAAE+N,GAAMjP,IAEvEA,EAAMiP,EACNjR,GAAM8B,EAEP,OAAOqJ,EAAkBnJ,EAAM7C,EAChC,CCtCA,SAASka,GAAS7Z,EAAG4C,EAAOpB,EAAGc,GAC9B,OAAOsX,GAAY5Z,EAAG4C,EAAOpB,EAAGc,EACjC,CCOA,SAASwX,GAAa9Z,EAAG4C,EAAOpB,EAAGc,GAClC,IAAIE,EACAgQ,EACAhS,EACAiS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOqJ,EAAkB/I,EAAQpB,EAAG,IAUrC,IAPChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACNgQ,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIiI,EAAkB/I,EAAQpB,EAAGhB,IACjCiR,EAAI9F,EAAkBnJ,EAAIkB,GAEzB/D,EADI8C,EAAKD,IAASC,EAAKiB,GACnBiI,EAAkBA,EAAkBnJ,EAAIiP,GAAM/N,GAE9CiI,EAAkBA,EAAkBjI,EAAE+N,GAAMjP,GAEjDA,EAAMiP,EACNA,EAAI9F,EAAkB8G,EAAG9S,GAExB+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GACjBgM,EAAkBA,EAAkB8G,EAAGhB,GAAM9R,GAE7CgM,EAAkBA,EAAkBhM,EAAE8R,GAAMgB,GAElDA,EAAKhB,EACLe,EAAM7G,EAAkB6G,EAAIE,GAC5BlS,GAAM8B,EAEP,OAAOqJ,EAAkBnJ,EAAMmJ,EAAkB8G,EAAGD,GACrD,CCvDA,SAASuH,GAAY/Z,EAAG4C,EAAOpB,EAAGc,GACjC,IAAIE,EACAhC,EACAE,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOqJ,EAAkB/I,EAAQpB,EAAG,IAQrC,IALChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACA9B,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,EAAMmJ,EAAkBnJ,EAAMmJ,EAAkB/I,EAAMpB,EAAGhB,KACzDA,GAAM8B,EAEP,OAAOE,CACR,CCrCAjE,EAAAob,GAAA,WCiBA,SAAe3Z,EAAG4C,EAAOpB,EAAGc,EAAQC,GACnC,IAAI/B,EACAqC,EACAnC,EAEJ,GAAKV,GAAK,GAAe,IAAV4C,EACd,OAAOpB,EAKR,GAHAhB,EAAK+B,EAGW,IAAXD,EAAe,CAInB,IAHAO,EAAI7C,EApCE,GAuCG,EACR,IAAMU,EAAI,EAAGA,EAAImC,EAAGnC,IACnBc,EAAGhB,IAAQoC,EACXpC,GAAM8B,EAGR,GAAKtC,EA7CC,EA8CL,OAAOwB,EAER,IAAMd,EAAImC,EAAGnC,EAAIV,EAAGU,GAhDd,EAiDLc,EAAGhB,IAAQoC,EACXpB,EAAGhB,EAAG,IAAOoC,EACbpB,EAAGhB,EAAG,IAAOoC,EACbpB,EAAGhB,EAAG,IAAOoC,EACbpB,EAAGhB,EAAG,IAAOoC,EACbpC,GAtDK,EAwDN,OAAOgB,CACP,CACD,IAAMd,EAAI,EAAGA,EAAIV,EAAGU,IACnBc,EAAGhB,IAAQoC,EACXpC,GAAM8B,EAEP,OAAOd,CACR,ICxDAjD,EAAAqb,GAAA,UAAA7Y,ICAAxC,EAAAsb,GAAA,WCgBA,SAAkB7Z,EAAG4C,EAAOpB,EAAGc,EAAQC,GACtC,OAAOqX,GAAY5Z,EAAG4C,EAAOpB,EAAGc,EAAQC,EACzC,IClBAhE,EAAAub,GAAA,WCyBA,SAAsB9Z,EAAG4C,EAAOpB,EAAGc,EAAQC,GAC1C,IAAIC,EACAgQ,EACAhS,EACAiS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOqJ,EAAkB/I,EAAQpB,EAAGe,IAMrC,IAJA/B,EAAK+B,EACLC,EAAM,EACNgQ,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIiI,EAAkB/I,EAAQpB,EAAGhB,IACjCiR,EAAI9F,EAAkBnJ,EAAIkB,GAEzB/D,EADI8C,EAAKD,IAASC,EAAKiB,GACnBiI,EAAkBA,EAAkBnJ,EAAIiP,GAAM/N,GAE9CiI,EAAkBA,EAAkBjI,EAAE+N,GAAMjP,GAEjDA,EAAMiP,EACNA,EAAI9F,EAAkB8G,EAAG9S,GAExB+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GACjBgM,EAAkBA,EAAkB8G,EAAGhB,GAAM9R,GAE7CgM,EAAkBA,EAAkBhM,EAAE8R,GAAMgB,GAElDA,EAAKhB,EACLe,EAAM7G,EAAkB6G,EAAIE,GAC5BlS,GAAM8B,EAEP,OAAOqJ,EAAkBnJ,EAAMmJ,EAAkB8G,EAAGD,GACrD,IClEAjU,EAAAwb,GAAA,WCiBA,SAAqB/Z,EAAG4C,EAAOpB,EAAGc,EAAQC,GACzC,IAAIC,EACAhC,EACAE,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOqJ,EAAkB/I,EAAQpB,EAAG,IAIrC,IAFAhB,EAAK+B,EACLC,EAAM,EACA9B,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,EAAMmJ,EAAkBnJ,EAAMmJ,EAAkB/I,EAAMpB,EAAGhB,KACzDA,GAAM8B,EAEP,OAAOE,CACR,ICjCA,IAAIoQ,GAAY,IA+BhB,SAASoH,GAAWha,EAAG4C,EAAOpB,EAAGc,EAAQC,GACxC,IAAI/B,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOqJ,EAAkB/I,EAAQpB,EAAGe,IAGrC,GADA/B,EAAK+B,EACAvC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,EAAI0J,EAAkB1J,EAAI0J,EAAkB/I,EAAQpB,EAAGhB,KACvDA,GAAM8B,EAEP,OAAOL,CACP,CACD,GAAKjC,GAAK4S,GAAY,CAarB,IAXAE,EAAKnH,EAAkB/I,EAAQpB,EAAGhB,IAClCuS,EAAKpH,EAAkB/I,EAAQpB,EAAGhB,EAAG8B,IACrC0Q,EAAKrH,EAAkB/I,EAAQpB,EAAGhB,EAAI,EAAE8B,IACxC2Q,EAAKtH,EAAkB/I,EAAQpB,EAAGhB,EAAI,EAAE8B,IACxC4Q,EAAKvH,EAAkB/I,EAAQpB,EAAGhB,EAAI,EAAE8B,IACxC6Q,EAAKxH,EAAkB/I,EAAQpB,EAAGhB,EAAI,EAAE8B,IACxC8Q,EAAKzH,EAAkB/I,EAAQpB,EAAGhB,EAAI,EAAE8B,IACxC+Q,EAAK1H,EAAkB/I,EAAQpB,EAAGhB,EAAI,EAAE8B,IACxC9B,GAAM,EAAI8B,EAEVI,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,EAAKnH,EAAkBmH,EAAKnH,EAAkB/I,EAAQpB,EAAGhB,KACzDuS,EAAKpH,EAAkBoH,EAAKpH,EAAkB/I,EAAQpB,EAAGhB,EAAG8B,KAC5D0Q,EAAKrH,EAAkBqH,EAAKrH,EAAkB/I,EAAQpB,EAAGhB,EAAI,EAAE8B,KAC/D2Q,EAAKtH,EAAkBsH,EAAKtH,EAAkB/I,EAAQpB,EAAGhB,EAAI,EAAE8B,KAC/D4Q,EAAKvH,EAAkBuH,EAAKvH,EAAkB/I,EAAQpB,EAAGhB,EAAI,EAAE8B,KAC/D6Q,EAAKxH,EAAkBwH,EAAKxH,EAAkB/I,EAAQpB,EAAGhB,EAAI,EAAE8B,KAC/D8Q,EAAKzH,EAAkByH,EAAKzH,EAAkB/I,EAAQpB,EAAGhB,EAAI,EAAE8B,KAC/D+Q,EAAK1H,EAAkB0H,EAAK1H,EAAkB/I,EAAQpB,EAAGhB,EAAI,EAAE8B,KAC/D9B,GAAM,EAAI8B,EAMX,IAHAL,EAAI0J,EAAkBA,EAAkBA,EAAiBmH,EAAGC,GAAMpH,EAAiBqH,EAAGC,IAAQtH,EAAkBA,EAAiBuH,EAAGC,GAAMxH,EAAiByH,EAAGC,KAGrJ3S,EAAIV,EAAGU,IACfuB,EAAI0J,EAAkB1J,EAAI0J,EAAkB/I,EAAQpB,EAAGhB,KACvDA,GAAM8B,EAEP,OAAOL,CACP,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAEN2L,EAAkBqO,GADzB1G,GAAKA,EAAI,EAC8B1Q,EAAOpB,EAAGc,EAAQ9B,GAAOwZ,GAAWha,EAAEsT,EAAG1Q,EAAOpB,EAAGc,EAAQ9B,EAAI8S,EAAEhR,GACzG,CC7EA,SAAS0X,GAAWha,EAAG4C,EAAOpB,EAAGc,GAChC,IAAI9B,EACAyB,EACAvB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOqJ,EAAkB/I,EAAQpB,EAAG,IAOrC,GAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEDtC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,EAAI0J,EAAkB1J,EAAI0J,EAAkB/I,EAAQpB,EAAGhB,KACvDA,GAAM8B,EAEP,OAAOL,CACP,CACD,OAAOO,GAAKxC,EAAG4C,EAAOpB,EAAGc,EAAQ9B,EAClC,CCnDAjC,EAAAyb,GAAA,UAAAjZ,ICCA,IAAI6R,GAAY,IA8BhB,SAASqH,GAASja,EAAGwB,EAAGc,EAAQC,GAC/B,IAAI/B,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOG,EAAKjB,EAAGe,IAGhB,GADA/B,EAAK+B,EACAvC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,EAAI0J,EAAkB1J,EAAIQ,EAAKjB,EAAGhB,KAClCA,GAAM8B,EAEP,OAAOL,CACP,CACD,GAAKjC,GAAK4S,GAAY,CAarB,IAXAE,EAAKrQ,EAAKjB,EAAGhB,IACbuS,EAAKtQ,EAAKjB,EAAGhB,EAAG8B,IAChB0Q,EAAKvQ,EAAKjB,EAAGhB,EAAI,EAAE8B,IACnB2Q,EAAKxQ,EAAKjB,EAAGhB,EAAI,EAAE8B,IACnB4Q,EAAKzQ,EAAKjB,EAAGhB,EAAI,EAAE8B,IACnB6Q,EAAK1Q,EAAKjB,EAAGhB,EAAI,EAAE8B,IACnB8Q,EAAK3Q,EAAKjB,EAAGhB,EAAI,EAAE8B,IACnB+Q,EAAK5Q,EAAKjB,EAAGhB,EAAI,EAAE8B,IACnB9B,GAAM,EAAI8B,EAEVI,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,EAAKnH,EAAkBmH,EAAKrQ,EAAKjB,EAAGhB,KACpCuS,EAAKpH,EAAkBoH,EAAKtQ,EAAKjB,EAAGhB,EAAG8B,KACvC0Q,EAAKrH,EAAkBqH,EAAKvQ,EAAKjB,EAAGhB,EAAI,EAAE8B,KAC1C2Q,EAAKtH,EAAkBsH,EAAKxQ,EAAKjB,EAAGhB,EAAI,EAAE8B,KAC1C4Q,EAAKvH,EAAkBuH,EAAKzQ,EAAKjB,EAAGhB,EAAI,EAAE8B,KAC1C6Q,EAAKxH,EAAkBwH,EAAK1Q,EAAKjB,EAAGhB,EAAI,EAAE8B,KAC1C8Q,EAAKzH,EAAkByH,EAAK3Q,EAAKjB,EAAGhB,EAAI,EAAE8B,KAC1C+Q,EAAK1H,EAAkB0H,EAAK5Q,EAAKjB,EAAGhB,EAAI,EAAE8B,KAC1C9B,GAAM,EAAI8B,EAMX,IAHAL,EAAI0J,EAAkBA,EAAkBA,EAAiBmH,EAAGC,GAAMpH,EAAiBqH,EAAGC,IAAQtH,EAAkBA,EAAiBuH,EAAGC,GAAMxH,EAAiByH,EAAGC,KAGrJ3S,EAAIV,EAAGU,IACfuB,EAAI0J,EAAkB1J,EAAIQ,EAAKjB,EAAGhB,KAClCA,GAAM8B,EAEP,OAAOL,CACP,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAEN2L,EAAkBsO,GADzB3G,GAAKA,EAAI,EAC4B9R,EAAGc,EAAQ9B,GAAOyZ,GAASja,EAAEsT,EAAG9R,EAAGc,EAAQ9B,EAAI8S,EAAEhR,GACvF,CC3EA,SAAS2X,GAASja,EAAGwB,EAAGc,GACvB,IAAI9B,EACAyB,EACAvB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOG,EAAKjB,EAAG,IAOhB,GAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEDtC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,EAAI0J,EAAkB1J,EAAIQ,EAAKjB,EAAGhB,KAClCA,GAAM8B,EAEP,OAAOL,CACP,CACD,OAAOO,GAAKxC,EAAGwB,EAAGc,EAAQ9B,EAC3B,CCvBA,SAAS0Z,GAAWla,EAAGwC,EAAKhB,EAAGrB,EAASsB,EAAGnB,GAC1C,IAAIE,EACAC,EACAwB,EACAyB,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAcR,IAXCjB,EADIL,EAAU,GACR,EAAEH,GAAKG,EAER,EAGLM,EADIH,EAAU,GACR,EAAEN,GAAKM,EAER,EAEN2B,EAAIO,EACJ7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,GACPiR,EAAI9F,EAAkB1J,EAAIyB,GAEzB/D,EADI8C,EAAKR,IAAOQ,EAAKiB,GACjBiI,EAAkBhM,EAAIgM,EAAkBA,EAAkB1J,EAAEwP,GAAM/N,IAElEiI,EAAkBhM,EAAIgM,EAAkBA,EAAkBjI,EAAE+N,GAAMxP,IAEvEA,EAAIwP,EACJhQ,EAAGhB,GAAOkL,EAAkB1J,EAAItC,GAChCa,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CCnCA,SAASyY,GAAWla,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC5D,IAAIC,EACAC,EACAwB,EACAyB,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAMR,IAJAjB,EAAKJ,EACLK,EAAKF,EACL0B,EAAIO,EACJ7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,GACPiR,EAAI9F,EAAkB1J,EAAIyB,GAEzB/D,EADI8C,EAAKR,IAAOQ,EAAKiB,GACjBiI,EAAkBhM,EAAIgM,EAAkBA,EAAkB1J,EAAEwP,GAAM/N,IAElEiI,EAAkBhM,EAAIgM,EAAkBA,EAAkBjI,EAAE+N,GAAMxP,IAEvEA,EAAIwP,EACJhQ,EAAGhB,GAAOkL,EAAkB1J,EAAItC,GAChCa,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CC3CA,SAAS0Y,GAAQna,EAAGwC,EAAKhB,EAAGrB,EAASsB,EAAGnB,GACvC,OAAO4Z,GAAWla,EAAGwC,EAAKhB,EAAGrB,EAASsB,EAAGnB,EAC1C,CCQA,SAAS8Z,GAAYpa,EAAGwC,EAAKhB,EAAGrB,EAASsB,EAAGnB,GAC3C,IAAIkS,EACAhS,EACAC,EACAgS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAcR,IAXCjB,EADIL,EAAU,GACR,EAAEH,GAAKG,EAER,EAGLM,EADIH,EAAU,GACR,EAAEN,GAAKM,EAER,EAENkS,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,GACPiR,EAAI9F,EAAkBnJ,EAAIkB,GAEzB/D,EADI8C,EAAKD,IAASC,EAAKiB,GACnBiI,EAAkBA,EAAkBnJ,EAAIiP,GAAM/N,GAE9CiI,EAAkBA,EAAkBjI,EAAE+N,GAAMjP,GAEjDA,EAAMiP,EACNA,EAAI9F,EAAkB8G,EAAG9S,GAExB+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GACjBgM,EAAkBA,EAAkB8G,EAAGhB,GAAM9R,GAE7CgM,EAAkBA,EAAkBhM,EAAE8R,GAAMgB,GAElDA,EAAKhB,EACLe,EAAM7G,EAAkB6G,EAAIE,GAE5BjR,EAAGhB,GAAOkL,EAAkBnJ,EAAMmJ,EAAkB8G,EAAGD,IACvDhS,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CC1DA,SAAS4Y,GAAWra,EAAGwC,EAAKhB,EAAGrB,EAASsB,EAAGnB,GAC1C,IAAIE,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAYR,IATCjB,EADIL,EAAU,GACR,EAAEH,GAAKG,EAER,EAGLM,EADIH,EAAU,GACR,EAAEN,GAAKM,EAER,EAEAI,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,EAAMmJ,EAAkBnJ,EAAMhB,EAAGhB,IACjCiB,EAAGhB,GAAO+B,EACVhC,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,CC5CAlD,EAAA0b,GAAA,UAAAlZ,ICAAxC,EAAA2b,GAAA,UAAAnZ,ICAAxC,EAAA4b,GAAA,WCoBA,SAAiBna,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GACzD,OAAO2Z,GAAWla,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,EAC5D,ICtBAhC,EAAA6b,GAAA,WC+BA,SAAqBpa,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC7D,IAAIiS,EACAhS,EACAC,EACAgS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAOR,IALAjB,EAAKJ,EACLK,EAAKF,EAELiS,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,GACPiR,EAAI9F,EAAkBnJ,EAAIkB,GAEzB/D,EADI8C,EAAKD,IAASC,EAAKiB,GACnBiI,EAAkBA,EAAkBnJ,EAAIiP,GAAM/N,GAE9CiI,EAAkBA,EAAkBjI,EAAE+N,GAAMjP,GAEjDA,EAAMiP,EACNA,EAAI9F,EAAkB8G,EAAG9S,GAExB+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GACjBgM,EAAkBA,EAAkB8G,EAAGhB,GAAM9R,GAE7CgM,EAAkBA,EAAkBhM,EAAE8R,GAAMgB,GAElDA,EAAKhB,EACLe,EAAM7G,EAAkB6G,EAAIE,GAE5BjR,EAAGhB,GAAOkL,EAAkBnJ,EAAMmJ,EAAkB8G,EAAGD,IACvDhS,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,ICzEAlD,EAAA8b,GAAA,WCoBA,SAAoBra,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC5D,IAAIC,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAIR,IAFAjB,EAAKJ,EACLK,EAAKF,EACCG,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,EAAMmJ,EAAkBnJ,EAAMhB,EAAGhB,IACjCiB,EAAGhB,GAAO+B,EACVhC,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACR,ICrCA,IAAImR,GAAY,IAqChB,SAAS0H,GAAUta,EAAGwC,EAAKhB,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC3D,IAAIC,EACAC,EACAwB,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAOyB,EAIR,GAFAjB,EAAKJ,EACLK,EAAKF,EACAP,GAAK4S,GAAY,CAErB,IADA3Q,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,EAAI0J,EAAkB1J,EAAIT,EAAGhB,IAC7BiB,EAAGhB,GAAOkL,EAAkBnJ,EAAMP,GAClCzB,GAAML,EACNM,GAAMH,EAEP,OAAOmB,CACP,CAKD,OAHA6Y,GADAhH,EAAIC,GAAOvT,EAAE,GACAwC,EAAKhB,EAAGrB,EAASK,EAAIiB,EAAGnB,EAASG,GAE9C6Z,GAAUta,EAAEsT,EAAG7R,EADfhB,IAAO6S,EAAE,GAAKhT,GACUkB,EAAGrB,EAASK,EAAI8S,EAAEnT,EAAUsB,EAAGnB,EAASG,EAAGH,GAC5DmB,CACR,CCrCA,SAAS6Y,GAAUta,EAAGwC,EAAKhB,EAAGrB,EAASsB,EAAGnB,GAIzC,OAAKN,GAAK,EACFyB,EAYDqS,GAAO9T,EAAGwC,EAAKhB,EAAGrB,EAVpBA,EAAU,GACR,EAAEH,GAAKG,EAER,EAOgCsB,EAAGnB,EALpCA,EAAU,GACR,EAAEN,GAAKM,EAER,EAGP,CC7CA/B,EAAA+b,GAAA,UAAAvZ,ICAA,IAAI6R,GAAY,IA+BhB,SAAS2H,GAAava,EAAG4C,EAAOpB,EAAGc,EAAQC,GAC1C,IAAI/B,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOqJ,EAAkB/I,EAAQpB,EAAGe,IAGrC,GADA/B,EAAK+B,EACAvC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKW,EAAQpB,EAAGhB,GAChBA,GAAM8B,EAEP,OAAOqJ,EAAkB1J,EACzB,CACD,GAAKjC,GAAK4S,GAAY,CAarB,IAXAE,EAAKlQ,EAAQpB,EAAGhB,GAChBuS,EAAKnQ,EAAQpB,EAAGhB,EAAG8B,GACnB0Q,EAAKpQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB2Q,EAAKrQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB4Q,EAAKtQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB6Q,EAAKvQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB8Q,EAAKxQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB+Q,EAAKzQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACtB9B,GAAM,EAAI8B,EAEVI,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,GAAMlQ,EAAQpB,EAAGhB,GACjBuS,GAAMnQ,EAAQpB,EAAGhB,EAAG8B,GACpB0Q,GAAMpQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB2Q,GAAMrQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB4Q,GAAMtQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB6Q,GAAMvQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB8Q,GAAMxQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB+Q,GAAMzQ,EAAQpB,EAAGhB,EAAI,EAAE8B,GACvB9B,GAAM,EAAI8B,EAMX,IAHAL,EAAM6Q,EAAGC,GAAOC,EAAGC,IAASC,EAAGC,GAAOC,EAAGC,IAGhC3S,EAAIV,EAAGU,IACfuB,GAAKW,EAAQpB,EAAGhB,GAChBA,GAAM8B,EAEP,OAAOqJ,EAAkB1J,EACzB,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAEN2L,EAAkB4O,GADzBjH,GAAKA,EAAI,EACgC1Q,EAAOpB,EAAGc,EAAQ9B,GAAO+Z,GAAava,EAAEsT,EAAG1Q,EAAOpB,EAAGc,EAAQ9B,EAAI8S,EAAEhR,GAC7G,CC5EA,SAASiY,GAAava,EAAG4C,EAAOpB,EAAGc,GAClC,IAAI9B,EACAyB,EACAvB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOqJ,EAAkB/I,EAAQpB,EAAG,IAOrC,GAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEDtC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKW,EAAQpB,EAAGhB,GAChBA,GAAM8B,EAEP,OAAOqJ,EAAkB1J,EACzB,CACD,OAAOO,GAAKxC,EAAG4C,EAAOpB,EAAGc,EAAQ9B,EAClC,CCnCA,SAASga,GAAWxa,EAAG4C,EAAOpB,EAAGc,GAChC,OAAOiY,GAAava,EAAG4C,EAAOpB,EAAGc,EAClC,CCjBA/D,EAAAgc,GAAA,UAAAxZ,ICAAxC,EAAAic,GAAA,WCgBA,SAAoBxa,EAAG4C,EAAOpB,EAAGc,EAAQC,GACxC,OAAOgY,GAAava,EAAG4C,EAAOpB,EAAGc,EAAQC,EAC1C,ICjBA,IAAIqQ,GAAY,IA+BhB,SAAS6H,GAAaza,EAAGwB,EAAGc,EAAQC,GACnC,IAAI/B,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK+S,GAAQ7T,EAAGe,IACR,EAEDf,EAAGe,GAGX,GADA/B,EAAK+B,EACAvC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,KACQ,IAAtB2U,GAAQ7T,EAAGhB,MACfyB,GAAKT,EAAGhB,IAETA,GAAM8B,EAEP,OAAOqJ,EAAkB1J,EACzB,CACD,GAAKjC,GAAK4S,GAAY,CAoBrB,IAlBAE,EAAOuC,GAAQ7T,EAAGhB,IAAW,EAAMgB,EAAGhB,GAEtCuS,EAAOsC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtCwS,EAAOqC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtCyS,EAAOoC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC0S,EAAOmC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC2S,EAAOkC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC4S,EAAOiC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC6S,EAAOgC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GACtCA,GAAM8B,EAENI,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,GAAQuC,GAAQ7T,EAAGhB,IAAW,EAAMgB,EAAGhB,GAEvCuS,GAAQsC,GAAQ7T,EADhBhB,GAAM8B,IACwB,EAAMd,EAAGhB,GAEvCwS,GAAQqC,GAAQ7T,EADhBhB,GAAM8B,IACwB,EAAMd,EAAGhB,GAEvCyS,GAAQoC,GAAQ7T,EADhBhB,GAAM8B,IACwB,EAAMd,EAAGhB,GAEvC0S,GAAQmC,GAAQ7T,EADhBhB,GAAM8B,IACwB,EAAMd,EAAGhB,GAEvC2S,GAAQkC,GAAQ7T,EADhBhB,GAAM8B,IACwB,EAAMd,EAAGhB,GAEvC4S,GAAQiC,GAAQ7T,EADhBhB,GAAM8B,IACwB,EAAMd,EAAGhB,GAEvC6S,GAAQgC,GAAQ7T,EADhBhB,GAAM8B,IACwB,EAAMd,EAAGhB,GACvCA,GAAM8B,EAMP,IAHAL,EAAM6Q,EAAGC,GAAOC,EAAGC,IAASC,EAAGC,GAAOC,EAAGC,IAGhC3S,EAAIV,EAAGU,KACY,IAAtB2U,GAAQ7T,EAAGhB,MACfyB,GAAKT,EAAGhB,IAETA,GAAM8B,EAEP,OAAOqJ,EAAkB1J,EACzB,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAEN2L,EAAkB8O,GADzBnH,GAAKA,EAAI,EACgC9R,EAAGc,EAAQ9B,GAAOia,GAAaza,EAAEsT,EAAG9R,EAAGc,EAAQ9B,EAAI8S,EAAEhR,GAC/F,CClGA,SAASmY,GAAaza,EAAGwB,EAAGc,GAC3B,IAAI9B,EACAyB,EACAvB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK+S,GAAQ7T,EAAG,IACR,EAEDA,EAAG,GAOX,GAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEDtC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,KACQ,IAAtB2U,GAAQ7T,EAAGhB,MACfyB,GAAKT,EAAGhB,IAETA,GAAM8B,EAEP,OAAOqJ,EAAkB1J,EACzB,CACD,OAAOO,GAAKxC,EAAGwB,EAAGc,EAAQ9B,EAC3B,CCxCA,SAASka,GAAW1a,EAAGwB,EAAGc,GACzB,OAAOmY,GAAaza,EAAGwB,EAAGc,EAC3B,CCjBA/D,EAAAkc,GAAA,UAAA1Z,ICAAxC,EAAAmc,GAAA,WCeA,SAAoB1a,EAAGwB,EAAGc,EAAQC,GACjC,OAAOkY,GAAaza,EAAGwB,EAAGc,EAAQC,EACnC,ICjBA,IAAIqQ,GAAY,IA8BhB,SAAS+H,GAAU3a,EAAGwB,EAAGc,EAAQC,GAChC,IAAI/B,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAGe,GAGX,GADA/B,EAAK+B,EACAvC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKT,EAAGhB,GACRA,GAAM8B,EAEP,OAAOqJ,EAAkB1J,EACzB,CACD,GAAKjC,GAAK4S,GAAY,CAarB,IAXAE,EAAKtR,EAAGhB,GACRuS,EAAKvR,EAAGhB,EAAG8B,GACX0Q,EAAKxR,EAAGhB,EAAI,EAAE8B,GACd2Q,EAAKzR,EAAGhB,EAAI,EAAE8B,GACd4Q,EAAK1R,EAAGhB,EAAI,EAAE8B,GACd6Q,EAAK3R,EAAGhB,EAAI,EAAE8B,GACd8Q,EAAK5R,EAAGhB,EAAI,EAAE8B,GACd+Q,EAAK7R,EAAGhB,EAAI,EAAE8B,GACd9B,GAAM,EAAI8B,EAEVI,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,GAAMtR,EAAGhB,GACTuS,GAAMvR,EAAGhB,EAAG8B,GACZ0Q,GAAMxR,EAAGhB,EAAI,EAAE8B,GACf2Q,GAAMzR,EAAGhB,EAAI,EAAE8B,GACf4Q,GAAM1R,EAAGhB,EAAI,EAAE8B,GACf6Q,GAAM3R,EAAGhB,EAAI,EAAE8B,GACf8Q,GAAM5R,EAAGhB,EAAI,EAAE8B,GACf+Q,GAAM7R,EAAGhB,EAAI,EAAE8B,GACf9B,GAAM,EAAI8B,EAMX,IAHAL,EAAM6Q,EAAGC,GAAOC,EAAGC,IAASC,EAAGC,GAAOC,EAAGC,IAGhC3S,EAAIV,EAAGU,IACfuB,GAAKT,EAAGhB,GACRA,GAAM8B,EAEP,OAAOqJ,EAAkB1J,EACzB,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAEN2L,EAAkBgP,GADzBrH,GAAKA,EAAI,EAC6B9R,EAAGc,EAAQ9B,GAAOma,GAAU3a,EAAEsT,EAAG9R,EAAGc,EAAQ9B,EAAI8S,EAAEhR,GACzF,CC3EA,SAASqY,GAAU3a,EAAGwB,EAAGc,GACxB,IAAI9B,EACAyB,EACAvB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAG,GAOX,GAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEDtC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,GAAKT,EAAGhB,GACRA,GAAM8B,EAEP,OAAOqJ,EAAkB1J,EACzB,CACD,OAAOO,GAAKxC,EAAGwB,EAAGc,EAAQ9B,EAC3B,CCnCA,SAASoa,GAAQ5a,EAAGwB,EAAGc,GACtB,OAAOqY,GAAU3a,EAAGwB,EAAGc,EACxB,CCQA,SAASuY,GAAY7a,EAAGwB,EAAGc,GAC1B,IAAIE,EACAhC,EACAkD,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK+S,GAAQ7T,EAAG,IACR,EAEDA,EAAG,GASX,IANChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACN7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACc,IAAhB6U,GAAQ3R,KACZ+N,EAAIjP,EAAMkB,EAET/D,EADI8C,EAAKD,IAASC,EAAKiB,GACnBiI,EAAkBhM,EAAIgM,EAAkBA,EAAkBnJ,EAAIiP,GAAM/N,IAEpEiI,EAAkBhM,EAAIgM,EAAkBA,EAAkBjI,EAAE+N,GAAMjP,IAEvEA,EAAMiP,GAEPjR,GAAM8B,EAEP,OAAOqJ,EAAkBnJ,EAAM7C,EAChC,CCtCA,SAASkb,GAAY7a,EAAGwB,EAAGc,EAAQC,GAClC,IAAIC,EACAhC,EACAkD,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK+S,GAAQ7T,EAAGe,IACR,EAEDf,EAAGe,GAKX,IAHA/B,EAAK+B,EACLC,EAAM,EACN7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACc,IAAhB6U,GAAQ3R,KACZ+N,EAAIjP,EAAMkB,EAET/D,EADI8C,EAAKD,IAASC,EAAKiB,GACnBiI,EAAkBhM,EAAIgM,EAAkBA,EAAkBnJ,EAAIiP,GAAM/N,IAEpEiI,EAAkBhM,EAAIgM,EAAkBA,EAAkBjI,EAAE+N,GAAMjP,IAEvEA,EAAMiP,GAEPjR,GAAM8B,EAEP,OAAOqJ,EAAkBnJ,EAAM7C,EAChC,CC7CA,SAASmb,GAAS9a,EAAGwB,EAAGc,GACvB,OAAOuY,GAAY7a,EAAGwB,EAAGc,EAC1B,CCSA,SAASyY,GAAa/a,EAAGwB,EAAGc,GAC3B,IAAIE,EACAgQ,EACAhS,EACAiS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK+S,GAAQ7T,EAAG,IACR,EAEDA,EAAG,GAUX,IAPChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACNgQ,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACc,IAAhB6U,GAAQ3R,KACZ+N,EAAI9F,EAAkBnJ,EAAMkB,GAE3B/D,EADI8C,EAAKD,IAASC,EAAKiB,GACnBiI,EAAkBA,EAAkBnJ,EAAIiP,GAAM/N,GAE9CiI,EAAkBA,EAAkBjI,EAAE+N,GAAMjP,GAEjDA,EAAMiP,EACNA,EAAI9F,EAAkB8G,EAAK9S,GAE1B+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GACjBgM,EAAkBA,EAAiB8G,EAAGhB,GAAK9R,GAE3CgM,EAAkBA,EAAiBhM,EAAE8R,GAAKgB,GAEhDA,EAAKhB,EACLe,EAAM7G,EAAkB6G,EAAME,IAE/BlS,GAAM8B,EAEP,OAAOqJ,EAAkBnJ,EAAMmJ,EAAkB8G,EAAKD,GACvD,CC3DA,SAASwI,GAAYhb,EAAGwB,EAAGc,GAC1B,IAAIE,EACAhC,EACAE,EAGJ,GADA8B,EAAM,EACDxC,GAAK,EACT,OAAOwC,EAER,GAAW,IAANxC,GAAsB,IAAXsC,EACf,OAAK+S,GAAQ7T,EAAG,IACRgB,EAEDhB,EAAG,GAOX,IAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEA5B,EAAI,EAAGA,EAAIV,EAAGU,KACQ,IAAtB2U,GAAQ7T,EAAGhB,MACfgC,EAAMmJ,EAAkBnJ,EAAMhB,EAAGhB,KAElCA,GAAM8B,EAEP,OAAOE,CACR,CC3CAjE,EAAAoc,GAAA,UAAA5Z,ICAAxC,EAAAqc,GAAA,WCiBA,SAAiB5a,EAAGwB,EAAGc,EAAQC,GAC9B,OAAOoY,GAAU3a,EAAGwB,EAAGc,EAAQC,EAChC,ICnBAhE,EAAAsc,GAAA,UAAA9Z,ICAAxC,EAAAuc,GAAA,WCeA,SAAkB9a,EAAGwB,EAAGc,EAAQC,GAC/B,OAAOsY,GAAY7a,EAAGwB,EAAGc,EAAQC,EAClC,ICjBAhE,EAAAwc,GAAA,WC2BA,SAAsB/a,EAAGwB,EAAGc,EAAQC,GACnC,IAAIC,EACAgQ,EACAhS,EACAiS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK+S,GAAQ7T,EAAGe,IACR,EAEDf,EAAGe,GAMX,IAJA/B,EAAK+B,EACLC,EAAM,EACNgQ,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACc,IAAhB6U,GAAQ3R,KACZ+N,EAAI9F,EAAkBnJ,EAAMkB,GAE3B/D,EADI8C,EAAKD,IAASC,EAAKiB,GACnBiI,EAAkBA,EAAkBnJ,EAAIiP,GAAM/N,GAE9CiI,EAAkBA,EAAkBjI,EAAE+N,GAAMjP,GAEjDA,EAAMiP,EACNA,EAAI9F,EAAkB8G,EAAK9S,GAE1B+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GACjBgM,EAAkBA,EAAiB8G,EAAGhB,GAAK9R,GAE3CgM,EAAkBA,EAAiBhM,EAAE8R,GAAKgB,GAEhDA,EAAKhB,EACLe,EAAM7G,EAAkB6G,EAAME,IAE/BlS,GAAM8B,EAEP,OAAOqJ,EAAkBnJ,EAAMmJ,EAAkB8G,EAAKD,GACvD,ICzEAjU,EAAAyc,GAAA,WCgBA,SAAqBhb,EAAGwB,EAAGc,EAAQC,GAClC,IAAIC,EACAhC,EACAE,EAGJ,GADA8B,EAAM,EACDxC,GAAK,EACT,OAAOwC,EAER,GAAW,IAANxC,GAAsB,IAAXsC,EACf,OAAK+S,GAAQ7T,EAAGe,IACRC,EAEDhB,EAAGe,GAGX,IADA/B,EAAK+B,EACC7B,EAAI,EAAGA,EAAIV,EAAGU,KACQ,IAAtB2U,GAAQ7T,EAAGhB,MACfgC,EAAMmJ,EAAkBnJ,EAAMhB,EAAGhB,KAElCA,GAAM8B,EAEP,OAAOE,CACR,ICtCA,IAAIoQ,GAAY,IA8BhB,SAASqI,GAAWjb,EAAGwB,EAAGc,EAAQC,GACjC,IAAI/B,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK+S,GAAQ7T,EAAGe,IACR,EAEDf,EAAGe,GAGX,GADA/B,EAAK+B,EACAvC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,KACQ,IAAtB2U,GAAQ7T,EAAGhB,MACfyB,EAAI0J,EAAkB1J,EAAIT,EAAGhB,KAE9BA,GAAM8B,EAEP,OAAOL,CACP,CACD,GAAKjC,GAAK4S,GAAY,CAoBrB,IAlBAE,EAAOuC,GAAQ7T,EAAGhB,IAAW,EAAMgB,EAAGhB,GAEtCuS,EAAOsC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtCwS,EAAOqC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtCyS,EAAOoC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC0S,EAAOmC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC2S,EAAOkC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC4S,EAAOiC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GAEtC6S,EAAOgC,GAAQ7T,EADfhB,GAAM8B,IACuB,EAAMd,EAAGhB,GACtCA,GAAM8B,EAENI,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,EAAOuC,GAAQ7T,EAAGhB,IAAWsS,EAAKnH,EAAkBmH,EAAKtR,EAAGhB,IAE5DuS,EAAOsC,GAAQ7T,EADfhB,GAAM8B,IACuByQ,EAAKpH,EAAkBoH,EAAKvR,EAAGhB,IAE5DwS,EAAOqC,GAAQ7T,EADfhB,GAAM8B,IACuB0Q,EAAKrH,EAAkBqH,EAAKxR,EAAGhB,IAE5DyS,EAAOoC,GAAQ7T,EADfhB,GAAM8B,IACuB2Q,EAAKtH,EAAkBsH,EAAKzR,EAAGhB,IAE5D0S,EAAOmC,GAAQ7T,EADfhB,GAAM8B,IACuB4Q,EAAKvH,EAAkBuH,EAAK1R,EAAGhB,IAE5D2S,EAAOkC,GAAQ7T,EADfhB,GAAM8B,IACuB6Q,EAAKxH,EAAkBwH,EAAK3R,EAAGhB,IAE5D4S,EAAOiC,GAAQ7T,EADfhB,GAAM8B,IACuB8Q,EAAKzH,EAAkByH,EAAK5R,EAAGhB,IAE5D6S,EAAOgC,GAAQ7T,EADfhB,GAAM8B,IACuB+Q,EAAK1H,EAAkB0H,EAAK7R,EAAGhB,IAC5DA,GAAM8B,EAMP,IAHAL,EAAI0J,EAAkBA,EAAkBA,EAAiBmH,EAAGC,GAAMpH,EAAiBqH,EAAGC,IAAQtH,EAAkBA,EAAiBuH,EAAGC,GAAMxH,EAAiByH,EAAGC,KAGrJ3S,EAAIV,EAAGU,KACY,IAAtB2U,GAAQ7T,EAAGhB,MACfyB,EAAI0J,EAAkB1J,EAAIT,EAAGhB,KAE9BA,GAAM8B,EAEP,OAAOL,CACP,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAEN2L,EAAkBsP,GADzB3H,GAAKA,EAAI,EAC8B9R,EAAGc,EAAQ9B,GAAOya,GAAWjb,EAAEsT,EAAG9R,EAAGc,EAAQ9B,EAAI8S,EAAEhR,GAC3F,CChGA,SAAS2Y,GAAWjb,EAAGwB,EAAGc,GACzB,IAAI9B,EACAyB,EACAvB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAK+S,GAAQ7T,EAAG,IACR,EAEDA,EAAG,GAOX,GAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEDtC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,KACQ,IAAtB2U,GAAQ7T,EAAGhB,MACfyB,EAAI0J,EAAkB1J,EAAIT,EAAGhB,KAE9BA,GAAM8B,EAEP,OAAOL,CACP,CACD,OAAOO,GAAKxC,EAAGwB,EAAGc,EAAQ9B,EAC3B,CCxDAjC,EAAA0c,GAAA,UAAAla,ICmBA,SAASma,GAAMlb,EAAGwB,EAAGc,GACpB,IAAIrB,EACAT,EACAC,EACAoC,EACAyQ,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAOwB,EAKR,GAHA8R,EAAIC,GAAOvT,EAAE,GAGG,IAAXsC,EAAe,CAKnB,GAHA7B,EAAKT,EAAI,GADT6C,EAAIyQ,EApCE,GAwCG,EACR,IAAM9S,EAAK,EAAGA,EAAKqC,EAAGrC,IACrBS,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EACVR,GAAM,EAGR,GAAK6S,EAhDC,EAiDL,OAAO9R,EAER,IAAMhB,EAAKqC,EAAGrC,EAAK8S,EAAG9S,GAnDhB,EAoDLS,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EAEVA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMgB,EAAGf,EAAG,GAClBe,EAAGf,EAAG,GAAMQ,EAEZA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMgB,EAAGf,EAAG,GAClBe,EAAGf,EAAG,GAAMQ,EAEZR,GAhEK,EAkEN,OAAOe,CACP,CAOD,IADAf,GAJCD,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,IAEMtC,EAAE,GAAGsC,EACX5B,EAAI,EAAGA,EAAI4S,EAAG5S,IACnBO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EACVT,GAAM8B,EACN7B,GAAM6B,EAEP,OAAOd,CACR,CC9CA,SAAS2Z,GAAUnb,EAAGyG,EAAOjF,EAAGrB,EAASsB,EAAGnB,GAC3C,IAAIF,EACAG,EACAkV,EACAC,EACAC,EACAC,EACAC,EACAC,EACAtV,EACAC,EACA6S,EACAlR,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAwBR,IArBKiF,EAAQ,IACZtG,IAAY,EACZG,IAAY,GAGZF,EADID,EAAU,GACH,EAAEH,GAAKG,EAER,EAGVI,EADID,EAAU,GACH,EAAEN,GAAKM,EAER,EAGXgT,EAAItT,EAGJyV,EAASlC,GAAOvT,EAAI,KAGL,CACd,GAAKyV,EAAS,EAGbI,EAAKrU,EAAGpB,GADRqV,GAAU,GACctV,GACxB2V,EAAKrU,EAAGlB,EAASkV,EAAOnV,OAClB,CAKN,GAAW,KAHXgT,GAAK,GAIJ,OAAO9R,EAIRqU,EAAKrU,EADLhB,EAAKJ,EAAWkT,EAAEnT,GAGlB2V,EAAKrU,EADLhB,EAAKF,EAAW+S,EAAEhT,GAIlBkB,EAAGhB,GAAOgB,EAAGpB,GACbqB,EAAGhB,GAAOgB,EAAGlB,EACb,CASD,IAFAmV,EAAW,GAHXtT,EAAIqT,GAGY,EAERC,EAAQpC,KAEfjM,EAAIqO,EAAQ,GACHpC,KACRqC,EAAKnU,EAAGpB,EAASiH,EAAElH,KACnByV,EAAKpU,EAAGpB,EAASsV,EAAMvV,KAGPkV,GAAQM,IAASA,IAAOC,GAAMwF,GAAiBzF,MAC9DD,GAAS,IAIXC,EAAKnU,EAAGpB,EAASsV,EAAMvV,IACb0V,GAAMR,GAAQM,IAAUA,IAAOE,GAAMuF,GAAiBzF,KAE/DnU,EAAGpB,EAASgC,EAAEjC,GAAawV,EAC3BlU,EAAGlB,EAAS6B,EAAE9B,GAAamB,EAAGlB,EAASmV,EAAMpV,GAM7CoV,EAAW,GAHXtT,EAAIsT,GAGY,EAOlBlU,EAAGpB,EAASgC,EAAEjC,GAAa0V,EAC3BpU,EAAGlB,EAAS6B,EAAE9B,GAAawV,CAC3B,CACF,CCnHA,SAASuF,GAAWrb,EAAGyG,EAAOjF,EAAGrB,EAASsB,EAAGnB,GAC5C,IAAI2V,EACAzV,EACAwG,EACAkP,EACAC,EACA1V,EACAwG,EACAmP,EACAC,EACA7G,EACAC,EACA6G,EACA5V,EAEJ,GAAKV,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAgBR,GAbKiF,EAAQ,IACZtG,IAAY,EACZG,IAAY,GAERA,EAAU,GACd8V,GAAM,EAAEpW,GAAKM,EACb+V,EAAK,IAELD,EAAK,EACLC,GAAMrW,EAAE,GAAKM,GAEdG,EAAK2V,EAAK9V,EAELH,EAAU,EAAI,CAOlB,IAJAgW,EAAK,EACL3V,GAFA0V,GAAM,EAAElW,GAAKG,GAEHA,EAGJO,EAAI,EAAGA,EAAIV,EAAGU,IAKnB,GAJA8O,EAAKhO,EAAGhB,GACRiP,EAAKhO,EAAGhB,GAGH4U,GAAQ7F,GAAO,CAKnB,IAJAxI,EAAKxG,EACLyG,EAAKxG,EAGGuG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG7G,GAChBsB,EAAGwF,GAAOxF,EAAGwF,EAAG3G,GAChB0G,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAG2U,GAAO3G,EACV/N,EAAG4U,GAAO5G,CACd,KAAU,CAMN,IALAwG,EAAMqF,GAAiB9L,GACvBxI,EAAKxG,EAAKL,EACV8G,EAAKxG,EAAKH,EAGF0G,GAAMkP,OACbI,EAAK9U,EAAGwF,KACGwI,IAAQyG,GAAOK,IAAO9G,IAAgC,IAA1B8L,GAAiBhF,KAIxD9U,EAAGwF,EAAG7G,GAAYmW,EAClB7U,EAAGwF,EAAG3G,GAAYmB,EAAGwF,GACrBD,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAGwF,EAAG7G,GAAYqP,EAClB/N,EAAGwF,EAAG3G,GAAYmP,EAClBjP,GAAML,EACNM,GAAMH,CACN,CAEF,OAAOkB,CACP,CAOD,IAJA2U,GAAMnW,EAAE,GAAKG,EACbK,GAFA0V,EAAK,GAEK/V,EAGJO,EAAI,EAAGA,EAAIV,EAAGU,IAKnB,GAJA8O,EAAKhO,EAAGhB,GACRiP,EAAKhO,EAAGhB,GAGH4U,GAAQ7F,GAAO,CAKnB,IAJAxI,EAAKxG,EACLyG,EAAKxG,EAGGuG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG7G,GAChBsB,EAAGwF,GAAOxF,EAAGwF,EAAG3G,GAChB0G,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAG2U,GAAO3G,EACV/N,EAAG4U,GAAO5G,CACb,KAAS,CAMN,IALAwG,EAAMqF,GAAiB9L,GACvBxI,EAAKxG,EAAKL,EACV8G,EAAKxG,EAAKH,EAGF0G,GAAMkP,OACbI,EAAK9U,EAAGwF,KACGwI,IAAQyG,GAAOK,IAAO9G,IAAgC,IAA1B8L,GAAiBhF,KAIxD9U,EAAGwF,EAAG7G,GAAYmW,EAClB7U,EAAGwF,EAAG3G,GAAYmB,EAAGwF,GACrBD,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAGwF,EAAG7G,GAAYqP,EAClB/N,EAAGwF,EAAG3G,GAAYmP,EAClBjP,GAAML,EACNM,GAAMH,CACN,CAEF,OAAOkB,CACR,CC1JAjD,EAAA2c,GAAA,WCoBA,SAAelb,EAAGwB,EAAGc,EAAQC,GAC5B,IAAItB,EACAT,EACAC,EACAoC,EACAyQ,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAOwB,EAMR,GAJA8R,EAAIC,GAAOvT,EAAE,GACbQ,EAAK+B,EAGW,IAAXD,EAAe,CAKnB,GAHA7B,EAAKD,EAAKR,EAAI,GADd6C,EAAIyQ,EAtCE,GA0CG,EACR,IAAM5S,EAAI,EAAGA,EAAImC,EAAGnC,IACnBO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EACVT,GAAM8B,EACN7B,GAAM6B,EAGR,GAAKgR,EAnDC,EAoDL,OAAO9R,EAER,IAAMd,EAAImC,EAAGnC,EAAI4S,EAAG5S,GAtDd,EAuDLO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EAEVA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMgB,EAAGf,EAAG,GAClBe,EAAGf,EAAG,GAAMQ,EAEZA,EAAMO,EAAGhB,EAAG,GACZgB,EAAGhB,EAAG,GAAMgB,EAAGf,EAAG,GAClBe,EAAGf,EAAG,GAAMQ,EAEZT,GAnEK,EAoELC,GApEK,EAsEN,OAAOe,CACP,CAED,IADAf,EAAKD,GAAOR,EAAE,GAAGsC,EACX5B,EAAI,EAAGA,EAAI4S,EAAG5S,IACnBO,EAAMO,EAAGhB,GACTgB,EAAGhB,GAAOgB,EAAGf,GACbe,EAAGf,GAAOQ,EACVT,GAAM8B,EACN7B,GAAM6B,EAEP,OAAOd,CACR,IC/EAjD,EAAA4c,GAAA,WCoCA,SAAmBnb,EAAGyG,EAAOjF,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC7D,IAAIkV,EACAC,EACAC,EACAC,EACAC,EACAC,EACAtV,EACAC,EACA6S,EACAlR,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAgBR,IAbKiF,EAAQ,IAGZrG,IAAYJ,EAAE,IAFdG,IAAY,GAGZI,IAAYP,EAAE,IAFdM,IAAY,IAKbgT,EAAItT,EAGJyV,EAASlC,GAAOvT,EAAI,KAGL,CACd,GAAKyV,EAAS,EAGbI,EAAKrU,EAAGpB,GADRqV,GAAU,GACctV,GACxB2V,EAAKrU,EAAGlB,EAASkV,EAAOnV,OAClB,CAKN,GAAW,KAHXgT,GAAK,GAIJ,OAAO9R,EAIRqU,EAAKrU,EADLhB,EAAKJ,EAAWkT,EAAEnT,GAGlB2V,EAAKrU,EADLhB,EAAKF,EAAW+S,EAAEhT,GAIlBkB,EAAGhB,GAAOgB,EAAGpB,GACbqB,EAAGhB,GAAOgB,EAAGlB,EACb,CASD,IAFAmV,EAAW,GAHXtT,EAAIqT,GAGY,EAERC,EAAQpC,KAEfjM,EAAIqO,EAAQ,GACHpC,KACRqC,EAAKnU,EAAGpB,EAASiH,EAAElH,KACnByV,EAAKpU,EAAGpB,EAASsV,EAAMvV,KAGPkV,GAAQM,IAASA,IAAOC,GAAMwF,GAAiBzF,MAC9DD,GAAS,IAIXC,EAAKnU,EAAGpB,EAASsV,EAAMvV,IACb0V,GAAMR,GAAQM,IAAUA,IAAOE,GAAMuF,GAAiBzF,KAE/DnU,EAAGpB,EAASgC,EAAEjC,GAAawV,EAC3BlU,EAAGlB,EAAS6B,EAAE9B,GAAamB,EAAGlB,EAASmV,EAAMpV,GAM7CoV,EAAW,GAHXtT,EAAIsT,GAGY,EAOlBlU,EAAGpB,EAASgC,EAAEjC,GAAa0V,EAC3BpU,EAAGlB,EAAS6B,EAAE9B,GAAawV,CAC3B,CACF,ICnIAvX,EAAA8c,GAAA,WC0BA,SAAoBrb,EAAGyG,EAAOjF,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC9D,IAAI0V,EACAzV,EACAwG,EACAkP,EACAC,EACA1V,EACAwG,EACAmP,EACAC,EACA7G,EACAC,EACA6G,EACA5V,EAEJ,GAAKV,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAiBR,GAdKiF,EAAQ,IAGZrG,IAAYJ,EAAE,IAFdG,IAAY,GAGZI,IAAYP,EAAE,IAFdM,IAAY,IAKb6V,GADAD,EAAK9V,IACOJ,EAAE,GAAGG,EACjBK,EAAK0V,EAAK/V,EAGVkW,GADAD,EAAK7V,IACOP,EAAE,GAAGM,EACjBG,EAAK2V,EAAK9V,EAELH,EAAU,EAAI,CAIlB,IAAMO,EAAI,EAAGA,EAAIV,EAAGU,IAKnB,GAJA8O,EAAKhO,EAAGhB,GACRiP,EAAKhO,EAAGhB,GAGH4U,GAAQ7F,GAAO,CAKnB,IAJAxI,EAAKxG,EACLyG,EAAKxG,EAGGuG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG7G,GAChBsB,EAAGwF,GAAOxF,EAAGwF,EAAG3G,GAChB0G,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAG2U,GAAO3G,EACV/N,EAAG4U,GAAO5G,CACd,KAAU,CAMN,IALAwG,EAAMqF,GAAiB9L,GACvBxI,EAAKxG,EAAKL,EACV8G,EAAKxG,EAAKH,EAGF0G,GAAMkP,OACbI,EAAK9U,EAAGwF,KACGwI,IAAQyG,GAAOK,IAAO9G,IAAgC,IAA1B8L,GAAiBhF,KAIxD9U,EAAGwF,EAAG7G,GAAYmW,EAClB7U,EAAGwF,EAAG3G,GAAYmB,EAAGwF,GACrBD,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAGwF,EAAG7G,GAAYqP,EAClB/N,EAAGwF,EAAG3G,GAAYmP,EAClBjP,GAAML,EACNM,GAAMH,CACN,CAEF,OAAOkB,CACP,CAID,IAAMd,EAAI,EAAGA,EAAIV,EAAGU,IAKnB,GAJA8O,EAAKhO,EAAGhB,GACRiP,EAAKhO,EAAGhB,GAGH4U,GAAQ7F,GAAO,CAKnB,IAJAxI,EAAKxG,EACLyG,EAAKxG,EAGGuG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG7G,GAChBsB,EAAGwF,GAAOxF,EAAGwF,EAAG3G,GAChB0G,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAG2U,GAAO3G,EACV/N,EAAG4U,GAAO5G,CACb,KAAS,CAMN,IALAwG,EAAMqF,GAAiB9L,GACvBxI,EAAKxG,EAAKL,EACV8G,EAAKxG,EAAKH,EAGF0G,GAAMkP,OACbI,EAAK9U,EAAGwF,KACGwI,IAAQyG,GAAOK,IAAO9G,IAAgC,IAA1B8L,GAAiBhF,KAIxD9U,EAAGwF,EAAG7G,GAAYmW,EAClB7U,EAAGwF,EAAG3G,GAAYmB,EAAGwF,GACrBD,GAAM7G,EACN8G,GAAM3G,EAEPkB,EAAGwF,EAAG7G,GAAYqP,EAClB/N,EAAGwF,EAAG3G,GAAYmP,EAClBjP,GAAML,EACNM,GAAMH,CACN,CAEF,OAAOkB,CACR,sCCvJIgV,GAAQC,GAAK1G,OAuCjB,SAASwL,GAAUvb,EAAGyG,EAAOjF,EAAGrB,EAASsB,EAAGnB,GAC3C,IAAIF,EACAG,EACA0V,EACAU,EACAnH,EACAC,EACA6G,EACA5V,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAiBR,IAdKiF,EAAQ,IACZtG,IAAY,EACZG,IAAY,GAGZF,EADID,EAAU,GACH,EAAEH,GAAKG,EAER,EAGVI,EADID,EAAU,GACH,EAAEN,GAAKM,EAER,EAELI,EAAI,EAAGA,EAAI8V,GAAO9V,IAEvB,IAAM0B,EADNuU,EAAMF,GAAM/V,GACG0B,EAAIpC,EAAGoC,IAIrB,GAHAoN,EAAKhO,EAAGpB,EAASgC,EAAEjC,IAGdkV,GAAQ7F,GAAb,CAOA,IAJAC,EAAKhO,EAAGlB,EAAS6B,EAAE9B,GAGnB2V,EAAMqF,GAAiB9L,GACjBnI,EAAIjF,EAAGiF,GAAKsP,OACjBL,EAAK9U,EAAGpB,GAAUiH,EAAEsP,GAAKxW,KACdqP,IAAQyG,GAAOK,IAAO9G,GAFXnI,GAAKsP,EAK3BnV,EAAGpB,EAASiH,EAAElH,GAAamW,EAC3B7U,EAAGlB,EAAS8G,EAAE/G,GAAamB,EAAGlB,GAAU8G,EAAEsP,GAAKrW,GAEhDkB,EAAGpB,EAASiH,EAAElH,GAAaqP,EAC3B/N,EAAGlB,EAAS8G,EAAE/G,GAAamP,CAd1B,CAiBH,OAAOjO,CACR,CC/FA,IAAIgV,GAAQC,GAAK1G,OC0BjB,SAASyL,GAASxb,EAAGyG,EAAOjF,EAAGc,GAC9B,IAAIC,EACAkT,EACAC,EACAC,EACAC,EACAtC,EACA7B,EACA/Q,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAkBR,IAfKiF,EAAQ,IACZnE,IAAW,GAGXC,EADID,EAAS,GACH,EAAEtC,GAAKsC,EAER,EAGVgR,EAAItT,EAGJyV,EAASlC,GAAOvT,EAAI,KAGL,CACd,GAAKyV,EAAS,EAGbhE,EAAIjQ,EAAGe,GADPkT,GAAU,GACYnT,OAChB,CAKN,GAAW,KAHXgR,GAAK,GAIJ,OAAO9R,EAIRiQ,EAAIjQ,EADJd,EAAI6B,EAAU+Q,EAAEhR,GAIhBd,EAAGd,GAAMc,EAAGe,EACZ,CASD,IAFAmT,EAAW,GAHXtT,EAAIqT,GAGY,EAERC,EAAQpC,KAEfjM,EAAIqO,EAAQ,GACHpC,KACRqC,EAAKnU,EAAGe,EAAQ8E,EAAE/E,KAClBsT,EAAKpU,EAAGe,EAAQmT,EAAMpT,KAGN+S,GAAQM,IAASA,IAAOC,GAAMwF,GAAiBzF,MAC9DD,GAAS,IAIXC,EAAKnU,EAAGe,EAAQmT,EAAMpT,IACZmP,GAAK4D,GAAQM,IAAUA,IAAOlE,GAAK2J,GAAiBzF,KAE7DnU,EAAGe,EAAQH,EAAEE,GAAYqT,EAMzBD,EAAW,GAHXtT,EAAIsT,GAGY,EAOlBlU,EAAGe,EAAQH,EAAEE,GAAYmP,CACzB,CACF,CCpGA,SAASgK,GAAUzb,EAAGyG,EAAOjF,EAAGc,GAC/B,IAAI2T,EACAzV,EACAwG,EACAkP,EACAC,EACAzS,EACAoT,EACApW,EAEJ,GAAKV,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAMR,GAHKiF,EAAQ,IACZnE,IAAW,GAEPA,EAAS,EAAI,CAOjB,IAJA6T,EAAK,EACL3V,GAFA0V,GAAM,EAAElW,GAAKsC,GAEHA,EAGJ5B,EAAI,EAAGA,EAAIV,EAAGU,IAInB,GAHAgD,EAAIlC,EAAGhB,GAGF6U,GAAQ3R,GAAM,CAIlB,IAHAsD,EAAKxG,EAGGwG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG1E,GAChB0E,GAAM1E,EAEPd,EAAG2U,GAAOzS,CACd,KAAU,CAKN,IAJAuS,EAAMqF,GAAiB5X,GACvBsD,EAAKxG,EAAK8B,EAGF0E,GAAMkP,OACbY,EAAItV,EAAGwF,KACGtD,IAAOuS,GAAOa,IAAMpT,IAA8B,IAAzB4X,GAAiBxE,KAIpDtV,EAAGwF,EAAG1E,GAAWwU,EACjB9P,GAAM1E,EAEPd,EAAGwF,EAAG1E,GAAWoB,EACjBlD,GAAM8B,CACN,CAEF,OAAOd,CACP,CAOD,IAJA2U,GAAMnW,EAAE,GAAKsC,EACb9B,GAFA0V,EAAK,GAEK5T,EAGJ5B,EAAI,EAAGA,EAAIV,EAAGU,IAInB,GAHAgD,EAAIlC,EAAGhB,GAGF6U,GAAQ3R,GAAM,CAIlB,IAHAsD,EAAKxG,EAGGwG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG1E,GAChB0E,GAAM1E,EAEPd,EAAG2U,GAAOzS,CACb,KAAS,CAKN,IAJAuS,EAAMqF,GAAiB5X,GACvBsD,EAAKxG,EAAK8B,EAGF0E,GAAMkP,OACbY,EAAItV,EAAGwF,KACGtD,IAAOuS,GAAOa,IAAMpT,IAA8B,IAAzB4X,GAAiBxE,KAIpDtV,EAAGwF,EAAG1E,GAAWwU,EACjB9P,GAAM1E,EAEPd,EAAGwF,EAAG1E,GAAWoB,EACjBlD,GAAM8B,CACN,CAEF,OAAOd,CACR,CC/GAjD,EAAAgd,GAAA,WHyCA,SAAmBvb,EAAGyG,EAAOjF,EAAGrB,EAASC,EAASqB,EAAGnB,EAASC,GAC7D,IAAI0V,EACAU,EACAnH,EACAC,EACA6G,EACA5V,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EASR,IANKiF,EAAQ,IAGZrG,IAAYJ,EAAE,IAFdG,IAAY,GAGZI,IAAYP,EAAE,IAFdM,IAAY,IAIPI,EAAI,EAAGA,EAAI8V,GAAO9V,IAEvB,IAAM0B,EADNuU,EAAMF,GAAM/V,GACG0B,EAAIpC,EAAGoC,IAIrB,GAHAoN,EAAKhO,EAAGpB,EAASgC,EAAEjC,IAGdkV,GAAQ7F,GAAb,CAOA,IAJAC,EAAKhO,EAAGlB,EAAS6B,EAAE9B,GAGnB2V,EAAMqF,GAAiB9L,GACjBnI,EAAIjF,EAAGiF,GAAKsP,OACjBL,EAAK9U,EAAGpB,GAAUiH,EAAEsP,GAAKxW,KACdqP,IAAQyG,GAAOK,IAAO9G,GAFXnI,GAAKsP,EAK3BnV,EAAGpB,EAASiH,EAAElH,GAAamW,EAC3B7U,EAAGlB,EAAS8G,EAAE/G,GAAamB,EAAGlB,GAAU8G,EAAEsP,GAAKrW,GAEhDkB,EAAGpB,EAASiH,EAAElH,GAAaqP,EAC3B/N,EAAGlB,EAAS8G,EAAE/G,GAAamP,CAd1B,CAiBH,OAAOjO,CACR,IIvFAjD,EAAAid,GAAA,WC2BA,SAAkBxb,EAAGyG,EAAOjF,EAAGc,EAAQC,GACtC,IAAIkT,EACAC,EACAC,EACAC,EACAtC,EACA7B,EACA/Q,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAcR,IAXKiF,EAAQ,IAEZlE,IAAWvC,EAAE,IADbsC,IAAW,IAIZgR,EAAItT,EAGJyV,EAASlC,GAAOvT,EAAI,KAGL,CACd,GAAKyV,EAAS,EAGbhE,EAAIjQ,EAAGe,GADPkT,GAAU,GACYnT,OAChB,CAKN,GAAW,KAHXgR,GAAK,GAIJ,OAAO9R,EAIRiQ,EAAIjQ,EADJd,EAAI6B,EAAU+Q,EAAEhR,GAIhBd,EAAGd,GAAMc,EAAGe,EACZ,CASD,IAFAmT,EAAW,GAHXtT,EAAIqT,GAGY,EAERC,EAAQpC,KAEfjM,EAAIqO,EAAQ,GACHpC,KACRqC,EAAKnU,EAAGe,EAAQ8E,EAAE/E,KAClBsT,EAAKpU,EAAGe,EAAQmT,EAAMpT,KAGN+S,GAAQM,IAASA,IAAOC,GAAMwF,GAAiBzF,MAC9DD,GAAS,IAIXC,EAAKnU,EAAGe,EAAQmT,EAAMpT,IACZmP,GAAK4D,GAAQM,IAAUA,IAAOlE,GAAK2J,GAAiBzF,KAE7DnU,EAAGe,EAAQH,EAAEE,GAAYqT,EAMzBD,EAAW,GAHXtT,EAAIsT,GAGY,EAOlBlU,EAAGe,EAAQH,EAAEE,GAAYmP,CACzB,CACF,IChHAlT,EAAAkd,GAAA,WCiBA,SAAmBzb,EAAGyG,EAAOjF,EAAGc,EAAQC,GACvC,IAAI0T,EACAzV,EACAwG,EACAkP,EACAC,EACAzS,EACAoT,EACApW,EAEJ,GAAKV,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAWR,GARKiF,EAAQ,IAEZlE,IAAWvC,EAAE,IADbsC,IAAW,IAIZ6T,GADAD,EAAK3T,IACOvC,EAAE,GAAGsC,EACjB9B,EAAK0V,EAAK5T,EAELA,EAAS,EAAI,CAIjB,IAAM5B,EAAI,EAAGA,EAAIV,EAAGU,IAInB,GAHAgD,EAAIlC,EAAGhB,GAGF6U,GAAQ3R,GAAM,CAIlB,IAHAsD,EAAKxG,EAGGwG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG1E,GAChB0E,GAAM1E,EAEPd,EAAG2U,GAAOzS,CACd,KAAU,CAKN,IAJAuS,EAAMqF,GAAiB5X,GACvBsD,EAAKxG,EAAK8B,EAGF0E,GAAMkP,OACbY,EAAItV,EAAGwF,KACGtD,IAAOuS,GAAOa,IAAMpT,IAA8B,IAAzB4X,GAAiBxE,KAIpDtV,EAAGwF,EAAG1E,GAAWwU,EACjB9P,GAAM1E,EAEPd,EAAGwF,EAAG1E,GAAWoB,EACjBlD,GAAM8B,CACN,CAEF,OAAOd,CACP,CAID,IAAMd,EAAI,EAAGA,EAAIV,EAAGU,IAInB,GAHAgD,EAAIlC,EAAGhB,GAGF6U,GAAQ3R,GAAM,CAIlB,IAHAsD,EAAKxG,EAGGwG,EAAKmP,GACZ3U,EAAGwF,GAAOxF,EAAGwF,EAAG1E,GAChB0E,GAAM1E,EAEPd,EAAG2U,GAAOzS,CACb,KAAS,CAKN,IAJAuS,EAAMqF,GAAiB5X,GACvBsD,EAAKxG,EAAK8B,EAGF0E,GAAMkP,OACbY,EAAItV,EAAGwF,KACGtD,IAAOuS,GAAOa,IAAMpT,IAA8B,IAAzB4X,GAAiBxE,KAIpDtV,EAAGwF,EAAG1E,GAAWwU,EACjB9P,GAAM1E,EAEPd,EAAGwF,EAAG1E,GAAWoB,EACjBlD,GAAM8B,CACN,CAEF,OAAOd,CACR,sCC/GIgV,GAAQC,GAAK1G,OA+BjB,SAAS2L,GAAS1b,EAAGyG,EAAOjF,EAAGc,GAC9B,IAAIC,EACA0T,EACAU,EACAjT,EACAoT,EACApW,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAWR,IARKiF,EAAQ,IACZnE,IAAW,GAGXC,EADID,EAAS,GACH,EAAEtC,GAAKsC,EAER,EAEJ5B,EAAI,EAAGA,EAAI8V,GAAO9V,IAEvB,IAAM0B,EADNuU,EAAMF,GAAM/V,GACG0B,EAAIpC,EAAGoC,IAIrB,GAHAsB,EAAIlC,EAAGe,EAAQH,EAAEE,IAGZ+S,GAAQ3R,GAAb,CAKA,IADAuS,EAAMqF,GAAiB5X,GACjB2D,EAAIjF,EAAGiF,GAAKsP,OACjBG,EAAItV,EAAGe,GAAS8E,EAAEsP,GAAKrU,KACboB,IAAOuS,GAAOa,IAAMpT,GAFR2D,GAAKsP,EAK3BnV,EAAGe,EAAQ8E,EAAE/E,GAAYwU,EAE1BtV,EAAGe,EAAQ8E,EAAE/E,GAAYoB,CAVxB,CAaH,OAAOlC,CACR,CC3EA,IAAIgV,GAAQC,GAAK1G,OCwBjB,SAAS4L,GAAS3b,EAAGwB,EAAGc,GACvB,IAAIE,EACAhC,EACAkD,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAG,GASX,IANChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACN7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,GACPiR,EAAI9F,EAAkBnJ,EAAMkB,GAE3B/D,EADI8C,EAAKD,IAASC,EAAKiB,GACnBiI,EAAkBhM,EAAIgM,EAAkBA,EAAkBnJ,EAAIiP,GAAM/N,IAEpEiI,EAAkBhM,EAAIgM,EAAkBA,EAAkBjI,EAAE+N,GAAMjP,IAEvEA,EAAMiP,EACNjR,GAAM8B,EAEP,OAAOqJ,EAAkBnJ,EAAM7C,EAChC,CC/BA,SAASgc,GAAS3b,EAAGwB,EAAGc,EAAQC,GAC/B,IAAIC,EACAhC,EACAkD,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAGe,GAKX,IAHA/B,EAAK+B,EACLC,EAAM,EACN7C,EAAI,EACEe,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,GACPiR,EAAI9F,EAAkBnJ,EAAMkB,GAE3B/D,EADI8C,EAAKD,IAASC,EAAKiB,GACnBiI,EAAkBhM,EAAIgM,EAAkBA,EAAkBnJ,EAAIiP,GAAM/N,IAEpEiI,EAAkBhM,EAAIgM,EAAkBA,EAAkBjI,EAAE+N,GAAMjP,IAEvEA,EAAMiP,EACNjR,GAAM8B,EAEP,OAAOqJ,EAAkBnJ,EAAM7C,EAChC,CCxCA,SAASic,GAAM5b,EAAGwB,EAAGc,GACpB,OAAOqZ,GAAS3b,EAAGwB,EAAGc,EACvB,CCOA,SAASuZ,GAAU7b,EAAGwB,EAAGc,GACxB,IAAIE,EACAgQ,EACAhS,EACAiS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAG,GAUX,IAPChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAENE,EAAM,EACNgQ,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,GACPiR,EAAI9F,EAAkBnJ,EAAIkB,GAEzB/D,EADI8C,EAAKD,IAASC,EAAKiB,GACnBiI,EAAkBA,EAAkBnJ,EAAIiP,GAAM/N,GAE9CiI,EAAkBA,EAAkBjI,EAAE+N,GAAMjP,GAEjDA,EAAMiP,EACNA,EAAI9F,EAAkB8G,EAAG9S,GAExB+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GACjBgM,EAAkBA,EAAkB8G,EAAGhB,GAAM9R,GAE7CgM,EAAkBA,EAAkBhM,EAAE8R,GAAMgB,GAElDA,EAAKhB,EACLe,EAAM7G,EAAkB6G,EAAIE,GAC5BlS,GAAM8B,EAEP,OAAOqJ,EAAkBnJ,EAAMmJ,EAAkB8G,EAAGD,GACrD,CCtDA,SAASsJ,GAAS9b,EAAGwB,EAAGc,GACvB,IAAIE,EACAhC,EACAE,EAGJ,GADA8B,EAAM,EACDxC,GAAK,EACT,OAAOwC,EAER,GAAW,IAANxC,GAAsB,IAAXsC,EACf,OAAOd,EAAG,GAOX,IAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEA5B,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,EAAMmJ,EAAkBnJ,EAAMhB,EAAGhB,IACjCA,GAAM8B,EAEP,OAAOE,CACR,CCrCAjE,EAAAmd,GAAA,WNgCA,SAAkB1b,EAAGyG,EAAOjF,EAAGc,EAAQC,GACtC,IAAI0T,EACAU,EACAjT,EACAoT,EACApW,EACA0B,EACAiF,EAEJ,GAAKrH,GAAK,GAAe,IAAVyG,EACd,OAAOjF,EAOR,IAJKiF,EAAQ,IAEZlE,IAAWvC,EAAE,IADbsC,IAAW,IAGN5B,EAAI,EAAGA,EAAI8V,GAAO9V,IAEvB,IAAM0B,EADNuU,EAAMF,GAAM/V,GACG0B,EAAIpC,EAAGoC,IAIrB,GAHAsB,EAAIlC,EAAGe,EAAQH,EAAEE,IAGZ+S,GAAQ3R,GAAb,CAKA,IADAuS,EAAMqF,GAAiB5X,GACjB2D,EAAIjF,EAAGiF,GAAKsP,OACjBG,EAAItV,EAAGe,GAAS8E,EAAEsP,GAAKrU,KACboB,IAAOuS,GAAOa,IAAMpT,GAFR2D,GAAKsP,EAK3BnV,EAAGe,EAAQ8E,EAAE/E,GAAYwU,EAE1BtV,EAAGe,EAAQ8E,EAAE/E,GAAYoB,CAVxB,CAaH,OAAOlC,CACR,IOvEAjD,EAAAod,GAAA,UAAA5a,ICAAxC,EAAAqd,GAAA,WCeA,SAAe5b,EAAGwB,EAAGc,EAAQC,GAC5B,OAAOoZ,GAAS3b,EAAGwB,EAAGc,EAAQC,EAC/B,ICjBAhE,EAAAsd,GAAA,WC0BA,SAAmB7b,EAAGwB,EAAGc,EAAQC,GAChC,IAAIC,EACAgQ,EACAhS,EACAiS,EACAC,EACAhP,EACA+N,EACA9R,EACAe,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAGe,GAMX,IAJA/B,EAAK+B,EACLC,EAAM,EACNgQ,EAAM,EACNC,EAAK,EACC/R,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,GACPiR,EAAI9F,EAAkBnJ,EAAIkB,GAEzB/D,EADI8C,EAAKD,IAASC,EAAKiB,GACnBiI,EAAkBA,EAAkBnJ,EAAIiP,GAAM/N,GAE9CiI,EAAkBA,EAAkBjI,EAAE+N,GAAMjP,GAEjDA,EAAMiP,EACNA,EAAI9F,EAAkB8G,EAAG9S,GAExB+S,EADIjQ,EAAKgQ,IAAQhQ,EAAK9C,GACjBgM,EAAkBA,EAAkB8G,EAAGhB,GAAM9R,GAE7CgM,EAAkBA,EAAkBhM,EAAE8R,GAAMgB,GAElDA,EAAKhB,EACLe,EAAM7G,EAAkB6G,EAAIE,GAC5BlS,GAAM8B,EAEP,OAAOqJ,EAAkBnJ,EAAMmJ,EAAkB8G,EAAGD,GACrD,ICnEAjU,EAAAud,GAAA,WCeA,SAAkB9b,EAAGwB,EAAGc,EAAQC,GAC/B,IAAIC,EACAhC,EACAE,EAGJ,GADA8B,EAAM,EACDxC,GAAK,EACT,OAAOwC,EAER,GAAW,IAANxC,GAAsB,IAAXsC,EACf,OAAOd,EAAGe,GAGX,IADA/B,EAAK+B,EACC7B,EAAI,EAAGA,EAAIV,EAAGU,IACnB8B,EAAMmJ,EAAkBnJ,EAAMhB,EAAGhB,IACjCA,GAAM8B,EAEP,OAAOE,CACR,ICjCA,IAAIoQ,GAAY,IA8BhB,SAASmJ,GAAQ/b,EAAGwB,EAAGc,EAAQC,GAC9B,IAAI/B,EACAsS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3Q,EACAT,EACAqR,EACA5S,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAGe,GAGX,GADA/B,EAAK+B,EACAvC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,EAAI0J,EAAkB1J,EAAIT,EAAGhB,IAC7BA,GAAM8B,EAEP,OAAOL,CACP,CACD,GAAKjC,GAAK4S,GAAY,CAarB,IAXAE,EAAKtR,EAAGhB,GACRuS,EAAKvR,EAAGhB,EAAG8B,GACX0Q,EAAKxR,EAAGhB,EAAI,EAAE8B,GACd2Q,EAAKzR,EAAGhB,EAAI,EAAE8B,GACd4Q,EAAK1R,EAAGhB,EAAI,EAAE8B,GACd6Q,EAAK3R,EAAGhB,EAAI,EAAE8B,GACd8Q,EAAK5R,EAAGhB,EAAI,EAAE8B,GACd+Q,EAAK7R,EAAGhB,EAAI,EAAE8B,GACd9B,GAAM,EAAI8B,EAEVI,EAAI1C,EAAI,EACFU,EAAI,EAAGA,EAAIV,EAAE0C,EAAGhC,GAAK,EAC1BoS,EAAKnH,EAAkBmH,EAAKtR,EAAGhB,IAC/BuS,EAAKpH,EAAkBoH,EAAKvR,EAAGhB,EAAG8B,IAClC0Q,EAAKrH,EAAkBqH,EAAKxR,EAAGhB,EAAI,EAAE8B,IACrC2Q,EAAKtH,EAAkBsH,EAAKzR,EAAGhB,EAAI,EAAE8B,IACrC4Q,EAAKvH,EAAkBuH,EAAK1R,EAAGhB,EAAI,EAAE8B,IACrC6Q,EAAKxH,EAAkBwH,EAAK3R,EAAGhB,EAAI,EAAE8B,IACrC8Q,EAAKzH,EAAkByH,EAAK5R,EAAGhB,EAAI,EAAE8B,IACrC+Q,EAAK1H,EAAkB0H,EAAK7R,EAAGhB,EAAI,EAAE8B,IACrC9B,GAAM,EAAI8B,EAMX,IAHAL,EAAI0J,EAAkBA,EAAkBA,EAAiBmH,EAAGC,GAAMpH,EAAiBqH,EAAGC,IAAQtH,EAAkBA,EAAiBuH,EAAGC,GAAMxH,EAAiByH,EAAGC,KAGrJ3S,EAAIV,EAAGU,IACfuB,EAAI0J,EAAkB1J,EAAIT,EAAGhB,IAC7BA,GAAM8B,EAEP,OAAOL,CACP,CAID,OAFAqR,EAAIC,GAAOvT,EAAE,GAEN2L,EAAkBoQ,GADzBzI,GAAKA,EAAI,EAC2B9R,EAAGc,EAAQ9B,GAAOub,GAAQ/b,EAAEsT,EAAG9R,EAAGc,EAAQ9B,EAAI8S,EAAEhR,GACrF,CC3EA,SAASyZ,GAAQ/b,EAAGwB,EAAGc,GACtB,IAAI9B,EACAyB,EACAvB,EAEJ,GAAKV,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXsC,EACf,OAAOd,EAAG,GAOX,GAJChB,EADI8B,EAAS,GACP,EAAEtC,GAAKsC,EAER,EAEDtC,EAAI,EAAI,CAGZ,IADAiC,EAAI,EACEvB,EAAI,EAAGA,EAAIV,EAAGU,IACnBuB,EAAI0J,EAAkB1J,EAAIT,EAAGhB,IAC7BA,GAAM8B,EAEP,OAAOL,CACP,CACD,OAAOO,GAAKxC,EAAGwB,EAAGc,EAAQ9B,EAC3B,CClDAjC,EAAAwd,GAAA,UAAAhb,ICOA,IAAAtB,GAAA,CAAA,EAUAlB,EAAAkB,GAAA,OAAA2S,IAUA7T,EAAAkB,GAAA,UAAA6S,IAUA/T,EAAAkB,GAAA,aAAA4S,IAUA9T,EAAAkB,GAAA,cAAA8S,IAUAhU,EAAAkB,GAAA,aAAAkT,IAUApU,EAAAkB,GAAA,YAAAoT,IAUAtU,EAAAkB,GAAA,UAAA+T,IAUAjV,EAAAkB,GAAA,SAAAiU,IAUAnV,EAAAkB,GAAA,YAAAgU,IAUAlV,EAAAkB,GAAA,aAAAkU,IAUApV,EAAAkB,GAAA,YAAAmU,IAUArV,EAAAkB,GAAA,WAAAoU,IAUAtV,EAAAkB,GAAA,QAAA8G,IAUAhI,EAAAkB,GAAA,WAAAwU,IAUA1V,EAAAkB,GAAA,cAAAsU,IAUAxV,EAAAkB,GAAA,WAAA6U,IAUA/V,EAAAkB,GAAA,cAAAyU,IAUA3V,EAAAkB,GAAA,eAAA8U,IAUAhW,EAAAkB,GAAA,cAAA+U,IAUAjW,EAAAkB,GAAA,aAAAiV,IAUAnW,EAAAkB,GAAA,UAAAmV,IAUArW,EAAAkB,GAAA,aAAAkV,IAUApW,EAAAkB,GAAA,cAAAoV,IAUAtW,EAAAkB,GAAA,aAAAqV,IAUAvW,EAAAkB,GAAA,YAAAsV,IAUAxW,EAAAkB,GAAA,OAAAuV,IAUAzW,EAAAkB,GAAA,WAAAyV,IAUA3W,EAAAkB,GAAA,aAAAwV,IAUA1W,EAAAkB,GAAA,eAAA0V,IAUA5W,EAAAkB,GAAA,WAAA6V,IAUA/W,EAAAkB,GAAA,cAAA8V,IAUAhX,EAAAkB,GAAA,aAAA2V,IAUA7W,EAAAkB,GAAA,WAAA+V,IAUAjX,EAAAkB,GAAA,YAAAuW,IAUAzX,EAAAkB,GAAA,WAAAiX,IAUAnY,EAAAkB,GAAA,UAAAmX,IAUArY,EAAAkB,GAAA,WAAAoX,IAUAtY,EAAAkB,GAAA,UAAAsX,IAUAxY,EAAAkB,GAAA,QAAAwX,IAUA1Y,EAAAkB,GAAA,WAAAyX,IAUA3Y,EAAAkB,GAAA,UAAAuX,IAUAzY,EAAAkB,GAAA,OAAA2X,IAUA7Y,EAAAkB,GAAA,UAAA0X,IAUA5Y,EAAAkB,GAAA,WAAA4X,IAUA9Y,EAAAkB,GAAA,UAAA6X,IAUA/Y,EAAAkB,GAAA,SAAA8X,IAUAhZ,EAAAkB,GAAA,OAAA+X,IAUAjZ,EAAAkB,GAAA,UAAAiY,IAUAnZ,EAAAkB,GAAA,aAAAgY,IAUAlZ,EAAAkB,GAAA,cAAAkY,IAUApZ,EAAAkB,GAAA,aAAAmY,IAUArZ,EAAAkB,GAAA,YAAAoY,IAUAtZ,EAAAkB,GAAA,UAAAqY,IAUAvZ,EAAAkB,GAAA,SAAAuY,IAUAzZ,EAAAkB,GAAA,YAAAsY,IAUAxZ,EAAAkB,GAAA,aAAAwY,IAUA1Z,EAAAkB,GAAA,YAAAyY,IAUA3Z,EAAAkB,GAAA,WAAA0Y,IAUA5Z,EAAAkB,GAAA,QAAA2Y,IAUA7Z,EAAAkB,GAAA,UAAA6Y,IAUA/Z,EAAAkB,GAAA,eCjlBA,SAAsBO,EAAGwB,EAAGrB,EAASgF,EAAKgP,GACzC,IAAI3R,EACAhC,EACA4T,EACA1Q,EACA+N,EACA9R,EACA2T,EACA5S,EAaJ,GAVCF,EADIL,EAAU,GACR,EAAEH,GAAKG,EAER,EAGLiU,EADID,EAAY,GACVA,EAED,EAEN3R,EAAM,EACDxC,GAAK,EAGT,OAFAmF,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,EAER,GAAW,IAANnF,GAAuB,IAAZG,EACf,OAAK6T,GAAOxS,EAAGhB,KACd2E,EAAKiP,GAAO5R,EACZ2C,EAAKiP,EAAGD,GAAc,EACfhP,IAERA,EAAKiP,GAAO5S,EAAGhB,GACf2E,EAAKiP,EAAGD,GAAc,EACfhP,GAIR,IAFAxF,EAAI,EACJ2T,EAAI,EACE5S,EAAI,EAAGA,EAAIV,EAAGU,IACnBgD,EAAIlC,EAAGhB,IACa,IAAfwT,GAAOtQ,KACX+N,EAAIjP,EAAMkB,EACLjB,EAAKD,IAASC,EAAKiB,GACvB/D,GAAM6C,EAAIiP,EAAK/N,EAEf/D,GAAM+D,EAAE+N,EAAKjP,EAEdA,EAAMiP,EACN6B,GAAK,GAEN9S,GAAML,EAIP,OAFAgF,EAAKiP,GAAO5R,EAAM7C,EAClBwF,EAAKiP,EAAGD,GAAcb,EACfnO,CACR,IDoiBA5G,EAAAkB,GAAA,UAAAkZ,IAUApa,EAAAkB,GAAA,aAAAiZ,IAUAna,EAAAkB,GAAA,cAAAmZ,IAUAra,EAAAkB,GAAA,aAAAoZ,IAUAta,EAAAkB,GAAA,YAAAqZ,IAUAva,EAAAkB,GAAA,OAAAsZ,IAUAxa,EAAAkB,GAAA,WAAAuZ,IAUAza,EAAAkB,GAAA,YAAAwZ,IAUA1a,EAAAkB,GAAA,WAAAyZ,IAUA3a,EAAAkB,GAAA,UAAA0Z,IAUA5a,EAAAkB,GAAA,WAAA2Z,IAUA7a,EAAAkB,GAAA,UAAA4Z,IAUA9a,EAAAkB,GAAA,OAAA8Z,IAUAhb,EAAAkB,GAAA,UAAA6Z,IAUA/a,EAAAkB,GAAA,WAAA+Z,IAUAjb,EAAAkB,GAAA,UAAAga,IAUAlb,EAAAkB,GAAA,SAAAia,IAUAnb,EAAAkB,GAAA,OAAAka,IAUApb,EAAAkB,GAAA,UAAAoa,IAUAtb,EAAAkB,GAAA,aAAAma,IAUArb,EAAAkB,GAAA,cAAAqa,IAUAvb,EAAAkB,GAAA,aAAAsa,IAUAxb,EAAAkB,GAAA,YAAAua,IAUAzb,EAAAkB,GAAA,UAAAwa,IAUA1b,EAAAkB,GAAA,SAAA0a,IAUA5b,EAAAkB,GAAA,YAAAya,IAUA3b,EAAAkB,GAAA,aAAA2a,IAUA7b,EAAAkB,GAAA,YAAA4a,IAUA9b,EAAAkB,GAAA,WAAA6a,IAUA/b,EAAAkB,GAAA,YAAA+a,IAUAjc,EAAAkB,GAAA,cAAA8a,IAUAhc,EAAAkB,GAAA,YAAAib,IAUAnc,EAAAkB,GAAA,cAAAgb,IAUAlc,EAAAkB,GAAA,SAAAmb,IAUArc,EAAAkB,GAAA,WAAAkb,IAUApc,EAAAkB,GAAA,QAAA+M,IAUAjO,EAAAkB,GAAA,UAAAqb,IAUAvc,EAAAkB,GAAA,aAAAob,IAUAtc,EAAAkB,GAAA,cAAAsb,IAUAxc,EAAAkB,GAAA,aAAAub,IAUAzc,EAAAkB,GAAA,YAAAwb,IAUA1c,EAAAkB,GAAA,OAAAyb,IAUA3c,EAAAkB,GAAA,WAAA0b,IAUA5c,EAAAkB,GAAA,YAAA4b,IAUA9c,EAAAkB,GAAA,WAAA8b,IAUAhd,EAAAkB,GAAA,UAAA+b,IAUAjd,EAAAkB,GAAA,WAAAgc,IAUAld,EAAAkB,GAAA,UAAAic,IAUAnd,EAAAkB,GAAA,OAAAmc,IAUArd,EAAAkB,GAAA,UAAAkc,IAUApd,EAAAkB,GAAA,WAAAoc,IAUAtd,EAAAkB,GAAA,UAAAqc,IAUAvd,EAAAkB,GAAA,SAAAsc,IEpnCA,IAAAtc,GAAA,CAAA,ECmBA,SAASmL,GAAMpJ,EAAGC,GACjB,IAAIua,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAMJ,GAJAH,EAAOhL,EAAe5P,GACtB8a,EAAOlL,EAAe3P,GACtB4a,EAAOD,GAAoB,IAAZ5a,EAAEgb,OAAoC,IAArBhb,EAAEkP,QAAQX,OAC1CwM,EAAOD,GAAoB,IAAZ7a,EAAE+a,OAAoC,IAArB/a,EAAEiP,QAAQX,OACrCsM,EAEJJ,IADAD,EAASS,GAAgBjb,EAAEgJ,QACGkS,GAAgBlb,EAAEgJ,UAC1C,KAAc,IAAT4R,IAAkBO,GAAcnb,GAI3C,MAAM,IAAI8F,UAAWC,EAAQ,kHAAmH/F,IAFhJya,IADAD,EAASS,GAAgBjb,KACKkb,GAAgBlb,EAG9C,CACD,GAAK+a,EAEJJ,IADAD,EAASO,GAAgBhb,EAAE+I,QACGkS,GAAgBjb,EAAE+I,UAC1C,KAAc,IAAT8R,IAAkBK,GAAclb,GAI3C,MAAM,IAAI6F,UAAWC,EAAQ,mHAAoH9F,IAFjJ0a,IADAD,EAASO,GAAgBhb,KACKib,GAAgBjb,EAG9C,CACD,GAAKD,EAAEuO,SAAWtO,EAAEsO,OACnB,MAAM,IAAIvI,WAAYD,EAAQ,+GAAgH/F,EAAEuO,OAAQtO,EAAEsO,SAE3J,OAAKsM,GAAQE,EACPP,GAAUE,EACP/Y,GAAM3B,EAAEuO,OAAQvO,EAAEgJ,KAAMhJ,EAAEkP,QAAS,GAAKlP,EAAEe,OAAQd,EAAE+I,KAAM/I,EAAEiP,QAAS,GAAKjP,EAAEc,QAE/E0Z,GAAUE,EACP9P,GAAM7K,EAAEuO,OAAQvO,EAAEgJ,KAAMhJ,EAAEkP,QAAS,GAAKlP,EAAEe,OAAQd,EAAE+I,KAAM/I,EAAEiP,QAAS,GAAKjP,EAAEc,QAE7Ea,GAAK5B,EAAEuO,OAAQvO,EAAEgJ,KAAMhJ,EAAEkP,QAAS,GAAKlP,EAAEe,OAAQd,EAAE+I,KAAM/I,EAAEiP,QAAS,GAAKjP,EAAEc,QAE9E8Z,EACGjZ,GAAK5B,EAAEuO,OAAQvO,EAAEgJ,KAAMhJ,EAAEkP,QAAS,GAAKlP,EAAEe,OAAQd,EAAG,EAAG,GAE1D8a,EACGnZ,GAAK5B,EAAEuO,OAAQvO,EAAG,EAAG,EAAGC,EAAE+I,KAAM/I,EAAEiP,QAAS,GAAKjP,EAAEc,QAEnDa,GAAK5B,EAAEuO,OAAQvO,EAAG,EAAG,EAAGC,EAAG,EAAG,EACtC,CClDA,SAASwJ,GAAOzJ,EAAGC,GAClB,IAAIua,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAMJ,GAJAH,EAAOhL,EAAe5P,GACtB8a,EAAOlL,EAAe3P,GACtB4a,EAAOD,GAAoB,IAAZ5a,EAAEgb,OAAoC,IAArBhb,EAAEkP,QAAQX,OAC1CwM,EAAOD,GAAoB,IAAZ7a,EAAE+a,OAAoC,IAArB/a,EAAEiP,QAAQX,OACrCsM,EAEJJ,IADAD,EAASS,GAAgBjb,EAAEgJ,QACGkS,GAAgBlb,EAAEgJ,UAC1C,KAAc,IAAT4R,IAAkBO,GAAcnb,GAI3C,MAAM,IAAI8F,UAAWC,EAAQ,kHAAmH/F,IAFhJya,IADAD,EAASS,GAAgBjb,KACKkb,GAAgBlb,EAG9C,CACD,GAAK+a,EAEJJ,IADAD,EAASO,GAAgBhb,EAAE+I,QACGkS,GAAgBjb,EAAE+I,UAC1C,KAAc,IAAT8R,IAAkBK,GAAclb,GAI3C,MAAM,IAAI6F,UAAWC,EAAQ,mHAAoH9F,IAFjJ0a,IADAD,EAASO,GAAgBhb,KACKib,GAAgBjb,EAG9C,CACD,GAAKD,EAAEuO,SAAWtO,EAAEsO,OACnB,MAAM,IAAIvI,WAAYD,EAAQ,+GAAgH/F,EAAEuO,OAAQtO,EAAEsO,SAE3J,OAAKsM,GAAQE,EACPP,GAAUE,GACdvU,GAAOnG,EAAEuO,OAAQvO,EAAEgJ,KAAMhJ,EAAEkP,QAAS,GAAKlP,EAAEe,OAAQd,EAAE+I,KAAM/I,EAAEiP,QAAS,GAAKjP,EAAEc,QACtEd,GAEHwa,GAAUE,GACdvO,GAAOpM,EAAEuO,OAAQvO,EAAEgJ,KAAMhJ,EAAEkP,QAAS,GAAKlP,EAAEe,OAAQd,EAAE+I,KAAM/I,EAAEiP,QAAS,GAAKjP,EAAEc,QACtEd,IAERmb,GAAMpb,EAAEuO,OAAQvO,EAAEgJ,KAAMhJ,EAAEkP,QAAS,GAAKlP,EAAEe,OAAQd,EAAE+I,KAAM/I,EAAEiP,QAAS,GAAKjP,EAAEc,QACrEd,GAEH4a,GACJO,GAAMpb,EAAEuO,OAAQvO,EAAEgJ,KAAMhJ,EAAEkP,QAAS,GAAKlP,EAAEe,OAAQd,EAAG,EAAG,GACjDA,GAEH8a,GACJK,GAAMpb,EAAEuO,OAAQvO,EAAG,EAAG,EAAGC,EAAE+I,KAAM/I,EAAEiP,QAAS,GAAKjP,EAAEc,QAC5Cd,IAERmb,GAAMpb,EAAEuO,OAAQvO,EAAG,EAAG,EAAGC,EAAG,EAAG,GACxBA,EACR,CC9CA,SAAS4K,GAAM7K,EAAGC,GACjB,IAAIuN,EACAC,EACAC,EACAC,EACAC,EACAC,EACAlK,EACAlE,EACAqO,EACAC,EACAC,EACAC,EACAC,EACAC,EACAjM,EACAhD,EAEJ,IAAMmc,GAAsBrb,GAC3B,MAAM,IAAI8F,UAAWC,EAAQ,uHAAwH/F,IAEtJ,IAAMqb,GAAsBpb,GAC3B,MAAM,IAAI6F,UAAWC,EAAQ,wHAAyH9F,IAWvJ,GARA6N,EAAKO,EAAqBrO,GAC1B+N,EAAKM,EAAqBpO,GAG1BwN,EAAMK,EAAGQ,MACTZ,EAAMK,EAAGO,MAGJb,EAAIc,OAAS,EACjB,MAAM,IAAIzI,UAAWC,EAAQ,uEAE9B,GAAK2H,EAAIa,OAAS,EACjB,MAAM,IAAIzI,UAAWC,EAAQ,wEAG9B,GAAKyI,UAAUD,OAAS,GAEvB,IAAME,EADNjB,EAAMgB,UAAW,IAEhB,MAAM,IAAI1I,UAAWC,EAAQ,4EAA6EyH,SAG3GA,GAAO,EAKR,GAFAU,EAAKQ,EAAKjB,EAAIc,OAAQb,EAAIa,QAAW,GAEvB,KADdf,EAAMmB,EAAgBnB,EAAKU,IAE1B,MAAM,IAAIlI,WAAYD,EAAQ,2FAA4FmI,GAAK,EAAGM,UAAW,KAI9I,GADAL,EAAIV,EAAKD,GACJE,EAAKF,KAAUW,EACnB,MAAM,IAAInI,WAAYD,EAAQ,qIAAsI,IAAKyH,EAAKW,EAAG,IAAKX,EAAKE,EAAKF,KAGjM,IACC/N,EAAMmP,EAAsB,CAAEd,EAAIC,GAClC,CAAC,MAAQc,GACT,MAAM,IAAIC,MAAO/I,EAAQ,sGAAuG,IAAK0H,EAAI9N,KAAM,KAAO,IAAK+N,EAAI/N,KAAM,MACrK,CAcD,GAbAmO,EAAKrO,EAAK,GACVsO,EAAKtO,EAAK,GAGVkO,EAAMoB,EAASjB,EAAGQ,MAAOd,GAGzB7J,EAAMqL,EAAOrB,EAAK,CACjBsB,MAASnB,EAAGmB,MACZhK,MAAS6I,EAAG7I,QAIO,IAAf0I,EAAIY,OAGR,OAFArM,EAAI+D,GAAMkI,EAAGL,EAAG9E,KAAM8E,EAAGoB,QAAQ,GAAIpB,EAAG/M,OAAQgN,EAAG/E,KAAM+E,EAAGmB,QAAQ,GAAInB,EAAGhN,QAC3E4C,EAAIwL,KAAMjN,GACHyB,EAOR,IAJAiK,EAAMwB,EAActB,EAAI,CAAEN,IAC1BK,EAAMuB,EAAcrB,EAAI,CAAEP,IAGpBtO,EAAI,EAAGA,EAAImQ,EAAO1B,GAAOzO,IAC9B8O,EAAKJ,EAAI0B,OAAOrN,MAChBgM,EAAKJ,EAAIyB,OAAOrN,MAChBC,EAAI+D,GAAMkI,EAAGH,EAAGhF,KAAMgF,EAAGkB,QAAQ,GAAIlB,EAAGjN,OAAQkN,EAAGjF,KAAMiF,EAAGiB,QAAQ,GAAIjB,EAAGlN,QAC3E4C,EAAIwL,KAAMjQ,EAAGgD,GAEd,OAAOyB,CACR,CHpHA5G,EAAAkB,GAAA,OAAAgI,IIcG,IAACmG,GAAQmD,GAAStJ,GAAM,WCxB3BhI,GAAA,CAAA,EAUAlB,EAAAkB,GAAA,OAAAgI,IAUAlJ,EAAAkB,GAAA,OAAA0D,IAUA5E,EAAAkB,GAAA,QAAAkI,IAUApJ,EAAAkB,GAAA,MAAAqd,IAUAve,EAAAkB,GAAA,OAAAmL,IAUArM,EAAAkB,GAAA,QAAAwL,IAUA1M,EAAAkB,GAAA,OAAA4M,IAUA9N,EAAAkB,GAAA,QAAAmO"}