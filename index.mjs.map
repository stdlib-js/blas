{"version":3,"file":"index.mjs","sources":["../base/ddot/lib/ddot.js","../base/ddot/lib/ndarray.js","../base/ddot/lib/main.js","../base/dswap/lib/ndarray.js","../base/dswap/lib/main.js","../base/dswap/lib/dswap.js","../base/gcopy/lib/accessors.js","../base/gdot/lib/main.js","../base/gdot/lib/ndarray.js","../base/gdot/lib/index.js","../base/gnrm2/lib/main.js","../base/gnrm2/lib/gnrm2.js","../base/gnrm2/lib/ndarray.js","../base/gswap/lib/accessors.js","../base/gswap/lib/main.js","../base/gswap/lib/ndarray.js","../base/gswap/lib/index.js","../base/sdot/lib/sdot.js","../base/sdot/lib/ndarray.js","../base/sdot/lib/main.js","../base/sswap/lib/ndarray.js","../base/sswap/lib/main.js","../base/sswap/lib/sswap.js","../base/lib/index.js","../base/ccopy/lib/main.js","../base/ccopy/lib/ccopy.js","../base/ccopy/lib/ndarray.js","../base/cswap/lib/main.js","../base/cswap/lib/cswap.js","../base/cswap/lib/ndarray.js","../base/dasum/lib/main.js","../base/dasum/lib/dasum.js","../base/dasum/lib/ndarray.js","../base/daxpy/lib/main.js","../base/daxpy/lib/daxpy.js","../base/daxpy/lib/ndarray.js","../base/dcopy/lib/main.js","../base/dcopy/lib/dcopy.js","../base/dcopy/lib/ndarray.js","../base/dnrm2/lib/main.js","../base/dnrm2/lib/dnrm2.js","../base/dnrm2/lib/ndarray.js","../base/dscal/lib/main.js","../base/dscal/lib/dscal.js","../base/dscal/lib/ndarray.js","../base/dsdot/lib/main.js","../base/dsdot/lib/dsdot.js","../base/dsdot/lib/ndarray.js","../base/gasum/lib/index.js","../base/gasum/lib/main.js","../base/gasum/lib/ndarray.js","../base/gaxpy/lib/index.js","../base/gaxpy/lib/main.js","../base/gaxpy/lib/ndarray.js","../base/gcopy/lib/index.js","../base/gcopy/lib/main.js","../base/gcopy/lib/ndarray.js","../base/gnrm2/lib/index.js","../base/gscal/lib/index.js","../base/gscal/lib/main.js","../base/gscal/lib/ndarray.js","../base/sasum/lib/main.js","../base/sasum/lib/sasum.js","../base/sasum/lib/ndarray.js","../base/saxpy/lib/main.js","../base/saxpy/lib/saxpy.js","../base/saxpy/lib/ndarray.js","../base/scopy/lib/main.js","../base/scopy/lib/scopy.js","../base/scopy/lib/ndarray.js","../base/sdsdot/lib/main.js","../base/sdsdot/lib/sdsdot.js","../base/sdsdot/lib/ndarray.js","../base/snrm2/lib/main.js","../base/snrm2/lib/snrm2.js","../base/snrm2/lib/ndarray.js","../base/sscal/lib/main.js","../base/sscal/lib/sscal.js","../base/sscal/lib/ndarray.js","../ddot/lib/main.js","../dswap/lib/main.js","../ext/base/dapx/lib/main.js","../ext/base/dapx/lib/dapx.js","../ext/base/dapx/lib/ndarray.js","../ext/base/dapxsumkbn/lib/main.js","../ext/base/dapxsumkbn/lib/dapxsumkbn.js","../ext/base/dapxsumkbn/lib/ndarray.js","../ext/base/dapxsum/lib/main.js","../ext/base/dapxsum/lib/dapxsum.js","../ext/base/dapxsum/lib/ndarray.js","../ext/base/dapxsumkbn2/lib/main.js","../ext/base/dapxsumkbn2/lib/dapxsumkbn2.js","../ext/base/dapxsumkbn2/lib/ndarray.js","../ext/base/dapxsumors/lib/main.js","../ext/base/dapxsumors/lib/dapxsumors.js","../ext/base/dapxsumors/lib/ndarray.js","../ext/base/dapxsumpw/lib/ndarray.js","../ext/base/dapxsumpw/lib/main.js","../ext/base/dapxsumpw/lib/dapxsumpw.js","../ext/base/dasumpw/lib/ndarray.js","../ext/base/dasumpw/lib/main.js","../ext/base/dasumpw/lib/dasumpw.js","../ext/base/dcusumkbn/lib/main.js","../ext/base/dcusumkbn/lib/dcusumkbn.js","../ext/base/dcusumkbn/lib/ndarray.js","../ext/base/dcusum/lib/main.js","../ext/base/dcusum/lib/dcusum.js","../ext/base/dcusum/lib/ndarray.js","../ext/base/dcusumkbn2/lib/main.js","../ext/base/dcusumkbn2/lib/dcusumkbn2.js","../ext/base/dcusumkbn2/lib/ndarray.js","../ext/base/dcusumors/lib/main.js","../ext/base/dcusumors/lib/dcusumors.js","../ext/base/dcusumors/lib/ndarray.js","../ext/base/dcusumpw/lib/ndarray.js","../ext/base/dcusumpw/lib/main.js","../ext/base/dcusumpw/lib/dcusumpw.js","../ext/base/dfill/lib/main.js","../ext/base/dfill/lib/dfill.js","../ext/base/dfill/lib/ndarray.js","../ext/base/dnanasumors/lib/main.js","../ext/base/dnanasumors/lib/dnanasumors.js","../ext/base/dnanasumors/lib/ndarray.js","../ext/base/dnanasum/lib/main.js","../ext/base/dnanasum/lib/dnanasum.js","../ext/base/dnanasum/lib/ndarray.js","../ext/base/dnannsumkbn/lib/main.js","../ext/base/dnannsumkbn/lib/dnannsumkbn.js","../ext/base/dnannsumkbn/lib/ndarray.js","../ext/base/dnannsum/lib/main.js","../ext/base/dnannsum/lib/dnannsum.js","../ext/base/dnannsum/lib/ndarray.js","../ext/base/dnannsumkbn2/lib/main.js","../ext/base/dnannsumkbn2/lib/dnannsumkbn2.js","../ext/base/dnannsumkbn2/lib/ndarray.js","../ext/base/dnannsumors/lib/main.js","../ext/base/dnannsumors/lib/dnannsumors.js","../ext/base/dnannsumors/lib/ndarray.js","../ext/base/dnannsumpw/lib/sumpw.js","../ext/base/dnannsumpw/lib/main.js","../ext/base/dnannsumpw/lib/dnannsumpw.js","../ext/base/dnannsumpw/lib/ndarray.js","../ext/base/dnansumkbn/lib/main.js","../ext/base/dnansumkbn/lib/dnansumkbn.js","../ext/base/dnansumkbn/lib/ndarray.js","../ext/base/dnansum/lib/main.js","../ext/base/dnansum/lib/dnansum.js","../ext/base/dnansum/lib/ndarray.js","../ext/base/dnansumkbn2/lib/main.js","../ext/base/dnansumkbn2/lib/dnansumkbn2.js","../ext/base/dnansumkbn2/lib/ndarray.js","../ext/base/dnansumors/lib/main.js","../ext/base/dnansumors/lib/dnansumors.js","../ext/base/dnansumors/lib/ndarray.js","../ext/base/dnansumpw/lib/ndarray.js","../ext/base/dnansumpw/lib/main.js","../ext/base/dnansumpw/lib/dnansumpw.js","../ext/base/drev/lib/main.js","../ext/base/drev/lib/drev.js","../ext/base/drev/lib/ndarray.js","../ext/base/dsapxsumpw/lib/ndarray.js","../ext/base/dsapxsumpw/lib/main.js","../ext/base/dsapxsumpw/lib/dsapxsumpw.js","../ext/base/dsapxsum/lib/main.js","../ext/base/dsapxsum/lib/dsapxsum.js","../ext/base/dsapxsum/lib/ndarray.js","../ext/base/dsnannsumors/lib/main.js","../ext/base/dsnannsumors/lib/dsnannsumors.js","../ext/base/dsnannsumors/lib/ndarray.js","../ext/base/dsnansumpw/lib/ndarray.js","../ext/base/dsnansumpw/lib/main.js","../ext/base/dsnansumpw/lib/dsnansumpw.js","../ext/base/dsnansum/lib/main.js","../ext/base/dsnansum/lib/dsnansum.js","../ext/base/dsnansum/lib/ndarray.js","../ext/base/dsnansumors/lib/main.js","../ext/base/dsnansumors/lib/dsnansumors.js","../ext/base/dsnansumors/lib/ndarray.js","../ext/base/dsort2hp/lib/main.js","../ext/base/dsort2hp/lib/dsort2hp.js","../ext/base/dsort2hp/lib/ndarray.js","../ext/base/dsort2ins/lib/main.js","../ext/base/dsort2ins/lib/dsort2ins.js","../ext/base/dsort2ins/lib/ndarray.js","../ext/base/dsort2sh/lib/main.js","../ext/base/dsort2sh/lib/dsort2sh.js","../ext/base/dsort2sh/lib/ndarray.js","../ext/base/dsorthp/lib/main.js","../ext/base/dsorthp/lib/dsorthp.js","../ext/base/dsorthp/lib/ndarray.js","../ext/base/dsortins/lib/main.js","../ext/base/dsortins/lib/dsortins.js","../ext/base/dsortins/lib/ndarray.js","../ext/base/dsortsh/lib/main.js","../ext/base/dsortsh/lib/dsortsh.js","../ext/base/dsortsh/lib/ndarray.js","../ext/base/dssumpw/lib/ndarray.js","../ext/base/dssumpw/lib/main.js","../ext/base/dssumpw/lib/dssumpw.js","../ext/base/dssum/lib/main.js","../ext/base/dssum/lib/dssum.js","../ext/base/dssum/lib/ndarray.js","../ext/base/dssumors/lib/main.js","../ext/base/dssumors/lib/dssumors.js","../ext/base/dssumors/lib/ndarray.js","../ext/base/dsumkbn/lib/main.js","../ext/base/dsumkbn/lib/dsumkbn.js","../ext/base/dsumkbn/lib/ndarray.js","../ext/base/dsum/lib/main.js","../ext/base/dsum/lib/dsum.js","../ext/base/dsum/lib/ndarray.js","../ext/base/dsumkbn2/lib/main.js","../ext/base/dsumkbn2/lib/dsumkbn2.js","../ext/base/dsumkbn2/lib/ndarray.js","../ext/base/dsumors/lib/main.js","../ext/base/dsumors/lib/dsumors.js","../ext/base/dsumors/lib/ndarray.js","../ext/base/dsumpw/lib/ndarray.js","../ext/base/dsumpw/lib/main.js","../ext/base/dsumpw/lib/dsumpw.js","../ext/base/gapx/lib/index.js","../ext/base/gapx/lib/main.js","../ext/base/gapx/lib/ndarray.js","../ext/base/gapxsumkbn/lib/index.js","../ext/base/gapxsumkbn/lib/main.js","../ext/base/gapxsumkbn/lib/ndarray.js","../ext/base/gapxsum/lib/index.js","../ext/base/gapxsum/lib/main.js","../ext/base/gapxsum/lib/ndarray.js","../ext/base/gapxsumkbn2/lib/index.js","../ext/base/gapxsumkbn2/lib/main.js","../ext/base/gapxsumkbn2/lib/ndarray.js","../ext/base/gapxsumors/lib/index.js","../ext/base/gapxsumors/lib/main.js","../ext/base/gapxsumors/lib/ndarray.js","../ext/base/gapxsumpw/lib/ndarray.js","../ext/base/gapxsumpw/lib/index.js","../ext/base/gapxsumpw/lib/main.js","../ext/base/gasumpw/lib/ndarray.js","../ext/base/gasumpw/lib/index.js","../ext/base/gasumpw/lib/main.js","../ext/base/gcusumkbn/lib/index.js","../ext/base/gcusumkbn/lib/main.js","../ext/base/gcusumkbn/lib/ndarray.js","../ext/base/gcusum/lib/index.js","../ext/base/gcusum/lib/main.js","../ext/base/gcusum/lib/ndarray.js","../ext/base/gcusumkbn2/lib/index.js","../ext/base/gcusumkbn2/lib/main.js","../ext/base/gcusumkbn2/lib/ndarray.js","../ext/base/gcusumors/lib/index.js","../ext/base/gcusumors/lib/main.js","../ext/base/gcusumors/lib/ndarray.js","../ext/base/gcusumpw/lib/ndarray.js","../ext/base/gcusumpw/lib/index.js","../ext/base/gcusumpw/lib/main.js","../ext/base/gfill/lib/accessors.js","../ext/base/gfill/lib/index.js","../ext/base/gfill/lib/main.js","../ext/base/gfill/lib/ndarray.js","../ext/base/gfill-by/lib/accessors.js","../ext/base/gfill-by/lib/index.js","../ext/base/gfill-by/lib/main.js","../ext/base/gfill-by/lib/ndarray.js","../ext/base/gnansumkbn/lib/index.js","../ext/base/gnansumkbn/lib/main.js","../ext/base/gnansumkbn/lib/ndarray.js","../ext/base/gnansum/lib/index.js","../ext/base/gnansum/lib/main.js","../ext/base/gnansum/lib/ndarray.js","../ext/base/gnansumkbn2/lib/index.js","../ext/base/gnansumkbn2/lib/main.js","../ext/base/gnansumkbn2/lib/ndarray.js","../ext/base/gnansumors/lib/index.js","../ext/base/gnansumors/lib/main.js","../ext/base/gnansumors/lib/ndarray.js","../ext/base/gnansumpw/lib/ndarray.js","../ext/base/gnansumpw/lib/index.js","../ext/base/gnansumpw/lib/main.js","../ext/base/grev/lib/accessors.js","../ext/base/grev/lib/index.js","../ext/base/grev/lib/main.js","../ext/base/grev/lib/ndarray.js","../ext/base/gsort2hp/lib/index.js","../ext/base/gsort2hp/lib/main.js","../ext/base/gsort2hp/lib/ndarray.js","../ext/base/gsort2ins/lib/index.js","../ext/base/gsort2ins/lib/main.js","../ext/base/gsort2ins/lib/ndarray.js","../ext/base/gsort2sh/lib/index.js","../ext/base/gsort2sh/lib/main.js","../ext/base/gsort2sh/lib/ndarray.js","../ext/base/gsorthp/lib/index.js","../ext/base/gsorthp/lib/main.js","../ext/base/gsorthp/lib/ndarray.js","../ext/base/gsortins/lib/index.js","../ext/base/gsortins/lib/main.js","../ext/base/gsortins/lib/ndarray.js","../ext/base/gsortsh/lib/index.js","../ext/base/gsortsh/lib/main.js","../ext/base/gsortsh/lib/ndarray.js","../ext/base/gsumkbn/lib/index.js","../ext/base/gsumkbn/lib/main.js","../ext/base/gsumkbn/lib/ndarray.js","../ext/base/gsum/lib/index.js","../ext/base/gsum/lib/main.js","../ext/base/gsum/lib/ndarray.js","../ext/base/gsumkbn2/lib/index.js","../ext/base/gsumkbn2/lib/main.js","../ext/base/gsumkbn2/lib/ndarray.js","../ext/base/gsumors/lib/index.js","../ext/base/gsumors/lib/main.js","../ext/base/gsumors/lib/ndarray.js","../ext/base/gsumpw/lib/ndarray.js","../ext/base/gsumpw/lib/index.js","../ext/base/gsumpw/lib/main.js","../ext/base/sapx/lib/main.js","../ext/base/sapx/lib/sapx.js","../ext/base/sapx/lib/ndarray.js","../ext/base/sapxsumkbn/lib/main.js","../ext/base/sapxsumkbn/lib/sapxsumkbn.js","../ext/base/sapxsumkbn/lib/ndarray.js","../ext/base/sapxsum/lib/main.js","../ext/base/sapxsum/lib/sapxsum.js","../ext/base/sapxsum/lib/ndarray.js","../ext/base/sapxsumkbn2/lib/main.js","../ext/base/sapxsumkbn2/lib/sapxsumkbn2.js","../ext/base/sapxsumkbn2/lib/ndarray.js","../ext/base/sapxsumors/lib/main.js","../ext/base/sapxsumors/lib/sapxsumors.js","../ext/base/sapxsumors/lib/ndarray.js","../ext/base/sapxsumpw/lib/ndarray.js","../ext/base/sapxsumpw/lib/main.js","../ext/base/sapxsumpw/lib/sapxsumpw.js","../ext/base/sasumpw/lib/ndarray.js","../ext/base/sasumpw/lib/main.js","../ext/base/sasumpw/lib/sasumpw.js","../ext/base/scusumkbn/lib/main.js","../ext/base/scusumkbn/lib/scusumkbn.js","../ext/base/scusumkbn/lib/ndarray.js","../ext/base/scusum/lib/main.js","../ext/base/scusum/lib/scusum.js","../ext/base/scusum/lib/ndarray.js","../ext/base/scusumkbn2/lib/main.js","../ext/base/scusumkbn2/lib/scusumkbn2.js","../ext/base/scusumkbn2/lib/ndarray.js","../ext/base/scusumors/lib/main.js","../ext/base/scusumors/lib/scusumors.js","../ext/base/scusumors/lib/ndarray.js","../ext/base/scusumpw/lib/ndarray.js","../ext/base/scusumpw/lib/main.js","../ext/base/scusumpw/lib/scusumpw.js","../ext/base/sdsapxsumpw/lib/ndarray.js","../ext/base/sdsapxsumpw/lib/main.js","../ext/base/sdsapxsumpw/lib/sdsapxsumpw.js","../ext/base/sdsapxsum/lib/main.js","../ext/base/sdsapxsum/lib/sdsapxsum.js","../ext/base/sdsapxsum/lib/ndarray.js","../ext/base/sdsnansumpw/lib/ndarray.js","../ext/base/sdsnansumpw/lib/main.js","../ext/base/sdsnansumpw/lib/sdsnansumpw.js","../ext/base/sdsnansum/lib/main.js","../ext/base/sdsnansum/lib/sdsnansum.js","../ext/base/sdsnansum/lib/ndarray.js","../ext/base/sdssumpw/lib/ndarray.js","../ext/base/sdssumpw/lib/main.js","../ext/base/sdssumpw/lib/sdssumpw.js","../ext/base/sdssum/lib/main.js","../ext/base/sdssum/lib/sdssum.js","../ext/base/sdssum/lib/ndarray.js","../ext/base/sfill/lib/main.js","../ext/base/sfill/lib/sfill.js","../ext/base/sfill/lib/ndarray.js","../ext/base/snansumkbn/lib/main.js","../ext/base/snansumkbn/lib/snansumkbn.js","../ext/base/snansumkbn/lib/ndarray.js","../ext/base/snansum/lib/main.js","../ext/base/snansum/lib/snansum.js","../ext/base/snansum/lib/ndarray.js","../ext/base/snansumkbn2/lib/main.js","../ext/base/snansumkbn2/lib/snansumkbn2.js","../ext/base/snansumkbn2/lib/ndarray.js","../ext/base/snansumors/lib/main.js","../ext/base/snansumors/lib/snansumors.js","../ext/base/snansumors/lib/ndarray.js","../ext/base/snansumpw/lib/ndarray.js","../ext/base/snansumpw/lib/main.js","../ext/base/snansumpw/lib/snansumpw.js","../ext/base/srev/lib/main.js","../ext/base/srev/lib/srev.js","../ext/base/srev/lib/ndarray.js","../ext/base/ssort2hp/lib/main.js","../ext/base/ssort2hp/lib/ssort2hp.js","../ext/base/ssort2hp/lib/ndarray.js","../ext/base/ssort2ins/lib/main.js","../ext/base/ssort2ins/lib/ssort2ins.js","../ext/base/ssort2ins/lib/ndarray.js","../ext/base/ssort2sh/lib/main.js","../ext/base/ssort2sh/lib/ssort2sh.js","../ext/base/ssort2sh/lib/ndarray.js","../ext/base/ssorthp/lib/main.js","../ext/base/ssorthp/lib/ssorthp.js","../ext/base/ssorthp/lib/ndarray.js","../ext/base/ssortins/lib/main.js","../ext/base/ssortins/lib/ssortins.js","../ext/base/ssortins/lib/ndarray.js","../ext/base/ssortsh/lib/main.js","../ext/base/ssortsh/lib/ssortsh.js","../ext/base/ssortsh/lib/ndarray.js","../ext/base/ssumkbn/lib/main.js","../ext/base/ssumkbn/lib/ssumkbn.js","../ext/base/ssumkbn/lib/ndarray.js","../ext/base/ssum/lib/main.js","../ext/base/ssum/lib/ssum.js","../ext/base/ssum/lib/ndarray.js","../ext/base/ssumkbn2/lib/main.js","../ext/base/ssumkbn2/lib/ssumkbn2.js","../ext/base/ssumkbn2/lib/ndarray.js","../ext/base/ssumors/lib/main.js","../ext/base/ssumors/lib/ssumors.js","../ext/base/ssumors/lib/ndarray.js","../ext/base/ssumpw/lib/ndarray.js","../ext/base/ssumpw/lib/main.js","../ext/base/ssumpw/lib/ssumpw.js","../ext/lib/index.js","../ext/base/lib/index.js","../ext/base/gnannsumkbn/lib/main.js","../gdot/lib/main.js","../gswap/lib/main.js","../sdot/lib/main.js","../sswap/lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {PositiveInteger} N - number of values over which to compute the dot product\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product of `x` and `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = ddot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction ddot( N, x, strideX, y, strideY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += x[ i ] * y[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ i ] * y[ i ] ) + ( x[ i+1 ] * y[ i+1 ] ) + ( x[ i+2 ] * y[ i+2 ] ) + ( x[ i+3 ] * y[ i+3 ] ) + ( x[ i+4 ] * y[ i+4 ] ); // eslint-disable-line max-len\n\t\t}\n\t\treturn dot;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = ( 1-N ) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = ( 1-N ) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += ( x[ ix ] * y[ iy ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ddot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {integer} N - number of values over which to compute the dot product\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product of `x` and `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = ddot( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction ddot( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += ( x[ ix ] * y[ iy ] );\n\t\t\t\tix += 1;\n\t\t\t\tiy += 1;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ ix ] * y[ iy ] ) + ( x[ ix+1 ] * y[ iy+1 ] ) + ( x[ ix+2 ] * y[ iy+2 ] ) + ( x[ ix+3 ] * y[ iy+3 ] ) + ( x[ ix+4 ] * y[ iy+4 ] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn dot;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ddot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar ddot = require( './ddot.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( ddot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = ddot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges two double-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of values to swap\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dswap( x.length, x, 1, 0, y, 1, 0 );\n* // x => <Float64Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = y[ iy ];\n\t\t\t\ty[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = y[ iy ];\n\t\t\ty[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = y[ iy+1 ];\n\t\t\ty[ iy+1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = y[ iy+2 ];\n\t\t\ty[ iy+2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dswap = require( './dswap.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dswap, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges two double-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of values to swap\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dswap( x.length, x, 1, y, 1 );\n* // x => <Float64Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dswap( N, x, strideX, y, strideY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tvar j;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ i ];\n\t\t\t\tx[ i ] = y[ i ];\n\t\t\t\ty[ i ] = tmp;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ i ];\n\t\t\tx[ i ] = y[ i ];\n\t\t\ty[ i ] = tmp;\n\n\t\t\tj = i + 1;\n\t\t\ttmp = x[ j ];\n\t\t\tx[ j ] = y[ j ];\n\t\t\ty[ j ] = tmp;\n\n\t\t\tj += 1;\n\t\t\ttmp = x[ j ];\n\t\t\tx[ j ] = y[ j ];\n\t\t\ty[ j ] = tmp;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Function} x.get - getter\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Object} y - output array object\n* @param {Collection} y.data - output array data\n* @param {Function} y.set - setter\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Object} output array object\n*\n* @example\n* var Complex64Array = require( '@stdlib/array/complex64' );\n* var Complex64 = require( '@stdlib/complex/float32' );\n* var reinterpret64 = require( '@stdlib/strided/base/reinterpret-complex64' );\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var x = {\n*     'data': new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] ),\n*     'setter': setter,\n*     'getter': getter\n* };\n*\n* var y = {\n*     'data': new Complex64Array( [ 5.0, 6.0, 7.0, 8.0 ] ),\n*     'setter': setter,\n*     'getter': getter\n* };\n*\n* gcopy( x.data.length, x, 1, 0, y, 1, 0 );\n*\n* var view = reinterpret64( y.data, 0 );\n* // view => <Float32Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*/\nfunction gcopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar set;\n\tvar get;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache a reference to the element accessors:\n\tget = x.getter;\n\tset = y.setter;\n\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {PositiveInteger} N - number of values over which to compute the dot product\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product of `x` and `y`\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n\n* var z = gdot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction gdot( N, x, strideX, y, strideY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += x[ i ] * y[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[i]*y[i] ) + ( x[i+1]*y[i+1] ) + ( x[i+2]*y[i+2] ) + ( x[i+3]*y[i+3] ) + ( x[i+4]*y[i+4] ); // eslint-disable-line max-len\n\t\t}\n\t\treturn dot;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = ( 1-N ) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = ( 1-N ) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += ( x[ ix ] * y[ iy ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {integer} N - number of values over which to compute the dot product\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product of `x` and `y`\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n\n* var z = gdot( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction gdot( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += ( x[ ix ] * y[ iy ] );\n\t\t\t\tix += 1;\n\t\t\t\tiy += 1;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ix]*y[iy] ) + ( x[ix+1]*y[iy+1] ) + ( x[ix+2]*y[iy+2] ) + ( x[ix+3]*y[iy+3] ) + ( x[ix+4]*y[iy+4] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn dot;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the dot product of vectors `x` and `y`.\n*\n* @module @stdlib/blas/base/gdot\n*\n* @example\n* var gdot = require( '@stdlib/blas/base/gdot' );\n*\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* var z = gdot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*\n*\n* @example\n* var gdot = require( '@stdlib/blas/base/gdot' );\n*\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* var z = gdot.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar gnrm2 = require( './gnrm2.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( gnrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = gnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a vector.\n*\n* @param {PositiveInteger} N - number of values over which to compute the L2-norm\n* @param {NumericArray} x - input array\n* @param {PositiveInteger} stride - stride length\n* @returns {number} L2-norm\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var z = gnrm2( x.length, x, 1 );\n* // returns 3.0\n*/\nfunction gnrm2( N, x, stride ) {\n\tvar scale;\n\tvar ssq;\n\tvar ax;\n\tvar i;\n\n\tif ( N <= 0 || stride <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 ) {\n\t\treturn abs( x[ 0 ] );\n\t}\n\tscale = 0.0;\n\tssq = 1.0;\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tif ( x[ i ] !== 0.0 ) {\n\t\t\tax = abs( x[ i ] );\n\t\t\tif ( scale < ax ) {\n\t\t\t\tssq = 1.0 + ( ssq * pow( scale/ax, 2 ) );\n\t\t\t\tscale = ax;\n\t\t\t} else {\n\t\t\t\tssq += pow( ax/scale, 2 );\n\t\t\t}\n\t\t}\n\t}\n\treturn scale * sqrt( ssq );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a vector.\n*\n* @param {PositiveInteger} N - number of values over which to compute the L2-norm\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} L2-norm\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var z = gnrm2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnrm2( N, x, stride, offset ) {\n\tvar scale;\n\tvar ssq;\n\tvar ax;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 ) {\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tscale = 0.0;\n\tssq = 1.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( x[ ix ] !== 0.0 ) {\n\t\t\tax = abs( x[ ix ] );\n\t\t\tif ( scale < ax ) {\n\t\t\t\tssq = 1.0 + ( ssq * pow( scale/ax, 2 ) );\n\t\t\t\tscale = ax;\n\t\t\t} else {\n\t\t\t\tssq += pow( ax/scale, 2 );\n\t\t\t}\n\t\t}\n\t\tix += stride;\n\t}\n\treturn scale * sqrt( ssq );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Interchanges vectors `x` and `y`.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - first input array object\n* @param {Collection} x.data - first input array data\n* @param {Function} x.get - getter\n* @param {Function} x.set - setter\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Object} y - second input array object\n* @param {Collection} y.data - second input array array\n* @param {Function} y.get - getter\n* @param {Function} y.set - setter\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Object} `y`\n*\n* @example\n* var Complex64Array = require( '@stdlib/array/complex64' );\n* var Complex64 = require( '@stdlib/complex/float32' );\n* var reinterpret64 = require( '@stdlib/strided/base/reinterpret-complex64' );\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var x = {\n*     'data': new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] ),\n*     'setter': setter,\n*     'getter': getter\n* };\n*\n* var y = {\n*     'data': new Complex64Array( [ 5.0, 6.0, 7.0, 8.0 ] ),\n*     'setter': setter,\n*     'getter': getter\n* };\n*\n* gswap( x.data.length, x, 1, 0, y, 1, 0 );\n*\n* var viewX = reinterpret64( x.data, 0 );\n* // viewX => <Float32Array>[ 5.0, 6.0, 7.0, 8.0 ]\n*\n* var viewY = reinterpret64( y.data, 0 );\n* // viewY => <Float32Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*/\nfunction gswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar set;\n\tvar get;\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache a reference to the element accessors:\n\tget = x.getter;\n\tset = y.setter;\n\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = get( xbuf, ix );\n\t\tset( xbuf, ix, get( ybuf, iy ) );\n\t\tset( ybuf, iy, tmp );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array/base/arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges vectors `x` and `y`.\n*\n* @param {PositiveInteger} N - number of values to swap\n* @param {Collection} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Collection} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Collection} `y`\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gswap( x.length, x, 1, y, 1 );\n* // x => [ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction gswap( N, x, strideX, y, strideY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar m;\n\tvar i;\n\tvar j;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessors || oy.accessors ) {\n\t\tif ( strideX < 0 ) {\n\t\t\tix = (1-N) * strideX;\n\t\t} else {\n\t\t\tix = 0;\n\t\t}\n\t\tif ( strideY < 0 ) {\n\t\t\tiy = (1-N) * strideY;\n\t\t} else {\n\t\t\tiy = 0;\n\t\t}\n\t\taccessors( N, ox, strideX, ix, oy, strideY, iy );\n\t\treturn oy.data;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ i ];\n\t\t\t\tx[ i ] = y[ i ];\n\t\t\t\ty[ i ] = tmp;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ i ];\n\t\t\tx[ i ] = y[ i ];\n\t\t\ty[ i ] = tmp;\n\n\t\t\tj = i + 1;\n\t\t\ttmp = x[ j ];\n\t\t\tx[ j ] = y[ j ];\n\t\t\ty[ j ] = tmp;\n\n\t\t\tj += 1;\n\t\t\ttmp = x[ j ];\n\t\t\tx[ j ] = y[ j ];\n\t\t\ty[ j ] = tmp;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array/base/arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges vectors `x` and `y`.\n*\n* @param {PositiveInteger} N - number of values to swap\n* @param {Collection} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Collection} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Collection} `y`\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gswap( x.length, x, 1, 0, y, 1, 0 );\n* // x => [ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction gswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessors || oy.accessors ) {\n\t\taccessors( N, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn oy.data;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = y[ iy ];\n\t\t\t\ty[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = y[ iy ];\n\t\t\ty[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = y[ iy+1 ];\n\t\t\ty[ iy+1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = y[ iy+2 ];\n\t\t\ty[ iy+2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to interchange vectors `x` and `y`.\n*\n* @module @stdlib/blas/base/gswap\n*\n* @example\n* var gswap = require( '@stdlib/blas/base/gswap' );\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gswap( x.length, x, 1, y, 1 );\n* // x => [ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* @example\n* var gswap = require( '@stdlib/blas/base/gswap' );\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gswap.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // x => [ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {PositiveInteger} N - number of values over which to compute the dot product\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product of `x` and `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction sdot( N, x, strideX, y, strideY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = ( 1-N ) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = ( 1-N ) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot = float64ToFloat32( dot + float64ToFloat32( x[ ix ] * y[ iy ] ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {integer} N - number of values over which to compute the dot product\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product of `x` and `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdot( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction sdot( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot = float64ToFloat32( dot + float64ToFloat32( x[ ix ] * y[ iy ] ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sdot = require( './sdot.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sdot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges two single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of values to swap\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float32Array} `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* sswap( x.length, x, 1, 0, y, 1, 0 );\n* // x => <Float32Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction sswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = y[ iy ];\n\t\t\t\ty[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = y[ iy ];\n\t\t\ty[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = y[ iy+1 ];\n\t\t\ty[ iy+1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = y[ iy+2 ];\n\t\t\ty[ iy+2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sswap = require( './sswap.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sswap, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges two single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of values to swap\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* sswap( x.length, x, 1, y, 1 );\n* // x => <Float32Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction sswap( N, x, strideX, y, strideY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tvar j;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ i ];\n\t\t\t\tx[ i ] = y[ i ];\n\t\t\t\ty[ i ] = tmp;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ i ];\n\t\t\tx[ i ] = y[ i ];\n\t\t\ty[ i ] = tmp;\n\n\t\t\tj = i + 1;\n\t\t\ttmp = x[ j ];\n\t\t\tx[ j ] = y[ j ];\n\t\t\ty[ j ] = tmp;\n\n\t\t\tj += 1;\n\t\t\ttmp = x[ j ];\n\t\t\tx[ j ] = y[ j ];\n\t\t\ty[ j ] = tmp;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace blas\n*/\nvar blas = {};\n\n/**\n* @name ccopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ccopy}\n*/\nsetReadOnly( blas, 'ccopy', require( './../../base/ccopy' ) );\n\n/**\n* @name cswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/cswap}\n*/\nsetReadOnly( blas, 'cswap', require( './../../base/cswap' ) );\n\n/**\n* @name dasum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dasum}\n*/\nsetReadOnly( blas, 'dasum', require( './../../base/dasum' ) );\n\n/**\n* @name daxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/daxpy}\n*/\nsetReadOnly( blas, 'daxpy', require( './../../base/daxpy' ) );\n\n/**\n* @name dcopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dcopy}\n*/\nsetReadOnly( blas, 'dcopy', require( './../../base/dcopy' ) );\n\n/**\n* @name ddot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ddot}\n*/\nsetReadOnly( blas, 'ddot', require( './../../base/ddot' ) );\n\n/**\n* @name dnrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dnrm2}\n*/\nsetReadOnly( blas, 'dnrm2', require( './../../base/dnrm2' ) );\n\n/**\n* @name dscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dscal}\n*/\nsetReadOnly( blas, 'dscal', require( './../../base/dscal' ) );\n\n/**\n* @name dsdot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dsdot}\n*/\nsetReadOnly( blas, 'dsdot', require( './../../base/dsdot' ) );\n\n/**\n* @name dswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dswap}\n*/\nsetReadOnly( blas, 'dswap', require( './../../base/dswap' ) );\n\n/**\n* @name gasum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gasum}\n*/\nsetReadOnly( blas, 'gasum', require( './../../base/gasum' ) );\n\n/**\n* @name gaxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gaxpy}\n*/\nsetReadOnly( blas, 'gaxpy', require( './../../base/gaxpy' ) );\n\n/**\n* @name gcopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gcopy}\n*/\nsetReadOnly( blas, 'gcopy', require( './../../base/gcopy' ) );\n\n/**\n* @name gdot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gdot}\n*/\nsetReadOnly( blas, 'gdot', require( './../../base/gdot' ) );\n\n/**\n* @name gnrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gnrm2}\n*/\nsetReadOnly( blas, 'gnrm2', require( './../../base/gnrm2' ) );\n\n/**\n* @name gscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gscal}\n*/\nsetReadOnly( blas, 'gscal', require( './../../base/gscal' ) );\n\n/**\n* @name gswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gswap}\n*/\nsetReadOnly( blas, 'gswap', require( './../../base/gswap' ) );\n\n/**\n* @name sasum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sasum}\n*/\nsetReadOnly( blas, 'sasum', require( './../../base/sasum' ) );\n\n/**\n* @name saxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/saxpy}\n*/\nsetReadOnly( blas, 'saxpy', require( './../../base/saxpy' ) );\n\n/**\n* @name scopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/scopy}\n*/\nsetReadOnly( blas, 'scopy', require( './../../base/scopy' ) );\n\n/**\n* @name sdot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sdot}\n*/\nsetReadOnly( blas, 'sdot', require( './../../base/sdot' ) );\n\n/**\n* @name sdsdot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sdsdot}\n*/\nsetReadOnly( blas, 'sdsdot', require( './../../base/sdsdot' ) );\n\n/**\n* @name snrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/snrm2}\n*/\nsetReadOnly( blas, 'snrm2', require( './../../base/snrm2' ) );\n\n/**\n* @name sscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sscal}\n*/\nsetReadOnly( blas, 'sscal', require( './../../base/sscal' ) );\n\n/**\n* @name sswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sswap}\n*/\nsetReadOnly( blas, 'sswap', require( './../../base/sswap' ) );\n\n\n// EXPORTS //\n\nmodule.exports = blas;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar ccopy = require( './ccopy.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( ccopy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = ccopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float32Array = require( '@stdlib/array/float32' );\n\n\n// MAIN //\n\n/**\n* Copies values from one complex single-precision floating-point vector to another complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of values to copy\n* @param {Complex64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @returns {Complex64Array} `y`\n*\n* @example\n* var Complex64Array = require( '@stdlib/array/complex64' );\n* var realf = require( '@stdlib/complex/realf' );\n* var imagf = require( '@stdlib/complex/imagf' );\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* ccopy( x.length, x, 1, y, 1 );\n*\n* var z = y.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns 2.0\n*/\nfunction ccopy( N, x, strideX, y, strideY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = new Float32Array( x.buffer, x.byteOffset, x.length*2 );\n\tviewY = new Float32Array( y.buffer, y.byteOffset, y.length*2 );\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tfor ( i = 0; i < N*2; i += 2 ) {\n\t\t\tviewY[ i ] = viewX[ i ];\n\t\t\tviewY[ i+1 ] = viewX[ i+1 ];\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = 2 * (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = 2 * (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tviewY[ iy ] = viewX[ ix ];\n\t\tviewY[ iy+1 ] = viewX[ ix+1 ];\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ccopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float32Array = require( '@stdlib/array/float32' );\n\n\n// MAIN //\n\n/**\n* Copies values from one complex single-precision floating-point vector to another complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of values to copy\n* @param {Complex64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Complex64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Complex64Array} `y`\n*\n* @example\n* var Complex64Array = require( '@stdlib/array/complex64' );\n* var realf = require( '@stdlib/complex/realf' );\n* var imagf = require( '@stdlib/complex/imagf' );\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* ccopy( x.length, x, 1, 0, y, 1, 0 );\n*\n* var z = y.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns 2.0\n*/\nfunction ccopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = new Float32Array( x.buffer, x.byteOffset, x.length*2 );\n\tviewY = new Float32Array( y.buffer, y.byteOffset, y.length*2 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tviewY[ iy ] = viewX[ ix ];\n\t\tviewY[ iy+1 ] = viewX[ ix+1 ];\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ccopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cswap = require( './cswap.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( cswap, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = cswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float32Array = require( '@stdlib/array/float32' );\n\n\n// MAIN //\n\n/**\n* Interchanges two complex single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of values to swap\n* @param {Complex64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Complex64Array} `y`\n*\n* @example\n* var Complex64Array = require( '@stdlib/array/complex64' );\n* var realf = require( '@stdlib/complex/realf' );\n* var imagf = require( '@stdlib/complex/imagf' );\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* cswap( x.length, x, 1, y, 1 );\n*\n* var z = y.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns 2.0\n*\n* z = x.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 7.0\n*\n* im = imagf( z );\n* // returns 8.0\n*/\nfunction cswap( N, x, strideX, y, strideY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tvar j;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = new Float32Array( x.buffer, x.byteOffset, x.length*2 );\n\tviewY = new Float32Array( y.buffer, y.byteOffset, y.length*2 );\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tfor ( i = 0; i < N*2; i += 2 ) {\n\t\t\ttmp = viewX[ i ];\n\t\t\tviewX[ i ] = viewY[ i ];\n\t\t\tviewY[ i ] = tmp;\n\n\t\t\tj = i + 1;\n\t\t\ttmp = viewX[ j ];\n\t\t\tviewX[ j ] = viewY[ j ];\n\t\t\tviewY[ j ] = tmp;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = 2 * (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = 2 * (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = viewX[ ix ];\n\t\tviewX[ ix ] = viewY[ iy ];\n\t\tviewY[ iy ] = tmp;\n\n\t\ttmp = viewX[ ix+1 ];\n\t\tviewX[ ix+1 ] = viewY[ iy+1 ];\n\t\tviewY[ iy+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float32Array = require( '@stdlib/array/float32' );\n\n\n// MAIN //\n\n/**\n* Interchanges two complex single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of values to swap\n* @param {Complex64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Complex64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Complex64Array} `y`\n*\n* @example\n* var Complex64Array = require( '@stdlib/array/complex64' );\n* var realf = require( '@stdlib/complex/realf' );\n* var imagf = require( '@stdlib/complex/imagf' );\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* cswap( x.length, x, 1, 0, y, 1, 0 );\n*\n* var z = y.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns 2.0\n*\n* z = x.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 7.0\n*\n* im = imagf( z );\n* // returns 8.0\n*/\nfunction cswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = new Float32Array( x.buffer, x.byteOffset, x.length*2 );\n\tviewY = new Float32Array( y.buffer, y.byteOffset, y.length*2 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = viewX[ ix ];\n\t\tviewX[ ix ] = viewY[ iy ];\n\t\tviewY[ iy ] = tmp;\n\n\t\ttmp = viewX[ ix+1 ];\n\t\tviewX[ ix+1 ] = viewY[ iy+1 ];\n\t\tviewY[ iy+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dasum = require( './dasum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of values to sum\n* @param {Float64Array} x - input array\n* @param {PositiveInteger} stride - `x` stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = dasum( x.length, x, 1 );\n* // returns 15.0\n*/\nfunction dasum( N, x, stride ) {\n\tvar sum;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 || stride <= 0 ) {\n\t\treturn sum;\n\t}\n\t// Use unrolled loops if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += abs( x[i] );\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += abs(x[i]) + abs(x[i+1]) + abs(x[i+2]) + abs(x[i+3]) + abs(x[i+4]) + abs(x[i+5]); // eslint-disable-line max-len\n\t\t}\n\t\treturn sum;\n\t}\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tsum += abs( x[i] );\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of values to sum\n* @param {Float64Array} x - input array\n* @param {integer} stride - `x` stride length\n* @param {NonNegativeInteger} offset - starting `x` index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = dasum( x.length, x, 1, 0 );\n* // returns 15.0\n*/\nfunction dasum( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offset;\n\n\t// Use unrolled loops if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += abs( x[ix] );\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += abs( x[ix] ) + abs( x[ix+1] ) + abs( x[ix+2] ) + abs( x[ix+3] ) + abs( x[ix+4] ) + abs( x[ix+5] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += abs( x[ix] );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar daxpy = require( './daxpy.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( daxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = daxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* daxpy( x.length, alpha, x, 1, y, 1 );\n* // y => <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction daxpy( N, alpha, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ i ] += alpha * x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ i ] += alpha * x[ i ];\n\t\t\ty[ i+1 ] += alpha * x[ i+1 ];\n\t\t\ty[ i+2 ] += alpha * x[ i+2 ];\n\t\t\ty[ i+3 ] += alpha * x[ i+3 ];\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += alpha * x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = daxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* daxpy( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction daxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\ty[ iy+1 ] += alpha * x[ ix+1 ];\n\t\t\ty[ iy+2 ] += alpha * x[ ix+2 ];\n\t\t\ty[ iy+3 ] += alpha * x[ ix+3 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += alpha * x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = daxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dcopy = require( './dcopy.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dcopy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of values to copy\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dcopy( x.length, x, 1, y, 1 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dcopy( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ i ] = x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ i ] = x[ i ];\n\t\t\ty[ i+1 ] = x[ i+1 ];\n\t\t\ty[ i+2 ] = x[ i+2 ];\n\t\t\ty[ i+3 ] = x[ i+3 ];\n\t\t\ty[ i+4 ] = x[ i+4 ];\n\t\t\ty[ i+5 ] = x[ i+5 ];\n\t\t\ty[ i+6 ] = x[ i+6 ];\n\t\t\ty[ i+7 ] = x[ i+7 ];\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of values to copy\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dcopy( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dcopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] = x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] = x[ ix ];\n\t\t\ty[ iy+1 ] = x[ ix+1 ];\n\t\t\ty[ iy+2 ] = x[ ix+2 ];\n\t\t\ty[ iy+3 ] = x[ ix+3 ];\n\t\t\ty[ iy+4 ] = x[ ix+4 ];\n\t\t\ty[ iy+5 ] = x[ ix+5 ];\n\t\t\ty[ iy+6 ] = x[ ix+6 ];\n\t\t\ty[ iy+7 ] = x[ ix+7 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dnrm2 = require( './dnrm2.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dnrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of values over which to compute the L2-norm\n* @param {Float64Array} x - input array\n* @param {PositiveInteger} stride - stride length\n* @returns {number} L2-norm of `x`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = 3;\n*\n* var z = dnrm2( N, x, 1 );\n* // returns 3.0\n*/\nfunction dnrm2( N, x, stride ) {\n\tvar scale;\n\tvar ssq;\n\tvar ax;\n\tvar i;\n\n\tif ( N <= 0 || stride <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 ) {\n\t\treturn abs( x[ 0 ] );\n\t}\n\tscale = 0.0;\n\tssq = 1.0;\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tif ( x[ i ] !== 0.0 ) {\n\t\t\tax = abs( x[ i ] );\n\t\t\tif ( scale < ax ) {\n\t\t\t\tssq = 1.0 + ( ssq * pow( scale/ax, 2 ) );\n\t\t\t\tscale = ax;\n\t\t\t} else {\n\t\t\t\tssq += pow( ax/scale, 2 );\n\t\t\t}\n\t\t}\n\t}\n\treturn scale * sqrt( ssq );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of values over which to compute the L2-norm\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} L2-norm of `x`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var z = dnrm2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnrm2( N, x, stride, offset ) {\n\tvar scale;\n\tvar ssq;\n\tvar ax;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 ) {\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tscale = 0.0;\n\tssq = 1.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( x[ ix ] !== 0.0 ) {\n\t\t\tax = abs( x[ ix ] );\n\t\t\tif ( scale < ax ) {\n\t\t\t\tssq = 1.0 + ( ssq * pow( scale/ax, 2 ) );\n\t\t\t\tscale = ax;\n\t\t\t} else {\n\t\t\t\tssq += pow( ax/scale, 2 );\n\t\t\t}\n\t\t}\n\t\tix += stride;\n\t}\n\treturn scale * sqrt( ssq );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dscal = require( './dscal.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {PositiveInteger} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* dscal( x.length, 5.0, x, 1 );\n* // x => <Float64Array>[ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\nfunction dscal( N, alpha, x, stride ) {\n\tvar i;\n\tvar m;\n\n\tif ( N <= 0 || stride <= 0 || alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] *= alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] *= alpha;\n\t\t\tx[ i+1 ] *= alpha;\n\t\t\tx[ i+2 ] *= alpha;\n\t\t\tx[ i+3 ] *= alpha;\n\t\t\tx[ i+4 ] *= alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tx[ i ] *= alpha;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n* var alpha = 5.0;\n*\n* dscal( 3, alpha, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, -20.0, 25.0, -30.0 ]\n*/\nfunction dscal( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] *= alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] *= alpha;\n\t\t\tx[ ix+1 ] *= alpha;\n\t\t\tx[ ix+2 ] *= alpha;\n\t\t\tx[ ix+3 ] *= alpha;\n\t\t\tx[ ix+4 ] *= alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] *= alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsdot = require( './dsdot.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsdot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y` with extended accumulation and result.\n*\n* @param {PositiveInteger} N - number of values over which to compute the dot product\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product of `x` and `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = dsdot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction dsdot( N, x, strideX, y, strideY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += x[ i ] * y[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[i]*y[i] ) + ( x[i+1]*y[i+1] ) + ( x[i+2]*y[i+2] ) + ( x[i+3]*y[i+3] ) + ( x[i+4]*y[i+4] ); // eslint-disable-line max-len\n\t\t}\n\t\treturn dot;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = ( 1-N ) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = ( 1-N ) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y` with extended accumulation and result.\n*\n* @param {integer} N - number of values over which to compute the dot product\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product of `x` and `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = dsdot( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction dsdot( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += x[ ix ] * y[ iy ];\n\t\t\t\tix += 1;\n\t\t\t\tiy += 1;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ix]*y[iy] ) + ( x[ix+1]*y[iy+1] ) + ( x[ix+2]*y[iy+2] ) + ( x[ix+3]*y[iy+3] ) + ( x[ix+4]*y[iy+4] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn dot;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the sum of absolute values.\n*\n* @module @stdlib/blas/base/gasum\n*\n* @example\n* var gasum = require( '@stdlib/blas/base/gasum' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = gasum( x.length, x, 1 );\n* // 15.0\n*\n* @example\n* // Use the `ndarray` interface...\n* var gasum = require( '@stdlib/blas/base/gasum' ).ndarray;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = gasum( x.length, x, 1, 0 );\n* // 15.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of values to sum\n* @param {NumericArray} x - input array\n* @param {PositiveInteger} stride - `x` stride length\n* @returns {number} sum\n*\n* @example\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = gasum( x.length, x, 1 );\n* // 15.0\n*/\nfunction gasum( N, x, stride ) {\n\tvar sum;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 || stride <= 0 ) {\n\t\treturn sum;\n\t}\n\t// Use unrolled loops if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += abs( x[i] );\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += abs(x[i]) + abs(x[i+1]) + abs(x[i+2]) + abs(x[i+3]) + abs(x[i+4]) + abs(x[i+5]); // eslint-disable-line max-len\n\t\t}\n\t\treturn sum;\n\t}\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tsum += abs( x[i] );\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of values to sum\n* @param {NumericArray} x - input array\n* @param {integer} stride - `x` stride length\n* @param {NonNegativeInteger} offset - starting `x` index\n* @returns {number} sum\n*\n* @example\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = gasum( x.length, x, 1, 0 );\n* // 15.0\n*/\nfunction gasum( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offset;\n\n\t// Use unrolled loops if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += abs( x[ix] );\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += abs( x[ix] ) + abs( x[ix+1] ) + abs( x[ix+2] ) + abs( x[ix+3] ) + abs( x[ix+4] ) + abs( x[ix+5] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += abs( x[ix] );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to multiply `x` and a constant and add the result to `y`.\n*\n* @module @stdlib/blas/base/gaxpy\n*\n* @example\n* var gaxpy = require( '@stdlib/blas/base/gaxpy' );\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy( x.length, alpha, x, 1, y, 1 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*\n*\n* @example\n* var gaxpy = require( '@stdlib/blas/base/gaxpy' );\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - destination array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} `y`\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy( x.length, alpha, x, 1, y, 1 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction gaxpy( N, alpha, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ i ] += alpha * x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ i ] += alpha * x[ i ];\n\t\t\ty[ i+1 ] += alpha * x[ i+1 ];\n\t\t\ty[ i+2 ] += alpha * x[ i+2 ];\n\t\t\ty[ i+3 ] += alpha * x[ i+3 ];\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += alpha * x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {NumericArray} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {NumericArray} `y`\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction gaxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\ty[ iy+1 ] += alpha * x[ ix+1 ];\n\t\t\ty[ iy+2 ] += alpha * x[ ix+2 ];\n\t\t\ty[ iy+3 ] += alpha * x[ ix+3 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += alpha * x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to copy values from `x` into `y`.\n*\n* @module @stdlib/blas/base/gcopy\n*\n* @example\n* var gcopy = require( '@stdlib/blas/base/gcopy' );\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gcopy( x.length, x, 1, y, 1 );\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* @example\n* var gcopy = require( '@stdlib/blas/base/gcopy' );\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gcopy.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array/base/arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of values to copy\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Collection} y - destination array\n* @param {integer} strideY - `y` stride length\n* @returns {Collection} `y`\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gcopy( x.length, x, 1, y, 1 );\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction gcopy( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessors || oy.accessors ) {\n\t\tif ( strideX < 0 ) {\n\t\t\tix = (1-N) * strideX;\n\t\t} else {\n\t\t\tix = 0;\n\t\t}\n\t\tif ( strideY < 0 ) {\n\t\t\tiy = (1-N) * strideY;\n\t\t} else {\n\t\t\tiy = 0;\n\t\t}\n\t\taccessors( N, ox, strideX, ix, oy, strideY, iy );\n\t\treturn oy.data;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ i ] = x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ i ] = x[ i ];\n\t\t\ty[ i+1 ] = x[ i+1 ];\n\t\t\ty[ i+2 ] = x[ i+2 ];\n\t\t\ty[ i+3 ] = x[ i+3 ];\n\t\t\ty[ i+4 ] = x[ i+4 ];\n\t\t\ty[ i+5 ] = x[ i+5 ];\n\t\t\ty[ i+6 ] = x[ i+6 ];\n\t\t\ty[ i+7 ] = x[ i+7 ];\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array/base/arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of values to copy\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Collection} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Collection} `y`\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gcopy( x.length, x, 1, 0, y, 1, 0 );\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction gcopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessors || oy.accessors ) {\n\t\taccessors( N, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn oy.data;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] = x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] = x[ ix ];\n\t\t\ty[ iy+1 ] = x[ ix+1 ];\n\t\t\ty[ iy+2 ] = x[ ix+2 ];\n\t\t\ty[ iy+3 ] = x[ ix+3 ];\n\t\t\ty[ iy+4 ] = x[ ix+4 ];\n\t\t\ty[ iy+5 ] = x[ ix+5 ];\n\t\t\ty[ iy+6 ] = x[ ix+6 ];\n\t\t\ty[ iy+7 ] = x[ ix+7 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the L2-norm of a vector.\n*\n* @module @stdlib/blas/base/gnrm2\n*\n* @example\n* var gnrm2 = require( '@stdlib/blas/base/gnrm2' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var z = gnrm2( x.length, x, 1 );\n* // returns 3.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gnrm2 = require( '@stdlib/blas/base/gnrm2' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var z = gnrm2.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar gnrm2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = gnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to multiply `x` by a constant.\n*\n* @module @stdlib/blas/base/gscal\n*\n* @example\n* var gscal = require( '@stdlib/blas/base/gscal' );\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal( x.length, 5.0, x, 1 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*\n* @example\n* var gscal = require( '@stdlib/blas/base/gscal' );\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {PositiveInteger} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal( x.length, 5.0, x, 1 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\nfunction gscal( N, alpha, x, stride ) {\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || stride <= 0|| alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i += 1 ) {\n\t\t\t\tx[ i ] *= alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] *= alpha;\n\t\t\tx[ i+1 ] *= alpha;\n\t\t\tx[ i+2 ] *= alpha;\n\t\t\tx[ i+3 ] *= alpha;\n\t\t\tx[ i+4 ] *= alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tx[ i ] *= alpha;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* gscal( 3, 5.0, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, -20.0, 25.0, -30.0 ]\n*/\nfunction gscal( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] *= alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] *= alpha;\n\t\t\tx[ i+1 ] *= alpha;\n\t\t\tx[ i+2 ] *= alpha;\n\t\t\tx[ i+3 ] *= alpha;\n\t\t\tx[ i+4 ] *= alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] *= alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sasum = require( './sasum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of values to sum\n* @param {Float32Array} x - input array\n* @param {PositiveInteger} stride - `x` stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = sasum( x.length, x, 1 );\n* // returns 15.0\n*/\nfunction sasum( N, x, stride ) {\n\tvar sum;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 || stride <= 0 ) {\n\t\treturn sum;\n\t}\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tsum = float64ToFloat32( sum + abs( x[i] ) );\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of values to sum\n* @param {Float32Array} x - input array\n* @param {integer} stride - `x` stride length\n* @param {NonNegativeInteger} offset - starting `x` index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = sasum( x.length, x, 1, 0 );\n* // returns 15.0\n*/\nfunction sasum( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + abs( x[ix] ) );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar saxpy = require( './saxpy.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( saxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = saxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* saxpy( x.length, alpha, x, 1, y, 1 );\n* // y => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction saxpy( N, alpha, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ i ] += float64ToFloat32( alpha * x[ i ] );\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ i ] += float64ToFloat32( alpha * x[ i ] );\n\t\t\ty[ i+1 ] += float64ToFloat32( alpha * x[ i+1 ] );\n\t\t\ty[ i+2 ] += float64ToFloat32( alpha * x[ i+2 ] );\n\t\t\ty[ i+3 ] += float64ToFloat32( alpha * x[ i+3 ] );\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += float64ToFloat32( alpha * x[ ix ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = saxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float32Array} `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* saxpy( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction saxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] += float64ToFloat32( alpha * x[ ix ] );\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] += float64ToFloat32( alpha * x[ ix ] );\n\t\t\ty[ iy+1 ] += float64ToFloat32( alpha * x[ ix+1 ] );\n\t\t\ty[ iy+2 ] += float64ToFloat32( alpha * x[ ix+2 ] );\n\t\t\ty[ iy+3 ] += float64ToFloat32( alpha * x[ ix+3 ] );\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += float64ToFloat32( alpha * x[ ix ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = saxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar scopy = require( './scopy.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( scopy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = scopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of values to copy\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* scopy( x.length, x, 1, y, 1 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction scopy( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ i ] = x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ i ] = x[ i ];\n\t\t\ty[ i+1 ] = x[ i+1 ];\n\t\t\ty[ i+2 ] = x[ i+2 ];\n\t\t\ty[ i+3 ] = x[ i+3 ];\n\t\t\ty[ i+4 ] = x[ i+4 ];\n\t\t\ty[ i+5 ] = x[ i+5 ];\n\t\t\ty[ i+6 ] = x[ i+6 ];\n\t\t\ty[ i+7 ] = x[ i+7 ];\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = scopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of values to copy\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float32Array} `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* scopy( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction scopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] = x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] = x[ ix ];\n\t\t\ty[ iy+1 ] = x[ ix+1 ];\n\t\t\ty[ iy+2 ] = x[ ix+2 ];\n\t\t\ty[ iy+3 ] = x[ ix+3 ];\n\t\t\ty[ iy+4 ] = x[ ix+4 ];\n\t\t\ty[ iy+5 ] = x[ ix+5 ];\n\t\t\ty[ iy+6 ] = x[ ix+6 ];\n\t\t\ty[ iy+7 ] = x[ ix+7 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = scopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sdsdot = require( './sdsdot.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sdsdot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sdsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two single-precision floating-point vectors with extended accumulation.\n*\n* @param {PositiveInteger} N - number of values over which to compute the dot product\n* @param {number} scalar - scalar constant to add to dot product\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product of `x` and `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdsdot( x.length, 0.0, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction sdsdot( N, scalar, x, strideX, y, strideY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = scalar;\n\tif ( N <= 0 ) {\n\t\treturn float64ToFloat32( dot );\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += x[ i ] * y[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn float64ToFloat32( dot );\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[i]*y[i] ) + ( x[i+1]*y[i+1] ) + ( x[i+2]*y[i+2] ) + ( x[i+3]*y[i+3] ) + ( x[i+4]*y[i+4] ); // eslint-disable-line max-len\n\t\t}\n\t\treturn float64ToFloat32( dot );\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = ( 1-N ) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = ( 1-N ) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn float64ToFloat32( dot );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two single-precision floating-point vectors with extended accumulation.\n*\n* @param {integer} N - number of values over which to compute the dot product\n* @param {number} scalar - scalar constant to add to dot product\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product of `x` and `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdsdot( x.length, 0.0, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction sdsdot( N, scalar, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = scalar;\n\tif ( N <= 0 ) {\n\t\treturn float64ToFloat32( dot );\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += x[ ix ] * y[ iy ];\n\t\t\t\tix += 1;\n\t\t\t\tiy += 1;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn float64ToFloat32( dot );\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ix]*y[iy] ) + ( x[ix+1]*y[iy+1] ) + ( x[ix+2]*y[iy+2] ) + ( x[ix+3]*y[iy+3] ) + ( x[ix+4]*y[iy+4] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn float64ToFloat32( dot );\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn float64ToFloat32( dot );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar snrm2 = require( './snrm2.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( snrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = snrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of values over which to compute the L2-norm\n* @param {Float32Array} x - input array\n* @param {PositiveInteger} stride - stride length\n* @returns {number} L2-norm\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = 3;\n*\n* var z = snrm2( N, x, 1 );\n* // returns 3.0\n*/\nfunction snrm2( N, x, stride ) {\n\tvar scale;\n\tvar ssq;\n\tvar ax;\n\tvar i;\n\n\tif ( N <= 0 || stride <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 ) {\n\t\treturn abs( x[ 0 ] );\n\t}\n\tscale = 0.0;\n\tssq = 1.0;\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tif ( x[ i ] !== 0.0 ) {\n\t\t\tax = abs( x[ i ] );\n\t\t\tif ( scale < ax ) {\n\t\t\t\tssq = float64ToFloat32( 1.0 + ( ssq * pow( scale/ax, 2 ) ) );\n\t\t\t\tscale = ax;\n\t\t\t} else {\n\t\t\t\tssq = float64ToFloat32( ssq + pow( ax/scale, 2 ) );\n\t\t\t}\n\t\t}\n\t}\n\treturn float64ToFloat32( scale * sqrt( ssq ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = snrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of values over which to compute the L2-norm\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} L2-norm\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var z = snrm2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snrm2( N, x, stride, offset ) {\n\tvar scale;\n\tvar ssq;\n\tvar ax;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 ) {\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tscale = 0.0;\n\tssq = 1.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( x[ ix ] !== 0.0 ) {\n\t\t\tax = abs( x[ ix ] );\n\t\t\tif ( scale < ax ) {\n\t\t\t\tssq = float64ToFloat32( 1.0 + ( ssq * pow( scale/ax, 2 ) ) );\n\t\t\t\tscale = ax;\n\t\t\t} else {\n\t\t\t\tssq = float64ToFloat32( ssq + pow( ax/scale, 2 ) );\n\t\t\t}\n\t\t}\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( scale * sqrt( ssq ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = snrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sscal = require( './sscal.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {PositiveInteger} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* sscal( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\nfunction sscal( N, alpha, x, stride ) {\n\tvar i;\n\tvar m;\n\n\tif ( N <= 0 || stride <= 0|| alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] *= alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] *= alpha;\n\t\t\tx[ i+1 ] *= alpha;\n\t\t\tx[ i+2 ] *= alpha;\n\t\t\tx[ i+3 ] *= alpha;\n\t\t\tx[ i+4 ] *= alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tx[ i ] *= alpha;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n* var alpha = 5.0;\n*\n* sscal( 3, alpha, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, -20.0, 25.0, -30.0 ]\n*/\nfunction sscal( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\n\tif ( N <= 0 || alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] *= alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] *= alpha;\n\t\t\tx[ i+1 ] *= alpha;\n\t\t\tx[ i+2 ] *= alpha;\n\t\t\tx[ i+3 ] *= alpha;\n\t\t\tx[ i+4 ] *= alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] *= alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFloat64VectorLike = require( '@stdlib/assert/is-float64vector-like' );\nvar format = require( '@stdlib/string/format' );\nvar dot = require( './../../base/ddot' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two double-precision floating-point vectors.\n*\n* @param {VectorLike} x - first input array\n* @param {VectorLike} y - second input array\n* @throws {TypeError} first argument must be a 1-dimensional ndarray containing double-precision floating-point numbers\n* @throws {TypeError} second argument must be a 1-dimensional ndarray containing double-precision floating-point numbers\n* @throws {RangeError} input arrays must be the same length\n* @returns {number} dot product\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var array = require( '@stdlib/ndarray/array' );\n*\n* var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* var z = ddot( x, y );\n* // returns -5.0\n*/\nfunction ddot( x, y ) {\n\tif ( !isFloat64VectorLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a one-dimensional ndarray containing double-precision floating-point numbers (i.e., an ndarray whose underlying data buffer is a Float64Array). Value: `%s`.', x ) );\n\t}\n\tif ( !isFloat64VectorLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a one-dimensional ndarray containing double-precision floating-point numbers (i.e., an ndarray whose underlying data buffer is a Float64Array). Value: `%s`.', y ) );\n\t}\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( format( 'invalid argument. Arrays must be the same length. First argument length: `%u`. Second argument length: `%u`.', x.length, y.length ) );\n\t}\n\treturn dot( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = ddot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFloat64VectorLike = require( '@stdlib/assert/is-float64vector-like' );\nvar format = require( '@stdlib/string/format' );\nvar swap = require( './../../base/dswap' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Interchanges two double-precision floating-point vectors.\n*\n* @param {VectorLike} x - first input array\n* @param {VectorLike} y - second input array\n* @throws {TypeError} first argument must be a 1-dimensional ndarray containing double-precision floating-point numbers\n* @throws {TypeError} second argument must be a 1-dimensional ndarray containing double-precision floating-point numbers\n* @throws {RangeError} input arrays must be the same length\n* @returns {VectorLike} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var array = require( '@stdlib/ndarray/array' );\n*\n* var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* dswap( x, y );\n*\n* var xbuf = x.data;\n* // returns <Float64Array>[ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n*\n* var ybuf = y.data;\n* // returns <Float64Array>[ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nfunction dswap( x, y ) {\n\tif ( !isFloat64VectorLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a one-dimensional ndarray containing double-precision floating-point numbers (i.e., an ndarray whose underlying data buffer is a Float64Array). Value: `%s`.', x ) );\n\t}\n\tif ( !isFloat64VectorLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a one-dimensional ndarray containing double-precision floating-point numbers (i.e., an ndarray whose underlying data buffer is a Float64Array). Value: `%s`.', y ) );\n\t}\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( format( 'invalid argument. Arrays must be the same length. First argument length: `%u`. Second argument length: `%u`.', x.length, y.length ) );\n\t}\n\tswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dapx = require( './dapx.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dapx, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each element in a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* dapx( x.length, 5.0, x, 1 );\n* // x => <Float64Array>[ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\nfunction dapx( N, alpha, x, stride ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] += alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] += alpha;\n\t\t\tx[ i+1 ] += alpha;\n\t\t\tx[ i+2 ] += alpha;\n\t\t\tx[ i+3 ] += alpha;\n\t\t\tx[ i+4 ] += alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each element in a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n* var alpha = 5.0;\n*\n* dapx( 3, alpha, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, 1.0, 10.0, -1.0 ]\n*/\nfunction dapx( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] += alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] += alpha;\n\t\t\tx[ ix+1 ] += alpha;\n\t\t\tx[ ix+2 ] += alpha;\n\t\t\tx[ ix+3 ] += alpha;\n\t\t\tx[ ix+4 ] += alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dapxsumkbn = require( './dapxsumkbn.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dapxsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dapxsumkbn( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumkbn( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dapxsumkbn( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumkbn( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dapxsum = require( './dapxsum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dapxsumkbn = require( './../../../../ext/base/dapxsumkbn' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dapxsum( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsum( N, alpha, x, stride ) {\n\treturn dapxsumkbn( N, alpha, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dapxsumkbn = require( './../../../../ext/base/dapxsumkbn' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dapxsum( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsum( N, alpha, x, stride, offset ) {\n\treturn dapxsumkbn( N, alpha, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dapxsumkbn2 = require( './dapxsumkbn2.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dapxsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dapxsumkbn2( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumkbn2( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dapxsumkbn2( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumkbn2( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dapxsumors = require( './dapxsumors.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dapxsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dapxsumors( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumors( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += alpha + x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dapxsumors( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumors( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += alpha + x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dapxsumpw( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+stride ];\n\t\ts2 = alpha + x[ ix+(2*stride) ];\n\t\ts3 = alpha + x[ ix+(3*stride) ];\n\t\ts4 = alpha + x[ ix+(4*stride) ];\n\t\ts5 = alpha + x[ ix+(5*stride) ];\n\t\ts6 = alpha + x[ ix+(6*stride) ];\n\t\ts7 = alpha + x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+stride ];\n\t\t\ts2 += alpha + x[ ix+(2*stride) ];\n\t\t\ts3 += alpha + x[ ix+(3*stride) ];\n\t\t\ts4 += alpha + x[ ix+(4*stride) ];\n\t\t\ts5 += alpha + x[ ix+(5*stride) ];\n\t\t\ts6 += alpha + x[ ix+(6*stride) ];\n\t\t\ts7 += alpha + x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dapxsumpw( n, alpha, x, stride, ix ) + dapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dapxsumpw = require( './dapxsumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dasumpw( N, x, 2, 1 );\n* // returns 9.0\n*/\nfunction dasumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = abs( x[ ix ] );\n\t\ts1 = abs( x[ ix+stride ] );\n\t\ts2 = abs( x[ ix+(2*stride) ] );\n\t\ts3 = abs( x[ ix+(3*stride) ] );\n\t\ts4 = abs( x[ ix+(4*stride) ] );\n\t\ts5 = abs( x[ ix+(5*stride) ] );\n\t\ts6 = abs( x[ ix+(6*stride) ] );\n\t\ts7 = abs( x[ ix+(7*stride) ] );\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += abs( x[ ix ] );\n\t\t\ts1 += abs( x[ ix+stride ] );\n\t\t\ts2 += abs( x[ ix+(2*stride) ] );\n\t\t\ts3 += abs( x[ ix+(3*stride) ] );\n\t\t\ts4 += abs( x[ ix+(4*stride) ] );\n\t\t\ts5 += abs( x[ ix+(5*stride) ] );\n\t\t\ts6 += abs( x[ ix+(6*stride) ] );\n\t\t\ts7 += abs( x[ ix+(7*stride) ] );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dasumpw( n, x, stride, ix ) + dasumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = dasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dasumpw = require( './dasumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dasumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dasumpw( N, x, 1 );\n* // returns 5.0\n*/\nfunction dasumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dcusumkbn = require( './dcusumkbn.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dcusumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n* var N = x.length;\n*\n* var v = dcusumkbn( N, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumkbn( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = s + v;\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc += (s-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + s;\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = s + c;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = dcusumkbn( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = s + v;\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc += (s-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + s;\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = s + c;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dcusum = require( './dcusum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dcusum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dcusumkbn = require( './../../../../ext/base/dcusumkbn' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n* var N = x.length;\n*\n* var v = dcusum( N, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusum( N, sum, x, strideX, y, strideY ) {\n\treturn dcusumkbn( N, sum, x, strideX, y, strideY );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dcusumkbn = require( './../../../../ext/base/dcusumkbn' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = dcusum( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusum( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn dcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dcusumkbn2 = require( './dcusumkbn2.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dcusumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n* var N = x.length;\n*\n* var v = dcusumkbn2( N, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumkbn2( N, sum, x, strideX, y, strideY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\n\t\ty[ iy ] = sum + cs + ccs;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = dcusumkbn2( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumkbn2( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\n\t\ty[ iy ] = sum + cs + ccs;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dcusumors = require( './dcusumors.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dcusumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n* var N = x.length;\n*\n* var v = dcusumors( N, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumors( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = dcusumors( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumors( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation:\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = dcusumpw( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumpw( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( N <= BLOCKSIZE ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\ty[ iy ] = sum + s;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tn = floor( N/2 );\n\tdcusumpw( n, sum, x, strideX, ix, y, strideY, iy );\n\tiy += (n-1) * strideY;\n\tdcusumpw( N-n, y[ iy ], x, strideX, ix+(n*strideX), y, strideY, iy+strideY ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dcusumpw = require( './dcusumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dcusumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar cusum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n* var N = x.length;\n*\n* var v = dcusumpw( N, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumpw( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\treturn cusum( N, sum, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dfill = require( './dfill.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dfill, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a double-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* dfill( x.length, 5.0, x, 1 );\n* // x => <Float64Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction dfill( N, alpha, x, stride ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] = alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] = alpha;\n\t\t\tx[ i+1 ] = alpha;\n\t\t\tx[ i+2 ] = alpha;\n\t\t\tx[ i+3 ] = alpha;\n\t\t\tx[ i+4 ] = alpha;\n\t\t\tx[ i+5 ] = alpha;\n\t\t\tx[ i+6 ] = alpha;\n\t\t\tx[ i+7 ] = alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a double-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* dfill( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction dfill( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] = alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] = alpha;\n\t\t\tx[ ix+1 ] = alpha;\n\t\t\tx[ ix+2 ] = alpha;\n\t\t\tx[ ix+3 ] = alpha;\n\t\t\tx[ ix+4 ] = alpha;\n\t\t\tx[ ix+5 ] = alpha;\n\t\t\tx[ ix+6 ] = alpha;\n\t\t\tx[ ix+7 ] = alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dnanasumors = require( './dnanasumors.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dnanasumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dnanasumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnanasumors( N, x, 1 );\n* // returns 5.0\n*/\nfunction dnanasumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn abs( x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tsum += abs( v );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnanasumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnanasumors( N, x, 2, 1 );\n* // returns 9.0\n*/\nfunction dnanasumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tsum += abs( v );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnanasumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dnanasum = require( './dnanasum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dnanasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dnanasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dnanasumors = require( './../../../../ext/base/dnanasumors' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnanasum( N, x, 1 );\n* // returns 5.0\n*/\nfunction dnanasum( N, x, stride ) {\n\treturn dnanasumors( N, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnanasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dnanasumors = require( './../../../../ext/base/dnanasumors' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnanasum( N, x, 2, 1 );\n* // returns 9.0\n*/\nfunction dnanasum( N, x, stride, offset ) {\n\treturn dnanasumors( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnanasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dnannsumkbn = require( './dnannsumkbn.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dnannsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumkbn( N, x, strideX, out, strideOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum + c;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dnannsumkbn( N, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tix = offsetX;\n\tio = offsetOut;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum + c;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dnannsum = require( './dnannsum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dnannsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dnannsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dnannsumkbn = require( './../../../../ext/base/dnannsumkbn' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsum( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsum( N, x, strideX, out, strideOut ) {\n\treturn dnannsumkbn( N, x, strideX, out, strideOut );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnannsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dnannsumkbn = require( './../../../../ext/base/dnannsumkbn' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dnannsum( N, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsum( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\treturn dnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnannsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dnannsumkbn2 = require( './dnannsumkbn2.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dnannsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn2( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumkbn2( N, x, strideX, out, strideOut ) {\n\tvar sum;\n\tvar ccs;\n\tvar cs;\n\tvar cc;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum + cs + ccs;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dnannsumkbn2( N, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumkbn2( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ccs;\n\tvar cs;\n\tvar cc;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tix = offsetX;\n\tio = offsetOut;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum + cs + ccs;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dnannsumors = require( './dnannsumors.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dnannsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumors( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumors( N, x, strideX, out, strideOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dnannsumors( N, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumors( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar n;\n\tvar i;\n\n\tix = offsetX;\n\tio = offsetOut;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of a double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - two-element output array whose first element is the accumulated sum and whose second element is the accumulated number of summed values\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var out = new Float64Array( [ 0.0, 0 ] );\n* var v = sumpw( N, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction sumpw( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar ix;\n\tvar io;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tio = offsetOut;\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] += x[ ix ];\n\t\tout[ io+strideOut ] += 1;\n\t\treturn out;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tn = 0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\tout[ io ] += s;\n\t\tout[ io+strideOut ] += n;\n\t\treturn out;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = 0.0;\n\t\ts1 = 0.0;\n\t\ts2 = 0.0;\n\t\ts3 = 0.0;\n\t\ts4 = 0.0;\n\t\ts5 = 0.0;\n\t\ts6 = 0.0;\n\t\ts7 = 0.0;\n\t\tn = 0;\n\n\t\tM = N % 8;\n\t\tfor ( i = 0; i < N-M; i += 8 ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts0 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts1 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts2 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts3 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts4 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts5 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts6 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts7 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\tout[ io ] += s;\n\t\tout[ io+strideOut ] += n;\n\t\treturn out;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\tsumpw( n, x, strideX, ix, out, strideOut, offsetOut );\n\tsumpw( N-n, x, strideX, ix+(n*strideX), out, strideOut, offsetOut );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dnannsumpw = require( './dnannsumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dnannsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sumpw = require( './sumpw.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumpw( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumpw( N, x, strideX, out, strideOut ) {\n\tvar ix;\n\tvar io;\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tout[ io ] = 0.0;\n\tout[ io+strideOut ] = 0;\n\tsumpw( N, x, strideX, ix, out, strideOut, io );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sumpw = require( './sumpw.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dnannsumpw( N, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumpw( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = 0.0;\n\tout[ offsetOut+strideOut ] = 0;\n\tsumpw( N, x, strideX, offsetX, out, strideOut, offsetOut );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dnansumkbn = require( './dnansumkbn.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dnansumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnansumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnansumkbn( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dnansum = require( './dnansum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dnansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dnansumkbn = require( './../../../../ext/base/dnansumkbn' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnansum( N, x, 1 );\n* // returns 1.0\n*/\nfunction dnansum( N, x, stride ) {\n\treturn dnansumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dnansumkbn = require( './../../../../ext/base/dnansumkbn' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnansum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansum( N, x, stride, offset ) {\n\treturn dnansumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dnansumkbn2 = require( './dnansumkbn2.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dnansumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnansumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnansumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dnansumors = require( './dnansumors.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dnansumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnansumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnansumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnansumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts1 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts2 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts3 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts4 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts5 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts6 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts7 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts1 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts2 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts3 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts4 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts5 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts6 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts7 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dnansumpw( n, x, stride, ix ) + dnansumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dnansumpw = require( './dnansumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dnansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnansumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar drev = require( './drev.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( drev, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = drev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a double-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* drev( x.length, x, 1 );\n* // x => <Float64Array>[ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\nfunction drev( N, x, stride ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tn = floor( N/2 );\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( ix = 0; ix < m; ix++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tiy -= 1;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( ix = m; ix < n; ix += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = drev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a double-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* drev( 3, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, -6.0, 5.0, -4.0 ]\n*/\nfunction drev( N, x, stride, offset ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tn = floor( N/2 );\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = ix + N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tix += stride;\n\t\t\t\tiy -= stride;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < n; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = drev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsapxsumpw( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dsapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+stride ];\n\t\ts2 = alpha + x[ ix+(2*stride) ];\n\t\ts3 = alpha + x[ ix+(3*stride) ];\n\t\ts4 = alpha + x[ ix+(4*stride) ];\n\t\ts5 = alpha + x[ ix+(5*stride) ];\n\t\ts6 = alpha + x[ ix+(6*stride) ];\n\t\ts7 = alpha + x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+stride ];\n\t\t\ts2 += alpha + x[ ix+(2*stride) ];\n\t\t\ts3 += alpha + x[ ix+(3*stride) ];\n\t\t\ts4 += alpha + x[ ix+(4*stride) ];\n\t\t\ts5 += alpha + x[ ix+(5*stride) ];\n\t\t\ts6 += alpha + x[ ix+(6*stride) ];\n\t\t\ts7 += alpha + x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsapxsumpw( n, alpha, x, stride, ix ) + dsapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsapxsumpw = require( './dsapxsumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dsapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsapxsum = require( './dsapxsum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dsapxsumpw = require( './../../../../ext/base/dsapxsumpw' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsapxsum( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dsapxsum( N, alpha, x, stride ) {\n\treturn dsapxsumpw( N, alpha, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dsapxsumpw = require( './../../../../ext/base/dsapxsumpw' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsapxsum( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dsapxsum( N, alpha, x, stride, offset ) {\n\treturn dsapxsumpw( N, alpha, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsnannsumors = require( './dsnannsumors.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsnannsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dsnannsumors( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dsnannsumors( N, x, strideX, out, strideOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dsnannsumors( N, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dsnannsumors( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar n;\n\tvar i;\n\n\tix = offsetX;\n\tio = offsetOut;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using pairwise summation with extended accumulation, and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsnansumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsnansumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts1 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts2 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts3 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts4 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts5 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts6 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts7 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts1 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts2 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts3 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts4 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts5 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts6 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts7 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsnansumpw( n, x, stride, ix ) + dsnansumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsnansumpw = require( './dsnansumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsnansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using pairwise summation with extended accumulation, and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsnansumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsnansumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsnansum = require( './dsnansum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsnansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dsnansumpw = require( './../../../../ext/base/dsnansumpw' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsnansum( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsnansum( N, x, stride ) {\n\treturn dsnansumpw( N, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dsnansumpw = require( './../../../../ext/base/dsnansumpw' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsnansum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsnansum( N, x, stride, offset ) {\n\treturn dsnansumpw( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsnansumors = require( './dsnansumors.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsnansumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsnansumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsnansumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsnansumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsnansumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsort2hp = require( './dsort2hp.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsort2hp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float64Array} `x`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2hp( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float64Array} `x`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsort2ins = require( './dsort2ins.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsort2ins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float64Array} `x`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2ins( N, order, x, strideX, y, strideY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideY < 0 ) {\n\t\tfy = (1-N) * strideY;\n\t\tly = 0;\n\t} else {\n\t\tfy = 0;\n\t\tly = (N-1) * strideY;\n\t}\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * strideX; // first index\n\t\tlx = 0;               // last index\n\t\tix = fx + strideX;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * strideX; // last index\n\tix = fx + strideX;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float64Array} `x`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsort2sh = require( './dsort2sh.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsort2sh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar GAPS = require( './gaps.json' );\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float64Array} `x`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2sh( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar GAPS = require( './gaps.json' );\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float64Array} `x`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsorthp = require( './dsorthp.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsorthp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsorthp( x.length, 1.0, x, 1 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsorthp( N, order, x, stride ) {\n\tvar offset;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsorthp( x.length, 1.0, x, 1, 0 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsorthp( N, order, x, stride, offset ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsortins = require( './dsortins.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsortins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortins( x.length, 1.0, x, 1 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortins( N, order, x, stride ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * stride; // first index\n\t\tlx = 0;              // last index\n\t\tix = fx + stride;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * stride; // last index\n\tix = fx + stride;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortins( x.length, 1.0, x, 1, 0 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortins( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfx = offset;              // first index\n\tlx = fx + ((N-1)*stride); // last index\n\tix = fx + stride;\n\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsortsh = require( './dsortsh.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsortsh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar GAPS = require( './gaps.json' );\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortsh( x.length, 1.0, x, 1 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortsh( N, order, x, stride ) {\n\tvar offset;\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar GAPS = require( './gaps.json' );\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortsh( x.length, 1.0, x, 1, 0 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortsh( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dssumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dssumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+stride ];\n\t\t\ts2 += x[ ix+(2*stride) ];\n\t\t\ts3 += x[ ix+(3*stride) ];\n\t\t\ts4 += x[ ix+(4*stride) ];\n\t\t\ts5 += x[ ix+(5*stride) ];\n\t\t\ts6 += x[ ix+(6*stride) ];\n\t\t\ts7 += x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dssumpw( n, x, stride, ix ) + dssumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = dssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dssumpw = require( './dssumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dssumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dssumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction dssumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dssum = require( './dssum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dssum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dssumpw = require( './../../../../ext/base/dssumpw' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dssum( N, x, 1 );\n* // returns 1.0\n*/\nfunction dssum( N, x, stride ) {\n\treturn dssumpw( N, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dssumpw = require( './../../../../ext/base/dssumpw' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dssum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dssum( N, x, stride, offset ) {\n\treturn dssumpw( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dssumors = require( './dssumors.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dssumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation with extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dssumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction dssumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[i] + x[i+1] + x[i+2] + x[i+3] + x[i+4] + x[i+5];\n\t\t}\n\t\treturn sum;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation with extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dssumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dssumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ ix ];\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsumkbn = require( './dsumkbn.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsumkbn( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsum = require( './dsum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dsumkbn = require( './../../../../ext/base/dsumkbn' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsum( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsum( N, x, stride ) {\n\treturn dsumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dsumkbn = require( './../../../../ext/base/dsumkbn' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsum( N, x, stride, offset ) {\n\treturn dsumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsumkbn2 = require( './dsumkbn2.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsumors = require( './dsumors.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[i] + x[i+1] + x[i+2] + x[i+3] + x[i+4] + x[i+5];\n\t\t}\n\t\treturn sum;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ ix ];\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+stride ];\n\t\t\ts2 += x[ ix+(2*stride) ];\n\t\t\ts3 += x[ ix+(3*stride) ];\n\t\t\ts4 += x[ ix+(4*stride) ];\n\t\t\ts5 += x[ ix+(5*stride) ];\n\t\t\ts6 += x[ ix+(6*stride) ];\n\t\t\ts7 += x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsumpw( n, x, stride, ix ) + dsumpw( N-n, x, stride, ix+(n*stride) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dsumpw = require( './dsumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each element in a strided array.\n*\n* @module @stdlib/blas/ext/base/gapx\n*\n* @example\n* var gapx = require( '@stdlib/blas/ext/base/gapx' );\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx( x.length, 5.0, x, 1 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*\n* @example\n* var gapx = require( '@stdlib/blas/ext/base/gapx' );\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each element in a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx( x.length, 5.0, x, 1 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\nfunction gapx( N, alpha, x, stride ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] += alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] += alpha;\n\t\t\tx[ i+1 ] += alpha;\n\t\t\tx[ i+2 ] += alpha;\n\t\t\tx[ i+3 ] += alpha;\n\t\t\tx[ i+4 ] += alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each element in a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n* var alpha = 5.0;\n*\n* gapx( 3, alpha, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, 1.0, 10.0, -1.0 ]\n*/\nfunction gapx( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] += alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] += alpha;\n\t\t\tx[ ix+1 ] += alpha;\n\t\t\tx[ ix+2 ] += alpha;\n\t\t\tx[ ix+3 ] += alpha;\n\t\t\tx[ ix+4 ] += alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each strided array element and compute the sum using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gapxsumkbn\n*\n* @example\n* var gapxsumkbn = require( '@stdlib/blas/ext/base/gapxsumkbn' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumkbn( N, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gapxsumkbn = require( '@stdlib/blas/ext/base/gapxsumkbn' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumkbn.ndarray( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumkbn( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumkbn( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumkbn( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumkbn( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each strided array element and compute the sum.\n*\n* @module @stdlib/blas/ext/base/gapxsum\n*\n* @example\n* var gapxsum = require( '@stdlib/blas/ext/base/gapxsum' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsum( N, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gapxsum = require( '@stdlib/blas/ext/base/gapxsum' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsum.ndarray( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gapxsumkbn = require( './../../../../ext/base/gapxsumkbn' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsum( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsum( N, alpha, x, stride ) {\n\treturn gapxsumkbn( N, alpha, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gapxsumkbn = require( './../../../../ext/base/gapxsumkbn' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsum( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsum( N, alpha, x, stride, offset ) {\n\treturn gapxsumkbn( N, alpha, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each strided array element and compute the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gapxsumkbn2\n*\n* @example\n* var gapxsumkbn2 = require( '@stdlib/blas/ext/base/gapxsumkbn2' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumkbn2( N, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gapxsumkbn2 = require( '@stdlib/blas/ext/base/gapxsumkbn2' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumkbn2.ndarray( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumkbn2( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumkbn2( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumkbn2( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumkbn2( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each strided array element and compute the sum using ordinary recursive summation.\n*\n* @module @stdlib/blas/ext/base/gapxsumors\n*\n* @example\n* var gapxsumors = require( '@stdlib/blas/ext/base/gapxsumors' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumors( N, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gapxsumors = require( '@stdlib/blas/ext/base/gapxsumors' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumors.ndarray( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumors( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumors( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += alpha + x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumors( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumors( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += alpha + x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumpw( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+stride ];\n\t\ts2 = alpha + x[ ix+(2*stride) ];\n\t\ts3 = alpha + x[ ix+(3*stride) ];\n\t\ts4 = alpha + x[ ix+(4*stride) ];\n\t\ts5 = alpha + x[ ix+(5*stride) ];\n\t\ts6 = alpha + x[ ix+(6*stride) ];\n\t\ts7 = alpha + x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+stride ];\n\t\t\ts2 += alpha + x[ ix+(2*stride) ];\n\t\t\ts3 += alpha + x[ ix+(3*stride) ];\n\t\t\ts4 += alpha + x[ ix+(4*stride) ];\n\t\t\ts5 += alpha + x[ ix+(5*stride) ];\n\t\t\ts6 += alpha + x[ ix+(6*stride) ];\n\t\t\ts7 += alpha + x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gapxsumpw( n, alpha, x, stride, ix ) + gapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = gapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each strided array element and compute the sum using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gapxsumpw\n*\n* @example\n* var gapxsumpw = require( '@stdlib/blas/ext/base/gapxsumpw' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gapxsumpw = require( '@stdlib/blas/ext/base/gapxsumpw' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumpw.ndarray( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gasumpw( N, x, 2, 1 );\n* // returns 9.0\n*/\nfunction gasumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = abs( x[ ix ] );\n\t\ts1 = abs( x[ ix+stride ] );\n\t\ts2 = abs( x[ ix+(2*stride) ] );\n\t\ts3 = abs( x[ ix+(3*stride) ] );\n\t\ts4 = abs( x[ ix+(4*stride) ] );\n\t\ts5 = abs( x[ ix+(5*stride) ] );\n\t\ts6 = abs( x[ ix+(6*stride) ] );\n\t\ts7 = abs( x[ ix+(7*stride) ] );\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += abs( x[ ix ] );\n\t\t\ts1 += abs( x[ ix+stride ] );\n\t\t\ts2 += abs( x[ ix+(2*stride) ] );\n\t\t\ts3 += abs( x[ ix+(3*stride) ] );\n\t\t\ts4 += abs( x[ ix+(4*stride) ] );\n\t\t\ts5 += abs( x[ ix+(5*stride) ] );\n\t\t\ts6 += abs( x[ ix+(6*stride) ] );\n\t\t\ts7 += abs( x[ ix+(7*stride) ] );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gasumpw( n, x, stride, ix ) + gasumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = gasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of absolute values (L1 norm) of strided array elements using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gasumpw\n*\n* @example\n* var gasumpw = require( '@stdlib/blas/ext/base/gasumpw' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gasumpw( x.length, x, 1 );\n* // returns 5.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gasumpw = require( '@stdlib/blas/ext/base/gasumpw' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gasumpw.ndarray( N, x, 2, 1 );\n* // returns 9.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gasumpw( x.length, x, 1 );\n* // returns 5.0\n*/\nfunction gasumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gcusumkbn\n*\n* @example\n* var gcusumkbn = require( '@stdlib/blas/ext/base/gcusumkbn' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gcusumkbn = require( '@stdlib/blas/ext/base/gcusumkbn' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumkbn.ndarray( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumkbn( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumkbn( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = s + v;\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc += (s-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + s;\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = s + c;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumkbn( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = s + v;\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc += (s-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + s;\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = s + c;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements.\n*\n* @module @stdlib/blas/ext/base/gcusum\n*\n* @example\n* var gcusum = require( '@stdlib/blas/ext/base/gcusum' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusum( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gcusum = require( '@stdlib/blas/ext/base/gcusum' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusum.ndarray( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gcusumkbn = require( './../../../../ext/base/gcusumkbn' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusum( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusum( N, sum, x, strideX, y, strideY ) {\n\treturn gcusumkbn( N, sum, x, strideX, y, strideY );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gcusumkbn = require( './../../../../ext/base/gcusumkbn' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusum( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusum( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn gcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gcusumkbn2\n*\n* @example\n* var gcusumkbn2 = require( '@stdlib/blas/ext/base/gcusumkbn2' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn2( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gcusumkbn2 = require( '@stdlib/blas/ext/base/gcusumkbn2' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumkbn2.ndarray( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumkbn2( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumkbn2( N, sum, x, strideX, y, strideY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\n\t\ty[ iy ] = sum + cs + ccs;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumkbn2( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumkbn2( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\n\t\ty[ iy ] = sum + cs + ccs;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using ordinary recursive summation.\n*\n* @module @stdlib/blas/ext/base/gcusumors\n*\n* @example\n* var gcusumors = require( '@stdlib/blas/ext/base/gcusumors' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumors( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gcusumors = require( '@stdlib/blas/ext/base/gcusumors' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumors.ndarray( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumors( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumors( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumors( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumors( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation:\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumpw( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumpw( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( N <= BLOCKSIZE ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\ty[ iy ] = sum + s;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tn = floor( N/2 );\n\tgcusumpw( n, sum, x, strideX, ix, y, strideY, iy );\n\tiy += (n-1) * strideY;\n\tgcusumpw( N-n, y[ iy ], x, strideX, ix+(n*strideX), y, strideY, iy+strideY ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gcusumpw\n*\n* @example\n* var gcusumpw = require( '@stdlib/blas/ext/base/gcusumpw' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumpw( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gcusumpw = require( '@stdlib/blas/ext/base/gcusumpw' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumpw.ndarray( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar cusum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumpw( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumpw( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\treturn cusum( N, sum, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Function} x.set - setter\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Object} input array object\n*\n* @example\n* var Complex64Array = require( '@stdlib/array/complex64' );\n* var Complex64 = require( '@stdlib/complex/float32' );\n* var reinterpret64 = require( '@stdlib/strided/base/reinterpret-complex64' );\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* var data = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var x = {\n*     'data': data,\n*     'setter': setter\n* };\n*\n* var alpha = new Complex64( 5.0, 5.0 );\n*\n* gfill( data.length, alpha, x, 1, 0 );\n*\n* var view = reinterpret64( x.data, 0 );\n* // view => <Float32Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, stride, offset ) {\n\tvar xbuf;\n\tvar set;\n\tvar ix;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tset = x.setter;\n\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( xbuf, ix, alpha );\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with a specified scalar constant.\n*\n* @module @stdlib/blas/ext/base/gfill\n*\n* @example\n* var gfill = require( '@stdlib/blas/ext/base/gfill' );\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill( x.length, 5.0, x, 1 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*\n* @example\n* var gfill = require( '@stdlib/blas/ext/base/gfill' );\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array/base/arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar\n* @param {Collection} x - input array\n* @param {integer} stride - index increment\n* @returns {Collection} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill( x.length, 5.0, x, 1 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, stride ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\tvar o;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessors ) {\n\t\tif ( stride < 0 ) {\n\t\t\tix = (1-N) * stride;\n\t\t} else {\n\t\t\tix = 0;\n\t\t}\n\t\taccessors( N, alpha, o, stride, ix );\n\t\treturn o.data;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] = alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] = alpha;\n\t\t\tx[ i+1 ] = alpha;\n\t\t\tx[ i+2 ] = alpha;\n\t\t\tx[ i+3 ] = alpha;\n\t\t\tx[ i+4 ] = alpha;\n\t\t\tx[ i+5 ] = alpha;\n\t\t\tx[ i+6 ] = alpha;\n\t\t\tx[ i+7 ] = alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array/base/arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar\n* @param {Collection} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Collection} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* gfill( 3, 5.0, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessors ) {\n\t\taccessors( N, alpha, o, stride, offset );\n\t\treturn o.data;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] = alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] = alpha;\n\t\t\tx[ ix+1 ] = alpha;\n\t\t\tx[ ix+2 ] = alpha;\n\t\t\tx[ ix+3 ] = alpha;\n\t\t\tx[ ix+4 ] = alpha;\n\t\t\tx[ ix+5 ] = alpha;\n\t\t\tx[ ix+6 ] = alpha;\n\t\t\tx[ ix+7 ] = alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Fills a strided array according to a provided callback function.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Function} x.set - setter\n* @param {Function} x.get - getter\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @param {Callback} clbk - callback\n* @param {*} thisArg - execution context\n* @returns {Object} input array object\n*\n* @example\n* var Complex64Array = require( '@stdlib/array/complex64' );\n* var Complex64 = require( '@stdlib/complex/float32' );\n* var reinterpret64 = require( '@stdlib/strided/base/reinterpret-complex64' );\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var data = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var x = {\n*     'data': data,\n*     'setter': setter,\n*     'getter': getter\n* };\n*\n* function clbk() {\n*     return new Complex64( 5.0, 5.0 );\n* }\n*\n* gfillBy( data.length, x, 1, 0, clbk, void 0 );\n*\n* var view = reinterpret64( x.data, 0 );\n* // view => <Float32Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfillBy( N, x, stride, offset, clbk, thisArg ) {\n\tvar xbuf;\n\tvar set;\n\tvar get;\n\tvar ix;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessors:\n\tget = x.getter;\n\tset = x.setter;\n\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( xbuf, ix, clbk.call( thisArg, get( xbuf, ix ), i, ix, x ) );\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gfillBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array according to a provided callback function.\n*\n* @module @stdlib/blas/ext/base/gfill-by\n*\n* @example\n* var gfillBy = require( '@stdlib/blas/ext/base/gfill-by' );\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfillBy( x.length, x, 1, fill );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*\n* @example\n* var gfillBy = require( '@stdlib/blas/ext/base/gfill-by' );\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfillBy.ndarray( x.length, x, 1, 0, fill );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array/base/arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array according to a provided callback function.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} stride - index increment\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {Collection} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* gfillBy( x.length, x, 1, fill );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfillBy( N, x, stride, clbk, thisArg ) {\n\tvar ix;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessors ) {\n\t\taccessors( N, o, stride, ix, clbk, thisArg );\n\t\treturn o.data;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gfillBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array/base/arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array according to a provided callback function.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {Collection} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* gfillBy( 3, x, 1, x.length-3, fill );\n* // x => [ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfillBy( N, x, stride, offset, clbk, thisArg ) {\n\tvar ix;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessors ) {\n\t\taccessors( N, o, stride, offset, clbk, thisArg );\n\t\treturn o.data;\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gfillBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gnansumkbn\n*\n* @example\n* var gnansumkbn = require( '@stdlib/blas/ext/base/gnansumkbn' );\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumkbn( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gnansumkbn = require( '@stdlib/blas/ext/base/gnansumkbn' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumkbn.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumkbn( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values.\n*\n* @module @stdlib/blas/ext/base/gnansum\n*\n* @example\n* var gnansum = require( '@stdlib/blas/ext/base/gnansum' );\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansum( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gnansum = require( '@stdlib/blas/ext/base/gnansum' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansum.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gnansumkbn = require( './../../../../ext/base/gnansumkbn' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansum( N, x, 1 );\n* // returns 1.0\n*/\nfunction gnansum( N, x, stride ) {\n\treturn gnansumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gnansumkbn = require( './../../../../ext/base/gnansumkbn' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansum( N, x, stride, offset ) {\n\treturn gnansumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gnansumkbn2\n*\n* @example\n* var gnansumkbn2 = require( '@stdlib/blas/ext/base/gnansumkbn2' );\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumkbn2( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gnansumkbn2 = require( '@stdlib/blas/ext/base/gnansumkbn2' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumkbn2.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @module @stdlib/blas/ext/base/gnansumors\n*\n* @example\n* var gnansumors = require( '@stdlib/blas/ext/base/gnansumors' );\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumors( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gnansumors = require( '@stdlib/blas/ext/base/gnansumors' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumors.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumors( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\ts = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn s;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn s;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\ts += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumors( N, x, stride, offset ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\ts = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn s;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn s;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\ts += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts1 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts2 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts3 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts4 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts5 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts6 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts7 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts1 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts2 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts3 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts4 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts5 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts6 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts7 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gnansumpw( n, x, stride, ix ) + gnansumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gnansumpw\n*\n* @example\n* var gnansumpw = require( '@stdlib/blas/ext/base/gnansumpw' );\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumpw( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gnansumpw = require( '@stdlib/blas/ext/base/gnansumpw' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumpw.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnansumpw;\n","\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Reverses a strided array in-place.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Function} x.set - setter\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Object} input array object\n*\n* @example\n* var Complex64Array = require( '@stdlib/array/complex64' );\n* var Complex64 = require( '@stdlib/complex/float32' );\n* var reinterpret64 = require( '@stdlib/strided/base/reinterpret-complex64' );\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var data = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var x = {\n*     'data': data,\n*     'setter': setter,\n*     'getter': getter\n* };\n*\n* grev( data.length, x, 1, 0 );\n*\n* var view = reinterpret64( x.data, 0 );\n* // view => <Float32Array>[ -1.0, -3.0, 4.0, 0.0, 3.0, -5.0, -2.0, 1.0 ]\n*/\nfunction grev( N, x, stride, offset ) {\n\tvar xbuf;\n\tvar set;\n\tvar get;\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessors:\n\tset = x.setter;\n\tget = x.getter;\n\n\tn = floor( N/2 );\n\tix = offset;\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = get( xbuf, ix );\n\t\tset( xbuf, ix, get( xbuf, iy ) );\n\t\tset( xbuf, iy, tmp );\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = grev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Reverse a strided array in-place.\n*\n* @module @stdlib/blas/ext/base/grev\n*\n* @example\n* var grev = require( '@stdlib/blas/ext/base/grev' );\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* grev( x.length, x, 1 );\n* // x => [ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*\n* @example\n* var grev = require( '@stdlib/blas/ext/base/grev' );\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* grev( x.length, x, 1, 0 );\n* // x => [ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar arraylike2object = require( '@stdlib/array/base/arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* grev( x.length, x, 1 );\n* // x => [ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\nfunction grev( N, x, stride ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar o;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessors ) {\n\t\tif ( stride < 0 ) {\n\t\t\tix = (1-N) * stride;\n\t\t} else {\n\t\t\tix = 0;\n\t\t}\n\t\taccessors( N, o, stride, ix );\n\t\treturn o.data;\n\t}\n\tn = floor( N/2 );\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( ix = 0; ix < m; ix++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tiy -= 1;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( ix = m; ix < n; ix += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = grev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar arraylike2object = require( '@stdlib/array/base/arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* grev( 3, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, -6.0, 5.0, -4.0 ]\n*/\nfunction grev( N, x, stride, offset ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar o;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessors ) {\n\t\taccessors( N, o, stride, offset );\n\t\treturn o.data;\n\t}\n\tn = floor( N/2 );\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = ix + N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tix += stride;\n\t\t\t\tiy -= stride;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < n; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = grev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously sort two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* @module @stdlib/blas/ext/base/gsort2hp\n*\n* @example\n* var gsort2hp = require( '@stdlib/blas/ext/base/gsort2hp' );\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* var gsort2hp = require( '@stdlib/blas/ext/base/gsort2hp' );\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2hp( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously sort two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @module @stdlib/blas/ext/base/gsort2ins\n*\n* @example\n* var gsort2ins = require( '@stdlib/blas/ext/base/gsort2ins' );\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* var gsort2ins = require( '@stdlib/blas/ext/base/gsort2ins' );\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2ins( N, order, x, strideX, y, strideY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideY < 0 ) {\n\t\tfy = (1-N) * strideY;\n\t\tly = 0;\n\t} else {\n\t\tfy = 0;\n\t\tly = (N-1) * strideY;\n\t}\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * strideX; // first index\n\t\tlx = 0;               // last index\n\t\tix = fx + strideX;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * strideX; // last index\n\tix = fx + strideX;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously sort two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* @module @stdlib/blas/ext/base/gsort2sh\n*\n* @example\n* var gsort2sh = require( '@stdlib/blas/ext/base/gsort2sh' );\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* var gsort2sh = require( '@stdlib/blas/ext/base/gsort2sh' );\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar GAPS = require( './gaps.json' );\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2sh( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform Shellsort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar GAPS = require( './gaps.json' );\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform Shellsort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sort a strided array using heapsort.\n*\n* @module @stdlib/blas/ext/base/gsorthp\n*\n* @example\n* var gsorthp = require( '@stdlib/blas/ext/base/gsorthp' );\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* @example\n* var gsorthp = require( '@stdlib/blas/ext/base/gsorthp' );\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp.ndarray( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsorthp( N, order, x, stride ) {\n\tvar offset;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsorthp( N, order, x, stride, offset ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sort a strided array using insertion sort.\n*\n* @module @stdlib/blas/ext/base/gsortins\n*\n* @example\n* var gsortins = require( '@stdlib/blas/ext/base/gsortins' );\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* @example\n* var gsortins = require( '@stdlib/blas/ext/base/gsortins' );\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins.ndarray( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortins( N, order, x, stride ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * stride; // first index\n\t\tlx = 0;              // last index\n\t\tix = fx + stride;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * stride; // last index\n\tix = fx + stride;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortins( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfx = offset;              // first index\n\tlx = fx + ((N-1)*stride); // last index\n\tix = fx + stride;\n\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sort a strided array using Shellsort.\n*\n* @module @stdlib/blas/ext/base/gsortsh\n*\n* @example\n* var gsortsh = require( '@stdlib/blas/ext/base/gsortsh' );\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* @example\n* var gsortsh = require( '@stdlib/blas/ext/base/gsortsh' );\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh.ndarray( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar GAPS = require( './gaps.json' );\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortsh( N, order, x, stride ) {\n\tvar offset;\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar GAPS = require( './gaps.json' );\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortsh( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gsumkbn\n*\n* @example\n* var gsumkbn = require( '@stdlib/blas/ext/base/gsumkbn' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumkbn( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gsumkbn = require( '@stdlib/blas/ext/base/gsumkbn' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumkbn.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction gsumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumkbn( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements.\n*\n* @module @stdlib/blas/ext/base/gsum\n*\n* @example\n* var gsum = require( '@stdlib/blas/ext/base/gsum' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsum( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gsum = require( '@stdlib/blas/ext/base/gsum' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsum.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gsumkbn = require( './../../../../ext/base/gsumkbn' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsum( N, x, 1 );\n* // returns 1.0\n*/\nfunction gsum( N, x, stride ) {\n\treturn gsumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gsumkbn = require( './../../../../ext/base/gsumkbn' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsum( N, x, stride, offset ) {\n\treturn gsumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gsumkbn2\n*\n* @example\n* var gsumkbn2 = require( '@stdlib/blas/ext/base/gsumkbn2' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumkbn2( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gsumkbn2 = require( '@stdlib/blas/ext/base/gsumkbn2' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumkbn2.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction gsumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using ordinary recursive summation.\n*\n* @module @stdlib/blas/ext/base/gsumors\n*\n* @example\n* var gsumors = require( '@stdlib/blas/ext/base/gsumors' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumors( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gsumors = require( '@stdlib/blas/ext/base/gsumors' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumors.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction gsumors( N, x, stride ) {\n\tvar ix;\n\tvar m;\n\tvar s;\n\tvar i;\n\n\ts = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn s;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ts += x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn s;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ts += x[i] + x[i+1] + x[i+2] + x[i+3] + x[i+4] + x[i+5];\n\t\t}\n\t\treturn s;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ts += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumors( N, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar s;\n\tvar i;\n\n\ts = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn s;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn s;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ts += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn s;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ts += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+stride ];\n\t\t\ts2 += x[ ix+(2*stride) ];\n\t\t\ts3 += x[ ix+(3*stride) ];\n\t\t\ts4 += x[ ix+(4*stride) ];\n\t\t\ts5 += x[ ix+(5*stride) ];\n\t\t\ts6 += x[ ix+(6*stride) ];\n\t\t\ts7 += x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gsumpw( n, x, stride, ix ) + gsumpw( N-n, x, stride, ix+(n*stride) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gsumpw\n*\n* @example\n* var gsumpw = require( '@stdlib/blas/ext/base/gsumpw' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumpw( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var gsumpw = require( '@stdlib/blas/ext/base/gsumpw' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumpw.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction gsumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sapx = require( './sapx.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sapx, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each element in a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* sapx( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\nfunction sapx( N, alpha, x, stride ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] += alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] += alpha;\n\t\t\tx[ i+1 ] += alpha;\n\t\t\tx[ i+2 ] += alpha;\n\t\t\tx[ i+3 ] += alpha;\n\t\t\tx[ i+4 ] += alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each element in a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n* var alpha = 5.0;\n*\n* sapx( 3, alpha, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, 1.0, 10.0, -1.0 ]\n*/\nfunction sapx( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] += alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] += alpha;\n\t\t\tx[ ix+1 ] += alpha;\n\t\t\tx[ ix+2 ] += alpha;\n\t\t\tx[ ix+3 ] += alpha;\n\t\t\tx[ ix+4 ] += alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sapxsumkbn = require( './sapxsumkbn.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sapxsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sapxsumkbn( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumkbn( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum + v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sapxsumkbn( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumkbn( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ offset ] );\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum + v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sapxsum = require( './sapxsum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sapxsumkbn = require( './../../../../ext/base/sapxsumkbn' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sapxsum( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsum( N, alpha, x, stride ) {\n\treturn sapxsumkbn( N, alpha, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sapxsumkbn = require( './../../../../ext/base/sapxsumkbn' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sapxsum( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsum( N, alpha, x, stride, offset ) {\n\treturn sapxsumkbn( N, alpha, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sapxsumkbn2 = require( './sapxsumkbn2.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sapxsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sapxsumkbn2( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumkbn2( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sapxsumkbn2( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumkbn2( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ offset ] );\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sapxsumors = require( './sapxsumors.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sapxsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sapxsumors( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumors( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + float64ToFloat32( alpha+x[ ix ] ) );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sapxsumors( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumors( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + float64ToFloat32( alpha+x[ ix ] ) );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sapxsumpw( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ offset ] );\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = float64ToFloat32( alpha + x[ ix ] );\n\t\ts1 = float64ToFloat32( alpha + x[ ix+stride ] );\n\t\ts2 = float64ToFloat32( alpha + x[ ix+(2*stride) ] );\n\t\ts3 = float64ToFloat32( alpha + x[ ix+(3*stride) ] );\n\t\ts4 = float64ToFloat32( alpha + x[ ix+(4*stride) ] );\n\t\ts5 = float64ToFloat32( alpha + x[ ix+(5*stride) ] );\n\t\ts6 = float64ToFloat32( alpha + x[ ix+(6*stride) ] );\n\t\ts7 = float64ToFloat32( alpha + x[ ix+(7*stride) ] );\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\ts1 = float64ToFloat32( s1 + float64ToFloat32( alpha + x[ ix+stride ] ) );\n\t\t\ts2 = float64ToFloat32( s2 + float64ToFloat32( alpha + x[ ix+(2*stride) ] ) );\n\t\t\ts3 = float64ToFloat32( s3 + float64ToFloat32( alpha + x[ ix+(3*stride) ] ) );\n\t\t\ts4 = float64ToFloat32( s4 + float64ToFloat32( alpha + x[ ix+(4*stride) ] ) );\n\t\t\ts5 = float64ToFloat32( s5 + float64ToFloat32( alpha + x[ ix+(5*stride) ] ) );\n\t\t\ts6 = float64ToFloat32( s6 + float64ToFloat32( alpha + x[ ix+(6*stride) ] ) );\n\t\t\ts7 = float64ToFloat32( s7 + float64ToFloat32( alpha + x[ ix+(7*stride) ] ) );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sapxsumpw( n, alpha, x, stride, ix ) + sapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sapxsumpw = require( './sapxsumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sasumpw( N, x, 2, 1 );\n* // returns 9.0\n*/\nfunction sasumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + abs( x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = abs( x[ ix ] );\n\t\ts1 = abs( x[ ix+stride ] );\n\t\ts2 = abs( x[ ix+(2*stride) ] );\n\t\ts3 = abs( x[ ix+(3*stride) ] );\n\t\ts4 = abs( x[ ix+(4*stride) ] );\n\t\ts5 = abs( x[ ix+(5*stride) ] );\n\t\ts6 = abs( x[ ix+(6*stride) ] );\n\t\ts7 = abs( x[ ix+(7*stride) ] );\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + abs( x[ ix ] ) );\n\t\t\ts1 = float64ToFloat32( s1 + abs( x[ ix+stride ] ) );\n\t\t\ts2 = float64ToFloat32( s2 + abs( x[ ix+(2*stride) ] ) );\n\t\t\ts3 = float64ToFloat32( s3 + abs( x[ ix+(3*stride) ] ) );\n\t\t\ts4 = float64ToFloat32( s4 + abs( x[ ix+(4*stride) ] ) );\n\t\t\ts5 = float64ToFloat32( s5 + abs( x[ ix+(5*stride) ] ) );\n\t\t\ts6 = float64ToFloat32( s6 + abs( x[ ix+(6*stride) ] ) );\n\t\t\ts7 = float64ToFloat32( s7 + abs( x[ ix+(7*stride) ] ) );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) ); // eslint-disable-line max-len\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + abs( x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sasumpw( n, x, stride, ix ) + sasumpw( N-n, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = sasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sasumpw = require( './sasumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sasumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sasumpw( N, x, 1 );\n* // returns 5.0\n*/\nfunction sasumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + abs( x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar scusumkbn = require( './scusumkbn.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( scusumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = scusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n* var N = x.length;\n*\n* var v = scusumkbn( N, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumkbn( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( s + v );\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( s-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + s ) ); // eslint-disable-line max-len\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = float64ToFloat32( s + c );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = scusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = scusumkbn( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( s + v );\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( s-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + s ) ); // eslint-disable-line max-len\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = float64ToFloat32( s + c );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = scusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar scusum = require( './scusum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( scusum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = scusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar scusumkbn = require( './../../../../ext/base/scusumkbn' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n* var N = x.length;\n*\n* var v = scusum( N, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusum( N, sum, x, strideX, y, strideY ) {\n\treturn scusumkbn( N, sum, x, strideX, y, strideY );\n}\n\n\n// EXPORTS //\n\nmodule.exports = scusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar scusumkbn = require( './../../../../ext/base/scusumkbn' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = scusum( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusum( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn scusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY );\n}\n\n\n// EXPORTS //\n\nmodule.exports = scusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar scusumkbn2 = require( './scusumkbn2.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( scusumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = scusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n* var N = x.length;\n*\n* var v = scusumkbn2( N, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumkbn2( N, sum, x, strideX, y, strideY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\n\t\ty[ iy ] = float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = scusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = scusumkbn2( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumkbn2( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\n\t\ty[ iy ] = float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = scusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar scusumors = require( './scusumors.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( scusumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = scusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n* var N = x.length;\n*\n* var v = scusumors( N, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumors( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = scusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = scusumors( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumors( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = scusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation:\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = scusumpw( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumpw( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( N <= BLOCKSIZE ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\ty[ iy ] = float64ToFloat32( sum + s );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tn = floor( N/2 );\n\tscusumpw( n, sum, x, strideX, ix, y, strideY, iy );\n\tiy += (n-1) * strideY;\n\tscusumpw( N-n, y[ iy ], x, strideX, ix+(n*strideX), y, strideY, iy+strideY ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = scusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar scusumpw = require( './scusumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( scusumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = scusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar cusum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n* var N = x.length;\n*\n* var v = scusumpw( N, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumpw( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\treturn cusum( N, sum, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nmodule.exports = scusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sdsapxsumpw( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sdsapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ offset ] );\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+stride ];\n\t\ts2 = alpha + x[ ix+(2*stride) ];\n\t\ts3 = alpha + x[ ix+(3*stride) ];\n\t\ts4 = alpha + x[ ix+(4*stride) ];\n\t\ts5 = alpha + x[ ix+(5*stride) ];\n\t\ts6 = alpha + x[ ix+(6*stride) ];\n\t\ts7 = alpha + x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+stride ];\n\t\t\ts2 += alpha + x[ ix+(2*stride) ];\n\t\t\ts3 += alpha + x[ ix+(3*stride) ];\n\t\t\ts4 += alpha + x[ ix+(4*stride) ];\n\t\t\ts5 += alpha + x[ ix+(5*stride) ];\n\t\t\ts6 += alpha + x[ ix+(6*stride) ];\n\t\t\ts7 += alpha + x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sdsapxsumpw( n, alpha, x, stride, ix ) + sdsapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sdsapxsumpw = require( './sdsapxsumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sdsapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sdsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sdsapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sdsapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sdsapxsum = require( './sdsapxsum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sdsapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sdsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sdsapxsumpw = require( './../../../../ext/base/sdsapxsumpw' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sdsapxsum( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sdsapxsum( N, alpha, x, stride ) {\n\treturn sdsapxsumpw( N, alpha, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sdsapxsumpw = require( './../../../../ext/base/sdsapxsumpw' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sdsapxsum( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sdsapxsum( N, alpha, x, stride, offset ) {\n\treturn sdsapxsumpw( N, alpha, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sdsnansumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdsnansumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts1 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts2 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts3 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts4 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts5 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts6 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts7 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts1 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts2 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts3 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts4 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts5 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts6 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts7 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sdsnansumpw( n, x, stride, ix ) + sdsnansumpw( N-n, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sdsnansumpw = require( './sdsnansumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sdsnansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sdsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = sdsnansumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction sdsnansumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sdsnansum = require( './sdsnansum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sdsnansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sdsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sdsnansumpw = require( './../../../../ext/base/sdsnansumpw' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = sdsnansum( N, x, 1 );\n* // returns 1.0\n*/\nfunction sdsnansum( N, x, stride ) {\n\treturn sdsnansumpw( N, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sdsnansumpw = require( './../../../../ext/base/sdsnansumpw' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sdsnansum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdsnansum( N, x, stride, offset ) {\n\treturn sdsnansumpw( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sdssumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdssumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+stride ];\n\t\t\ts2 += x[ ix+(2*stride) ];\n\t\t\ts3 += x[ ix+(3*stride) ];\n\t\t\ts4 += x[ ix+(4*stride) ];\n\t\t\ts5 += x[ ix+(5*stride) ];\n\t\t\ts6 += x[ ix+(6*stride) ];\n\t\t\ts7 += x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sdssumpw( n, x, stride, ix ) + sdssumpw( N-n, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sdssumpw = require( './sdssumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sdssumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sdssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sdssumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction sdssumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sdssum = require( './sdssum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sdssum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sdssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sdssumpw = require( './../../../../ext/base/sdssumpw' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sdssum( N, x, 1 );\n* // returns 1.0\n*/\nfunction sdssum( N, x, stride ) {\n\treturn sdssumpw( N, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sdssumpw = require( './../../../../ext/base/sdssumpw' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sdssum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdssum( N, x, stride, offset ) {\n\treturn sdssumpw( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar sfill = require( './sfill.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sfill, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a single-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* sfill( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction sfill( N, alpha, x, stride ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] = alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] = alpha;\n\t\t\tx[ i+1 ] = alpha;\n\t\t\tx[ i+2 ] = alpha;\n\t\t\tx[ i+3 ] = alpha;\n\t\t\tx[ i+4 ] = alpha;\n\t\t\tx[ i+5 ] = alpha;\n\t\t\tx[ i+6 ] = alpha;\n\t\t\tx[ i+7 ] = alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a single-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* sfill( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction sfill( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] = alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] = alpha;\n\t\t\tx[ ix+1 ] = alpha;\n\t\t\tx[ ix+2 ] = alpha;\n\t\t\tx[ ix+3 ] = alpha;\n\t\t\tx[ ix+4 ] = alpha;\n\t\t\tx[ ix+5 ] = alpha;\n\t\t\tx[ ix+6 ] = alpha;\n\t\t\tx[ ix+7 ] = alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar snansumkbn = require( './snansumkbn.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( snansumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = snansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snansumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction snansumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nmodule.exports = snansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snansumkbn( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nmodule.exports = snansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar snansum = require( './snansum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( snansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = snansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar snansumkbn = require( './../../../../ext/base/snansumkbn' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snansum( N, x, 1 );\n* // returns 1.0\n*/\nfunction snansum( N, x, stride ) {\n\treturn snansumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = snansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar snansumkbn = require( './../../../../ext/base/snansumkbn' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snansum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansum( N, x, stride, offset ) {\n\treturn snansumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = snansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar snansumkbn2 = require( './snansumkbn2.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( snansumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = snansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snansumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction snansumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = float64ToFloat32( sum + v );\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = float64ToFloat32( cs + c );\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32(cs-t) + c );\n\t\t\t} else {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32(c-t) + cs );\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs = float64ToFloat32( ccs + cc );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs + ccs ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = snansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snansumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = float64ToFloat32( sum + v );\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = float64ToFloat32( cs + c );\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32(cs-t) + c );\n\t\t\t} else {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32(c-t) + cs );\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs = float64ToFloat32( ccs + cc );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs + ccs ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = snansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar snansumors = require( './snansumors.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( snansumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = snansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snansumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction snansumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = snansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snansumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = snansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snansumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts1 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts2 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts3 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts4 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts5 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts6 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts7 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = ( isnanf( x[ ix ] ) ) ? s0 : float64ToFloat32( s0 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts1 = ( isnanf( x[ ix ] ) ) ? s1 : float64ToFloat32( s1 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts2 = ( isnanf( x[ ix ] ) ) ? s2 : float64ToFloat32( s2 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts3 = ( isnanf( x[ ix ] ) ) ? s3 : float64ToFloat32( s3 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts4 = ( isnanf( x[ ix ] ) ) ? s4 : float64ToFloat32( s4 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts5 = ( isnanf( x[ ix ] ) ) ? s5 : float64ToFloat32( s5 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts6 = ( isnanf( x[ ix ] ) ) ? s6 : float64ToFloat32( s6 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts7 = ( isnanf( x[ ix ] ) ) ? s7 : float64ToFloat32( s7 + x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) ); // eslint-disable-line max-len\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( snansumpw( n, x, stride, ix ) + snansumpw( N-n, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = snansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar snansumpw = require( './snansumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( snansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = snansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snansumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction snansumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = snansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar srev = require( './srev.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( srev, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = srev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a single-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* srev( x.length, x, 1 );\n* // x => <Float32Array>[ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\nfunction srev( N, x, stride ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tn = floor( N/2 );\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( ix = 0; ix < m; ix++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tiy -= 1;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( ix = m; ix < n; ix += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = srev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a single-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* srev( 3, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, -6.0, 5.0, -4.0 ]\n*/\nfunction srev( N, x, stride, offset ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tn = floor( N/2 );\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = ix + N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tix += stride;\n\t\t\t\tiy -= stride;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < n; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = srev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar ssort2hp = require( './ssort2hp.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( ssort2hp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = ssort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveZerof = require( '@stdlib/math/base/assert/is-positive-zerof' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float32Array} `x`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2hp( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnanf( v1 ) || ( v1 === tx && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveZerof = require( '@stdlib/math/base/assert/is-positive-zerof' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float32Array} `x`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnanf( v1 ) || ( v1 === tx && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar ssort2ins = require( './ssort2ins.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( ssort2ins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = ssort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZerof = require( '@stdlib/math/base/assert/is-negative-zerof' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float32Array} `x`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2ins( N, order, x, strideX, y, strideY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideY < 0 ) {\n\t\tfy = (1-N) * strideY;\n\t\tly = 0;\n\t} else {\n\t\tfy = 0;\n\t\tly = (N-1) * strideY;\n\t}\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * strideX; // first index\n\t\tlx = 0;               // last index\n\t\tix = fx + strideX;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * strideX; // last index\n\tix = fx + strideX;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZerof = require( '@stdlib/math/base/assert/is-negative-zerof' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float32Array} `x`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar ssort2sh = require( './ssort2sh.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( ssort2sh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = ssort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZerof = require( '@stdlib/math/base/assert/is-negative-zerof' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar GAPS = require( './gaps.json' );\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float32Array} `x`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2sh( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZerof = require( '@stdlib/math/base/assert/is-negative-zerof' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar GAPS = require( './gaps.json' );\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float32Array} `x`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar ssorthp = require( './ssorthp.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( ssorthp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = ssorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveZerof = require( '@stdlib/math/base/assert/is-positive-zerof' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssorthp( x.length, 1.0, x, 1 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssorthp( N, order, x, stride ) {\n\tvar offset;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnanf( v1 ) || ( v1 === t && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveZerof = require( '@stdlib/math/base/assert/is-positive-zerof' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssorthp( x.length, 1.0, x, 1, 0 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssorthp( N, order, x, stride, offset ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnanf( v1 ) || ( v1 === t && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar ssortins = require( './ssortins.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( ssortins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = ssortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZerof = require( '@stdlib/math/base/assert/is-negative-zerof' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortins( x.length, 1.0, x, 1 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortins( N, order, x, stride ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * stride; // first index\n\t\tlx = 0;              // last index\n\t\tix = fx + stride;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * stride; // last index\n\tix = fx + stride;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZerof = require( '@stdlib/math/base/assert/is-negative-zerof' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortins( x.length, 1.0, x, 1, 0 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortins( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfx = offset;              // first index\n\tlx = fx + ((N-1)*stride); // last index\n\tix = fx + stride;\n\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar ssortsh = require( './ssortsh.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( ssortsh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = ssortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZerof = require( '@stdlib/math/base/assert/is-negative-zerof' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar GAPS = require( './gaps.json' );\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortsh( x.length, 1.0, x, 1 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortsh( N, order, x, stride ) {\n\tvar offset;\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZerof = require( '@stdlib/math/base/assert/is-negative-zerof' );\nvar isnanf = require( '@stdlib/math/base/assert/is-nanf' );\nvar GAPS = require( './gaps.json' );\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortsh( x.length, 1.0, x, 1, 0 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortsh( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar ssumkbn = require( './ssumkbn.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( ssumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = ssumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = ssumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction ssumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum + v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = ssumkbn( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum + v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar ssum = require( './ssum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( ssum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = ssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ssumkbn = require( './../../../../ext/base/ssumkbn' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = ssum( N, x, 1 );\n* // returns 1.0\n*/\nfunction ssum( N, x, stride ) {\n\treturn ssumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ssumkbn = require( './../../../../ext/base/ssumkbn' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = ssum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssum( N, x, stride, offset ) {\n\treturn ssumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar ssumkbn2 = require( './ssumkbn2.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( ssumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = ssumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = ssumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction ssumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = ssumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar ssumors = require( './ssumors.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( ssumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = ssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = ssumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction ssumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = ssumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = ssumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + x[ ix ] );\n\t\t\ts1 = float64ToFloat32( s1 + x[ ix+stride ] );\n\t\t\ts2 = float64ToFloat32( s2 + x[ ix+(2*stride) ] );\n\t\t\ts3 = float64ToFloat32( s3 + x[ ix+(3*stride) ] );\n\t\t\ts4 = float64ToFloat32( s4 + x[ ix+(4*stride) ] );\n\t\t\ts5 = float64ToFloat32( s5 + x[ ix+(5*stride) ] );\n\t\t\ts6 = float64ToFloat32( s6 + x[ ix+(6*stride) ] );\n\t\t\ts7 = float64ToFloat32( s7 + x[ ix+(7*stride) ] );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) ); // eslint-disable-line max-len\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( ssumpw( n, x, stride, ix ) + ssumpw( N-n, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar ssumpw = require( './ssumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( ssumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = ssumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction ssumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/ext/base}\n*/\nsetReadOnly( ns, 'base', require( './../../ext/base' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name dapx\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapx}\n*/\nsetReadOnly( ns, 'dapx', require( './../../../ext/base/dapx' ) );\n\n/**\n* @name dapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsum}\n*/\nsetReadOnly( ns, 'dapxsum', require( './../../../ext/base/dapxsum' ) );\n\n/**\n* @name dapxsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumkbn}\n*/\nsetReadOnly( ns, 'dapxsumkbn', require( './../../../ext/base/dapxsumkbn' ) );\n\n/**\n* @name dapxsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumkbn2}\n*/\nsetReadOnly( ns, 'dapxsumkbn2', require( './../../../ext/base/dapxsumkbn2' ) );\n\n/**\n* @name dapxsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumors}\n*/\nsetReadOnly( ns, 'dapxsumors', require( './../../../ext/base/dapxsumors' ) );\n\n/**\n* @name dapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumpw}\n*/\nsetReadOnly( ns, 'dapxsumpw', require( './../../../ext/base/dapxsumpw' ) );\n\n/**\n* @name dasumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dasumpw}\n*/\nsetReadOnly( ns, 'dasumpw', require( './../../../ext/base/dasumpw' ) );\n\n/**\n* @name dcusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusum}\n*/\nsetReadOnly( ns, 'dcusum', require( './../../../ext/base/dcusum' ) );\n\n/**\n* @name dcusumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumkbn}\n*/\nsetReadOnly( ns, 'dcusumkbn', require( './../../../ext/base/dcusumkbn' ) );\n\n/**\n* @name dcusumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumkbn2}\n*/\nsetReadOnly( ns, 'dcusumkbn2', require( './../../../ext/base/dcusumkbn2' ) );\n\n/**\n* @name dcusumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumors}\n*/\nsetReadOnly( ns, 'dcusumors', require( './../../../ext/base/dcusumors' ) );\n\n/**\n* @name dcusumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumpw}\n*/\nsetReadOnly( ns, 'dcusumpw', require( './../../../ext/base/dcusumpw' ) );\n\n/**\n* @name dfill\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dfill}\n*/\nsetReadOnly( ns, 'dfill', require( './../../../ext/base/dfill' ) );\n\n/**\n* @name dnanasum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnanasum}\n*/\nsetReadOnly( ns, 'dnanasum', require( './../../../ext/base/dnanasum' ) );\n\n/**\n* @name dnanasumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnanasumors}\n*/\nsetReadOnly( ns, 'dnanasumors', require( './../../../ext/base/dnanasumors' ) );\n\n/**\n* @name dnannsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsum}\n*/\nsetReadOnly( ns, 'dnannsum', require( './../../../ext/base/dnannsum' ) );\n\n/**\n* @name dnannsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumkbn}\n*/\nsetReadOnly( ns, 'dnannsumkbn', require( './../../../ext/base/dnannsumkbn' ) );\n\n/**\n* @name dnannsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumkbn2}\n*/\nsetReadOnly( ns, 'dnannsumkbn2', require( './../../../ext/base/dnannsumkbn2' ) );\n\n/**\n* @name dnannsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumors}\n*/\nsetReadOnly( ns, 'dnannsumors', require( './../../../ext/base/dnannsumors' ) );\n\n/**\n* @name dnannsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumpw}\n*/\nsetReadOnly( ns, 'dnannsumpw', require( './../../../ext/base/dnannsumpw' ) );\n\n/**\n* @name dnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansum}\n*/\nsetReadOnly( ns, 'dnansum', require( './../../../ext/base/dnansum' ) );\n\n/**\n* @name dnansumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumkbn}\n*/\nsetReadOnly( ns, 'dnansumkbn', require( './../../../ext/base/dnansumkbn' ) );\n\n/**\n* @name dnansumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumkbn2}\n*/\nsetReadOnly( ns, 'dnansumkbn2', require( './../../../ext/base/dnansumkbn2' ) );\n\n/**\n* @name dnansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumors}\n*/\nsetReadOnly( ns, 'dnansumors', require( './../../../ext/base/dnansumors' ) );\n\n/**\n* @name dnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumpw}\n*/\nsetReadOnly( ns, 'dnansumpw', require( './../../../ext/base/dnansumpw' ) );\n\n/**\n* @name drev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/drev}\n*/\nsetReadOnly( ns, 'drev', require( './../../../ext/base/drev' ) );\n\n/**\n* @name dsapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsapxsum}\n*/\nsetReadOnly( ns, 'dsapxsum', require( './../../../ext/base/dsapxsum' ) );\n\n/**\n* @name dsapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsapxsumpw}\n*/\nsetReadOnly( ns, 'dsapxsumpw', require( './../../../ext/base/dsapxsumpw' ) );\n\n/**\n* @name dsnannsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnannsumors}\n*/\nsetReadOnly( ns, 'dsnannsumors', require( './../../../ext/base/dsnannsumors' ) );\n\n/**\n* @name dsnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnansum}\n*/\nsetReadOnly( ns, 'dsnansum', require( './../../../ext/base/dsnansum' ) );\n\n/**\n* @name dsnansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnansumors}\n*/\nsetReadOnly( ns, 'dsnansumors', require( './../../../ext/base/dsnansumors' ) );\n\n/**\n* @name dsnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnansumpw}\n*/\nsetReadOnly( ns, 'dsnansumpw', require( './../../../ext/base/dsnansumpw' ) );\n\n/**\n* @name dsort2hp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsort2hp}\n*/\nsetReadOnly( ns, 'dsort2hp', require( './../../../ext/base/dsort2hp' ) );\n\n/**\n* @name dsort2ins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsort2ins}\n*/\nsetReadOnly( ns, 'dsort2ins', require( './../../../ext/base/dsort2ins' ) );\n\n/**\n* @name dsort2sh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsort2sh}\n*/\nsetReadOnly( ns, 'dsort2sh', require( './../../../ext/base/dsort2sh' ) );\n\n/**\n* @name dsorthp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsorthp}\n*/\nsetReadOnly( ns, 'dsorthp', require( './../../../ext/base/dsorthp' ) );\n\n/**\n* @name dsortins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsortins}\n*/\nsetReadOnly( ns, 'dsortins', require( './../../../ext/base/dsortins' ) );\n\n/**\n* @name dsortsh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsortsh}\n*/\nsetReadOnly( ns, 'dsortsh', require( './../../../ext/base/dsortsh' ) );\n\n/**\n* @name dssum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dssum}\n*/\nsetReadOnly( ns, 'dssum', require( './../../../ext/base/dssum' ) );\n\n/**\n* @name dssumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dssumors}\n*/\nsetReadOnly( ns, 'dssumors', require( './../../../ext/base/dssumors' ) );\n\n/**\n* @name dssumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dssumpw}\n*/\nsetReadOnly( ns, 'dssumpw', require( './../../../ext/base/dssumpw' ) );\n\n/**\n* @name dsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsum}\n*/\nsetReadOnly( ns, 'dsum', require( './../../../ext/base/dsum' ) );\n\n/**\n* @name dsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumkbn}\n*/\nsetReadOnly( ns, 'dsumkbn', require( './../../../ext/base/dsumkbn' ) );\n\n/**\n* @name dsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumkbn2}\n*/\nsetReadOnly( ns, 'dsumkbn2', require( './../../../ext/base/dsumkbn2' ) );\n\n/**\n* @name dsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumors}\n*/\nsetReadOnly( ns, 'dsumors', require( './../../../ext/base/dsumors' ) );\n\n/**\n* @name dsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumpw}\n*/\nsetReadOnly( ns, 'dsumpw', require( './../../../ext/base/dsumpw' ) );\n\n/**\n* @name gapx\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapx}\n*/\nsetReadOnly( ns, 'gapx', require( './../../../ext/base/gapx' ) );\n\n/**\n* @name gapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsum}\n*/\nsetReadOnly( ns, 'gapxsum', require( './../../../ext/base/gapxsum' ) );\n\n/**\n* @name gapxsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumkbn}\n*/\nsetReadOnly( ns, 'gapxsumkbn', require( './../../../ext/base/gapxsumkbn' ) );\n\n/**\n* @name gapxsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumkbn2}\n*/\nsetReadOnly( ns, 'gapxsumkbn2', require( './../../../ext/base/gapxsumkbn2' ) );\n\n/**\n* @name gapxsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumors}\n*/\nsetReadOnly( ns, 'gapxsumors', require( './../../../ext/base/gapxsumors' ) );\n\n/**\n* @name gapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumpw}\n*/\nsetReadOnly( ns, 'gapxsumpw', require( './../../../ext/base/gapxsumpw' ) );\n\n/**\n* @name gasumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gasumpw}\n*/\nsetReadOnly( ns, 'gasumpw', require( './../../../ext/base/gasumpw' ) );\n\n/**\n* @name gcusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusum}\n*/\nsetReadOnly( ns, 'gcusum', require( './../../../ext/base/gcusum' ) );\n\n/**\n* @name gcusumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumkbn}\n*/\nsetReadOnly( ns, 'gcusumkbn', require( './../../../ext/base/gcusumkbn' ) );\n\n/**\n* @name gcusumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumkbn2}\n*/\nsetReadOnly( ns, 'gcusumkbn2', require( './../../../ext/base/gcusumkbn2' ) );\n\n/**\n* @name gcusumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumors}\n*/\nsetReadOnly( ns, 'gcusumors', require( './../../../ext/base/gcusumors' ) );\n\n/**\n* @name gcusumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumpw}\n*/\nsetReadOnly( ns, 'gcusumpw', require( './../../../ext/base/gcusumpw' ) );\n\n/**\n* @name gfill\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gfill}\n*/\nsetReadOnly( ns, 'gfill', require( './../../../ext/base/gfill' ) );\n\n/**\n* @name gfillBy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gfill-by}\n*/\nsetReadOnly( ns, 'gfillBy', require( './../../../ext/base/gfill-by' ) );\n\n/**\n* @name gnannsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnannsumkbn}\n*/\nsetReadOnly( ns, 'gnannsumkbn', require( './../../../ext/base/gnannsumkbn' ) );\n\n/**\n* @name gnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansum}\n*/\nsetReadOnly( ns, 'gnansum', require( './../../../ext/base/gnansum' ) );\n\n/**\n* @name gnansumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumkbn}\n*/\nsetReadOnly( ns, 'gnansumkbn', require( './../../../ext/base/gnansumkbn' ) );\n\n/**\n* @name gnansumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumkbn2}\n*/\nsetReadOnly( ns, 'gnansumkbn2', require( './../../../ext/base/gnansumkbn2' ) );\n\n/**\n* @name gnansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumors}\n*/\nsetReadOnly( ns, 'gnansumors', require( './../../../ext/base/gnansumors' ) );\n\n/**\n* @name gnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumpw}\n*/\nsetReadOnly( ns, 'gnansumpw', require( './../../../ext/base/gnansumpw' ) );\n\n/**\n* @name grev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/grev}\n*/\nsetReadOnly( ns, 'grev', require( './../../../ext/base/grev' ) );\n\n/**\n* @name gsort2hp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsort2hp}\n*/\nsetReadOnly( ns, 'gsort2hp', require( './../../../ext/base/gsort2hp' ) );\n\n/**\n* @name gsort2ins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsort2ins}\n*/\nsetReadOnly( ns, 'gsort2ins', require( './../../../ext/base/gsort2ins' ) );\n\n/**\n* @name gsort2sh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsort2sh}\n*/\nsetReadOnly( ns, 'gsort2sh', require( './../../../ext/base/gsort2sh' ) );\n\n/**\n* @name gsorthp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsorthp}\n*/\nsetReadOnly( ns, 'gsorthp', require( './../../../ext/base/gsorthp' ) );\n\n/**\n* @name gsortins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsortins}\n*/\nsetReadOnly( ns, 'gsortins', require( './../../../ext/base/gsortins' ) );\n\n/**\n* @name gsortsh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsortsh}\n*/\nsetReadOnly( ns, 'gsortsh', require( './../../../ext/base/gsortsh' ) );\n\n/**\n* @name gsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsum}\n*/\nsetReadOnly( ns, 'gsum', require( './../../../ext/base/gsum' ) );\n\n/**\n* @name gsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumkbn}\n*/\nsetReadOnly( ns, 'gsumkbn', require( './../../../ext/base/gsumkbn' ) );\n\n/**\n* @name gsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumkbn2}\n*/\nsetReadOnly( ns, 'gsumkbn2', require( './../../../ext/base/gsumkbn2' ) );\n\n/**\n* @name gsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumors}\n*/\nsetReadOnly( ns, 'gsumors', require( './../../../ext/base/gsumors' ) );\n\n/**\n* @name gsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumpw}\n*/\nsetReadOnly( ns, 'gsumpw', require( './../../../ext/base/gsumpw' ) );\n\n/**\n* @name sapx\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapx}\n*/\nsetReadOnly( ns, 'sapx', require( './../../../ext/base/sapx' ) );\n\n/**\n* @name sapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsum}\n*/\nsetReadOnly( ns, 'sapxsum', require( './../../../ext/base/sapxsum' ) );\n\n/**\n* @name sapxsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumkbn}\n*/\nsetReadOnly( ns, 'sapxsumkbn', require( './../../../ext/base/sapxsumkbn' ) );\n\n/**\n* @name sapxsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumkbn2}\n*/\nsetReadOnly( ns, 'sapxsumkbn2', require( './../../../ext/base/sapxsumkbn2' ) );\n\n/**\n* @name sapxsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumors}\n*/\nsetReadOnly( ns, 'sapxsumors', require( './../../../ext/base/sapxsumors' ) );\n\n/**\n* @name sapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumpw}\n*/\nsetReadOnly( ns, 'sapxsumpw', require( './../../../ext/base/sapxsumpw' ) );\n\n/**\n* @name sasumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sasumpw}\n*/\nsetReadOnly( ns, 'sasumpw', require( './../../../ext/base/sasumpw' ) );\n\n/**\n* @name scusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusum}\n*/\nsetReadOnly( ns, 'scusum', require( './../../../ext/base/scusum' ) );\n\n/**\n* @name scusumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumkbn}\n*/\nsetReadOnly( ns, 'scusumkbn', require( './../../../ext/base/scusumkbn' ) );\n\n/**\n* @name scusumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumkbn2}\n*/\nsetReadOnly( ns, 'scusumkbn2', require( './../../../ext/base/scusumkbn2' ) );\n\n/**\n* @name scusumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumors}\n*/\nsetReadOnly( ns, 'scusumors', require( './../../../ext/base/scusumors' ) );\n\n/**\n* @name scusumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumpw}\n*/\nsetReadOnly( ns, 'scusumpw', require( './../../../ext/base/scusumpw' ) );\n\n/**\n* @name sdsapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsapxsum}\n*/\nsetReadOnly( ns, 'sdsapxsum', require( './../../../ext/base/sdsapxsum' ) );\n\n/**\n* @name sdsapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsapxsumpw}\n*/\nsetReadOnly( ns, 'sdsapxsumpw', require( './../../../ext/base/sdsapxsumpw' ) );\n\n/**\n* @name sdsnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsnansum}\n*/\nsetReadOnly( ns, 'sdsnansum', require( './../../../ext/base/sdsnansum' ) );\n\n/**\n* @name sdsnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsnansumpw}\n*/\nsetReadOnly( ns, 'sdsnansumpw', require( './../../../ext/base/sdsnansumpw' ) );\n\n/**\n* @name sdssum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdssum}\n*/\nsetReadOnly( ns, 'sdssum', require( './../../../ext/base/sdssum' ) );\n\n/**\n* @name sdssumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdssumpw}\n*/\nsetReadOnly( ns, 'sdssumpw', require( './../../../ext/base/sdssumpw' ) );\n\n/**\n* @name sfill\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sfill}\n*/\nsetReadOnly( ns, 'sfill', require( './../../../ext/base/sfill' ) );\n\n/**\n* @name snansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansum}\n*/\nsetReadOnly( ns, 'snansum', require( './../../../ext/base/snansum' ) );\n\n/**\n* @name snansumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumkbn}\n*/\nsetReadOnly( ns, 'snansumkbn', require( './../../../ext/base/snansumkbn' ) );\n\n/**\n* @name snansumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumkbn2}\n*/\nsetReadOnly( ns, 'snansumkbn2', require( './../../../ext/base/snansumkbn2' ) );\n\n/**\n* @name snansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumors}\n*/\nsetReadOnly( ns, 'snansumors', require( './../../../ext/base/snansumors' ) );\n\n/**\n* @name snansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumpw}\n*/\nsetReadOnly( ns, 'snansumpw', require( './../../../ext/base/snansumpw' ) );\n\n/**\n* @name srev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/srev}\n*/\nsetReadOnly( ns, 'srev', require( './../../../ext/base/srev' ) );\n\n/**\n* @name ssort2hp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssort2hp}\n*/\nsetReadOnly( ns, 'ssort2hp', require( './../../../ext/base/ssort2hp' ) );\n\n/**\n* @name ssort2ins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssort2ins}\n*/\nsetReadOnly( ns, 'ssort2ins', require( './../../../ext/base/ssort2ins' ) );\n\n/**\n* @name ssort2sh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssort2sh}\n*/\nsetReadOnly( ns, 'ssort2sh', require( './../../../ext/base/ssort2sh' ) );\n\n/**\n* @name ssorthp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssorthp}\n*/\nsetReadOnly( ns, 'ssorthp', require( './../../../ext/base/ssorthp' ) );\n\n/**\n* @name ssortins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssortins}\n*/\nsetReadOnly( ns, 'ssortins', require( './../../../ext/base/ssortins' ) );\n\n/**\n* @name ssortsh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssortsh}\n*/\nsetReadOnly( ns, 'ssortsh', require( './../../../ext/base/ssortsh' ) );\n\n/**\n* @name ssum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssum}\n*/\nsetReadOnly( ns, 'ssum', require( './../../../ext/base/ssum' ) );\n\n/**\n* @name ssumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumkbn}\n*/\nsetReadOnly( ns, 'ssumkbn', require( './../../../ext/base/ssumkbn' ) );\n\n/**\n* @name ssumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumkbn2}\n*/\nsetReadOnly( ns, 'ssumkbn2', require( './../../../ext/base/ssumkbn2' ) );\n\n/**\n* @name ssumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumors}\n*/\nsetReadOnly( ns, 'ssumors', require( './../../../ext/base/ssumors' ) );\n\n/**\n* @name ssumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumpw}\n*/\nsetReadOnly( ns, 'ssumpw', require( './../../../ext/base/ssumpw' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var out = [ 0.0, 0 ];\n*\n* var v = gnannsumkbn( x.length, x, 1, out, 1 );\n* // returns [ 1.0, 3 ]\n*/\nfunction gnannsumkbn( N, x, strideX, out, strideOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum + c;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isndarrayLike = require( '@stdlib/assert/is-ndarray-like' );\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar isFloat64Array = require( '@stdlib/assert/is-float64array' );\nvar isFloat32Array = require( '@stdlib/assert/is-float32array' );\nvar format = require( '@stdlib/string/format' );\nvar ddot = require( './../../base/ddot' ).ndarray;\nvar sdot = require( './../../base/sdot' ).ndarray;\nvar dot = require( './../../base/gdot' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of vectors `x` and `y`.\n*\n* ## Notes\n*\n* -   In general, for best performance, especially for large vectors, provide 1-dimensional `ndarrays` whose underlying data type is either `float64` or `float32`.\n*\n* @param {(Collection|VectorLike)} x - first input array\n* @param {(Collection|VectorLike)} y - second input array\n* @throws {TypeError} first argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {TypeError} second argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {RangeError} input arrays must be the same length\n* @returns {number} dot product\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* var z = gdot( x, y );\n* // returns -5.0\n*/\nfunction gdot( x, y ) {\n\tvar isxf64;\n\tvar isxf32;\n\tvar isyf64;\n\tvar isyf32;\n\tvar isxa;\n\tvar isxv;\n\tvar isya;\n\tvar isyv;\n\n\tisxa = isndarrayLike( x );\n\tisya = isndarrayLike( y );\n\tisxv = isxa && x.ndims === 1 && x.strides.length === 1; // is ndarray-like vector?\n\tisyv = isya && y.ndims === 1 && y.strides.length === 1; // is ndarray-like vector?\n\tif ( isxv ) {\n\t\tisxf64 = isFloat64Array( x.data );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x.data );\n\t} else if ( isxa === false && isCollection( x ) ) {\n\t\tisxf64 = isFloat64Array( x );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( isyv ) {\n\t\tisyf64 = isFloat64Array( y.data );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y.data );\n\t} else if ( isya === false && isCollection( y ) ) {\n\t\tisyf64 = isFloat64Array( y );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', y ) );\n\t}\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( format( 'invalid argument. Arrays must be the same length. First argument length: `%u`. Second argument length: `%u`.', x.length, y.length ) );\n\t}\n\tif ( isxv && isyv ) {\n\t\tif ( isxf64 && isyf64 ) {\n\t\t\treturn ddot( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t}\n\t\tif ( isxf32 && isyf32 ) {\n\t\t\treturn sdot( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t}\n\t\treturn dot( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t}\n\tif ( isxv ) {\n\t\treturn dot( x.length, x.data, x.strides[ 0 ], x.offset, y, 1, 0 );\n\t}\n\tif ( isyv ) {\n\t\treturn dot( x.length, x, 1, 0, y.data, y.strides[ 0 ], y.offset );\n\t}\n\treturn dot( x.length, x, 1, 0, y, 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isndarrayLike = require( '@stdlib/assert/is-ndarray-like' );\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar isFloat64Array = require( '@stdlib/assert/is-float64array' );\nvar isFloat32Array = require( '@stdlib/assert/is-float32array' );\nvar format = require( '@stdlib/string/format' );\nvar dswap = require( './../../base/dswap' ).ndarray;\nvar sswap = require( './../../base/sswap' ).ndarray;\nvar swap = require( './../../base/gswap' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Interchanges two vectors.\n*\n* ## Notes\n*\n* -   In general, for best performance, especially for large vectors, provide 1-dimensional `ndarrays` whose underlying data type is either `float64` or `float32`.\n*\n* @param {(Collection|VectorLike)} x - first input array\n* @param {(Collection|VectorLike)} y - second input array\n* @throws {TypeError} first argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {TypeError} second argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {RangeError} input arrays must be the same length\n* @returns {(Collection|VectorLike)} `y`\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* gswap( x, y );\n* // x => [ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n* // y => [ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nfunction gswap( x, y ) {\n\tvar isxf64;\n\tvar isxf32;\n\tvar isyf64;\n\tvar isyf32;\n\tvar isxa;\n\tvar isxv;\n\tvar isya;\n\tvar isyv;\n\n\tisxa = isndarrayLike( x );\n\tisya = isndarrayLike( y );\n\tisxv = isxa && x.ndims === 1 && x.strides.length === 1; // is ndarray-like vector?\n\tisyv = isya && y.ndims === 1 && y.strides.length === 1; // is ndarray-like vector?\n\tif ( isxv ) {\n\t\tisxf64 = isFloat64Array( x.data );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x.data );\n\t} else if ( isxa === false && isCollection( x ) ) {\n\t\tisxf64 = isFloat64Array( x );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( isyv ) {\n\t\tisyf64 = isFloat64Array( y.data );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y.data );\n\t} else if ( isya === false && isCollection( y ) ) {\n\t\tisyf64 = isFloat64Array( y );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', y ) );\n\t}\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( format( 'invalid argument. Arrays must be the same length. First argument length: `%u`. Second argument length: `%u`.', x.length, y.length ) );\n\t}\n\tif ( isxv && isyv ) {\n\t\tif ( isxf64 && isyf64 ) {\n\t\t\tdswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\tif ( isxf32 && isyf32 ) {\n\t\t\tsswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\tswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\treturn y;\n\t}\n\tif ( isxv ) {\n\t\tswap( x.length, x.data, x.strides[ 0 ], x.offset, y, 1, 0 );\n\t\treturn y;\n\t}\n\tif ( isyv ) {\n\t\tswap( x.length, x, 1, 0, y.data, y.strides[ 0 ], y.offset );\n\t\treturn y;\n\t}\n\tswap( x.length, x, 1, 0, y, 1, 0 );\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFloat32VectorLike = require( '@stdlib/assert/is-float32vector-like' );\nvar dot = require( './../../base/sdot' ).ndarray;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two single-precision floating-point vectors.\n*\n* @param {VectorLike} x - first input array\n* @param {VectorLike} y - second input array\n* @throws {TypeError} first argument must be a 1-dimensional ndarray containing single-precision floating-point numbers\n* @throws {TypeError} second argument must be a 1-dimensional ndarray containing single-precision floating-point numbers\n* @throws {RangeError} input arrays must be the same length\n* @returns {number} dot product\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var array = require( '@stdlib/ndarray/array' );\n*\n* var x = array( new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* var z = sdot( x, y );\n* // returns -5.0\n*/\nfunction sdot( x, y ) {\n\tif ( !isFloat32VectorLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a one-dimensional ndarray containing single-precision floating-point numbers (i.e., an ndarray whose underlying data buffer is a Float32Array). Value: `%s`.', x ) );\n\t}\n\tif ( !isFloat32VectorLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a one-dimensional ndarray containing single-precision floating-point numbers (i.e., an ndarray whose underlying data buffer is a Float32Array). Value: `%s`.', y ) );\n\t}\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( format( 'invalid argument. Arrays must be the same length. First argument length: `%u`. Second argument length: `%u`.', x.length, y.length ) );\n\t}\n\treturn dot( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFloat32VectorLike = require( '@stdlib/assert/is-float32vector-like' );\nvar format = require( '@stdlib/string/format' );\nvar swap = require( './../../base/sswap' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Interchanges two single-precision floating-point vectors.\n*\n* @param {VectorLike} x - first input array\n* @param {VectorLike} y - second input array\n* @throws {TypeError} first argument must be a 1-dimensional ndarray containing single-precision floating-point numbers\n* @throws {TypeError} second argument must be a 1-dimensional ndarray containing single-precision floating-point numbers\n* @throws {RangeError} input arrays must be the same length\n* @returns {VectorLike} `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var array = require( '@stdlib/ndarray/array' );\n*\n* var x = array( new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* sswap( x, y );\n*\n* var xbuf = x.data;\n* // returns <Float32Array>[ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n*\n* var ybuf = y.data;\n* // returns <Float32Array>[ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nfunction sswap( x, y ) {\n\tif ( !isFloat32VectorLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a one-dimensional ndarray containing single-precision floating-point numbers (i.e., an ndarray whose underlying data buffer is a Float32Array). Value: `%s`.', x ) );\n\t}\n\tif ( !isFloat32VectorLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a one-dimensional ndarray containing single-precision floating-point numbers (i.e., an ndarray whose underlying data buffer is a Float32Array). Value: `%s`.', y ) );\n\t}\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( format( 'invalid argument. Arrays must be the same length. First argument length: `%u`. Second argument length: `%u`.', x.length, y.length ) );\n\t}\n\tswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property' ;\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/base}\n*/\nimport base from './../base';\nsetReadOnly( ns, 'base', base );\n\n/**\n* @name ddot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ddot}\n*/\nimport ddot from './../ddot';\nsetReadOnly( ns, 'ddot', ddot );\n\n/**\n* @name dswap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/dswap}\n*/\nimport dswap from './../dswap';\nsetReadOnly( ns, 'dswap', dswap );\n\n/**\n* @name ext\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/ext}\n*/\nimport ext from './../ext';\nsetReadOnly( ns, 'ext', ext );\n\n/**\n* @name gdot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/gdot}\n*/\nimport gdot from './../gdot';\nsetReadOnly( ns, 'gdot', gdot );\n\n/**\n* @name gswap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/gswap}\n*/\nimport gswap from './../gswap';\nsetReadOnly( ns, 'gswap', gswap );\n\n/**\n* @name sdot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/sdot}\n*/\nimport sdot from './../sdot';\nsetReadOnly( ns, 'sdot', sdot );\n\n/**\n* @name sswap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/sswap}\n*/\nimport sswap from './../sswap';\nsetReadOnly( ns, 'sswap', sswap );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["ddot_1","N","x","strideX","y","strideY","dot","ix","iy","m","i","ndarray","offsetX","offsetY","ddot","require$$1","require$$0","require$$2","main","dswap","tmp","j","accessors","xbuf","ybuf","set","get","data","getter","setter","lib","setReadOnly","gnrm2","sqrt","abs","pow","gnrm2_1","stride","scale","ssq","ax","offset","arraylike2object","ox","oy","float64ToFloat32","sdot_1","sdot","sswap","blas","ccopy","Float32Array","ccopy_1","viewX","viewY","sx","sy","buffer","byteOffset","length","cswap","cswap_1","dasum","dasum_1","sum","require$$3","daxpy","daxpy_1","alpha","require$$4","dcopy","dcopy_1","require$$5","require$$6","dnrm2","dnrm2_1","require$$7","dscal","dscal_1","require$$8","dsdot","dsdot_1","require$$9","require$$10","require$$11","require$$12","require$$13","require$$14","require$$15","require$$16","require$$17","sasum","sasum_1","require$$18","saxpy","saxpy_1","require$$19","scopy","scopy_1","require$$20","require$$21","sdsdot","sdsdot_1","scalar","require$$22","snrm2","snrm2_1","require$$23","sscal","sscal_1","require$$24","require$$25","isFloat64VectorLike","format","TypeError","RangeError","strides","swap","dapx","dapx_1","dapxsumkbn","dapxsumkbn_1","v","t","c","dapxsum","dapxsum_1","dapxsumkbn2","dapxsumkbn2_1","ccs","cs","cc","dapxsumors","dapxsumors_1","floor","dapxsumpw","s0","s1","s2","s3","s4","s5","s6","s7","M","s","n","dapxsumpw_1","dasumpw","dasumpw_1","dcusumkbn","dcusumkbn_1","dcusum","dcusum_1","dcusumkbn2","dcusumkbn2_1","dcusumors","dcusumors_1","dcusumpw","cusum","dcusumpw_1","dfill","dfill_1","dnanasumors","isnan","dnanasumors_1","dnanasum","dnanasum_1","dnannsumkbn","dnannsumkbn_1","out","strideOut","io","offsetOut","dnannsum","dnannsum_1","dnannsumkbn2","dnannsumkbn2_1","dnannsumors","dnannsumors_1","sumpw_1","sumpw","dnannsumpw","dnannsumpw_1","dnansumkbn","dnansumkbn_1","dnansum","dnansum_1","dnansumkbn2","dnansumkbn2_1","dnansumors","dnansumors_1","dnansumpw","dnansumpw_1","drev","drev_1","dsapxsumpw","dsapxsumpw_1","dsapxsum","dsapxsum_1","dsnannsumors","dsnannsumors_1","isnanf","dsnansumpw","dsnansumpw_1","dsnansum","dsnansum_1","dsnansumors","dsnansumors_1","dsort2hp","isPositiveZero","dsort2hp_1","order","parent","child","v1","v2","tx","ty","k","dsort2ins","isNegativeZero","dsort2ins_1","flg","jx","fx","lx","jy","fy","ly","vx","vy","ux","dsort2sh","GAPS","NGAPS","dsort2sh_1","gap","dsorthp","dsorthp_1","dsortins","dsortins_1","u","dsortsh","dsortsh_1","dssumpw","dssumpw_1","dssum","dssum_1","dssumors","dssumors_1","dsumkbn","dsumkbn_1","dsum","dsum_1","dsumkbn2","dsumkbn2_1","dsumors","dsumors_1","dsumpw","dsumpw_1","gapxsumkbn","gapxsumpw","gasumpw","gcusumkbn","gcusumpw","o","clbk","thisArg","call","gnansumkbn","gnansumpw","gsumkbn","gsumpw","sapx","sapx_1","sapxsumkbn","sapxsumkbn_1","sapxsum","sapxsum_1","sapxsumkbn2","sapxsumkbn2_1","sapxsumors","sapxsumors_1","sapxsumpw","sapxsumpw_1","sasumpw","sasumpw_1","scusumkbn","scusumkbn_1","scusum","scusum_1","scusumkbn2","scusumkbn2_1","scusumors","scusumors_1","scusumpw","scusumpw_1","sdsapxsumpw","sdsapxsumpw_1","sdsapxsum","sdsapxsum_1","sdsnansumpw","sdsnansumpw_1","sdsnansum","sdsnansum_1","sdssumpw","sdssumpw_1","sdssum","sdssum_1","sfill","sfill_1","snansumkbn","snansumkbn_1","snansum","snansum_1","snansumkbn2","snansumkbn2_1","snansumors","snansumors_1","snansumpw","snansumpw_1","srev","srev_1","ssort2hp","isPositiveZerof","ssort2hp_1","ssort2ins","isNegativeZerof","ssort2ins_1","ssort2sh","ssort2sh_1","ssorthp","ssorthp_1","ssortins","ssortins_1","ssortsh","ssortsh_1","ssumkbn","ssumkbn_1","ssum","ssum_1","ssumkbn2","ssumkbn2_1","ssumors","ssumors_1","ssumpw","ssumpw_1","ns","require$$26","require$$27","require$$28","require$$29","require$$30","require$$31","require$$32","require$$33","require$$34","require$$35","require$$36","require$$37","require$$38","require$$39","require$$40","require$$41","require$$42","require$$43","require$$44","require$$45","require$$46","require$$47","require$$48","require$$49","require$$50","require$$51","require$$52","require$$53","require$$54","require$$55","require$$56","require$$57","require$$58","require$$59","require$$60","require$$61","require$$62","require$$63","require$$64","require$$65","require$$66","require$$67","require$$68","require$$69","require$$70","require$$71","require$$72","require$$73","require$$74","require$$75","require$$76","require$$77","require$$78","require$$79","require$$80","require$$81","require$$82","require$$83","require$$84","require$$85","require$$86","require$$87","require$$88","require$$89","require$$90","require$$91","require$$92","require$$93","require$$94","require$$95","require$$96","require$$97","require$$98","require$$99","require$$100","require$$101","require$$102","require$$103","require$$104","require$$105","require$$106","require$$107","require$$108","require$$109","require$$110","require$$111","require$$112","require$$113","require$$114","isndarrayLike","isCollection","isFloat64Array","isFloat32Array","isxf64","isxf32","isyf64","isyf32","isxa","isxv","isya","isyv","ndims","isFloat32VectorLike","base","ext","gdot","gswap"],"mappings":"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"}