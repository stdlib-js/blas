{"version":3,"file":"index.mjs","sources":["../base/diagonal-types/lib/main.js","../base/diagonal-types/lib/enum.js","../base/diagonal-types/lib/index.js","../base/assert/is-diagonal-type/lib/main.js","../base/layouts/lib/main.js","../base/layouts/lib/enum.js","../base/layouts/lib/index.js","../base/assert/is-layout/lib/main.js","../base/matrix-triangles/lib/main.js","../base/matrix-triangles/lib/enum.js","../base/matrix-triangles/lib/index.js","../base/assert/is-matrix-triangle/lib/main.js","../base/operation-sides/lib/main.js","../base/operation-sides/lib/enum.js","../base/operation-sides/lib/index.js","../base/assert/is-operation-side/lib/main.js","../base/transpose-operations/lib/main.js","../base/transpose-operations/lib/enum.js","../base/transpose-operations/lib/index.js","../base/assert/is-transpose-operation/lib/main.js","../base/assert/lib/index.js","../base/scabs1/lib/main.js","../base/caxpy/lib/ndarray.js","../base/caxpy/lib/caxpy.js","../base/ccopy/lib/ndarray.js","../base/ccopy/lib/ccopy.js","../base/cscal/lib/ndarray.js","../base/cscal/lib/cscal.js","../base/csrot/lib/ndarray.js","../base/csrot/lib/csrot.js","../base/cswap/lib/ndarray.js","../base/cswap/lib/cswap.js","../base/dasum/lib/ndarray.js","../base/dasum/lib/dasum.js","../base/caxpy/lib/main.js","../base/ccopy/lib/main.js","../base/cscal/lib/main.js","../base/csrot/lib/main.js","../base/cswap/lib/main.js","../base/dasum/lib/main.js","../base/daxpy/lib/ndarray.js","../base/daxpy/lib/daxpy.js","../base/dcabs1/lib/main.js","../base/daxpy/lib/main.js","../base/dcopy/lib/ndarray.js","../base/dcopy/lib/dcopy.js","../base/dcopy/lib/main.js","../base/ddot/lib/ndarray.js","../base/ddot/lib/ddot.js","../base/ddot/lib/main.js","../base/diagonal-type-enum2str/lib/main.js","../base/diagonal-type-str2enum/lib/main.js","../base/dnrm2/lib/ndarray.js","../base/dnrm2/lib/dnrm2.js","../base/drot/lib/ndarray.js","../base/drot/lib/drot.js","../base/drotg/lib/assign.js","../base/drotg/lib/main.js","../base/drotm/lib/ndarray.js","../base/drotm/lib/drotm.js","../base/dnrm2/lib/main.js","../base/drot/lib/main.js","../base/drotg/lib/index.js","../base/drotm/lib/main.js","../base/dscal/lib/ndarray.js","../base/dscal/lib/dscal.js","../base/dscal/lib/main.js","../base/dsdot/lib/ndarray.js","../base/dsdot/lib/dsdot.js","../base/dsdot/lib/main.js","../ext/base/dfill/lib/ndarray.js","../ext/base/dfill/lib/dfill.js","../base/dspmv/lib/base.js","../base/dspmv/lib/dspmv.js","../ext/base/dfill/lib/main.js","../base/dspmv/lib/main.js","../base/dspmv/lib/ndarray.js","../base/dspmv/lib/index.js","../0baa73b9ba0b6097279e8459d12f26","../base/dswap/lib/ndarray.js","../base/dswap/lib/dswap.js","../base/dswap/lib/main.js","../base/dsymv/lib/dsymv.js","../base/dsymv/lib/main.js","../base/dsymv/lib/ndarray.js","../base/dsymv/lib/index.js","../a4608b43215b8f283fc95eed323b89","../base/dsyr/lib/base.js","../base/dsyr/lib/dsyr.js","../base/dsyr/lib/main.js","../base/dsyr/lib/ndarray.js","../base/dsyr/lib/index.js","../0866953a4375f24048efc1db372b6a","../base/dsyr2/lib/base.js","../base/dsyr2/lib/dsyr2.js","../base/dsyr2/lib/main.js","../base/dsyr2/lib/ndarray.js","../base/dsyr2/lib/index.js","../45d4c0c19a11ed224521514b4b1147","../base/dtrmv/lib/base.js","../base/dtrmv/lib/dtrmv.js","../base/dtrmv/lib/main.js","../base/dtrmv/lib/ndarray.js","../base/dtrmv/lib/index.js","../b076abd7f5b67058ac34a2bdbbaa1b","../base/dznrm2/lib/ndarray.js","../base/dznrm2/lib/dznrm2.js","../base/dznrm2/lib/main.js","../base/dznrm2/lib/index.js","../389a38253b2b42ad01d48f359029e1","../base/gasum/lib/main.js","../base/gasum/lib/index.js","../base/gasum/lib/ndarray.js","../base/gaxpy/lib/main.js","../base/gcopy/lib/accessors.js","../base/gaxpy/lib/index.js","../base/gaxpy/lib/ndarray.js","../base/gcopy/lib/main.js","../base/gcopy/lib/index.js","../base/gcopy/lib/ndarray.js","../base/gdot/lib/main.js","../base/gdot/lib/ndarray.js","../base/gnrm2/lib/main.js","../base/gdot/lib/index.js","../base/gnrm2/lib/index.js","../base/gnrm2/lib/ndarray.js","../base/gscal/lib/main.js","../base/gswap/lib/accessors.js","../base/gscal/lib/index.js","../base/gscal/lib/ndarray.js","../base/gswap/lib/main.js","../base/gswap/lib/ndarray.js","../base/idamax/lib/ndarray.js","../base/idamax/lib/idamax.js","../base/isamax/lib/ndarray.js","../base/isamax/lib/isamax.js","../base/gswap/lib/index.js","../base/idamax/lib/main.js","../base/isamax/lib/main.js","../base/layout-enum2str/lib/main.js","../base/layout-str2enum/lib/main.js","../base/matrix-triangle-enum2str/lib/main.js","../base/matrix-triangle-str2enum/lib/main.js","../base/operation-side-enum2str/lib/main.js","../base/operation-side-str2enum/lib/main.js","../base/sasum/lib/ndarray.js","../base/sasum/lib/sasum.js","../base/sasum/lib/main.js","../base/saxpy/lib/ndarray.js","../base/saxpy/lib/saxpy.js","../base/saxpy/lib/main.js","../base/scasum/lib/ndarray.js","../base/scasum/lib/scasum.js","../base/scasum/lib/main.js","../base/scasum/lib/index.js","../ac4d912aceb8045ad54261019a1339","../base/scnrm2/lib/ndarray.js","../base/scnrm2/lib/scnrm2.js","../base/scnrm2/lib/main.js","../base/scnrm2/lib/index.js","../cf95502648c1bd55a66dff58eda087","../base/scopy/lib/ndarray.js","../base/scopy/lib/scopy.js","../base/sdot/lib/ndarray.js","../base/sdot/lib/sdot.js","../base/scopy/lib/main.js","../base/sdot/lib/main.js","../base/sdsdot/lib/ndarray.js","../base/sdsdot/lib/sdsdot.js","../base/sdsdot/lib/main.js","../9d0aa972da930ddc557fea27f92724","../ext/base/sfill/lib/ndarray.js","../ext/base/sfill/lib/sfill.js","../ext/base/sfill/lib/main.js","../base/sscal/lib/ndarray.js","../base/sscal/lib/sscal.js","../base/sgemv/lib/base.js","../base/sgemv/lib/sgemv.js","../base/sscal/lib/main.js","../base/sgemv/lib/main.js","../base/sgemv/lib/ndarray.js","../base/sgemv/lib/index.js","../base/snrm2/lib/ndarray.js","../base/snrm2/lib/snrm2.js","../base/srot/lib/ndarray.js","../base/srot/lib/srot.js","../base/srotg/lib/assign.js","../base/srotg/lib/main.js","../base/srotm/lib/ndarray.js","../base/srotm/lib/srotm.js","../base/snrm2/lib/main.js","../base/srot/lib/main.js","../base/srotg/lib/index.js","../base/srotm/lib/main.js","../base/sspmv/lib/sspmv.js","../base/sspmv/lib/main.js","../base/sspmv/lib/ndarray.js","../base/sspmv/lib/index.js","../fc76eb7c5aa71aca9bdc156e2c0e29","../base/sswap/lib/ndarray.js","../base/sswap/lib/sswap.js","../base/sswap/lib/main.js","../base/ssymv/lib/ssymv.js","../base/ssymv/lib/main.js","../base/ssymv/lib/ndarray.js","../base/ssymv/lib/index.js","../5396918f56b725275c7770de0c974c","../base/ssyr/lib/base.js","../base/ssyr/lib/ssyr.js","../base/ssyr/lib/main.js","../base/ssyr/lib/ndarray.js","../base/ssyr2/lib/base.js","../base/ssyr2/lib/ssyr2.js","../base/ssyr2/lib/main.js","../base/ssyr2/lib/ndarray.js","../base/ssyr2/lib/index.js","../a957731a570e6eee4d41692c95521e","../base/strmv/lib/base.js","../base/strmv/lib/strmv.js","../base/strmv/lib/main.js","../base/strmv/lib/ndarray.js","../base/strmv/lib/index.js","../ef4ccae2e437d908146b50233f92bb","../base/transpose-operation-enum2str/lib/main.js","../base/transpose-operation-str2enum/lib/main.js","../base/zaxpy/lib/ndarray.js","../base/zaxpy/lib/zaxpy.js","../base/zaxpy/lib/main.js","../base/zaxpy/lib/index.js","../3e37449bbebc7ee61c0de1308c41c7","../base/zcopy/lib/ndarray.js","../base/zcopy/lib/zcopy.js","../base/zdrot/lib/ndarray.js","../base/zdrot/lib/zdrot.js","../base/zscal/lib/ndarray.js","../base/zscal/lib/zscal.js","../base/zswap/lib/ndarray.js","../base/zswap/lib/zswap.js","../base/zcopy/lib/main.js","../base/zdrot/lib/main.js","../base/zscal/lib/main.js","../base/zswap/lib/main.js","../base/lib/index.js","../ddot/lib/main.js","../tools/swap-factory/lib/main.js","../base/diagonal-type-resolve-enum/lib/main.js","../base/diagonal-type-resolve-str/lib/main.js","../base/layout-resolve-enum/lib/main.js","../base/layout-resolve-str/lib/main.js","../base/matrix-triangle-resolve-enum/lib/main.js","../base/matrix-triangle-resolve-str/lib/main.js","../base/operation-side-resolve-enum/lib/main.js","../base/operation-side-resolve-str/lib/main.js","../base/transpose-operation-resolve-enum/lib/main.js","../base/transpose-operation-resolve-str/lib/main.js","../dswap/lib/main.js","../ext/base/dapx/lib/ndarray.js","../ext/base/dapx/lib/dapx.js","../ext/base/dapxsumkbn/lib/ndarray.js","../ext/base/dapxsumkbn/lib/dapxsumkbn.js","../ext/base/dapxsum/lib/ndarray.js","../ext/base/dapxsum/lib/dapxsum.js","../ext/base/dapxsumkbn2/lib/ndarray.js","../ext/base/dapxsumkbn2/lib/dapxsumkbn2.js","../ext/base/dapxsumors/lib/ndarray.js","../ext/base/dapxsumors/lib/dapxsumors.js","../ext/base/dapx/lib/main.js","../ext/base/dapxsumkbn/lib/main.js","../ext/base/dapxsum/lib/main.js","../ext/base/dapxsumkbn2/lib/main.js","../ext/base/dapxsumors/lib/main.js","../ext/base/dapxsumpw/lib/ndarray.js","../ext/base/dapxsumpw/lib/dapxsumpw.js","../ext/base/dapxsumpw/lib/main.js","../ext/base/dasumpw/lib/ndarray.js","../ext/base/dasumpw/lib/dasumpw.js","../ext/base/dcusumkbn/lib/ndarray.js","../ext/base/dcusumkbn/lib/dcusumkbn.js","../ext/base/dcusum/lib/ndarray.js","../ext/base/dcusum/lib/dcusum.js","../ext/base/dcusumkbn2/lib/ndarray.js","../ext/base/dcusumkbn2/lib/dcusumkbn2.js","../ext/base/dcusumors/lib/ndarray.js","../ext/base/dcusumors/lib/dcusumors.js","../ext/base/dasumpw/lib/main.js","../ext/base/dcusumkbn/lib/main.js","../ext/base/dcusum/lib/main.js","../ext/base/dcusumkbn2/lib/main.js","../ext/base/dcusumors/lib/main.js","../ext/base/dcusumpw/lib/ndarray.js","../ext/base/dcusumpw/lib/dcusumpw.js","../ext/base/dnanasumors/lib/ndarray.js","../ext/base/dnanasumors/lib/dnanasumors.js","../ext/base/dnanasum/lib/ndarray.js","../ext/base/dnanasum/lib/dnanasum.js","../ext/base/dnannsumkbn/lib/ndarray.js","../ext/base/dnannsumkbn/lib/dnannsumkbn.js","../ext/base/dnannsum/lib/ndarray.js","../ext/base/dnannsum/lib/dnannsum.js","../ext/base/dnannsumkbn2/lib/ndarray.js","../ext/base/dnannsumkbn2/lib/dnannsumkbn2.js","../ext/base/dnannsumors/lib/ndarray.js","../ext/base/dnannsumors/lib/dnannsumors.js","../ext/base/dcusumpw/lib/main.js","../ext/base/dnanasumors/lib/main.js","../ext/base/dnanasum/lib/main.js","../ext/base/dnannsumkbn/lib/main.js","../ext/base/dnannsum/lib/main.js","../ext/base/dnannsumkbn2/lib/main.js","../ext/base/dnannsumors/lib/main.js","../ext/base/dnannsumpw/lib/sumpw.js","../ext/base/dnannsumpw/lib/ndarray.js","../ext/base/dnannsumpw/lib/dnannsumpw.js","../ext/base/dnansumkbn/lib/ndarray.js","../ext/base/dnansumkbn/lib/dnansumkbn.js","../ext/base/dnansum/lib/ndarray.js","../ext/base/dnansum/lib/dnansum.js","../ext/base/dnansumkbn2/lib/ndarray.js","../ext/base/dnansumkbn2/lib/dnansumkbn2.js","../ext/base/dnansumors/lib/ndarray.js","../ext/base/dnansumors/lib/dnansumors.js","../ext/base/dnannsumpw/lib/main.js","../ext/base/dnansumkbn/lib/main.js","../ext/base/dnansum/lib/main.js","../ext/base/dnansumkbn2/lib/main.js","../ext/base/dnansumors/lib/main.js","../ext/base/dnansumpw/lib/ndarray.js","../ext/base/dnansumpw/lib/dnansumpw.js","../ext/base/dnansumpw/lib/main.js","../ext/base/drev/lib/ndarray.js","../ext/base/drev/lib/drev.js","../ext/base/drev/lib/main.js","../ext/base/dsapxsumpw/lib/ndarray.js","../ext/base/dsapxsumpw/lib/dsapxsumpw.js","../ext/base/dsapxsum/lib/ndarray.js","../ext/base/dsapxsum/lib/dsapxsum.js","../ext/base/dsnannsumors/lib/ndarray.js","../ext/base/dsnannsumors/lib/dsnannsumors.js","../ext/base/dsapxsumpw/lib/main.js","../ext/base/dsapxsum/lib/main.js","../ext/base/dsnannsumors/lib/main.js","../ext/base/dsnansumpw/lib/ndarray.js","../ext/base/dsnansumpw/lib/dsnansumpw.js","../ext/base/dsnansum/lib/ndarray.js","../ext/base/dsnansum/lib/dsnansum.js","../ext/base/dsnansumors/lib/ndarray.js","../ext/base/dsnansumors/lib/dsnansumors.js","../ext/base/dsort2hp/lib/dsort2hp.js","../ext/base/dsort2ins/lib/dsort2ins.js","../ext/base/dsnansumpw/lib/main.js","../ext/base/dsnansum/lib/main.js","../ext/base/dsnansumors/lib/main.js","../ext/base/dsort2hp/lib/main.js","../ext/base/dsort2hp/lib/ndarray.js","../ext/base/dsort2ins/lib/main.js","../ext/base/dsort2ins/lib/ndarray.js","../ext/base/dsort2sh/lib/dsort2sh.js","../ext/base/dsort2sh/lib/ndarray.js","../ext/base/dsorthp/lib/ndarray.js","../ext/base/dsorthp/lib/dsorthp.js","../ext/base/dsortins/lib/ndarray.js","../ext/base/dsortins/lib/dsortins.js","../ext/base/dsort2sh/lib/main.js","../ext/base/dsorthp/lib/main.js","../ext/base/dsortins/lib/main.js","../ext/base/dsortsh/lib/dsortsh.js","../ext/base/dsortsh/lib/ndarray.js","../ext/base/dsortsh/lib/main.js","../ext/base/dssumpw/lib/ndarray.js","../ext/base/dssumpw/lib/dssumpw.js","../ext/base/dssum/lib/ndarray.js","../ext/base/dssum/lib/dssum.js","../ext/base/dssumpw/lib/main.js","../ext/base/dssum/lib/main.js","../ext/base/dssumors/lib/ndarray.js","../ext/base/dssumors/lib/dssumors.js","../ext/base/dsumkbn/lib/ndarray.js","../ext/base/dsumkbn/lib/dsumkbn.js","../ext/base/dsum/lib/ndarray.js","../ext/base/dsum/lib/dsum.js","../ext/base/dsumkbn2/lib/ndarray.js","../ext/base/dsumkbn2/lib/dsumkbn2.js","../ext/base/dssumors/lib/main.js","../ext/base/dsumkbn/lib/main.js","../ext/base/dsum/lib/main.js","../ext/base/dsumkbn2/lib/main.js","../ext/base/dsumors/lib/ndarray.js","../ext/base/dsumors/lib/dsumors.js","../ext/base/dsumors/lib/main.js","../ext/base/dsumpw/lib/ndarray.js","../ext/base/dsumpw/lib/dsumpw.js","../ext/base/dsumpw/lib/main.js","../ext/base/gapx/lib/ndarray.js","../ext/base/gapx/lib/accessors.js","../ext/base/gapx/lib/main.js","../ext/base/gapxsumkbn/lib/ndarray.js","../ext/base/gapxsumkbn/lib/accessors.js","../ext/base/gapxsumkbn/lib/main.js","../ext/base/gapxsum/lib/ndarray.js","../ext/base/gapxsum/lib/main.js","../ext/base/gapxsumkbn2/lib/ndarray.js","../ext/base/gapxsumkbn2/lib/accessors.js","../ext/base/gapxsumkbn2/lib/main.js","../ext/base/gapxsumors/lib/ndarray.js","../ext/base/gapxsumors/lib/accessors.js","../ext/base/gapxsumors/lib/main.js","../ext/base/gapx/lib/index.js","../ext/base/gapxsumkbn/lib/index.js","../ext/base/gapxsum/lib/index.js","../ext/base/gapxsumkbn2/lib/index.js","../ext/base/gapxsumors/lib/index.js","../ext/base/gapxsumpw/lib/accessors.js","../ext/base/gapxsumpw/lib/ndarray.js","../ext/base/gapxsumpw/lib/main.js","../ext/base/gapxsumpw/lib/index.js","../ext/base/gasumpw/lib/accessors.js","../ext/base/gasumpw/lib/ndarray.js","../ext/base/gasumpw/lib/main.js","../ext/base/gcusumkbn/lib/ndarray.js","../ext/base/gcusumkbn/lib/accessors.js","../ext/base/gcusumkbn/lib/main.js","../ext/base/gcusum/lib/ndarray.js","../ext/base/gcusum/lib/main.js","../ext/base/gcusumkbn2/lib/ndarray.js","../ext/base/gcusumkbn2/lib/accessors.js","../ext/base/gcusumkbn2/lib/main.js","../ext/base/gcusumors/lib/ndarray.js","../ext/base/gcusumors/lib/accessors.js","../ext/base/gcusumors/lib/main.js","../ext/base/gasumpw/lib/index.js","../ext/base/gcusumkbn/lib/index.js","../ext/base/gcusum/lib/index.js","../ext/base/gcusumkbn2/lib/index.js","../ext/base/gcusumors/lib/index.js","../ext/base/gcusumpw/lib/accessors.js","../ext/base/gcusumpw/lib/ndarray.js","../ext/base/gcusumpw/lib/main.js","../ext/base/gcusumpw/lib/index.js","../ext/base/gfill/lib/ndarray.js","../ext/base/gfill/lib/accessors.js","../ext/base/gfill/lib/main.js","../ext/base/gfill-by/lib/ndarray.js","../ext/base/gfill-by/lib/accessors.js","../ext/base/gfill-by/lib/main.js","../ext/base/gnannsumkbn/lib/ndarray.js","../ext/base/gnannsumkbn/lib/accessors.js","../ext/base/gnansumkbn/lib/ndarray.js","../ext/base/gnansumkbn/lib/accessors.js","../ext/base/gnansumkbn/lib/main.js","../ext/base/gnansum/lib/ndarray.js","../ext/base/gnansum/lib/main.js","../ext/base/gnansumkbn2/lib/ndarray.js","../ext/base/gnansumkbn2/lib/accessors.js","../ext/base/gnansumkbn2/lib/main.js","../ext/base/gnansumors/lib/ndarray.js","../ext/base/gnansumors/lib/accessors.js","../ext/base/gnansumors/lib/main.js","../ext/base/gfill/lib/index.js","../ext/base/gfill-by/lib/index.js","../ext/base/gnansumkbn/lib/index.js","../ext/base/gnansum/lib/index.js","../ext/base/gnansumkbn2/lib/index.js","../ext/base/gnansumors/lib/index.js","../ext/base/gnansumpw/lib/accessors.js","../ext/base/gnansumpw/lib/ndarray.js","../ext/base/gnansumpw/lib/main.js","../ext/base/gnansumpw/lib/index.js","../ext/base/grev/lib/ndarray.js","../ext/base/grev/lib/accessors.js","../ext/base/grev/lib/main.js","../ext/base/gsort2hp/lib/ndarray.js","../ext/base/gsort2hp/lib/accessors.js","../ext/base/gsort2hp/lib/main.js","../ext/base/gsort2ins/lib/ndarray.js","../ext/base/gsort2ins/lib/accessors.js","../ext/base/gsort2ins/lib/main.js","../ext/base/grev/lib/index.js","../ext/base/gsort2hp/lib/index.js","../ext/base/gsort2ins/lib/index.js","../ext/base/gsort2sh/lib/accessors.js","../ext/base/gsort2sh/lib/ndarray.js","../ext/base/gsort2sh/lib/main.js","../ext/base/gsorthp/lib/ndarray.js","../ext/base/gsorthp/lib/accessors.js","../ext/base/gsorthp/lib/main.js","../ext/base/gsortins/lib/ndarray.js","../ext/base/gsortins/lib/accessors.js","../ext/base/gsortins/lib/main.js","../ext/base/gsort2sh/lib/index.js","../ext/base/gsorthp/lib/index.js","../ext/base/gsortins/lib/index.js","../ext/base/gsortsh/lib/accessors.js","../ext/base/gsortsh/lib/ndarray.js","../ext/base/gsortsh/lib/main.js","../ext/base/gsumkbn/lib/ndarray.js","../ext/base/gsumkbn/lib/accessors.js","../ext/base/gsumkbn/lib/main.js","../ext/base/gsum/lib/ndarray.js","../ext/base/gsum/lib/main.js","../ext/base/gsumkbn2/lib/ndarray.js","../ext/base/gsumkbn2/lib/accessors.js","../ext/base/gsumkbn2/lib/main.js","../ext/base/gsortsh/lib/index.js","../ext/base/gsumkbn/lib/index.js","../ext/base/gsum/lib/index.js","../ext/base/gsumkbn2/lib/index.js","../ext/base/gsumors/lib/ndarray.js","../ext/base/gsumors/lib/accessors.js","../ext/base/gsumors/lib/main.js","../ext/base/gsumors/lib/index.js","../ext/base/gsumpw/lib/accessors.js","../ext/base/gsumpw/lib/ndarray.js","../ext/base/gsumpw/lib/main.js","../ext/base/gsumpw/lib/index.js","../ext/base/sapx/lib/ndarray.js","../ext/base/sapx/lib/sapx.js","../ext/base/sapxsumkbn/lib/ndarray.js","../ext/base/sapxsumkbn/lib/sapxsumkbn.js","../ext/base/sapxsum/lib/ndarray.js","../ext/base/sapxsum/lib/sapxsum.js","../ext/base/sapxsumkbn2/lib/ndarray.js","../ext/base/sapxsumkbn2/lib/sapxsumkbn2.js","../ext/base/sapxsumors/lib/ndarray.js","../ext/base/sapxsumors/lib/sapxsumors.js","../ext/base/sapx/lib/main.js","../ext/base/sapxsumkbn/lib/main.js","../ext/base/sapxsum/lib/main.js","../ext/base/sapxsumkbn2/lib/main.js","../ext/base/sapxsumors/lib/main.js","../ext/base/sapxsumpw/lib/ndarray.js","../ext/base/sapxsumpw/lib/sapxsumpw.js","../ext/base/sapxsumpw/lib/main.js","../ext/base/sasumpw/lib/ndarray.js","../ext/base/sasumpw/lib/sasumpw.js","../ext/base/scusumkbn/lib/ndarray.js","../ext/base/scusumkbn/lib/scusumkbn.js","../ext/base/scusum/lib/scusum.js","../ext/base/scusumkbn2/lib/ndarray.js","../ext/base/scusumkbn2/lib/scusumkbn2.js","../ext/base/scusumors/lib/ndarray.js","../ext/base/scusumors/lib/scusumors.js","../ext/base/sasumpw/lib/main.js","../ext/base/scusumkbn/lib/main.js","../ext/base/scusum/lib/main.js","../ext/base/scusum/lib/ndarray.js","../ext/base/scusumkbn2/lib/main.js","../ext/base/scusumors/lib/main.js","../ext/base/scusumpw/lib/ndarray.js","../ext/base/scusumpw/lib/scusumpw.js","../ext/base/scusumpw/lib/main.js","../ext/base/sdsapxsumpw/lib/ndarray.js","../ext/base/sdsapxsumpw/lib/sdsapxsumpw.js","../ext/base/sdsapxsum/lib/ndarray.js","../ext/base/sdsapxsum/lib/sdsapxsum.js","../ext/base/sdsapxsumpw/lib/main.js","../ext/base/sdsapxsum/lib/main.js","../ext/base/sdsnansumpw/lib/ndarray.js","../ext/base/sdsnansumpw/lib/sdsnansumpw.js","../ext/base/sdsnansum/lib/sdsnansum.js","../ext/base/sdsnansumpw/lib/main.js","../ext/base/sdsnansum/lib/main.js","../ext/base/sdsnansum/lib/ndarray.js","../ext/base/sdssumpw/lib/ndarray.js","../ext/base/sdssumpw/lib/sdssumpw.js","../ext/base/sdssum/lib/ndarray.js","../ext/base/sdssum/lib/sdssum.js","../ext/base/snansumkbn/lib/ndarray.js","../ext/base/snansumkbn/lib/snansumkbn.js","../ext/base/snansum/lib/ndarray.js","../ext/base/snansum/lib/snansum.js","../ext/base/snansumkbn2/lib/ndarray.js","../ext/base/snansumkbn2/lib/snansumkbn2.js","../ext/base/snansumors/lib/ndarray.js","../ext/base/snansumors/lib/snansumors.js","../ext/base/sdssumpw/lib/main.js","../ext/base/sdssum/lib/main.js","../ext/base/snansumkbn/lib/main.js","../ext/base/snansum/lib/main.js","../ext/base/snansumkbn2/lib/main.js","../ext/base/snansumors/lib/main.js","../ext/base/snansumpw/lib/ndarray.js","../ext/base/snansumpw/lib/snansumpw.js","../ext/base/snansumpw/lib/main.js","../ext/base/srev/lib/ndarray.js","../ext/base/srev/lib/srev.js","../ext/base/ssort2hp/lib/ssort2hp.js","../ext/base/ssort2ins/lib/ssort2ins.js","../ext/base/srev/lib/main.js","../ext/base/ssort2hp/lib/main.js","../ext/base/ssort2hp/lib/ndarray.js","../ext/base/ssort2ins/lib/main.js","../ext/base/ssort2ins/lib/ndarray.js","../ext/base/ssort2sh/lib/ssort2sh.js","../ext/base/ssort2sh/lib/ndarray.js","../ext/base/ssorthp/lib/ssorthp.js","../ext/base/ssortins/lib/ssortins.js","../ext/base/ssort2sh/lib/main.js","../ext/base/ssorthp/lib/main.js","../ext/base/ssorthp/lib/ndarray.js","../ext/base/ssortins/lib/main.js","../ext/base/ssortins/lib/ndarray.js","../ext/base/ssortsh/lib/ssortsh.js","../ext/base/ssortsh/lib/ndarray.js","../ext/base/ssumkbn/lib/ndarray.js","../ext/base/ssumkbn/lib/ssumkbn.js","../ext/base/ssum/lib/ndarray.js","../ext/base/ssum/lib/ssum.js","../ext/base/ssumkbn2/lib/ndarray.js","../ext/base/ssumkbn2/lib/ssumkbn2.js","../ext/base/ssumors/lib/ndarray.js","../ext/base/ssumors/lib/ssumors.js","../ext/base/ssortsh/lib/main.js","../ext/base/ssumkbn/lib/main.js","../ext/base/ssum/lib/main.js","../ext/base/ssumkbn2/lib/main.js","../ext/base/ssumors/lib/main.js","../ext/base/ssumpw/lib/ndarray.js","../ext/base/ssumpw/lib/ssumpw.js","../ext/base/ssumpw/lib/main.js","../ext/base/lib/index.js","../ext/base/gnannsumkbn/lib/main.js","../ext/lib/index.js","../gdot/lib/main.js","../gswap/lib/main.js","../sdot/lib/main.js","../sswap/lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DATA from './data.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of BLAS diagonal element types.\n*\n* @returns {StringArray} list of diagonal element types\n*\n* @example\n* var list = diagonalTypes();\n* // e.g., returns [ 'non-unit', 'unit' ]\n*/\nfunction diagonalTypes() {\n\treturn DATA.slice();\n}\n\n\n// EXPORTS //\n\nexport default diagonalTypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported diagonal types to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `unit == 132`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of array objects.\n*\n* @returns {Object} object mapping supported types to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `diagonal_types.h` enumeration!!!!\n\treturn {\n\t\t// Elements along a diagonal are not all equal to one:\n\t\t'non-unit': 131,\n\n\t\t// Elements along a diagonal are all equal to one:\n\t\t'unit': 132\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of BLAS diagonal element types.\n*\n* @module @stdlib/blas/base/diagonal-types\n*\n* @example\n* import diagonalTypes from '@stdlib/blas/base/diagonal-types';\n*\n* var list = diagonalTypes();\n* // e.g., returns [ 'non-unit', 'unit' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport diagonalTypes from './../../../../base/diagonal-types';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a BLAS diagonal type.\n*\n* @name isDiagonalType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a diagonal type\n*\n* @example\n* var bool = isDiagonalType( 'unit' );\n* // returns true\n*\n* bool = isDiagonalType( 'non-unit' );\n* // returns true\n*\n* bool = isDiagonalType( 'foo' );\n* // returns false\n*/\nvar isDiagonalType = contains( diagonalTypes() );\n\n\n// EXPORTS //\n\nexport default isDiagonalType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DATA from './data.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of BLAS memory layouts.\n*\n* @returns {StringArray} list of memory layouts\n*\n* @example\n* var list = layouts();\n* // e.g., returns [ 'row-major', 'column-major' ]\n*/\nfunction layouts() {\n\treturn DATA.slice();\n}\n\n\n// EXPORTS //\n\nexport default layouts;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported layouts to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `row-major == 101`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of array objects.\n*\n* @returns {Object} object mapping supported layouts to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `layouts.h` enumeration!!!!\n\treturn {\n\t\t// Row-major (C-style):\n\t\t'row-major': 101,\n\n\t\t// Column-major (Fortran-style):\n\t\t'column-major': 102\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of BLAS memory layouts.\n*\n* @module @stdlib/blas/base/layouts\n*\n* @example\n* import layouts from '@stdlib/blas/base/layouts';\n*\n* var list = layouts();\n* // e.g., returns [ 'row-major', 'column-major' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport layouts from './../../../../base/layouts';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a BLAS memory layout.\n*\n* @name isLayout\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a memory layout\n*\n* @example\n* var bool = isLayout( 'row-major' );\n* // returns true\n*\n* bool = isLayout( 'column-major' );\n* // returns true\n*\n* bool = isLayout( 'foo' );\n* // returns false\n*/\nvar isLayout = contains( layouts() );\n\n\n// EXPORTS //\n\nexport default isLayout;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DATA from './data.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of BLAS matrix triangles.\n*\n* @returns {StringArray} list of matrix triangles\n*\n* @example\n* var list = matrixTriangles();\n* // e.g., returns [ 'upper', 'lower' ]\n*/\nfunction matrixTriangles() {\n\treturn DATA.slice();\n}\n\n\n// EXPORTS //\n\nexport default matrixTriangles;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported matrix triangles to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `upper == 121`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of array objects.\n*\n* @returns {Object} object mapping supported matrix triangles to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `matrix_triangles.h` enumeration!!!!\n\treturn {\n\t\t// Upper triangular part of a matrix:\n\t\t'upper': 121,\n\n\t\t// Lower triangular part of a matrix:\n\t\t'lower': 122\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of BLAS matrix triangles.\n*\n* @module @stdlib/blas/base/matrix-triangles\n*\n* @example\n* import matrixTriangles from '@stdlib/blas/base/matrix-triangles';\n*\n* var list = matrixTriangles();\n* // e.g., returns [ 'upper', 'lower' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport matrixTriangles from './../../../../base/matrix-triangles';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a BLAS matrix triangle.\n*\n* @name isMatrixTriangle\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a matrix triangle\n*\n* @example\n* var bool = isMatrixTriangle( 'lower' );\n* // returns true\n*\n* bool = isMatrixTriangle( 'upper' );\n* // returns true\n*\n* bool = isMatrixTriangle( 'foo' );\n* // returns false\n*/\nvar isMatrixTriangle = contains( matrixTriangles() );\n\n\n// EXPORTS //\n\nexport default isMatrixTriangle;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DATA from './data.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of BLAS operation sides.\n*\n* @returns {StringArray} list of operation sides\n*\n* @example\n* var list = operationSides();\n* // e.g., returns [ 'left', 'right' ]\n*/\nfunction operationSides() {\n\treturn DATA.slice();\n}\n\n\n// EXPORTS //\n\nexport default operationSides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported operation sides to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `left == 141`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of array objects.\n*\n* @returns {Object} object mapping supported types to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `operation_sides.h` enumeration!!!!\n\treturn {\n\t\t// Triangular matrix is on the left side of a matrix-matrix operation (e.g., AX = B, where A is a triangular matrix):\n\t\t'left': 141,\n\n\t\t// Triangular matrix is on the right side of a matrix-matrix operation (e.g., XA = B, where A is a triangular matrix):\n\t\t'right': 142\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of BLAS operation sides.\n*\n* @module @stdlib/blas/base/operation-sides\n*\n* @example\n* import operationSides from '@stdlib/blas/base/operation-sides';\n*\n* var list = operationSides();\n* // e.g., returns [ 'left', 'right' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport operationSides from './../../../../base/operation-sides';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a BLAS operation side.\n*\n* @name isOperationSide\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is an operation side\n*\n* @example\n* var bool = isOperationSide( 'right' );\n* // returns true\n*\n* bool = isOperationSide( 'left' );\n* // returns true\n*\n* bool = isOperationSide( 'foo' );\n* // returns false\n*/\nvar isOperationSide = contains( operationSides() );\n\n\n// EXPORTS //\n\nexport default isOperationSide;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DATA from './data.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of BLAS transpose operations.\n*\n* @returns {StringArray} list of transpose operations\n*\n* @example\n* var list = layouts();\n* // e.g., returns [ 'no-transpose', 'transpose', 'conjugate-transpose' ]\n*/\nfunction layouts() {\n\treturn DATA.slice();\n}\n\n\n// EXPORTS //\n\nexport default layouts;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported transpose operations to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `transpose == 112`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of array objects.\n*\n* @returns {Object} object mapping supported transpose operations to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `transpose_operations.h` enumeration!!!!\n\treturn {\n\t\t// No transposition:\n\t\t'no-transpose': 111,\n\n\t\t// Transposition:\n\t\t'transpose': 112,\n\n\t\t// Conjugate transposition:\n\t\t'conjugate-transpose': 113\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of BLAS transpose operations.\n*\n* @module @stdlib/blas/base/transpose-operations\n*\n* @example\n* import transposeOperations from '@stdlib/blas/base/transpose-operations';\n*\n* var list = transposeOperations();\n* // e.g., returns [ 'no-transpose', 'transpose', 'conjugate-transpose' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport ops from './../../../../base/transpose-operations';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a BLAS transpose operation.\n*\n* @name isTransposeOperation\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a transpose operation\n*\n* @example\n* var bool = isTransposeOperation( 'transpose' );\n* // returns true\n*\n* bool = isTransposeOperation( 'conjugate-transpose' );\n* // returns true\n*\n* bool = isTransposeOperation( 'foo' );\n* // returns false\n*/\nvar isTransposeOperation = contains( ops() );\n\n\n// EXPORTS //\n\nexport default isTransposeOperation;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name isDiagonalType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/assert/is-diagonal-type}\n*/\nimport isDiagonalType from './../../../base/assert/is-diagonal-type';\nsetReadOnly( ns, 'isDiagonalType', isDiagonalType );\n\n/**\n* @name isLayout\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/assert/is-layout}\n*/\nimport isLayout from './../../../base/assert/is-layout';\nsetReadOnly( ns, 'isLayout', isLayout );\n\n/**\n* @name isMatrixTriangle\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/assert/is-matrix-triangle}\n*/\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nsetReadOnly( ns, 'isMatrixTriangle', isMatrixTriangle );\n\n/**\n* @name isOperationSide\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/assert/is-operation-side}\n*/\nimport isOperationSide from './../../../base/assert/is-operation-side';\nsetReadOnly( ns, 'isOperationSide', isOperationSide );\n\n/**\n* @name isTransposeOperation\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/assert/is-transpose-operation}\n*/\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nsetReadOnly( ns, 'isTransposeOperation', isTransposeOperation );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport absf from '@stdlib/math/base/special/absf';\nimport realf from '@stdlib/complex/float32/real';\nimport imagf from '@stdlib/complex/float32/imag';\n\n\n// MAIN //\n\n/**\n* Computes the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point number.\n*\n* @param {Complex64} c - complex number\n* @returns {number} result\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var v = scabs1( new Complex64( 5.0, -3.0 ) );\n* // returns 8.0\n*/\nfunction scabs1( c ) {\n\treturn absf( realf( c ) ) + absf( imagf( c ) );\n}\n\n\n// EXPORTS //\n\nexport default scabs1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport scabs1 from './../../../base/scabs1';\nimport cmulf from '@stdlib/complex/float32/base/mul';\nimport caddf from '@stdlib/complex/float32/base/add';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant and adds the result to a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} ca - scalar constant\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {integer} offsetX - starting index for `cx`\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @param {integer} offsetY - starting index for `cy`\n* @returns {Complex64Array} second input array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var cy = new Complex64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var ca = new Complex64( 2.0, 2.0 );\n*\n* caxpy( 3, ca, cx, 1, 0, cy, 1, 0 );\n* // cy => <Complex64Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*/\nfunction caxpy( N, ca, cx, strideX, offsetX, cy, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn cy;\n\t}\n\tif ( scabs1( ca ) === 0.0 ) {\n\t\treturn cy;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tcy.set( caddf( cmulf( ca, cx.get( ix ) ), cy.get( iy ) ), iy );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn cy;\n}\n\n\n// EXPORTS //\n\nexport default caxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant and adds the result to a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} ca - scalar constant\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @returns {Complex64Array} second input array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var cy = new Complex64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var ca = new Complex64( 2.0, 2.0 );\n*\n* caxpy( 3, ca, cx, 1, cy, 1 );\n* // cy => <Complex64Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*/\nfunction caxpy( N, ca, cx, strideX, cy, strideY ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, ca, cx, strideX, ix, cy, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default caxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex64';\n\n\n// MAIN //\n\n/**\n* Copies values from one complex single-precision floating-point vector to another complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Complex64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Complex64Array} output array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* ccopy( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Complex64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*/\nfunction ccopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = reinterpret( x, 0 );\n\tviewY = reinterpret( y, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tviewY[ iy ] = viewX[ ix ];\n\t\tviewY[ iy+1 ] = viewX[ ix+1 ];\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default ccopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Copies values from one complex single-precision floating-point vector to another complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Complex64Array} output array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* ccopy( x.length, x, 1, y, 1 );\n* // y => <Complex64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*/\nfunction ccopy( N, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default ccopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cmulf from '@stdlib/complex/float32/base/mul';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} ca - constant\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting `cx` index\n* @returns {Complex64Array} input array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var ca = new Complex64( 2.0, 2.0 );\n*\n* cscal( 3, ca, cx, 1, 0 );\n* // cx => <Complex64Array>[ -2.0, 6.0, -2.0, 14.0, -2.0, 22.0 ]\n*/\nfunction cscal( N, ca, cx, strideX, offsetX ) {\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn cx;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tcx.set( cmulf( ca, cx.get( ix ) ), ix );\n\t\tix += strideX;\n\t}\n\treturn cx;\n}\n\n\n// EXPORTS //\n\nexport default cscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} ca - constant\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @returns {Complex64Array} input array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var ca = new Complex64( 2.0, 2.0 );\n*\n* cscal( 3, ca, cx, 1 );\n* // cx => <Complex64Array>[ -2.0, 6.0, -2.0, 14.0, -2.0, 22.0 ]\n*/\nfunction cscal( N, ca, cx, strideX ) {\n\tvar ox = stride2offset( N, strideX );\n\treturn ndarray( N, ca, cx, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default cscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex64';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting `cx` index\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @param {NonNegativeInteger} offsetY - starting `cy` index\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex64Array} `cy`\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* csrot( cx.length, cx, 1, 0, cy, 1, 0, 0.8, 0.6 );\n* // cx => <Complex64Array>[ ~0.8, ~1.6, ~2.4, ~3.2, 4.0, ~4.8, ~5.6, ~6.4 ]\n* // cy => <Complex64Array>[ ~-0.6, ~-1.2, ~-1.8, ~-2.4, -3.0, ~-3.6, ~-4.2, ~-4.8 ]\n*/\nfunction csrot( N, cx, strideX, offsetX, cy, strideY, offsetY, c, s ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn cy;\n\t}\n\tviewX = reinterpret( cx, 0 );\n\tviewY = reinterpret( cy, 0 );\n\tc = f32( c );\n\ts = f32( s );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = f32( c*viewX[ ix ] ) + f32( s*viewY[ iy ] );\n\t\tviewY[ iy ] = f32( c*viewY[ iy ] ) - f32( s*viewX[ ix ] );\n\t\tviewX[ ix ] = tmp;\n\n\t\ttmp = f32( c*viewX[ ix+1 ] ) + f32( s*viewY[ iy+1 ] );\n\t\tviewY[ iy+1 ] = f32( c*viewY[ iy+1 ] ) - f32( s*viewX[ ix+1 ] );\n\t\tviewX[ ix+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn cy;\n}\n\n\n// EXPORTS //\n\nexport default csrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex64Array} `cy`\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* csrot( cx.length, cx, 1, cy, 1, 0.8, 0.6 );\n* // cx => <Complex64Array>[ ~0.8, ~1.6, ~2.4, ~3.2, 4.0, ~4.8, ~5.6, ~6.4 ]\n* // cy => <Complex64Array>[ ~-0.6, ~-1.2, ~-1.8, ~-2.4, -3.0, ~-3.6, ~-4.2, ~-4.8 ]\n*/\nfunction csrot( N, cx, strideX, cy, strideY, c, s ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, cx, strideX, ix, cy, strideY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nexport default csrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex64';\n\n\n// MAIN //\n\n/**\n* Interchanges two complex single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Complex64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Complex64Array} `y`\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* cswap( x.length, x, 1, 0, y, 1, 0 );\n* // x => <Complex64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]\n* // y => <Complex64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*/\nfunction cswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = reinterpret( x, 0 );\n\tviewY = reinterpret( y, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = viewX[ ix ];\n\t\tviewX[ ix ] = viewY[ iy ];\n\t\tviewY[ iy ] = tmp;\n\n\t\ttmp = viewX[ ix+1 ];\n\t\tviewX[ ix+1 ] = viewY[ iy+1 ];\n\t\tviewY[ iy+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default cswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Interchanges two complex single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Complex64Array} `y`\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* cswap( x.length, x, 1, y, 1 );\n* // x => <Complex64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]\n* // y => <Complex64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*/\nfunction cswap( N, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default cswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - `x` stride length\n* @param {NonNegativeInteger} offset - starting index for `x`\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = dasum( x.length, x, 1, 0 );\n* // returns 15.0\n*/\nfunction dasum( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += abs( x[ix] );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - `x` stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = dasum( x.length, x, 1 );\n* // returns 15.0\n*/\nfunction dasum( N, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default dasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport caxpy from './caxpy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( caxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default caxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ccopy from './ccopy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ccopy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ccopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport cscal from './cscal.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( cscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default cscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport csrot from './csrot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( csrot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default csrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport cswap from './cswap.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( cswap, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default cswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dasum from './dasum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* daxpy( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction daxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\ty[ iy+1 ] += alpha * x[ ix+1 ];\n\t\t\ty[ iy+2 ] += alpha * x[ ix+2 ];\n\t\t\ty[ iy+3 ] += alpha * x[ ix+3 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += alpha * x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default daxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* daxpy( x.length, alpha, x, 1, y, 1 );\n* // y => <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction daxpy( N, alpha, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, alpha, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default daxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\nimport real from '@stdlib/complex/float64/real';\nimport imag from '@stdlib/complex/float64/imag';\n\n\n// MAIN //\n\n/**\n* Computes the sum of the absolute value of the real and imaginary part of a double-precision complex floating-point number.\n*\n* @param {Complex128} z - complex number\n* @returns {number} result\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var v = dcabs1( new Complex128( 5.0, -3.0 ) );\n* // returns 8.0\n*/\nfunction dcabs1( z ) {\n\treturn abs( real(z) ) + abs( imag(z) );\n}\n\n\n// EXPORTS //\n\nexport default dcabs1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport daxpy from './daxpy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( daxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default daxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dcopy( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dcopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] = x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] = x[ ix ];\n\t\t\ty[ iy+1 ] = x[ ix+1 ];\n\t\t\ty[ iy+2 ] = x[ ix+2 ];\n\t\t\ty[ iy+3 ] = x[ ix+3 ];\n\t\t\ty[ iy+4 ] = x[ ix+4 ];\n\t\t\ty[ iy+5 ] = x[ ix+5 ];\n\t\t\ty[ iy+6 ] = x[ ix+6 ];\n\t\t\ty[ iy+7 ] = x[ ix+7 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dcopy( x.length, x, 1, y, 1 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dcopy( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default dcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcopy from './dcopy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcopy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {integer} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = ddot( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction ddot( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += ( x[ ix ] * y[ iy ] );\n\t\t\t\tix += 1;\n\t\t\t\tiy += 1;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ ix ] * y[ iy ] ) + ( x[ ix+1 ] * y[ iy+1 ] ) + ( x[ ix+2 ] * y[ iy+2 ] ) + ( x[ ix+3 ] * y[ iy+3 ] ) + ( x[ ix+4 ] * y[ iy+4 ] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn dot;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nexport default ddot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = ddot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction ddot( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default ddot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ddot from './ddot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ddot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ddot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport { enum as enumeration } from './../../../base/diagonal-types';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the BLAS diagonal type string associated with a BLAS diagonal type enumeration constant.\n*\n* @param {integer} value - diagonal type enumeration constant\n* @returns {(string|null)} diagonal type string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/diagonal-type-str2enum';\n*\n* var v = str2enum( 'unit' );\n* // returns <number>\n*\n* var s = enum2str( v );\n* // returns 'unit'\n*/\nfunction enum2str( value ) {\n\tvar v = hash[ value ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from './../../../base/diagonal-types';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a BLAS diagonal type.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `UNIT == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} diagonal - diagonal type\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'unit' );\n* // returns <number>\n*/\nfunction str2enum( diagonal ) {\n\tvar v = ENUM[ diagonal ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT64_MAX from '@stdlib/constants/float64/max';\nimport abs from '@stdlib/math/base/special/abs';\nimport abs2 from '@stdlib/math/base/special/abs2';\nimport sqrt from '@stdlib/math/base/special/sqrt';\n\n\n// VARIABLES //\n\n// Blue's scaling constants:\nvar tsml = 1.4916681462400413E-154;\nvar tbig = 1.9979190722022350E+146;\nvar ssml = 4.4989137945431964E+161;\nvar sbig = 1.1113793747425387E-162;\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} L2-norm\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var z = dnrm2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnrm2( N, x, stride, offset ) {\n\tvar notbig;\n\tvar sumsq;\n\tvar abig;\n\tvar amed;\n\tvar asml;\n\tvar ymax;\n\tvar ymin;\n\tvar scl;\n\tvar ax;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offset;\n\n\t// Initialize loop values for accumulation:\n\tnotbig = true;\n\n\tsumsq = 0.0;\n\tabig = 0.0;\n\tamed = 0.0;\n\tasml = 0.0;\n\tscl = 1.0;\n\n\t// Compute the sum of squares using 3 accumulators--`abig` (sum of squares scaled down to avoid overflow), `asml` (sum of squares scaled up to avoid underflow), `amed` (sum of squares that do not require scaling)--and thresholds and multipliers--`tbig` (values bigger than this are scaled down by `sbig`) and `tsml` (values smaller than this are scaled up by `ssml`)...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = abs( x[ ix ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig += abs2( ax * sbig );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml += abs2( ax * ssml );\n\t\t\t}\n\t\t} else {\n\t\t\tamed += ( ax * ax );\n\t\t}\n\t\tix += stride;\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig` > 0...\n\t\tif ( amed > 0.0 || ( amed > FLOAT64_MAX ) || ( amed !== amed ) ) {\n\t\t\tabig += ( ( amed * sbig ) * sbig );\n\t\t}\n\t\tscl = 1.0 / sbig;\n\t\tsumsq = abig;\n\t} else if ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml` > 0...\n\t\tif ( amed > 0.0 || amed > FLOAT64_MAX || ( amed !== amed ) ) {\n\t\t\tamed = sqrt( amed );\n\t\t\tasml = sqrt( asml ) / ssml;\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscl = 1.0;\n\t\t\tsumsq = ( ymax * ymax ) * ( 1.0 + abs2( ymin / ymax ) );\n\t\t} else {\n\t\t\tscl = 1.0 / ssml;\n\t\t\tsumsq = asml;\n\t\t}\n\t} else {\n\t\t// All values are mid-range...\n\t\tscl = 1.0;\n\t\tsumsq = amed;\n\t}\n\treturn sqrt( sumsq ) * scl;\n}\n\n\n// EXPORTS //\n\nexport default dnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} L2-norm\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var out = dnrm2( 3, x, 1 );\n* // returns 3.0\n*/\nfunction dnrm2( N, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default dnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* drot( 4, x, 1, 1, y, 1, 1, 0.8, 0.6 );\n* // x => <Float64Array>[ 1.0, ~5.8, 7.2, 8.6, 10.0 ]\n* // y => <Float64Array>[ 6.0, 4.4, ~4.6, ~4.8, 5.0 ]\n*/\nfunction drot( N, x, strideX, offsetX, y, strideY, offsetY, c, s ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = ( c * x[ ix ] ) + ( s * y[ iy ] );\n\t\ty[ iy ] = ( c * y[ iy ] ) - ( s * x[ ix ] );\n\t\tx[ ix ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default drot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* drot( x.length, x, 1, y, 1, 0.8, 0.6 );\n* // x => <Float64Array>[ ~4.4, ~5.8, 7.2, 8.6, 10.0 ]\n* // y => <Float64Array>[ ~4.2, 4.4, 4.6, 4.8, 5.0 ]\n*/\nfunction drot( N, x, strideX, y, strideY, c, s ) {\n\tvar ix;\n\tvar iy;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nexport default drot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport abs2 from '@stdlib/math/base/special/abs2';\nimport copysign from '@stdlib/math/base/special/copysign';\n\n\n// MAIN //\n\n/**\n* Constructs a Givens plane rotation.\n*\n* @param {number} a - rotational elimination parameter\n* @param {number} b - rotational elimination parameter\n* @param {Float64Array} out - output array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var out = drotg( 0.0, 2.0, new Float64Array( 4 ), 1, 0 );\n* // returns <Float64Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*/\nfunction drotg( a, b, out, stride, offset ) {\n\tvar scale;\n\tvar sign;\n\tvar aa;\n\tvar ab;\n\tvar r;\n\tvar c;\n\tvar s;\n\tvar z;\n\n\taa = abs( a );\n\tab = abs( b );\n\tif ( aa > ab ) {\n\t\tsign = copysign( 1.0, a );\n\t} else {\n\t\tsign = copysign( 1.0, b );\n\t}\n\tscale = aa + ab;\n\tif ( scale === 0.0 ) {\n\t\tc = 1.0;\n\t\ts = 0.0;\n\t\tr = 0.0;\n\t\tz = 0.0;\n\t} else {\n\t\tr = scale * sqrt( abs2( a/scale ) + abs2( b/scale ) );\n\t\tr *= sign;\n\t\tc = a / r;\n\t\ts = b / r;\n\t\tz = 1.0;\n\t\tif ( aa > ab ) {\n\t\t\tz = s;\n\t\t} else if ( c !== 0.0 ) {\n\t\t\tz = 1.0 / c;\n\t\t}\n\t}\n\ta = r;\n\tb = z;\n\tout[ offset ] = a;\n\tout[ offset + stride ] = b;\n\tout[ offset + ( 2 * stride ) ] = c;\n\tout[ offset + ( 3 * stride ) ] = s;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default drotg;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float64Array from '@stdlib/array/float64';\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Constructs a Givens plane rotation.\n*\n* @param {number} a - rotational elimination parameter\n* @param {number} b - rotational elimination parameter\n* @returns {Float64Array} output array\n*\n* @example\n* var out = drotg( 0.0, 2.0 );\n* // returns <Float64Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*/\nfunction drotg( a, b ) {\n\tvar out = new Float64Array( 4 );\n\treturn fcn( a, b, out, 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default drotg;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a modified Givens plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float64Array} param - parameters for the modified Givens transformation\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 0.6, 0.1, -0.5, 0.8, 0.9, -0.3, -0.4 ] );\n* var y = new Float64Array( [ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ] );\n* var param = new Float64Array( [ 0.0, 0.0, 2.0, -3.0, 0.0 ] );\n*\n* drotm( 4, x, -1, 3, y, -2, 6, param );\n* // x => <Float64Array>[ -0.9, -0.8, 1.3, -1.6, 0.9, -0.3, -0.4 ]\n* // y => <Float64Array>[ 1.7, -0.9, 0.5, 0.7, -1.6, 0.2, 2.4 ]\n*/\nfunction drotm( N, x, strideX, offsetX, y, strideY, offsetY, param ) {\n\tvar dflag;\n\tvar dh11;\n\tvar dh12;\n\tvar dh21;\n\tvar dh22;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tvar w;\n\tvar z;\n\n\tdflag = param[ 0 ];\n\tif ( N <= 0 || dflag === -2.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( strideX === strideY && strideX > 0 ) {\n\t\tif ( dflag < 0.0 ) {\n\t\t\tdh11 = param[ 1 ];\n\t\t\tdh12 = param[ 3 ];\n\t\t\tdh21 = param[ 2 ];\n\t\t\tdh22 = param[ 4 ];\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tw = x[ ix ];\n\t\t\t\tz = y[ ix ];\n\t\t\t\tx[ ix ] = ( w * dh11 ) + ( z * dh12 );\n\t\t\t\ty[ ix ] = ( w * dh21 ) + ( z * dh22 );\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tif ( dflag === 0.0 ) {\n\t\t\tdh12 = param[ 3 ];\n\t\t\tdh21 = param[ 2 ];\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tw = x[ ix ];\n\t\t\t\tz = y[ ix ];\n\t\t\t\tx[ ix ] = w + ( z * dh12 );\n\t\t\t\ty[ ix ] = ( w * dh21 ) + z;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tdh11 = param[ 1 ];\n\t\tdh22 = param[ 4 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ ix ];\n\t\t\tx[ ix ] = ( w * dh11 ) + z;\n\t\t\ty[ ix ] = -w + ( z * dh22 );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( dflag < 0.0 ) {\n\t\tdh11 = param[ 1 ];\n\t\tdh12 = param[ 3 ];\n\t\tdh21 = param[ 2 ];\n\t\tdh22 = param[ 4 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ iy ];\n\t\t\tx[ ix ] = ( w * dh11 ) + ( z * dh12 );\n\t\t\ty[ iy ] = ( w * dh21 ) + ( z * dh22 );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( dflag === 0.0 ) {\n\t\tdh12 = param[ 3 ];\n\t\tdh21 = param[ 2 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ iy ];\n\t\t\tx[ ix ] = w + ( z * dh12 );\n\t\t\ty[ iy ] = ( w * dh21 ) + z;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tdh11 = param[ 1 ];\n\tdh22 = param[ 4 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tw = x[ ix ];\n\t\tz = y[ iy ];\n\t\tx[ ix ] = ( w * dh11 ) + z;\n\t\ty[ iy ] = -w + ( z * dh22 );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default drotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a modified Givens plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {Float64Array} param - parameters for the modified Givens transformation\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 0.6, 0.1, -0.5, 0.8, 0.9, -0.3, -0.4 ] );\n* var y = new Float64Array( [ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ] );\n* var param = new Float64Array( [ 0.0, 0.0, 2.0, -3.0, 0.0 ] );\n*\n* drotm( 4, x, -1, y, -2, param );\n* // x => <Float64Array>[ -0.9, -0.8, 1.3, -1.6, 0.9, -0.3, -0.4 ]\n* // y => <Float64Array>[ 1.7, -0.9, 0.5, 0.7, -1.6, 0.2, 2.4 ]\n*/\nfunction drotm( N, x, strideX, y, strideY, param ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy, param );\n}\n\n\n// EXPORTS //\n\nexport default drotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnrm2 from './dnrm2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport drot from './drot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( drot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default drot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Construct a Givens plane rotation.\n*\n* @module @stdlib/blas/base/drotg\n*\n* @example\n* import drotg from '@stdlib/blas/base/drotg';\n*\n* var out = drotg( 0.0, 2.0 );\n* // returns <Float64Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*\n* out = drotg( 6.0, -8.0 );\n* // returns <Float64Array>[ 10.0, ~-1.666, -0.6, 0.8 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import drotg from '@stdlib/blas/base/drotg';\n*\n* var out = new Float64Array( 4 );\n*\n* var y = drotg.assign( 0.0, 2.0, out, 1, 0 );\n* // returns <Float64Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport drotm from './drotm.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( drotm, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default drotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* dscal( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, -20.0, 25.0, -30.0 ]\n*/\nfunction dscal( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] *= alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] *= alpha;\n\t\t\tx[ ix+1 ] *= alpha;\n\t\t\tx[ ix+2 ] *= alpha;\n\t\t\tx[ ix+3 ] *= alpha;\n\t\t\tx[ ix+4 ] *= alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] *= alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* dscal( x.length, 5.0, x, 1 );\n* // x => <Float64Array>[ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\nfunction dscal( N, alpha, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, alpha, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default dscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dscal from './dscal.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y` with extended accumulation and result.\n*\n* @param {integer} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = dsdot( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction dsdot( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += x[ ix ] * y[ iy ];\n\t\t\t\tix += 1;\n\t\t\t\tiy += 1;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ix]*y[iy] ) + ( x[ix+1]*y[iy+1] ) + ( x[ix+2]*y[iy+2] ) + ( x[ix+3]*y[iy+3] ) + ( x[ix+4]*y[iy+4] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn dot;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nexport default dsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y` with extended accumulation and result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = dsdot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction dsdot( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default dsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsdot from './dsdot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsdot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a double-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} strideX - index increment\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* dfill( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction dfill( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] = alpha;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] = alpha;\n\t\t\tx[ ix+1 ] = alpha;\n\t\t\tx[ ix+2 ] = alpha;\n\t\t\tx[ ix+3 ] = alpha;\n\t\t\tx[ ix+4 ] = alpha;\n\t\t\tx[ ix+5 ] = alpha;\n\t\t\tx[ ix+6 ] = alpha;\n\t\t\tx[ ix+7 ] = alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Fills a double-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} strideX - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* dfill( x.length, 5.0, x, 1 );\n* // x => <Float64Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction dfill( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dfill } from './../../../ext/base/dfill';\nimport { ndarray as dscal } from './../../../base/dscal';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @private\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @param {NonNegativeInteger} offsetAP - starting `AP` index\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n*\n* dspmv( 'column-major', 'lower', 3, 1.0, AP, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float64Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\nfunction dspmv( order, uplo, N, alpha, AP, offsetAP, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tvar temp1;\n\tvar temp2;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar kk;\n\tvar kx;\n\tvar ky;\n\tvar j;\n\tvar k;\n\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tdfill( N, 0.0, y, strideY, offsetY );\n\t\t} else {\n\t\t\tdscal( N, beta, y, strideY, offsetY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\t// Form: y = alpha*A*x + y\n\tkx = offsetX;\n\tky = offsetY;\n\tkk = offsetAP;\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tjx = kx;\n\t\tjy = ky;\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\ttemp1 = alpha * x[ jx ];\n\t\t\ttemp2 = 0.0;\n\t\t\ty[ jy ] += temp1 * AP[ kk ];\n\t\t\tix = jx;\n\t\t\tiy = jy;\n\t\t\tfor ( k = kk + 1; k < kk + N - j; k++ ) {\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t\ty[ iy ] += temp1 * AP[ k ];\n\t\t\t\ttemp2 += AP[ k ] * x[ ix ];\n\t\t\t}\n\t\t\ty[ jy ] += alpha * temp2;\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t\tkk += N - j;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tjx = kx;\n\tjy = ky;\n\tfor ( j = 0; j < N; j++ ) {\n\t\ttemp1 = alpha * x[ jx ];\n\t\ttemp2 = 0.0;\n\t\tix = kx;\n\t\tiy = ky;\n\t\tfor ( k = kk; k < kk + j; k++ ) {\n\t\t\ty[ iy ] += temp1 * AP[ k ];\n\t\t\ttemp2 += AP[ k ] * x[ ix ];\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\ty[ jy ] += ( temp1 * AP[ kk + j ] ) + ( alpha * temp2 );\n\t\tjx += strideX;\n\t\tjy += strideY;\n\t\tkk += j + 1;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be non-zero\n* @throws {RangeError} tenth argument must be non-zero\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n*\n* dspmv( 'column-major', 'lower', 3, 1.0, AP, x, 1, 1.0, y, 1 );\n* // y => <Float64Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\nfunction dspmv( order, uplo, N, alpha, AP, x, strideX, beta, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Seventh argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be non-zero. Value: `%d`.', strideY ) );\n\t}\n\toffsetX = stride2offset( N, strideX );\n\toffsetY = stride2offset( N, strideY );\n\treturn base( order, uplo, N, alpha, AP, 0, x, strideX, offsetX, beta, y, strideY, offsetY ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dfill from './dfill.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dfill, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dspmv from './dspmv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dspmv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @param {NonNegativeInteger} offsetAP - starting `AP` index\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} twelfth argument must be non-zero\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n*\n* dspmv( 'column-major', 'lower', 3, 1.0, AP, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float64Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\nfunction dspmv( order, uplo, N, alpha, AP, offsetAP, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Twelfth argument must be non-zero. Value: `%d`.', strideY ) );\n\t}\n\treturn base( order, uplo, N, alpha, AP, offsetAP, x, strideX, offsetX, beta, y, strideY, offsetY ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @module @stdlib/blas/base/dspmv\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dspmv from '@stdlib/blas/base/dspmv';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n*\n* dspmv( 'column-major', 'lower', 3, 1.0, AP, x, 1, 1.0, y, 1 );\n* // y => <Float64Array>[ ~7.0, ~12.0, ~15.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dspmv from '@stdlib/blas/base/dspmv';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n*\n* dspmv.ndarray( 'column-major', 'lower', 3, 1.0, AP, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float64Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dspmv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdspmv = main;\n} else {\n\tdspmv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dspmv;\n\n// exports: { \"ndarray\": \"dspmv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dspmv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges two double-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dswap( x.length, x, 1, 0, y, 1, 0 );\n* // x => <Float64Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = y[ iy ];\n\t\t\t\ty[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = y[ iy ];\n\t\t\ty[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = y[ iy+1 ];\n\t\t\ty[ iy+1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = y[ iy+2 ];\n\t\t\ty[ iy+2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Interchanges two double-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dswap( x.length, x, 1, y, 1 );\n* // x => <Float64Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dswap( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default dswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dswap from './dswap.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dswap, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dfill from './../../../ext/base/dfill';\nimport dscal from './../../../base/dscal';\nimport max from '@stdlib/math/base/special/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} A - matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be greater than or equal to max(1,N)\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} eleventh argument must be non-zero\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* dsymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0.0, y, 1 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction dsymv( order, uplo, N, alpha, A, LDA, x, strideX, beta, y, strideY ) { // eslint-disable-line max-params\n\tvar temp1;\n\tvar temp2;\n\tvar jmin;\n\tvar jmax;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar ox;\n\tvar oy;\n\tvar sy;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( 'invalid argument. Sixth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eleventh argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\n\t// Form: y = beta*y\n\tsy = strideY;\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tdfill( N, 0.0, y, strideY );\n\t\t} else {\n\t\t\tif ( sy < 0 ) {\n\t\t\t\tsy = -sy;\n\t\t\t}\n\t\t\tdscal( N, beta, y, sy );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX > 0 ) {\n\t\tox = 0;\n\t} else {\n\t\tox = ( 1 - N ) * strideX;\n\t}\n\tif ( strideY > 0 ) {\n\t\toy = 0;\n\t} else {\n\t\toy = ( 1 - N ) * strideY;\n\t}\n\t// Form: y = alpha*A*x + y\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tix = ox;\n\t\tiy = oy;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ttemp1 = alpha * x[ ix ];\n\t\t\ttemp2 = 0.0;\n\t\t\tjmin = i + 1;\n\t\t\tjmax = N;\n\t\t\tjx = ox + ( jmin*strideX );\n\t\t\tjy = oy + ( jmin*strideY );\n\t\t\ty[ iy ] += temp1 * A[ ( LDA * i ) + i ];\n\t\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\t\tk = ( LDA * i ) + j;\n\t\t\t\ty[ jy ] += temp1 * A[ k ];\n\t\t\t\ttemp2 += x[ jx ] * A[ k ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\ty[ iy ] += alpha * temp2;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tix = ox + ( ( N - 1 ) * strideX );\n\tiy = oy + ( ( N - 1 ) * strideY );\n\tfor ( i = N - 1; i >= 0; i-- ) {\n\t\ttemp1 = alpha * x[ ix ];\n\t\ttemp2 = 0.0;\n\t\tjmin = 0;\n\t\tjmax = i;\n\t\tjx = ox + ( jmin * strideX );\n\t\tjy = oy + ( jmin * strideY );\n\t\ty[ iy ] += temp1 * A[ ( LDA * i ) + i ];\n\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\tk = ( LDA * i ) + j;\n\t\t\ty[ jy ] += temp1 * A[ k ];\n\t\t\ttemp2 += x[ jx ] * A[ k ];\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t}\n\t\ty[ iy ] += alpha * temp2;\n\t\tix -= strideX;\n\t\tiy -= strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dsymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsymv from './dsymv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsymv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dfill } from './../../../ext/base/dfill';\nimport { ndarray as dscal } from './../../../base/dscal';\nimport max from '@stdlib/math/base/special/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} A - matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be greater than or equal to max(1,N)\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} twelfth argument must be non-zero\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* dsymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0, 0.0, y, 1, 0 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction dsymv( order, uplo, N, alpha, A, LDA, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tvar temp1;\n\tvar temp2;\n\tvar jmin;\n\tvar jmax;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar ox;\n\tvar oy;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( 'invalid argument. Sixth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Twelfth argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tdfill( N, 0.0, y, strideY, offsetY );\n\t\t} else {\n\t\t\tdscal( N, beta, y, strideY, offsetY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tox = offsetX;\n\toy = offsetY;\n\n\t// Form: y = alpha*A*x + y\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tix = ox;\n\t\tiy = oy;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ttemp1 = alpha * x[ ix ];\n\t\t\ttemp2 = 0.0;\n\t\t\tjmin = i + 1;\n\t\t\tjmax = N;\n\t\t\tjx = ox + ( jmin * strideX );\n\t\t\tjy = oy + ( jmin * strideY );\n\t\t\ty[ iy ] += temp1 * A[ ( LDA * i ) + i ];\n\t\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\t\tk = ( LDA * i ) + j;\n\t\t\t\ty[ jy ] += temp1 * A[ k ];\n\t\t\t\ttemp2 += x[ jx ] * A[ k ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\ty[ iy ] += alpha * temp2;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tix = ox + ( ( N - 1 ) * strideX );\n\tiy = oy + ( ( N - 1 ) * strideY );\n\tfor ( i = N - 1; i >= 0; i-- ) {\n\t\ttemp1 = alpha * x[ ix ];\n\t\ttemp2 = 0.0;\n\t\tjmin = 0;\n\t\tjmax = i;\n\t\tjx = ox + ( jmin * strideX );\n\t\tjy = oy + ( jmin * strideY );\n\t\ty[ iy ] += temp1 * A[ ( LDA * i ) + i ];\n\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\tk = ( LDA * i ) + j;\n\t\t\ty[ jy ] += temp1 * A[ k ];\n\t\t\ttemp2 += x[ jx ] * A[ k ];\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t}\n\t\ty[ iy ] += alpha * temp2;\n\t\tix -= strideX;\n\t\tiy -= strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dsymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas/base/dsymv\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsymv from '@stdlib/blas/base/dsymv';\n*\n* var A = new Float64Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* dsymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0.0, y, 1 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsymv from '@stdlib/blas/base/dsymv';\n*\n* var A = new Float64Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* dsymv.ndarray( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0, 0.0, y, 1, 0 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dsymv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdsymv = main;\n} else {\n\tdsymv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dsymv;\n\n// exports: { \"ndarray\": \"dsymv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dsymv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @private\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction dsyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tvar isrm;\n\tvar tmp;\n\tvar ix0;\n\tvar ix1;\n\tvar sa0;\n\tvar sa1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\tif (\n\t\t( !isrm && uplo === 'upper' ) ||\n\t\t( isrm && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = alpha * x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tA[ oa+(sa0*i0) ] += x[ ix0 ] * tmp;\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn A;\n\t}\n\t// ( isrm && uplo === 'upper' ) || ( !isrm && uplo === 'lower' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\ttmp = alpha * x[ ix1 ];\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tA[ oa+(sa0*i0) ] += x[ ix0 ] * tmp;\n\t\t\t\tix0 += strideX;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nexport default dsyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} eighth argument must be greater than or equal to max(1,N)\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr( 'row-major', 'upper', 3, 1.0, x, 1, A, 3 );\n* // A => <Float64Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction dsyr( order, uplo, N, alpha, x, strideX, A, LDA ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, N, alpha, x, strideX, ox, A, sa1, sa2, 0 );\n}\n\n\n// EXPORTS //\n\nexport default dsyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsyr from './dsyr.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsyr, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @throws {TypeError} first argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be non-zero\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction dsyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\treturn base( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas/base/dsyr\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsyr from '@stdlib/blas/base/dsyr';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr( 'row-major', 'upper', 3, 1.0, x, 1, A, 3 );\n* // A => <Float64Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsyr from '@stdlib/blas/base/dsyr';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr.ndarray( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dsyr;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdsyr = main;\n} else {\n\tdsyr = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dsyr;\n\n// exports: { \"ndarray\": \"dsyr.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dsyr/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @private\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr2( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction dsyr2( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len, max-params\n\tvar tmp1;\n\tvar tmp2;\n\tvar isrm;\n\tvar ix0;\n\tvar ix1;\n\tvar iy0;\n\tvar iy1;\n\tvar sa0;\n\tvar sa1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\tvar oy;\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) { // row-major\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // column-major\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\toy = offsetY;\n\tix1 = ox;\n\tiy1 = oy;\n\tif (\n\t\t( isrm && uplo === 'lower' ) ||\n\t\t( !isrm && uplo === 'upper' )\n\t) {\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( ( x[ ix1 ] !== 0.0 ) || ( y[ iy1 ] !== 0.0 ) ) {\n\t\t\t\ttmp1 = alpha * y[ iy1 ];\n\t\t\t\ttmp2 = alpha * x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tiy0 = oy;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tA[ oa+(sa0*i0) ] += ( x[ ix0 ] * tmp1 ) + ( y[ iy0 ] * tmp2 ); // eslint-disable-line max-len\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t\tiy0 += strideY;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t\tiy1 += strideY;\n\t\t}\n\t\treturn A;\n\t}\n\t// ( isrm && uplo === 'upper' ) || ( !isrm && uplo === 'lower' )\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( ( x[ ix1 ] !== 0.0 ) || ( y[ iy1 ] !== 0.0 ) ) {\n\t\t\ttmp1 = alpha * y[ iy1 ];\n\t\t\ttmp2 = alpha * x[ ix1 ];\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tiy0 = iy1;\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tA[ oa+(sa0*i0) ] += ( x[ ix0 ] * tmp1 ) + ( y[ iy0 ] * tmp2 );\n\t\t\t\tix0 += strideX;\n\t\t\t\tiy0 += strideY;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t\tiy1 += strideY;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nexport default dsyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {Float64Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} eighth argument must be greater than or equal to max(1,N)\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr2( 'row-major', 'upper', 3, 1.0, x, 1, y, 1, A, 3 );\n* // A => <Float64Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction dsyr2( order, uplo, N, alpha, x, strideX, y, strideY, A, LDA ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\tvar oy;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\toy = stride2offset( N, strideY );\n\treturn base( uplo, N, alpha, x, strideX, ox, y, strideY, oy, A, sa1, sa2, 0 ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsyr2 from './dsyr2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsyr2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @throws {TypeError} first argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be non-zero\n* @throws {RangeError} eighth argument must be non-zero\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr2( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction dsyr2( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len, max-params\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether the reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\treturn base( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas/base/dsyr2\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsyr2 from '@stdlib/blas/base/dsyr2';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr2( 'row-major', 'upper', 3, 1.0, x, 1, y, 1, A, 3 );\n* // A => <Float64Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsyr2 from '@stdlib/blas/base/dsyr2';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr2.ndarray( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dsyr2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdsyr2 = main;\n} else {\n\tdsyr2 = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dsyr2;\n\n// exports: { \"ndarray\": \"dsyr2.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dsyr2/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @private\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction dtrmv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tvar nonunit;\n\tvar isrm;\n\tvar tmp;\n\tvar sa0;\n\tvar sa1;\n\tvar ix0;\n\tvar ix1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\n\t// Note on variable naming convention: sa#, ix#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tnonunit = ( diag === 'non-unit' );\n\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = 0; i0 < i1; i0++ ) {\n\t\t\t\t\tx[ ix0 ] += tmp * A[ oa+(sa0*i0) ];\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t}\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] *= A[ oa+(sa0*i1) ];\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'lower' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'upper' )\n\t) {\n\t\tox += ( N - 1 ) * strideX;\n\t\tix1 = ox;\n\t\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = N-1; i0 > i1; i0-- ) {\n\t\t\t\t\tx[ ix0 ] += tmp * A[ oa+(sa0*i0) ];\n\t\t\t\t\tix0 -= strideX;\n\t\t\t\t}\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] *= A[ oa+(sa0*i1) ];\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 -= strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans !== 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans === 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox + ( ( N - 1 ) * strideX );\n\t\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\t\ttmp = x[ ix1 ];\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tif ( nonunit ) {\n\t\t\t\ttmp *= A[ oa+(sa0*i1) ];\n\t\t\t}\n\t\t\tfor ( i0 = i1-1; i0 >= 0; i0-- ) {\n\t\t\t\tix0 -= strideX;\n\t\t\t\ttmp += x[ ix0 ] * A[ oa+(sa0*i0) ];\n\t\t\t}\n\t\t\tx[ ix1 ] = tmp;\n\t\t\tix1 -= strideX;\n\t\t}\n\t\treturn x;\n\t}\n\t// ( !isrm && trans !== 'no-transpose' && uplo === 'lower' ) || ( isrm && trans === 'no-transpose' && uplo === 'upper' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\ttmp = x[ ix1 ];\n\t\toa = offsetA + (sa1*i1);\n\t\tix0 = ix1;\n\t\tif ( nonunit ) {\n\t\t\ttmp *= A[ oa+(sa0*i1) ];\n\t\t}\n\t\tfor ( i0 = i1+1; i0 < N; i0++ ) {\n\t\t\tix0 += strideX;\n\t\t\ttmp += x[ ix0 ] * A[ oa+(sa0*i0) ];\n\t\t}\n\t\tx[ ix1 ] = tmp;\n\t\tix1 += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dtrmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nimport isDiagonal from './../../../base/assert/is-diagonal-type';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} third argument must be a valid transpose operation\n* @throws {TypeError} fourth argument must be a valid diagonal type\n* @throws {RangeError} fifth argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be greater than or equal to max(1,N)\n* @throws {RangeError} ninth argument must be non-zero\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction dtrmv( order, uplo, trans, diag, N, A, LDA, x, strideX ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Seventh argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, trans, diag, N, A, sa1, sa2, 0, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default dtrmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dtrmv from './dtrmv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dtrmv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dtrmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nimport isDiagonal from './../../../base/assert/is-diagonal-type';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @throws {TypeError} first argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} second argument must be a valid transpose operation\n* @throws {TypeError} third argument must be a valid diagonal type\n* @throws {RangeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} tenth argument must be non-zero\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction dtrmv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\treturn base( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dtrmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @module @stdlib/blas/base/dtrmv\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dtrmv from '@stdlib/blas/base/dtrmv';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dtrmv from '@stdlib/blas/base/dtrmv';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv.ndarray( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dtrmv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdtrmv = main;\n} else {\n\tdtrmv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dtrmv;\n\n// exports: { \"ndarray\": \"dtrmv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dtrmv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT64_MAX from '@stdlib/constants/float64/max';\nimport abs from '@stdlib/math/base/special/abs';\nimport abs2 from '@stdlib/math/base/special/abs2';\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\n\n\n// VARIABLES //\n\n// Blue's scaling constants:\nvar tsml = 1.4916681462400413E-154;\nvar tbig = 1.9979190722022350E+146;\nvar ssml = 4.4989137945431964E+161;\nvar sbig = 1.1113793747425387E-162;\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a complex double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - input array\n* @param {integer} strideX - `zx` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `zx`\n* @returns {number} L2-norm\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n*\n* var zx = new Complex128Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = dznrm2( 4, zx, 1, 0 );\n* // returns ~0.8\n*/\nfunction dznrm2( N, zx, strideX, offsetX ) {\n\tvar notbig;\n\tvar sumsq;\n\tvar viewX;\n\tvar abig;\n\tvar amed;\n\tvar asml;\n\tvar ymax;\n\tvar ymin;\n\tvar scl;\n\tvar ax;\n\tvar ix;\n\tvar sx;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\t// Reinterpret the input array as a real-valued array comprised of interleaved real and imaginary components:\n\tviewX = reinterpret( zx, 0 );\n\tsx = strideX * 2;\n\tix = offsetX * 2;\n\n\t// Initialize loop values for accumulation:\n\tnotbig = true;\n\n\tsumsq = 0.0;\n\tabig = 0.0;\n\tamed = 0.0;\n\tasml = 0.0;\n\tscl = 1.0;\n\n\t// Compute the sum of squares using 3 accumulators--`abig` (sum of squares scaled down to avoid overflow), `asml` (sum of squares scaled up to avoid underflow), `amed` (sum of squares that do not require scaling)--and thresholds and multipliers--`tbig` (values bigger than this are scaled down by `sbig`) and `tsml` (values smaller than this are scaled up by `ssml`)...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = abs( viewX[ ix ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig += abs2( ax * sbig );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml += abs2( ax * ssml );\n\t\t\t}\n\t\t} else {\n\t\t\tamed += ax * ax;\n\t\t}\n\t\tax = abs( viewX[ ix + 1 ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig += abs2( ax * sbig );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml += abs2( ax * ssml );\n\t\t\t}\n\t\t} else {\n\t\t\tamed += ax * ax;\n\t\t}\n\t\tix += sx;\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig` > 0...\n\t\tif ( amed > 0.0 || ( amed > FLOAT64_MAX ) || ( amed !== amed ) ) {\n\t\t\tabig += ( amed * sbig ) * sbig;\n\t\t}\n\t\tscl = 1.0 / sbig;\n\t\tsumsq = abig;\n\t} else if ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml` > 0...\n\t\tif ( amed > 0.0 || amed > FLOAT64_MAX || ( amed !== amed ) ) {\n\t\t\tamed = sqrt( amed );\n\t\t\tasml = sqrt( asml ) / ssml;\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscl = 1.0;\n\t\t\tsumsq = ( ymax * ymax ) * ( 1.0 + abs2( ymin / ymax ) );\n\t\t} else {\n\t\t\tscl = 1.0 / ssml;\n\t\t\tsumsq = asml;\n\t\t}\n\t} else {\n\t\t// All values are mid-range...\n\t\tscl = 1.0;\n\t\tsumsq = amed;\n\t}\n\treturn sqrt( sumsq ) * scl;\n}\n\n\n// EXPORTS //\n\nexport default dznrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a complex double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - input array\n* @param {integer} strideX - `zx` stride length\n* @returns {number} L2-norm\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n*\n* var zx = new Complex128Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = dznrm2( 4, zx, 1 );\n* // returns ~0.8\n*/\nfunction dznrm2( N, zx, strideX ) {\n\treturn ndarray( N, zx, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dznrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dznrm2 from './dznrm2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dznrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dznrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to find the euclidean norm of a complex double-precision floating-point vector.\n*\n* @module @stdlib/blas/base/dznrm2\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import dznrm2 from '@stdlib/blas/base/dznrm2';\n*\n* var zx = new Complex128Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = dznrm2( 4, zx, 1 );\n* // returns ~0.8\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import dznrm2 from '@stdlib/blas/base/dznrm2';\n*\n* var zx = new Complex128Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = dznrm2.ndarray( 4, zx, 1, 0 );\n* // returns ~0.8\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dznrm2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdznrm2 = main;\n} else {\n\tdznrm2 = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dznrm2;\n\n// exports: { \"ndarray\": \"dznrm2.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dznrm2/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {PositiveInteger} stride - `x` stride length\n* @returns {number} sum\n*\n* @example\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = gasum( x.length, x, 1 );\n* // 15.0\n*/\nfunction gasum( N, x, stride ) {\n\tvar sum;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 || stride <= 0 ) {\n\t\treturn sum;\n\t}\n\t// Use unrolled loops if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += abs( x[i] );\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += abs(x[i]) + abs(x[i+1]) + abs(x[i+2]) + abs(x[i+3]) + abs(x[i+4]) + abs(x[i+5]); // eslint-disable-line max-len\n\t\t}\n\t\treturn sum;\n\t}\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tsum += abs( x[i] );\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the sum of absolute values.\n*\n* @module @stdlib/blas/base/gasum\n*\n* @example\n* import gasum from '@stdlib/blas/base/gasum';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = gasum( x.length, x, 1 );\n* // 15.0\n*\n* @example\n* // Use the `ndarray` interface...\n* import { ndarray as gasum } from '@stdlib/blas/base/gasum';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = gasum( x.length, x, 1, 0 );\n* // 15.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - `x` stride length\n* @param {NonNegativeInteger} offset - starting `x` index\n* @returns {number} sum\n*\n* @example\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = gasum( x.length, x, 1, 0 );\n* // 15.0\n*/\nfunction gasum( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offset;\n\n\t// Use unrolled loops if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += abs( x[ix] );\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += abs( x[ix] ) + abs( x[ix+1] ) + abs( x[ix+2] ) + abs( x[ix+3] ) + abs( x[ix+4] ) + abs( x[ix+5] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += abs( x[ix] );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy( x.length, alpha, x, 1, y, 1 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction gaxpy( N, alpha, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ i ] += alpha * x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ i ] += alpha * x[ i ];\n\t\t\ty[ i+1 ] += alpha * x[ i+1 ];\n\t\t\ty[ i+2 ] += alpha * x[ i+2 ];\n\t\t\ty[ i+3 ] += alpha * x[ i+3 ];\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += alpha * x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Object} y - output array object\n* @param {Collection} y.data - output array data\n* @param {Array<Function>} y.accessors - array element accessors\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Object} output array object\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import reinterpret64 from '@stdlib/strided/base/reinterpret-complex64';\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var x = {\n*     'data': new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] ),\n*     'accessors': [ getter, setter ]\n* };\n*\n* var y = {\n*     'data': new Complex64Array( [ 5.0, 6.0, 7.0, 8.0 ] ),\n*     'accessors': [ getter, setter ]\n* };\n*\n* gcopy( x.data.length, x, 1, 0, y, 1, 0 );\n*\n* var view = reinterpret64( y.data, 0 );\n* // view => <Float32Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*/\nfunction gcopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar set;\n\tvar get;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache a reference to the element accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to multiply `x` and a constant and add the result to `y`.\n*\n* @module @stdlib/blas/base/gaxpy\n*\n* @example\n* import gaxpy from '@stdlib/blas/base/gaxpy';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy( x.length, alpha, x, 1, y, 1 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*\n* @example\n* import gaxpy from '@stdlib/blas/base/gaxpy';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction gaxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\ty[ iy+1 ] += alpha * x[ ix+1 ];\n\t\t\ty[ iy+2 ] += alpha * x[ ix+2 ];\n\t\t\ty[ iy+3 ] += alpha * x[ ix+3 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += alpha * x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Collection} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gcopy( x.length, x, 1, y, 1 );\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction gcopy( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\tif ( strideX < 0 ) {\n\t\t\tix = (1-N) * strideX;\n\t\t} else {\n\t\t\tix = 0;\n\t\t}\n\t\tif ( strideY < 0 ) {\n\t\t\tiy = (1-N) * strideY;\n\t\t} else {\n\t\t\tiy = 0;\n\t\t}\n\t\taccessors( N, ox, strideX, ix, oy, strideY, iy );\n\t\treturn oy.data;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ i ] = x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ i ] = x[ i ];\n\t\t\ty[ i+1 ] = x[ i+1 ];\n\t\t\ty[ i+2 ] = x[ i+2 ];\n\t\t\ty[ i+3 ] = x[ i+3 ];\n\t\t\ty[ i+4 ] = x[ i+4 ];\n\t\t\ty[ i+5 ] = x[ i+5 ];\n\t\t\ty[ i+6 ] = x[ i+6 ];\n\t\t\ty[ i+7 ] = x[ i+7 ];\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to copy values from `x` into `y`.\n*\n* @module @stdlib/blas/base/gcopy\n*\n* @example\n* import gcopy from '@stdlib/blas/base/gcopy';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gcopy( x.length, x, 1, y, 1 );\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* @example\n* import gcopy from '@stdlib/blas/base/gcopy';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gcopy.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Collection} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gcopy( x.length, x, 1, 0, y, 1, 0 );\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction gcopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn oy.data;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] = x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] = x[ ix ];\n\t\t\ty[ iy+1 ] = x[ ix+1 ];\n\t\t\ty[ iy+2 ] = x[ ix+2 ];\n\t\t\ty[ iy+3 ] = x[ ix+3 ];\n\t\t\ty[ iy+4 ] = x[ ix+4 ];\n\t\t\ty[ iy+5 ] = x[ ix+5 ];\n\t\t\ty[ iy+6 ] = x[ ix+6 ];\n\t\t\ty[ iy+7 ] = x[ ix+7 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n\n* var z = gdot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction gdot( N, x, strideX, y, strideY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += x[ i ] * y[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[i]*y[i] ) + ( x[i+1]*y[i+1] ) + ( x[i+2]*y[i+2] ) + ( x[i+3]*y[i+3] ) + ( x[i+4]*y[i+4] ); // eslint-disable-line max-len\n\t\t}\n\t\treturn dot;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = ( 1-N ) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = ( 1-N ) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += ( x[ ix ] * y[ iy ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nexport default gdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {integer} N - number of indexed elements\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n\n* var z = gdot( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction gdot( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += ( x[ ix ] * y[ iy ] );\n\t\t\t\tix += 1;\n\t\t\t\tiy += 1;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ix]*y[iy] ) + ( x[ix+1]*y[iy+1] ) + ( x[ix+2]*y[iy+2] ) + ( x[ix+3]*y[iy+3] ) + ( x[ix+4]*y[iy+4] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn dot;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nexport default gdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport abs from '@stdlib/math/base/special/abs';\nimport pow from '@stdlib/math/base/special/pow';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {PositiveInteger} stride - stride length\n* @returns {number} L2-norm\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var z = gnrm2( x.length, x, 1 );\n* // returns 3.0\n*/\nfunction gnrm2( N, x, stride ) {\n\tvar scale;\n\tvar ssq;\n\tvar ax;\n\tvar i;\n\n\tif ( N <= 0 || stride <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 ) {\n\t\treturn abs( x[ 0 ] );\n\t}\n\tscale = 0.0;\n\tssq = 1.0;\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tif ( x[ i ] !== 0.0 ) {\n\t\t\tax = abs( x[ i ] );\n\t\t\tif ( scale < ax ) {\n\t\t\t\tssq = 1.0 + ( ssq * pow( scale/ax, 2 ) );\n\t\t\t\tscale = ax;\n\t\t\t} else {\n\t\t\t\tssq += pow( ax/scale, 2 );\n\t\t\t}\n\t\t}\n\t}\n\treturn scale * sqrt( ssq );\n}\n\n\n// EXPORTS //\n\nexport default gnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the dot product of vectors `x` and `y`.\n*\n* @module @stdlib/blas/base/gdot\n*\n* @example\n* import gdot from '@stdlib/blas/base/gdot';\n*\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* var z = gdot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*\n* @example\n* import gdot from '@stdlib/blas/base/gdot';\n*\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* var z = gdot.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the L2-norm of a vector.\n*\n* @module @stdlib/blas/base/gnrm2\n*\n* @example\n* import gnrm2 from '@stdlib/blas/base/gnrm2';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var z = gnrm2( x.length, x, 1 );\n* // returns 3.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gnrm2 from '@stdlib/blas/base/gnrm2';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var z = gnrm2.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport abs from '@stdlib/math/base/special/abs';\nimport pow from '@stdlib/math/base/special/pow';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} L2-norm\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var z = gnrm2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnrm2( N, x, stride, offset ) {\n\tvar scale;\n\tvar ssq;\n\tvar ax;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 ) {\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tscale = 0.0;\n\tssq = 1.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( x[ ix ] !== 0.0 ) {\n\t\t\tax = abs( x[ ix ] );\n\t\t\tif ( scale < ax ) {\n\t\t\t\tssq = 1.0 + ( ssq * pow( scale/ax, 2 ) );\n\t\t\t\tscale = ax;\n\t\t\t} else {\n\t\t\t\tssq += pow( ax/scale, 2 );\n\t\t\t}\n\t\t}\n\t\tix += stride;\n\t}\n\treturn scale * sqrt( ssq );\n}\n\n\n// EXPORTS //\n\nexport default gnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {PositiveInteger} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal( x.length, 5.0, x, 1 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\nfunction gscal( N, alpha, x, stride ) {\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || stride <= 0|| alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i += 1 ) {\n\t\t\t\tx[ i ] *= alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] *= alpha;\n\t\t\tx[ i+1 ] *= alpha;\n\t\t\tx[ i+2 ] *= alpha;\n\t\t\tx[ i+3 ] *= alpha;\n\t\t\tx[ i+4 ] *= alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tx[ i ] *= alpha;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Interchanges vectors `x` and `y`.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - first input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Object} y - second input array object\n* @param {Collection} y.data - second input array array\n* @param {Array<Function>} y.accessors - array element accessors\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Object} `y`\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import reinterpret64 from '@stdlib/strided/base/reinterpret-complex64';\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var x = {\n*     'data': new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] ),\n*     'accessors': [ getter, setter ]\n* };\n*\n* var y = {\n*     'data': new Complex64Array( [ 5.0, 6.0, 7.0, 8.0 ] ),\n*     'accessors': [ getter, setter ]\n* };\n*\n* gswap( x.data.length, x, 1, 0, y, 1, 0 );\n*\n* var viewX = reinterpret64( x.data, 0 );\n* // viewX => <Float32Array>[ 5.0, 6.0, 7.0, 8.0 ]\n*\n* var viewY = reinterpret64( y.data, 0 );\n* // viewY => <Float32Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*/\nfunction gswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar set;\n\tvar get;\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache a reference to the element accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = get( xbuf, ix );\n\t\tset( xbuf, ix, get( ybuf, iy ) );\n\t\tset( ybuf, iy, tmp );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to multiply `x` by a constant.\n*\n* @module @stdlib/blas/base/gscal\n*\n* @example\n* import gscal from '@stdlib/blas/base/gscal';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal( x.length, 5.0, x, 1 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*\n* @example\n* import gscal from '@stdlib/blas/base/gscal';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* gscal( 3, 5.0, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, -20.0, 25.0, -30.0 ]\n*/\nfunction gscal( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] *= alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] *= alpha;\n\t\t\tx[ i+1 ] *= alpha;\n\t\t\tx[ i+2 ] *= alpha;\n\t\t\tx[ i+3 ] *= alpha;\n\t\t\tx[ i+4 ] *= alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] *= alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges vectors `x` and `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Collection} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Collection} `y`\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gswap( x.length, x, 1, y, 1 );\n* // x => [ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction gswap( N, x, strideX, y, strideY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar m;\n\tvar i;\n\tvar j;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\tif ( strideX < 0 ) {\n\t\t\tix = (1-N) * strideX;\n\t\t} else {\n\t\t\tix = 0;\n\t\t}\n\t\tif ( strideY < 0 ) {\n\t\t\tiy = (1-N) * strideY;\n\t\t} else {\n\t\t\tiy = 0;\n\t\t}\n\t\taccessors( N, ox, strideX, ix, oy, strideY, iy );\n\t\treturn oy.data;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ i ];\n\t\t\t\tx[ i ] = y[ i ];\n\t\t\t\ty[ i ] = tmp;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ i ];\n\t\t\tx[ i ] = y[ i ];\n\t\t\ty[ i ] = tmp;\n\n\t\t\tj = i + 1;\n\t\t\ttmp = x[ j ];\n\t\t\tx[ j ] = y[ j ];\n\t\t\ty[ j ] = tmp;\n\n\t\t\tj += 1;\n\t\t\ttmp = x[ j ];\n\t\t\tx[ j ] = y[ j ];\n\t\t\ty[ j ] = tmp;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges vectors `x` and `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Collection} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Collection} `y`\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gswap( x.length, x, 1, 0, y, 1, 0 );\n* // x => [ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction gswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn oy.data;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = y[ iy ];\n\t\t\t\ty[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = y[ iy ];\n\t\t\ty[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = y[ iy+1 ];\n\t\t\ty[ iy+1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = y[ iy+2 ];\n\t\t\ty[ iy+2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Finds the index of the first element having the maximum absolute value.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {integer} index value\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var idx = idamax( x.length, x, 1, 0 );\n* // returns 4\n*/\nfunction idamax( N, x, strideX, offsetX ) {\n\tvar dmax;\n\tvar idx;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N < 1 ) {\n\t\treturn -1;\n\t}\n\tidx = 0;\n\tif ( N === 1 ) {\n\t\treturn idx;\n\t}\n\tdmax = abs( x[ offsetX ] );\n\tix = offsetX + strideX;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = abs( x[ ix ] );\n\t\tif ( v > dmax ) {\n\t\t\tidx = i;\n\t\t\tdmax = v;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default idamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Finds the index of the first element having the maximum absolute value.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @returns {integer} index value\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var idx = idamax( x.length, x, 1 );\n* // returns 4\n*/\nfunction idamax( N, x, strideX ) {\n\tvar ox = stride2offset( N, strideX );\n\treturn ndarray( N, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default idamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport absf from '@stdlib/math/base/special/absf';\n\n\n// MAIN //\n\n/**\n* Finds the index of the first element having the maximum absolute value.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {integer} index value\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var idx = isamax( x.length, x, 1, 0 );\n* // returns 4\n*/\nfunction isamax( N, x, strideX, offsetX ) {\n\tvar smax;\n\tvar idx;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N < 1 ) {\n\t\treturn -1;\n\t}\n\tidx = 0;\n\tif ( N === 1 ) {\n\t\treturn idx;\n\t}\n\tsmax = absf( x[ offsetX ] );\n\tix = offsetX + strideX;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = absf( x[ ix ] );\n\t\tif ( v > smax ) {\n\t\t\tidx = i;\n\t\t\tsmax = v;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default isamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Finds the index of the first element having the maximum absolute value.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @returns {integer} index value\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var idx = isamax( x.length, x, 1 );\n* // returns 4\n*/\nfunction isamax( N, x, strideX ) {\n\tvar ox = stride2offset( N, strideX );\n\treturn ndarray( N, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default isamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to interchange vectors `x` and `y`.\n*\n* @module @stdlib/blas/base/gswap\n*\n* @example\n* import gswap from '@stdlib/blas/base/gswap';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gswap( x.length, x, 1, y, 1 );\n* // x => [ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* @example\n* import gswap from '@stdlib/blas/base/gswap';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gswap.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // x => [ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport idamax from './idamax.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( idamax, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default idamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport isamax from './isamax.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( isamax, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default isamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport { enum as enumeration } from './../../../base/layouts';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the BLAS memory layout string associated with a BLAS memory layout enumeration constant.\n*\n* @param {integer} layout - layout enumeration constant\n* @returns {(string|null)} layout string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/layout-str2enum';\n*\n* var v = str2enum( 'row-major' );\n* // returns <number>\n*\n* var s = enum2str( v );\n* // returns 'row-major'\n*/\nfunction enum2str( layout ) {\n\tvar v = hash[ layout ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from './../../../base/layouts';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a BLAS memory layout string.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `ROW_MAJOR == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} layout - memory layout string\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'row-major' );\n* // returns <number>\n*/\nfunction str2enum( layout ) {\n\tvar v = ENUM[ layout ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport { enum as enumeration } from './../../../base/matrix-triangles';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the BLAS matrix triangle string associated with a BLAS matrix triangle enumeration constant.\n*\n* @param {integer} value - enumeration constant\n* @returns {(string|null)} matrix triangle string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/matrix-triangle-str2enum';\n*\n* var v = str2enum( 'upper' );\n* // returns <number>\n*\n* var s = enum2str( v );\n* // returns 'upper'\n*/\nfunction enum2str( value ) {\n\tvar v = hash[ value ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from './../../../base/matrix-triangles';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a BLAS matrix triangle.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `UPPER == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} value - matrix triangle string\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'upper' );\n* // returns <number>\n*/\nfunction str2enum( value ) {\n\tvar v = ENUM[ value ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport { enum as enumeration } from './../../../base/operation-sides';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the BLAS operation side string associated with a BLAS operation side enumeration constant.\n*\n* @param {integer} operation - operation enumeration constant\n* @returns {(string|null)} operation string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/operation-side-str2enum';\n*\n* var v = str2enum( 'left' );\n* // returns <number>\n*\n* var s = enum2str( v );\n* // returns 'left'\n*/\nfunction enum2str( operation ) {\n\tvar v = hash[ operation ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from './../../../base/operation-sides';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a BLAS operation side.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `LEFT == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} operation - operation side\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'left' );\n* // returns <number>\n*/\nfunction str2enum( operation ) {\n\tvar v = ENUM[ operation ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport absf from '@stdlib/math/base/special/absf';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - `x` stride length\n* @param {NonNegativeInteger} offset - starting index for `x`\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = sasum( x.length, x, 1, 0 );\n* // returns 15.0\n*/\nfunction sasum( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = f32( sum + absf( x[ ix ] ) );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default sasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - `x` stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = sasum( x.length, x, 1 );\n* // returns 15.0\n*/\nfunction sasum( N, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default sasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sasum from './sasum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* saxpy( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction saxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] += float64ToFloat32( alpha * x[ ix ] );\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] += float64ToFloat32( alpha * x[ ix ] );\n\t\t\ty[ iy+1 ] += float64ToFloat32( alpha * x[ ix+1 ] );\n\t\t\ty[ iy+2 ] += float64ToFloat32( alpha * x[ ix+2 ] );\n\t\t\ty[ iy+3 ] += float64ToFloat32( alpha * x[ ix+3 ] );\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += float64ToFloat32( alpha * x[ ix ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default saxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* saxpy( x.length, alpha, x, 1, y, 1 );\n* // y => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction saxpy( N, alpha, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, alpha, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default saxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport saxpy from './saxpy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( saxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default saxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport absf from '@stdlib/math/base/special/absf';\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex64';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `cx`\n* @returns {number} result\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var cx = new Complex64Array( [ 5.0, -3.0, 6.0, 4.0 ] );\n*\n* var out = scasum( cx.length, cx, 1, 0 );\n* // returns 18.0\n*/\nfunction scasum( N, cx, strideX, offsetX ) {\n\tvar stemp;\n\tvar viewX;\n\tvar ix;\n\tvar sx;\n\tvar i;\n\n\tstemp = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn stemp;\n\t}\n\tviewX = reinterpret( cx, 0 );\n\tsx = strideX * 2;\n\tix = offsetX * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tstemp = f32( stemp + f32( absf( viewX[ ix ] ) + absf( viewX[ ix+1 ] ) ) );\n\t\tix += sx;\n\t}\n\treturn stemp;\n}\n\n\n// EXPORTS //\n\nexport default scasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @returns {number} result\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var cx = new Complex64Array( [ 5.0, -3.0, 6.0, 4.0 ] );\n*\n* var out = scasum( cx.length, cx, 1 );\n* // returns 18.0\n*/\nfunction scasum( N, cx, strideX ) {\n\tvar ox = stride2offset( N, strideX );\n\treturn ndarray( N, cx, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default scasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scasum from './scasum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point vector.\n*\n* @module @stdlib/blas/base/scasum\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import scasum from '@stdlib/blas/base/scasum';\n*\n* var cx = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var out = scasum( cx.length, cx, 1 );\n* // returns 19.0\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import scasum from '@stdlib/blas/base/scasum';\n*\n* var cx = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var out = scasum.ndarray( cx.length, cx, 1, 0 );\n* // returns 19.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar scasum;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tscasum = main;\n} else {\n\tscasum = tmp;\n}\n\n\n// EXPORTS //\n\nexport default scasum;\n\n// exports: { \"ndarray\": \"scasum.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/scasum/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport FLOAT32_MAX from '@stdlib/constants/float32/max';\nimport absf from '@stdlib/math/base/special/absf';\nimport abs2f from '@stdlib/math/base/special/abs2f';\nimport sqrtf from '@stdlib/math/base/special/sqrtf';\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex64';\n\n\n// VARIABLES //\n\n// Blue's scaling constants:\nvar tsml = 1.08420217E-19;\nvar tbig = 4.50359963E+15;\nvar ssml = 3.77789319E+22;\nvar sbig = 1.32348898E-23;\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `cx`\n* @returns {number} L2-norm\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2( 4, cx, 1, 0 );\n* // returns ~0.8\n*/\nfunction scnrm2( N, cx, strideX, offsetX ) {\n\tvar notbig;\n\tvar sumsq;\n\tvar viewX;\n\tvar abig;\n\tvar amed;\n\tvar asml;\n\tvar ymax;\n\tvar ymin;\n\tvar scl;\n\tvar ax;\n\tvar ix;\n\tvar sx;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\t// Reinterpret the input array as a real-valued array comprised of interleaved real and imaginary components:\n\tviewX = reinterpret( cx, 0 );\n\tsx = strideX * 2;\n\tix = offsetX * 2;\n\n\t// Initialize loop values for accumulation:\n\tnotbig = true;\n\n\tsumsq = 0.0;\n\tabig = 0.0;\n\tamed = 0.0;\n\tasml = 0.0;\n\tscl = 1.0;\n\n\t// Compute the sum of squares using 3 accumulators--`abig` (sum of squares scaled down to avoid overflow), `asml` (sum of squares scaled up to avoid underflow), `amed` (sum of squares that do not require scaling)--and thresholds and multipliers--`tbig` (values bigger than this are scaled down by `sbig`) and `tsml` (values smaller than this are scaled up by `ssml`)...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = absf( viewX[ ix ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig = f32( abig + abs2f( ax * sbig ) );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml = f32( asml + abs2f( ax * ssml ) );\n\t\t\t}\n\t\t} else {\n\t\t\tamed = f32( amed + f32( ax * ax ) );\n\t\t}\n\t\tax = absf( viewX[ ix + 1 ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig = f32( abig + abs2f( ax * sbig ) );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml = f32( asml + abs2f( ax * ssml ) );\n\t\t\t}\n\t\t} else {\n\t\t\tamed = f32( amed + f32( ax * ax ) );\n\t\t}\n\t\tix += sx;\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig` > 0...\n\t\tif ( amed > 0.0 || ( amed > FLOAT32_MAX ) || ( amed !== amed ) ) {\n\t\t\tabig = f32( abig + f32( f32( amed * sbig ) * sbig ) );\n\t\t}\n\t\tscl = f32( 1.0 / sbig );\n\t\tsumsq = abig;\n\t} else if ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml` > 0...\n\t\tif ( amed > 0.0 || amed > FLOAT32_MAX || ( amed !== amed ) ) {\n\t\t\tamed = sqrtf( amed );\n\t\t\tasml = f32( sqrtf( asml ) / ssml );\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscl = 1.0;\n\t\t\tsumsq = f32( f32( ymax * ymax ) * f32( 1.0 + abs2f( ymin / ymax ) ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tscl = f32( 1.0 / ssml );\n\t\t\tsumsq = asml;\n\t\t}\n\t} else {\n\t\t// All values are mid-range...\n\t\tscl = 1.0;\n\t\tsumsq = amed;\n\t}\n\treturn f32( sqrtf( sumsq ) * scl );\n}\n\n\n// EXPORTS //\n\nexport default scnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @returns {number} L2-norm\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2( 4, cx, 1 );\n* // returns ~0.8\n*/\nfunction scnrm2( N, cx, strideX ) {\n\treturn ndarray( N, cx, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default scnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scnrm2 from './scnrm2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scnrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the L2-norm of a complex single-precision floating-point vector.\n*\n* @module @stdlib/blas/base/scnrm2\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import scnrm2 from '@stdlib/blas/base/scnrm2';\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2( 4, cx, 1 );\n* // returns ~0.8\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import scnrm2 from '@stdlib/blas/base/scnrm2';\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2.ndarray( 4, cx, 1, 0 );\n* // returns ~0.8\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar scnrm2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tscnrm2 = main;\n} else {\n\tscnrm2 = tmp;\n}\n\n\n// EXPORTS //\n\nexport default scnrm2;\n\n// exports: { \"ndarray\": \"scnrm2.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/scnrm2/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* scopy( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction scopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] = x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] = x[ ix ];\n\t\t\ty[ iy+1 ] = x[ ix+1 ];\n\t\t\ty[ iy+2 ] = x[ ix+2 ];\n\t\t\ty[ iy+3 ] = x[ ix+3 ];\n\t\t\ty[ iy+4 ] = x[ ix+4 ];\n\t\t\ty[ iy+5 ] = x[ ix+5 ];\n\t\t\ty[ iy+6 ] = x[ ix+6 ];\n\t\t\ty[ iy+7 ] = x[ ix+7 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* scopy( x.length, x, 1, y, 1 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction scopy( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default scopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {integer} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdot( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction sdot( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot = float64ToFloat32( dot + float64ToFloat32( x[ ix ] * y[ iy ] ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nexport default sdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction sdot( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default sdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scopy from './scopy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scopy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdot from './sdot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two single-precision floating-point vectors with extended accumulation.\n*\n* @param {integer} N - number of indexed elements\n* @param {number} scalar - scalar constant to add to dot product\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdsdot( x.length, 0.0, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction sdsdot( N, scalar, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = scalar;\n\tif ( N <= 0 ) {\n\t\treturn float64ToFloat32( dot );\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += x[ ix ] * y[ iy ];\n\t\t\t\tix += 1;\n\t\t\t\tiy += 1;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn float64ToFloat32( dot );\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ix]*y[iy] ) + ( x[ix+1]*y[iy+1] ) + ( x[ix+2]*y[iy+2] ) + ( x[ix+3]*y[iy+3] ) + ( x[ix+4]*y[iy+4] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn float64ToFloat32( dot );\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn float64ToFloat32( dot );\n}\n\n\n// EXPORTS //\n\nexport default sdsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two single-precision floating-point vectors with extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} scalar - scalar constant to add to dot product\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdsdot( x.length, 0.0, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction sdsdot( N, scalar, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn float64ToFloat32( scalar );\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, scalar, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default sdsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdsdot from './sdsdot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdsdot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsdot;\n","export default '/home/runner/work/blas/blas/base/sgemv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a single-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - index increment\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* sfill( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction sfill( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] = alpha;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] = alpha;\n\t\t\tx[ ix+1 ] = alpha;\n\t\t\tx[ ix+2 ] = alpha;\n\t\t\tx[ ix+3 ] = alpha;\n\t\t\tx[ ix+4 ] = alpha;\n\t\t\tx[ ix+5 ] = alpha;\n\t\t\tx[ ix+6 ] = alpha;\n\t\t\tx[ ix+7 ] = alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default sfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Fills a single-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* sfill( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction sfill( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sfill from './sfill.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sfill, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* sscal( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, -20.0, 25.0, -30.0 ]\n*/\nfunction sscal( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] *= alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] *= alpha;\n\t\t\tx[ ix+1 ] *= alpha;\n\t\t\tx[ ix+2 ] *= alpha;\n\t\t\tx[ ix+3 ] *= alpha;\n\t\t\tx[ ix+4 ] *= alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] *= alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default sscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* sscal( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\nfunction sscal( N, alpha, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, alpha, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default sscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\nimport { ndarray as sfill } from './../../../ext/base/sfill';\nimport { ndarray as sscal } from './../../../base/sscal';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `y = α*A*x + β*y` or `y = α*A^T*x + β*y`, where `α` and `β` are scalars, `x` and `y` are vectors, and `A` is an `M` by `N` matrix.\n*\n* @private\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `A`\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0 ] );\n*\n* sgemv( 'no-transpose', 2, 3, 1.0, A, 3, 1, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float32Array>[ 7.0, 16.0 ]\n*/\nfunction sgemv( trans, M, N, alpha, A, strideA1, strideA2, offsetA, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tvar isrm;\n\tvar xlen;\n\tvar ylen;\n\tvar tmp;\n\tvar ix1;\n\tvar iy1;\n\tvar sa0;\n\tvar sa1;\n\tvar i1;\n\tvar i0;\n\tvar oa;\n\n\t// Note on variable naming convention: sa#, ix#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tif ( trans === 'no-transpose' ) {\n\t\txlen = N;\n\t\tylen = M;\n\t} else {\n\t\txlen = M;\n\t\tylen = N;\n\t}\n\t// y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tsfill( ylen, 0.0, y, strideY, offsetY );\n\t\t} else {\n\t\t\tsscal( ylen, beta, y, strideY, offsetY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\t// Form: y = α*A*x + y\n\tif (\n\t\t( !isrm && trans === 'no-transpose' ) ||\n\t\t( isrm && trans !== 'no-transpose' )\n\t) {\n\t\tix1 = offsetX;\n\t\tfor ( i1 = 0; i1 < xlen; i1++ ) {\n\t\t\ttmp = f32( alpha * x[ ix1 ] );\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tiy1 = offsetY;\n\t\t\tfor ( i0 = 0; i0 < ylen; i0++ ) {\n\t\t\t\ty[ iy1 ] += f32( A[ oa+(sa0*i0) ] * tmp );\n\t\t\t\tiy1 += strideY;\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn y;\n\t}\n\t// Form: y = α*A^T*x + y\n\n\t// ( !isrm && trans !== 'no-transpose' ) || ( isrm && trans === 'no-transpose' )\n\tiy1 = offsetY;\n\tfor ( i1 = 0; i1 < ylen; i1++ ) {\n\t\ttmp = 0.0;\n\t\tix1 = offsetX;\n\t\toa = offsetA + (sa1*i1);\n\t\tfor ( i0 = 0; i0 < xlen; i0++ ) {\n\t\t\ttmp += f32( A[ oa+(sa0*i0) ] * x[ ix1 ] );\n\t\t\tix1 += strideX;\n\t\t}\n\t\ty[ iy1 ] += f32( alpha * tmp );\n\t\tiy1 += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default sgemv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTranspose from './../../../base/assert/is-transpose-operation';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `y = α*A*x + β*y` or `y = α*A^T*x + β*y`, where `α` and `β` are scalars, `x` and `y` are vectors, and `A` is an `M` by `N` matrix.\n*\n* @param {string} order - storage layout\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `A`\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - input matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must be a valid transpose operation\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be greater than or equal to max(1,M)\n* @throws {RangeError} ninth argument must be non-zero\n* @throws {RangeError} twelfth argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0 ] );\n*\n* sgemv( 'row-major', 'no-transpose', 2, 3, 1.0, A, 3, x, 1, 1.0, y, 1 );\n* // y => <Float32Array>[ 7.0, 16.0 ]\n*/\nfunction sgemv( order, trans, M, N, alpha, A, LDA, x, strideX, beta, y, strideY ) { // eslint-disable-line max-params, max-len\n\tvar xlen;\n\tvar ylen;\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\tvar oy;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTranspose( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( M < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero.' ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Twelfth argument must be non-zero.' ) );\n\t}\n\t// Check if we can early return...\n\tif ( M === 0 || N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\tif ( trans === 'no-transpose' ) {\n\t\txlen = N;\n\t\tylen = M;\n\t} else {\n\t\txlen = M;\n\t\tylen = N;\n\t}\n\tox = stride2offset( xlen, strideX );\n\toy = stride2offset( ylen, strideY );\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\treturn base( trans, M, N, alpha, A, sa1, sa2, 0, x, strideX, ox, beta, y, strideY, oy ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sgemv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sscal from './sscal.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sgemv from './sgemv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sgemv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sgemv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTranspose from './../../../base/assert/is-transpose-operation';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `y = α*A*x + β*y` or `y = α*A^T*x + β*y`, where `α` and `β` are scalars, `x` and `y` are vectors, and `A` is an `M` by `N` matrix.\n*\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `A`\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @throws {TypeError} first argument must be a valid transpose operation\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} tenth argument must be non-zero\n* @throws {RangeError} fourteenth argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0 ] );\n*\n* sgemv( 'no-transpose', 2, 3, 1.0, A, 3, 1, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float32Array>[ 7.0, 16.0 ]\n*/\nfunction sgemv( trans, M, N, alpha, A, strideA1, strideA2, offsetA, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tif ( !isMatrixTranspose( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( M < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eleventh argument must be non-zero.' ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifteenth argument must be non-zero.' ) );\n\t}\n\t// Check if we can early return...\n\tif ( M === 0 || N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\treturn base( trans, M, N, alpha, A, strideA1, strideA2, offsetA, x, strideX, offsetX, beta, y, strideY, offsetY ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sgemv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform one of the matrix-vector operations `y = α*A*x + β*y` or `y = α*A^T*x + β*y`, where `α` and `β` are scalars, `x` and `y` are vectors, and `A` is an `M` by `N` matrix.\n*\n* @module @stdlib/blas/base/sgemv\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import sgemv from '@stdlib/blas/base/sgemv';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0 ] );\n*\n* sgemv( 'row-major', 'no-transpose', 2, 3, 1.0, A, 3, x, 1, 1.0, y, 1 );\n* // y => <Float32Array>[ 7.0, 16.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import sgemv from '@stdlib/blas/base/sgemv';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0 ] );\n*\n* sgemv.ndarray( 'no-transpose', 2, 3, 1.0, A, 3, 1, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float32Array>[ 7.0, 16.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar sgemv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsgemv = main;\n} else {\n\tsgemv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default sgemv;\n\n// exports: { \"ndarray\": \"sgemv.ndarray\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT32_MAX from '@stdlib/constants/float32/max';\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport absf from '@stdlib/math/base/special/absf';\nimport abs2f from '@stdlib/math/base/special/abs2f';\nimport sqrtf from '@stdlib/math/base/special/sqrtf';\n\n\n// VARIABLES //\n\n// Blue's scaling constants:\nvar tsml = 1.08420217E-19;\nvar tbig = 4.50359963E+15;\nvar ssml = 3.77789319E+22;\nvar sbig = 1.32348898E-23;\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} L2-norm\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var z = snrm2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snrm2( N, x, stride, offset ) {\n\tvar notbig;\n\tvar sumsq;\n\tvar abig;\n\tvar amed;\n\tvar asml;\n\tvar ymax;\n\tvar ymin;\n\tvar scl;\n\tvar ax;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offset;\n\n\t// Initialize loop values for accumulation:\n\tnotbig = true;\n\n\tsumsq = 0.0;\n\tabig = 0.0;\n\tamed = 0.0;\n\tasml = 0.0;\n\tscl = 1.0;\n\n\t// Compute the sum of squares using 3 accumulators--`abig` (sum of squares scaled down to avoid overflow), `asml` (sum of squares scaled up to avoid underflow), `amed` (sum of squares that do not require scaling)--and thresholds and multipliers--`tbig` (values bigger than this are scaled down by `sbig`) and `tsml` (values smaller than this are scaled up by `ssml`)...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = absf( x[ ix ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig = f32( abig + abs2f( ax * sbig ) );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml = f32( asml + abs2f( ax * ssml ) );\n\t\t\t}\n\t\t} else {\n\t\t\tamed = f32( amed + f32( ax * ax ) );\n\t\t}\n\t\tix += stride;\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig` > 0...\n\t\tif ( amed > 0.0 || ( amed > FLOAT32_MAX ) || ( amed !== amed ) ) {\n\t\t\tabig = f32( abig + f32( f32( amed * sbig ) * sbig ) );\n\t\t}\n\t\tscl = f32( 1.0 / sbig );\n\t\tsumsq = abig;\n\t} else if ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml` > 0...\n\t\tif ( amed > 0.0 || amed > FLOAT32_MAX || ( amed !== amed ) ) {\n\t\t\tamed = sqrtf( amed );\n\t\t\tasml = f32( sqrtf( asml ) / ssml );\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscl = 1.0;\n\t\t\tsumsq = f32( f32( ymax * ymax ) * f32( 1.0 + abs2f( ymin / ymax ) ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tscl = f32( 1.0 / ssml );\n\t\t\tsumsq = asml;\n\t\t}\n\t} else {\n\t\t// All values are mid-range...\n\t\tscl = 1.0;\n\t\tsumsq = amed;\n\t}\n\treturn f32( sqrtf( sumsq ) * scl );\n}\n\n\n// EXPORTS //\n\nexport default snrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} L2-norm\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var z = snrm2( x.length, x, 1 );\n* // returns 3.0\n*/\nfunction snrm2( N, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default snrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* srot( 2, x, 2, 2, y, 2, 2, 0.8, 0.6 );\n* // x => <Float32Array>[ 1.0, 2.0, ~7.8, 4.0, ~10.6, 6.0 ]\n* // y => <Float32Array>[ 7.0, 8.0, ~5.4, 10.0, ~5.8, 12.0 ]\n*/\nfunction srot( N, x, strideX, offsetX, y, strideY, offsetY, c, s ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tc = f32( c );\n\ts = f32( s );\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = f32( c * x[ ix ] ) + f32( s * y[ iy ] );\n\t\ty[ iy ] = f32( c * y[ iy ] ) - f32( s * x[ ix ] );\n\t\tx[ ix ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default srot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* srot( x.length, x, 1, y, 1, 0.8, 0.6 );\n* // x => <Float32Array>[ ~4.4, ~5.8, ~7.2, ~8.6, 10.0 ]\n* // y => <Float32Array>[ ~4.2, 4.4, 4.6, 4.8, 5.0 ]\n*/\nfunction srot( N, x, strideX, y, strideY, c, s ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nexport default srot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport absf from '@stdlib/math/base/special/absf';\nimport sqrtf from '@stdlib/math/base/special/sqrtf';\nimport abs2f from '@stdlib/math/base/special/abs2f';\nimport copysignf from '@stdlib/math/base/special/copysignf';\n\n\n// MAIN //\n\n/**\n* Constructs a Givens plane rotation.\n*\n* @param {number} a - rotational elimination parameter\n* @param {number} b - rotational elimination parameter\n* @param {Float32Array} out - output array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var out = srotg( 0.0, 2.0, new Float32Array( 4 ), 1, 0 );\n*  // returns <Float32Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*/\nfunction srotg( a, b, out, stride, offset ) {\n\tvar scale;\n\tvar sign;\n\tvar aa;\n\tvar ab;\n\tvar r;\n\tvar c;\n\tvar s;\n\tvar z;\n\n\taa = absf( a );\n\tab = absf( b );\n\tif ( aa > ab ) {\n\t\tsign = copysignf( 1.0, a );\n\t} else {\n\t\tsign = copysignf( 1.0, b );\n\t}\n\tscale = float64ToFloat32( aa + ab );\n\tif ( scale === 0.0 ) {\n\t\tc = 1.0;\n\t\ts = 0.0;\n\t\tr = 0.0;\n\t\tz = 0.0;\n\t} else {\n\t\tr = float64ToFloat32( scale * sqrtf( float64ToFloat32( abs2f( float64ToFloat32( a/scale ) ) + abs2f( float64ToFloat32( b/scale ) ) ) ) ); // eslint-disable-line max-len\n\t\tr = float64ToFloat32( r * sign );\n\t\tc = float64ToFloat32( a / r );\n\t\ts = float64ToFloat32( b / r );\n\t\tz = 1.0;\n\t\tif ( aa > ab ) {\n\t\t\tz = s;\n\t\t} else if ( c !== 0.0 ) {\n\t\t\tz = float64ToFloat32( 1.0 / c );\n\t\t}\n\t}\n\ta = r;\n\tb = z;\n\tout[ offset ] = a;\n\tout[ offset + stride ] = b;\n\tout[ offset + ( 2 * stride ) ] = c;\n\tout[ offset + ( 3 * stride ) ] = s;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default srotg;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array/float32';\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Constructs a Givens plane rotation.\n*\n* @param {number} a - rotational elimination parameter\n* @param {number} b - rotational elimination parameter\n* @returns {Float32Array} output array\n*\n* @example\n* var out = srotg( 0.0, 2.0 );\n* // returns <Float32Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*/\nfunction srotg( a, b ) {\n\tvar out = new Float32Array( 4 );\n\treturn fcn( a, b, out, 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default srotg;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Applies a modified Givens plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float32Array} param - parameters for the modified Givens transformation\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 0.6, 0.1, -0.5, 0.8, 0.9, -0.3, -0.4 ] );\n* var y = new Float32Array( [ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ] );\n* var param = new Float32Array( [ 0.0, 0.0, 2.0, -3.0, 0.0 ] );\n*\n* srotm( 4, x, -1, 3, y, -2, 6, param );\n* // x => <Float32Array>[ ~-0.9, ~-0.8, ~1.3, ~-1.6, ~0.9, ~-0.3, ~-0.4 ]\n* // y => <Float32Array>[ ~1.7, ~-0.9, ~0.5, ~0.7, ~-1.6, ~0.2, ~2.4 ]\n*/\nfunction srotm( N, x, strideX, offsetX, y, strideY, offsetY, param ) {\n\tvar sflag;\n\tvar sh11;\n\tvar sh12;\n\tvar sh21;\n\tvar sh22;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tvar w;\n\tvar z;\n\n\tsflag = param[ 0 ];\n\tif ( N <= 0 || sflag === -2.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( strideX === strideY && strideX > 0 ) {\n\t\tif ( sflag < 0.0 ) {\n\t\t\tsh11 = param[ 1 ];\n\t\t\tsh12 = param[ 3 ];\n\t\t\tsh21 = param[ 2 ];\n\t\t\tsh22 = param[ 4 ];\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tw = x[ ix ];\n\t\t\t\tz = y[ ix ];\n\t\t\t\tx[ ix ] = f32( f32( w * sh11 ) + f32( z * sh12 ) );\n\t\t\t\ty[ ix ] = f32( f32( w * sh21 ) + f32( z * sh22 ) );\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tif ( sflag === 0.0 ) {\n\t\t\tsh12 = param[ 3 ];\n\t\t\tsh21 = param[ 2 ];\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tw = x[ ix ];\n\t\t\t\tz = y[ ix ];\n\t\t\t\tx[ ix ] = f32( w + f32( z * sh12 ) );\n\t\t\t\ty[ ix ] = f32( f32( w * sh21 ) + z );\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tsh11 = param[ 1 ];\n\t\tsh22 = param[ 4 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ ix ];\n\t\t\tx[ ix ] = f32( f32( w * sh11 ) + z );\n\t\t\ty[ ix ] = f32( -w + f32( z * sh22 ) );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( sflag < 0.0 ) {\n\t\tsh11 = param[ 1 ];\n\t\tsh12 = param[ 3 ];\n\t\tsh21 = param[ 2 ];\n\t\tsh22 = param[ 4 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ iy ];\n\t\t\tx[ ix ] = f32( f32( w * sh11 ) + f32( z * sh12 ) );\n\t\t\ty[ iy ] = f32( f32( w * sh21 ) + f32( z * sh22 ) );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( sflag === 0.0 ) {\n\t\tsh12 = param[ 3 ];\n\t\tsh21 = param[ 2 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ iy ];\n\t\t\tx[ ix ] = f32( w + f32( z * sh12 ) );\n\t\t\ty[ iy ] = f32( f32( w * sh21 ) + z );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tsh11 = param[ 1 ];\n\tsh22 = param[ 4 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tw = x[ ix ];\n\t\tz = y[ iy ];\n\t\tx[ ix ] = f32( f32( w * sh11 ) + z );\n\t\ty[ iy ] = f32( -w + f32( z * sh22 ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default srotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a modified Givens plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {Float32Array} param - parameters for the modified Givens transformation\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 0.6, 0.1, -0.5, 0.8, 0.9, -0.3, -0.4 ] );\n* var y = new Float32Array( [ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ] );\n* var param = new Float32Array( [ 0.0, 0.0, 2.0, -3.0, 0.0 ] );\n*\n* srotm( 4, x, -1, y, -2, param );\n* // x => <Float32Array>[ ~-0.9, ~-0.8, ~1.3, ~-1.6, ~0.9, ~-0.3, ~-0.4 ]\n* // y => <Float32Array>[ ~1.7, ~-0.9, ~0.5, ~0.7, ~-1.6, ~0.2, ~2.4 ]\n*/\nfunction srotm( N, x, strideX, y, strideY, param ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy, param );\n}\n\n\n// EXPORTS //\n\nexport default srotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snrm2 from './snrm2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport srot from './srot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( srot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default srot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Construct a Givens plane rotation.\n*\n* @module @stdlib/blas/base/srotg\n*\n* @example\n* import srotg from '@stdlib/blas/base/srotg';\n*\n* var out = srotg( 0.0, 2.0 );\n* // returns <Float32Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*\n* out = srotg( 6.0, -8.0 );\n* // returns <Float32Array>[ 10.0, ~-1.666, -0.6, 0.8 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import srotg from '@stdlib/blas/base/srotg';\n*\n* var out = new Float32Array( 4 );\n*\n* var y = srotg.assign( 0.0, 2.0, out, 1, 0 );\n* // returns <Float32Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport srotm from './srotm.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( srotm, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default srotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sfill from './../../../ext/base/sfill';\nimport sscal from './../../../base/sscal';\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} AP - packed form of a symmetric matrix `A`\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be non-zero\n* @throws {RangeError} tenth argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var AP = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n*\n* sspmv( 'column-major', 'lower', 3, 1.0, AP, x, 1, 1.0, y, 1 );\n* // y => <Float32Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\nfunction sspmv( order, uplo, N, alpha, AP, x, strideX, beta, y, strideY ) {\n\tvar temp1;\n\tvar temp2;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar kk;\n\tvar kx;\n\tvar ky;\n\tvar sy;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Seventh argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Tenth argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tsy = strideY;\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tsfill( N, 0.0, y, strideY );\n\t\t} else {\n\t\t\tif ( strideY < 0 ) {\n\t\t\t\tsy = -sy;\n\t\t\t}\n\t\t\tsscal( N, beta, y, sy );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX > 0 ) {\n\t\tkx = 0;\n\t} else {\n\t\tkx = ( 1 - N ) * strideX;\n\t}\n\tif ( strideY > 0 ) {\n\t\tky = 0;\n\t} else {\n\t\tky = ( 1 - N ) * strideY;\n\t}\n\t// Form: y = alpha*A*x + y\n\tkk = 0;\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tjx = kx;\n\t\tjy = ky;\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\ttemp1 = f32( alpha * x[ jx ] );\n\t\t\ttemp2 = 0.0;\n\t\t\ty[ jy ] += f32( temp1 * AP[ kk ] );\n\t\t\tix = jx;\n\t\t\tiy = jy;\n\t\t\tfor ( k = kk + 1; k < kk + N - j; k++ ) {\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t\ty[ iy ] += f32( temp1 * AP[ k ] );\n\t\t\t\ttemp2 += f32( AP[ k ] * x[ ix ] );\n\t\t\t}\n\t\t\ty[ jy ] += f32( alpha * temp2 );\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t\tkk += N - j;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tjx = kx;\n\tjy = ky;\n\tfor ( j = 0; j < N; j++ ) {\n\t\ttemp1 = f32( alpha * x[ jx ] );\n\t\ttemp2 = 0.0;\n\t\tix = kx;\n\t\tiy = ky;\n\t\tfor ( k = kk; k < kk + j; k++ ) {\n\t\t\ty[ iy ] += f32( temp1 * AP[ k ] );\n\t\t\ttemp2 += f32( AP[ k ] * x[ ix ] );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\ty[ jy ] += f32( f32( temp1 * AP[ kk + j ] ) + f32( alpha * temp2 ) );\n\t\tjx += strideX;\n\t\tjy += strideY;\n\t\tkk += j + 1;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default sspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sspmv from './sspmv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sspmv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sfill } from './../../../ext/base/sfill';\nimport { ndarray as sscal } from './../../../base/sscal';\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} AP - packed form of a symmetric matrix `A`\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be non-zero\n* @throws {RangeError} eleventh argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n*\n* sspmv( 'column-major', 'lower', 3, 1.0, A, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float32Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\nfunction sspmv( order, uplo, N, alpha, AP, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tvar temp1;\n\tvar temp2;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar kk;\n\tvar kx;\n\tvar ky;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Seventh argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eleventh argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tsfill( N, 0.0, y, strideY, offsetY );\n\t\t} else {\n\t\t\tsscal( N, beta, y, strideY, offsetY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\t// Form: y = alpha*A*x + y\n\tkx = offsetX;\n\tky = offsetY;\n\tkk = 0;\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tjx = kx;\n\t\tjy = ky;\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\ttemp1 = f32( alpha * x[ jx ] );\n\t\t\ttemp2 = 0.0;\n\t\t\ty[ jy ] += f32( temp1 * AP[ kk ] );\n\t\t\tix = jx;\n\t\t\tiy = jy;\n\t\t\tfor ( k = kk + 1; k < kk + N - j; k++ ) {\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t\ty[ iy ] += f32( temp1 * AP[ k ] );\n\t\t\t\ttemp2 += f32( AP[ k ] * x[ ix ] );\n\t\t\t}\n\t\t\ty[ jy ] += f32( alpha * temp2 );\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t\tkk += N - j;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tjx = kx;\n\tjy = ky;\n\tfor ( j = 0; j < N; j++ ) {\n\t\ttemp1 = f32( alpha * x[ jx ] );\n\t\ttemp2 = 0.0;\n\t\tix = kx;\n\t\tiy = ky;\n\t\tfor ( k = kk; k < kk + j; k++ ) {\n\t\t\ty[ iy ] += f32( temp1 * AP[ k ] );\n\t\t\ttemp2 += f32( AP[ k ] * x[ ix ] );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\ty[ jy ] += f32( f32( temp1 * AP[ kk + j ] ) + f32( alpha * temp2 ) );\n\t\tjx += strideX;\n\t\tjy += strideY;\n\t\tkk += j + 1;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default sspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @module @stdlib/blas/base/sspmv\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import sspmv from '@stdlib/blas/base/sspmv';\n*\n* var AP = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n*\n* sspmv( 'column-major', 'lower', 3, 1.0, AP, x, 1, 1.0, y, 1 );\n* // y => <Float32Array>[ ~7.0, ~12.0, ~15.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import sspmv from '@stdlib/blas/base/sspmv';\n*\n* var AP = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n*\n* sspmv.ndarray( 'column-major', 'lower', 3, 1.0, AP, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float32Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar sspmv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsspmv = main;\n} else {\n\tsspmv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default sspmv;\n\n// exports: { \"ndarray\": \"sspmv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/sspmv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges two single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* sswap( x.length, x, 1, 0, y, 1, 0 );\n* // x => <Float32Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction sswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = y[ iy ];\n\t\t\t\ty[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = y[ iy ];\n\t\t\ty[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = y[ iy+1 ];\n\t\t\ty[ iy+1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = y[ iy+2 ];\n\t\t\ty[ iy+2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default sswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Interchanges two single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* sswap( x.length, x, 1, y, 1 );\n* // x => <Float32Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction sswap( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default sswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sswap from './sswap.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sswap, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sfill from './../../../ext/base/sfill';\nimport sscal from './../../../base/sscal';\nimport max from '@stdlib/math/base/special/max';\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be greater than or equal to max(1,N)\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} eleventh argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 0.0, 0.0, 0.0 ] );\n*\n* ssymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0.0, y, 1 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction ssymv( order, uplo, N, alpha, A, LDA, x, strideX, beta, y, strideY ) { // eslint-disable-line max-params\n\tvar temp1;\n\tvar temp2;\n\tvar jmin;\n\tvar jmax;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar ox;\n\tvar oy;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( 'invalid argument. Sixth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eleventh argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tsfill( N, 0.0, y, strideY );\n\t\t} else {\n\t\t\tif ( strideY < 0 ) {\n\t\t\t\tstrideY = -strideY;\n\t\t\t}\n\t\t\tsscal( N, beta, y, strideY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX > 0 ) {\n\t\tox = 0;\n\t} else {\n\t\tox = ( 1 - N ) * strideX;\n\t}\n\tif ( strideY > 0 ) {\n\t\toy = 0;\n\t} else {\n\t\toy = ( 1 - N ) * strideY;\n\t}\n\t// Form: y = alpha*A*x + y\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tix = ox;\n\t\tiy = oy;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ttemp1 = f32( alpha * x[ ix ] );\n\t\t\ttemp2 = 0.0;\n\t\t\tjmin = i + 1;\n\t\t\tjmax = N;\n\t\t\tjx = ox + ( jmin*strideX );\n\t\t\tjy = oy + ( jmin*strideY );\n\t\t\ty[ iy ] += f32( temp1 * A[(LDA*i)+i] );\n\t\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\t\tk = ( LDA*i ) + j;\n\t\t\t\ty[ jy ] += f32( temp1 * A[k] );\n\t\t\t\ttemp2 = f32( temp2 + f32( x[jx] * A[k] ) );\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\ty[ iy ] += f32( alpha * temp2 );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tix = ox + ( (N-1)*strideX );\n\tiy = oy + ( (N-1)*strideY );\n\tfor ( i = N-1; i >= 0; i-- ) {\n\t\ttemp1 = f32( alpha * x[ ix ] );\n\t\ttemp2 = 0.0;\n\t\tjmin = 0;\n\t\tjmax = i;\n\t\tjx = ox + ( jmin*strideX );\n\t\tjy = oy + ( jmin*strideY );\n\t\ty[ iy ] += f32( temp1 * A[(LDA*i)+i] );\n\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\tk = ( LDA*i ) + j;\n\t\t\ty[ jy ] += f32( temp1 * A[k] );\n\t\t\ttemp2 = f32( temp2 + f32( x[jx] * A[k] ) );\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t}\n\t\ty[ iy ] += f32( alpha * temp2 );\n\t\tix -= strideX;\n\t\tiy -= strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default ssymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssymv from './ssymv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssymv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sfill } from './../../../ext/base/sfill';\nimport { ndarray as sscal } from './../../../base/sscal';\nimport max from '@stdlib/math/base/special/max';\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be greater than or equal to max(1,N)\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} twelfth argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 0.0, 0.0, 0.0 ] );\n*\n* ssymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0, 0.0, y, 1, 0 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction ssymv( order, uplo, N, alpha, A, LDA, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tvar temp1;\n\tvar temp2;\n\tvar jmin;\n\tvar jmax;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar ox;\n\tvar oy;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( 'invalid argument. Sixth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Twelfth argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tsfill( N, 0.0, y, strideY, offsetY );\n\t\t} else {\n\t\t\tsscal( N, beta, y, strideY, offsetY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tox = offsetX;\n\toy = offsetY;\n\n\t// Form: y = alpha*A*x + y\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tix = ox;\n\t\tiy = oy;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ttemp1 = f32( alpha * x[ ix ] );\n\t\t\ttemp2 = 0.0;\n\t\t\tjmin = i + 1;\n\t\t\tjmax = N;\n\t\t\tjx = ox + ( jmin*strideX );\n\t\t\tjy = oy + ( jmin*strideY );\n\t\t\ty[ iy ] += f32( temp1 * A[(LDA*i)+i] );\n\t\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\t\tk = ( LDA*i ) + j;\n\t\t\t\ty[ jy ] += f32( temp1 * A[k] );\n\t\t\t\ttemp2 = f32( temp2 + f32( x[jx] * A[k] ) );\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\ty[ iy ] += f32( alpha * temp2 );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tix = ox + ( (N-1)*strideX );\n\tiy = oy + ( (N-1)*strideY );\n\tfor ( i = N-1; i >= 0; i-- ) {\n\t\ttemp1 = f32( alpha * x[ ix ] );\n\t\ttemp2 = 0.0;\n\t\tjmin = 0;\n\t\tjmax = i;\n\t\tjx = ox + ( jmin*strideX );\n\t\tjy = oy + ( jmin*strideY );\n\t\ty[ iy ] += f32( temp1 * A[(LDA*i)+i] );\n\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\tk = ( LDA*i ) + j;\n\t\t\ty[ jy ] += f32( temp1 * A[k] );\n\t\t\ttemp2 = f32( temp2 + f32( x[jx] * A[k] ) );\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t}\n\t\ty[ iy ] += f32( alpha * temp2 );\n\t\tix -= strideX;\n\t\tiy -= strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default ssymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas/base/ssymv\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import ssymv from '@stdlib/blas/base/ssymv';\n*\n* var A = new Float32Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 0.0, 0.0, 0.0 ] );\n*\n* ssymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0.0, y, 1 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import ssymv from '@stdlib/blas/base/ssymv';\n*\n* var A = new Float32Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 0.0, 0.0, 0.0 ] );\n*\n* ssymv.ndarray( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0, 0.0, y, 1, 0 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar ssymv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tssymv = main;\n} else {\n\tssymv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default ssymv;\n\n// exports: { \"ndarray\": \"ssymv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/ssymv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @private\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction ssyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tvar isrm;\n\tvar tmp;\n\tvar ix0;\n\tvar ix1;\n\tvar sa0;\n\tvar sa1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\tif (\n\t\t( isrm && uplo === 'lower' ) ||\n\t\t( !isrm && uplo === 'upper' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = f32( alpha * x[ ix1 ] );\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tA[ oa+(sa0*i0) ] += f32( x[ ix0 ] * tmp );\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn A;\n\t}\n\t// ( isrm && uplo === 'upper' ) || ( !isrm && uplo === 'lower' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\ttmp = f32( alpha * x[ ix1 ] );\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tA[ oa+(sa0*i0) ] += f32( x[ ix0 ] * tmp );\n\t\t\t\tix0 += strideX;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nexport default ssyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} eighth argument must be greater than or equal to max(1,N)\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr( 'row-major', 'upper', 3, 1.0, x, 1, A, 3 );\n* // A => <Float32Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction ssyr( order, uplo, N, alpha, x, strideX, A, LDA ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, N, alpha, x, strideX, ox, A, sa1, sa2, 0 );\n}\n\n\n// EXPORTS //\n\nexport default ssyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssyr from './ssyr.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssyr, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @throws {TypeError} first argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be non-zero\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction ssyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\treturn base( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ssyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @private\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr2( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction ssyr2( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len, max-params\n\tvar tmp1;\n\tvar tmp2;\n\tvar isrm;\n\tvar ix0;\n\tvar ix1;\n\tvar iy0;\n\tvar iy1;\n\tvar sa0;\n\tvar sa1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\tvar oy;\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) { // row-major\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // column-major\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\toy = offsetY;\n\tix1 = ox;\n\tiy1 = oy;\n\tif (\n\t\t( isrm && uplo === 'lower' ) ||\n\t\t( !isrm && uplo === 'upper' )\n\t) {\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( ( x[ ix1 ] !== 0.0 ) || ( y[ iy1 ] !== 0.0 ) ) {\n\t\t\t\ttmp1 = f32( alpha * y[ iy1 ] );\n\t\t\t\ttmp2 = f32( alpha * x[ ix1 ] );\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tiy0 = oy;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tA[ oa+(sa0*i0) ] += f32( f32( x[ ix0 ] * tmp1 ) + f32( y[ iy0 ] * tmp2 ) ); // eslint-disable-line max-len\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t\tiy0 += strideY;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t\tiy1 += strideY;\n\t\t}\n\t\treturn A;\n\t}\n\t// ( isrm && uplo === 'upper' ) || ( !isrm && uplo === 'lower' )\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( ( x[ ix1 ] !== 0.0 ) || ( y[ iy1 ] !== 0.0 ) ) {\n\t\t\ttmp1 = f32( alpha * y[ iy1 ] );\n\t\t\ttmp2 = f32( alpha * x[ ix1 ] );\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tiy0 = iy1;\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tA[ oa+(sa0*i0) ] += f32( f32( x[ ix0 ] * tmp1 ) + f32( y[ iy0 ] * tmp2 ) ); // eslint-disable-line max-len\n\t\t\t\tix0 += strideX;\n\t\t\t\tiy0 += strideY;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t\tiy1 += strideY;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nexport default ssyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {Float32Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} eighth argument must be greater than or equal to max(1,N)\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr2( 'row-major', 'upper', 3, 1.0, x, 1, y, 1, A, 3 );\n* // A => <Float32Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction ssyr2( order, uplo, N, alpha, x, strideX, y, strideY, A, LDA ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\tvar oy;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\toy = stride2offset( N, strideY );\n\treturn base( uplo, N, alpha, x, strideX, ox, y, strideY, oy, A, sa1, sa2, 0 ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ssyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssyr2 from './ssyr2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssyr2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @throws {TypeError} first argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be non-zero\n* @throws {RangeError} eighth argument must be non-zero\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr2( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction ssyr2( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len, max-params\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether the reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\treturn base( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ssyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas/base/ssyr2\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import ssyr2 from '@stdlib/blas/base/ssyr2';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr2( 'row-major', 'upper', 3, 1.0, x, 1, y, 1, A, 3 );\n* // A => <Float32Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import ssyr2 from '@stdlib/blas/base/ssyr2';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr2.ndarray( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar ssyr2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tssyr2 = main;\n} else {\n\tssyr2 = tmp;\n}\n\n\n// EXPORTS //\n\nexport default ssyr2;\n\n// exports: { \"ndarray\": \"ssyr2.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/ssyr2/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @private\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strmv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float32Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction strmv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tvar nonunit;\n\tvar isrm;\n\tvar tmp;\n\tvar sa0;\n\tvar sa1;\n\tvar ix0;\n\tvar ix1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\n\t// Note on variable naming convention: sa#, ix#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tnonunit = ( diag === 'non-unit' );\n\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = 0; i0 < i1; i0++ ) {\n\t\t\t\t\tx[ ix0 ] = f32( x[ ix0 ] + f32( tmp * A[ oa+(sa0*i0) ] ) );\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t}\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] = f32( x[ ix1 ] * A[ oa+(sa0*i1) ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'lower' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'upper' )\n\t) {\n\t\tox += ( N - 1 ) * strideX;\n\t\tix1 = ox;\n\t\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = N-1; i0 > i1; i0-- ) {\n\t\t\t\t\tx[ ix0 ] = f32( x[ ix0 ] + f32( tmp * A[ oa+(sa0*i0) ] ) );\n\t\t\t\t\tix0 -= strideX;\n\t\t\t\t}\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] = f32( x[ ix1 ] * A[ oa+(sa0*i1) ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 -= strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans !== 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans === 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox + ( ( N - 1 ) * strideX );\n\t\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\t\ttmp = x[ ix1 ];\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tif ( nonunit ) {\n\t\t\t\ttmp = f32( tmp * A[ oa+(sa0*i1) ] );\n\t\t\t}\n\t\t\tfor ( i0 = i1-1; i0 >= 0; i0-- ) {\n\t\t\t\tix0 -= strideX;\n\t\t\t\ttmp = f32( tmp + f32( x[ ix0 ] * A[ oa+(sa0*i0) ] ) );\n\t\t\t}\n\t\t\tx[ ix1 ] = tmp;\n\t\t\tix1 -= strideX;\n\t\t}\n\t\treturn x;\n\t}\n\t// ( !isrm && trans !== 'no-transpose' && uplo === 'lower' ) || ( isrm && trans === 'no-transpose' && uplo === 'upper' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\ttmp = x[ ix1 ];\n\t\toa = offsetA + (sa1*i1);\n\t\tix0 = ix1;\n\t\tif ( nonunit ) {\n\t\t\ttmp = f32( tmp * A[ oa+(sa0*i1) ] );\n\t\t}\n\t\tfor ( i0 = i1+1; i0 < N; i0++ ) {\n\t\t\tix0 += strideX;\n\t\t\ttmp = f32( tmp + f32( x[ ix0 ] * A[ oa+(sa0*i0) ] ) );\n\t\t}\n\t\tx[ ix1 ] = tmp;\n\t\tix1 += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default strmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nimport isDiagonal from './../../../base/assert/is-diagonal-type';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float32Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} third argument must be a valid transpose operation\n* @throws {TypeError} fourth argument must be a valid diagonal type\n* @throws {RangeError} fifth argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be greater than or equal to max(1,N)\n* @throws {RangeError} ninth argument must be non-zero\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strmv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float32Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction strmv( order, uplo, trans, diag, N, A, LDA, x, strideX ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Seventh argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, trans, diag, N, A, sa1, sa2, 0, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default strmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport strmv from './strmv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( strmv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default strmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nimport isDiagonal from './../../../base/assert/is-diagonal-type';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @throws {TypeError} first argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} second argument must be a valid transpose operation\n* @throws {TypeError} third argument must be a valid diagonal type\n* @throws {RangeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} tenth argument must be non-zero\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strmv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float32Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction strmv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\treturn base( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default strmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @module @stdlib/blas/base/strmv\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import strmv from '@stdlib/blas/base/strmv';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strmv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float32Array>[ 14.0, 8.0, 3.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import strmv from '@stdlib/blas/base/strmv';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strmv.ndarray( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float32Array>[ 14.0, 8.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar strmv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tstrmv = main;\n} else {\n\tstrmv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default strmv;\n\n// exports: { \"ndarray\": \"strmv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/strmv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport { enum as enumeration } from './../../../base/transpose-operations';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the BLAS transpose operation string associated with a BLAS transpose operation enumeration constant.\n*\n* @param {integer} operation - operation enumeration constant\n* @returns {(string|null)} operation string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/transpose-operation-str2enum';\n*\n* var v = str2enum( 'transpose' );\n* // returns <number>\n*\n* var s = enum2str( v );\n* // returns 'transpose'\n*/\nfunction enum2str( operation ) {\n\tvar v = hash[ operation ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from './../../../base/transpose-operations';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a BLAS transpose operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `TRANSPOSE == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} operation - transpose operation\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'transpose' );\n* // returns <number>\n*/\nfunction str2enum( operation ) {\n\tvar v = ENUM[ operation ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\nimport { assign as muladd } from '@stdlib/complex/float64/base/mul-add';\nimport real from '@stdlib/complex/float64/real';\nimport imag from '@stdlib/complex/float64/imag';\nimport dcabs1 from './../../../base/dcabs1';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant and adds the result to a double-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} za - scalar constant\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {integer} offsetX - starting index for `zx`\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @param {integer} offsetY - starting index for `zy`\n* @returns {Complex128Array} second input array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, za, zx, 1, 0, zy, 1, 0 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns -1.0\n*\n* var im = imag( z );\n* // returns 7.0\n*/\nfunction zaxpy( N, za, zx, strideX, offsetX, zy, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar re;\n\tvar im;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn zy;\n\t}\n\tif ( dcabs1( za ) === 0.0 ) {\n\t\treturn zy;\n\t}\n\tre = real( za );\n\tim = imag( za );\n\tviewX = reinterpret( zx, 0 );\n\tviewY = reinterpret( zy, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tmuladd( re, im, viewX[ ix ], viewX[ ix+1 ], viewY[ iy ], viewY[ iy+1 ], viewY, 1, iy ); // eslint-disable-line max-len\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn zy;\n}\n\n\n// EXPORTS //\n\nexport default zaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant and adds the result to a double-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} za - scalar constant\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @returns {Complex128Array} second input array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, za, zx, 1, zy, 1 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns -1.0\n*\n* var im = imag( z );\n* // returns 7.0\n*/\nfunction zaxpy( N, za, zx, strideX, zy, strideY ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, za, zx, strideX, ix, zy, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default zaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport zaxpy from './zaxpy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zaxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to scale a double-precision complex floating-point vector by a double-precision complex floating-point constant and add the result to a double-precision complex floating-point vector.\n*\n* @module @stdlib/blas/base/zaxpy\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n* import zaxpy from '@stdlib/blas/base/zaxpy';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, za, zx, 1, zy, 1 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns -1.0\n*\n* var im = imag( z );\n* // returns 7.0\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n* import zaxpy from '@stdlib/blas/base/zaxpy';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy.ndarray( 3, za, zx, 1, 0, zy, 1, 0 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns -1.0\n*\n* var im = imag( z );\n* // returns 7.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar zaxpy;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tzaxpy = main;\n} else {\n\tzaxpy = tmp;\n}\n\n\n// EXPORTS //\n\nexport default zaxpy;\n\n// exports: { \"ndarray\": \"zaxpy.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/zaxpy/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\n\n\n// MAIN //\n\n/**\n* Copies values from one complex double-precision floating-point vector to another complex double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Complex128Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Complex128Array} output array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* zcopy( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Complex128Array>[ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*/\nfunction zcopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = reinterpret( x, 0 );\n\tviewY = reinterpret( y, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tviewY[ iy ] = viewX[ ix ];\n\t\tviewY[ iy+1 ] = viewX[ ix+1 ];\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default zcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Copies values from one complex double-precision floating-point vector to another complex double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex128Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Complex128Array} output array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* zcopy( x.length, x, 1, y, 1 );\n* // y => <Complex128Array>[ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*/\nfunction zcopy( N, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default zcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {NonNegativeInteger} offsetX - starting `zx` index\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @param {NonNegativeInteger} offsetY - starting `zy` index\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex128Array} `zy`\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var zy = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* zdrot( zx.length, zx, 1, 0, zy, 1, 0, 0.8, 0.6 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns ~-0.6\n*\n* var im = imag( z );\n* // returns ~-1.2\n*\n* z = zx.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns ~0.8\n*\n* im = imag( z );\n* // returns ~1.6\n*/\nfunction zdrot( N, zx, strideX, offsetX, zy, strideY, offsetY, c, s ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn zy;\n\t}\n\tviewX = reinterpret( zx, 0 );\n\tviewY = reinterpret( zy, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = ( c*viewX[ ix ] ) + ( s*viewY[ iy ] );\n\t\tviewY[ iy ] = ( c*viewY[ iy ] ) - ( s*viewX[ ix ] );\n\t\tviewX[ ix ] = tmp;\n\n\t\ttmp = ( c*viewX[ ix+1 ] ) + ( s*viewY[ iy+1 ] );\n\t\tviewY[ iy+1 ] = ( c*viewY[ iy+1 ] ) - ( s*viewX[ ix+1 ] );\n\t\tviewX[ ix+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn zy;\n}\n\n\n// EXPORTS //\n\nexport default zdrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex128Array} `zy`\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var zy = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* zdrot( zx.length, zx, 1, zy, 1, 0.8, 0.6 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns ~-0.6\n*\n* var im = imag( z );\n* // returns ~-1.2\n*\n* z = zx.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns ~0.8\n*\n* im = imag( z );\n* // returns ~1.6\n*/\nfunction zdrot( N, zx, strideX, zy, strideY, c, s ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, zx, strideX, ix, zy, strideY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nexport default zdrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\nimport { assign as cmul } from '@stdlib/complex/float64/base/mul';\nimport real from '@stdlib/complex/float64/real';\nimport imag from '@stdlib/complex/float64/imag';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} za - constant\n* @param {Complex128Array} zx - input array\n* @param {integer} strideZX - `zx` stride length\n* @param {NonNegativeInteger} offsetZX - starting `zx` index\n* @returns {Complex128Array} input array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zscal( 3, za, zx, 1, 0 );\n* // zx => <Complex128Array>[ -2.0, 6.0, -2.0, 14.0, -2.0, 22.0 ]\n*/\nfunction zscal( N, za, zx, strideZX, offsetZX ) {\n\tvar view;\n\tvar re1;\n\tvar im1;\n\tvar re2;\n\tvar im2;\n\tvar sx;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn zx;\n\t}\n\t// Reinterpret the input array as a real-valued array of interleaved real and imaginary components:\n\tview = reinterpret( zx, 0 );\n\n\t// Adjust the stride and offset:\n\tsx = strideZX * 2;\n\tix = offsetZX * 2;\n\n\t// Decompose the input scalar to real and imaginary components:\n\tre1 = real( za );\n\tim1 = imag( za );\n\n\tfor ( i = 0; i < N; i++ ) {\n\t\tre2 = view[ ix ];\n\t\tim2 = view[ ix+1 ];\n\t\tcmul( re1, im1, re2, im2, view, 1, ix );\n\t\tix += sx;\n\t}\n\treturn zx;\n}\n\n\n// EXPORTS //\n\nexport default zscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} za - constant\n* @param {Complex128Array} zx - input array\n* @param {integer} strideZX - `zx` stride length\n* @returns {Complex128Array} input array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zscal( 3, za, zx, 1 );\n* // zx => <Complex128Array>[ -2.0, 6.0, -2.0, 14.0, -2.0, 22.0 ]\n*/\nfunction zscal( N, za, zx, strideZX ) {\n\treturn ndarray( N, za, zx, strideZX, stride2offset( N, strideZX ) );\n}\n\n\n// EXPORTS //\n\nexport default zscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\n\n\n// MAIN //\n\n/**\n* Interchanges two complex double-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Complex128Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Complex128Array} `y`\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex128Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* zswap( x.length, x, 1, 0, y, 1, 0 );\n*\n* var z = y.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns 2.0\n*\n* z = x.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 7.0\n*\n* im = imag( z );\n* // returns 8.0\n*/\nfunction zswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = reinterpret( x, 0 );\n\tviewY = reinterpret( y, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = viewX[ ix ];\n\t\tviewX[ ix ] = viewY[ iy ];\n\t\tviewY[ iy ] = tmp;\n\n\t\ttmp = viewX[ ix+1 ];\n\t\tviewX[ ix+1 ] = viewY[ iy+1 ];\n\t\tviewY[ iy+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default zswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Interchanges two complex double-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex128Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Complex128Array} `y`\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import real from '@stdlib/complex/float64/real';\n* import imag from '@stdlib/complex/float64/imag';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex128Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* zswap( x.length, x, 1, y, 1 );\n*\n* var z = y.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns 2.0\n*\n* z = x.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 7.0\n*\n* im = imag( z );\n* // returns 8.0\n*/\nfunction zswap( N, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default zswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport zcopy from './zcopy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zcopy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport zdrot from './zdrot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zdrot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zdrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport zscal from './zscal.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport zswap from './zswap.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zswap, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace blas\n*/\nvar blas = {};\n\n/**\n* @name assert\n* @memberof blas\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/base/assert}\n*/\nimport assert from './../../base/assert';\nsetReadOnly( blas, 'assert', assert );\n\n/**\n* @name caxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/caxpy}\n*/\nimport caxpy from './../../base/caxpy';\nsetReadOnly( blas, 'caxpy', caxpy );\n\n/**\n* @name ccopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ccopy}\n*/\nimport ccopy from './../../base/ccopy';\nsetReadOnly( blas, 'ccopy', ccopy );\n\n/**\n* @name cscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/cscal}\n*/\nimport cscal from './../../base/cscal';\nsetReadOnly( blas, 'cscal', cscal );\n\n/**\n* @name csrot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/csrot}\n*/\nimport csrot from './../../base/csrot';\nsetReadOnly( blas, 'csrot', csrot );\n\n/**\n* @name cswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/cswap}\n*/\nimport cswap from './../../base/cswap';\nsetReadOnly( blas, 'cswap', cswap );\n\n/**\n* @name dasum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dasum}\n*/\nimport dasum from './../../base/dasum';\nsetReadOnly( blas, 'dasum', dasum );\n\n/**\n* @name daxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/daxpy}\n*/\nimport daxpy from './../../base/daxpy';\nsetReadOnly( blas, 'daxpy', daxpy );\n\n/**\n* @name dcabs1\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dcabs1}\n*/\nimport dcabs1 from './../../base/dcabs1';\nsetReadOnly( blas, 'dcabs1', dcabs1 );\n\n/**\n* @name dcopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dcopy}\n*/\nimport dcopy from './../../base/dcopy';\nsetReadOnly( blas, 'dcopy', dcopy );\n\n/**\n* @name ddot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ddot}\n*/\nimport ddot from './../../base/ddot';\nsetReadOnly( blas, 'ddot', ddot );\n\n/**\n* @name diagonalTypeEnum2Str\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/diagonal-type-enum2str}\n*/\nimport diagonalTypeEnum2Str from './../../base/diagonal-type-enum2str';\nsetReadOnly( blas, 'diagonalTypeEnum2Str', diagonalTypeEnum2Str );\n\n/**\n* @name diagonalTypeResolveEnum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/diagonal-type-resolve-enum}\n*/\nimport diagonalTypeResolveEnum from './../../base/diagonal-type-resolve-enum';\nsetReadOnly( blas, 'diagonalTypeResolveEnum', diagonalTypeResolveEnum );\n\n/**\n* @name diagonalTypeResolveStr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/diagonal-type-resolve-str}\n*/\nimport diagonalTypeResolveStr from './../../base/diagonal-type-resolve-str';\nsetReadOnly( blas, 'diagonalTypeResolveStr', diagonalTypeResolveStr );\n\n/**\n* @name diagonalTypeStr2Enum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/diagonal-type-str2enum}\n*/\nimport diagonalTypeStr2Enum from './../../base/diagonal-type-str2enum';\nsetReadOnly( blas, 'diagonalTypeStr2Enum', diagonalTypeStr2Enum );\n\n/**\n* @name diagonalTypes\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/diagonal-types}\n*/\nimport diagonalTypes from './../../base/diagonal-types';\nsetReadOnly( blas, 'diagonalTypes', diagonalTypes );\n\n/**\n* @name dnrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dnrm2}\n*/\nimport dnrm2 from './../../base/dnrm2';\nsetReadOnly( blas, 'dnrm2', dnrm2 );\n\n/**\n* @name drot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/drot}\n*/\nimport drot from './../../base/drot';\nsetReadOnly( blas, 'drot', drot );\n\n/**\n* @name drotg\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/drotg}\n*/\nimport drotg from './../../base/drotg';\nsetReadOnly( blas, 'drotg', drotg );\n\n/**\n* @name drotm\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/drotm}\n*/\nimport drotm from './../../base/drotm';\nsetReadOnly( blas, 'drotm', drotm );\n\n/**\n* @name dscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dscal}\n*/\nimport dscal from './../../base/dscal';\nsetReadOnly( blas, 'dscal', dscal );\n\n/**\n* @name dsdot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dsdot}\n*/\nimport dsdot from './../../base/dsdot';\nsetReadOnly( blas, 'dsdot', dsdot );\n\n/**\n* @name dspmv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dspmv}\n*/\nimport dspmv from './../../base/dspmv';\nsetReadOnly( blas, 'dspmv', dspmv );\n\n/**\n* @name dswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dswap}\n*/\nimport dswap from './../../base/dswap';\nsetReadOnly( blas, 'dswap', dswap );\n\n/**\n* @name dsymv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dsymv}\n*/\nimport dsymv from './../../base/dsymv';\nsetReadOnly( blas, 'dsymv', dsymv );\n\n/**\n* @name dsyr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dsyr}\n*/\nimport dsyr from './../../base/dsyr';\nsetReadOnly( blas, 'dsyr', dsyr );\n\n/**\n* @name dsyr2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dsyr2}\n*/\nimport dsyr2 from './../../base/dsyr2';\nsetReadOnly( blas, 'dsyr2', dsyr2 );\n\n/**\n* @name dtrmv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dtrmv}\n*/\nimport dtrmv from './../../base/dtrmv';\nsetReadOnly( blas, 'dtrmv', dtrmv );\n\n/**\n* @name dznrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dznrm2}\n*/\nimport dznrm2 from './../../base/dznrm2';\nsetReadOnly( blas, 'dznrm2', dznrm2 );\n\n/**\n* @name gasum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gasum}\n*/\nimport gasum from './../../base/gasum';\nsetReadOnly( blas, 'gasum', gasum );\n\n/**\n* @name gaxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gaxpy}\n*/\nimport gaxpy from './../../base/gaxpy';\nsetReadOnly( blas, 'gaxpy', gaxpy );\n\n/**\n* @name gcopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gcopy}\n*/\nimport gcopy from './../../base/gcopy';\nsetReadOnly( blas, 'gcopy', gcopy );\n\n/**\n* @name gdot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gdot}\n*/\nimport gdot from './../../base/gdot';\nsetReadOnly( blas, 'gdot', gdot );\n\n/**\n* @name gnrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gnrm2}\n*/\nimport gnrm2 from './../../base/gnrm2';\nsetReadOnly( blas, 'gnrm2', gnrm2 );\n\n/**\n* @name gscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gscal}\n*/\nimport gscal from './../../base/gscal';\nsetReadOnly( blas, 'gscal', gscal );\n\n/**\n* @name gswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gswap}\n*/\nimport gswap from './../../base/gswap';\nsetReadOnly( blas, 'gswap', gswap );\n\n/**\n* @name idamax\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/idamax}\n*/\nimport idamax from './../../base/idamax';\nsetReadOnly( blas, 'idamax', idamax );\n\n/**\n* @name isamax\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/isamax}\n*/\nimport isamax from './../../base/isamax';\nsetReadOnly( blas, 'isamax', isamax );\n\n/**\n* @name layoutEnum2Str\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/layout-enum2str}\n*/\nimport layoutEnum2Str from './../../base/layout-enum2str';\nsetReadOnly( blas, 'layoutEnum2Str', layoutEnum2Str );\n\n/**\n* @name layoutResolveEnum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/layout-resolve-enum}\n*/\nimport layoutResolveEnum from './../../base/layout-resolve-enum';\nsetReadOnly( blas, 'layoutResolveEnum', layoutResolveEnum );\n\n/**\n* @name layoutResolveStr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/layout-resolve-str}\n*/\nimport layoutResolveStr from './../../base/layout-resolve-str';\nsetReadOnly( blas, 'layoutResolveStr', layoutResolveStr );\n\n/**\n* @name layoutStr2Enum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/layout-str2enum}\n*/\nimport layoutStr2Enum from './../../base/layout-str2enum';\nsetReadOnly( blas, 'layoutStr2Enum', layoutStr2Enum );\n\n/**\n* @name layouts\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/layouts}\n*/\nimport layouts from './../../base/layouts';\nsetReadOnly( blas, 'layouts', layouts );\n\n/**\n* @name matrixTriangleEnum2Str\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/matrix-triangle-enum2str}\n*/\nimport matrixTriangleEnum2Str from './../../base/matrix-triangle-enum2str';\nsetReadOnly( blas, 'matrixTriangleEnum2Str', matrixTriangleEnum2Str );\n\n/**\n* @name matrixTriangleResolveEnum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/matrix-triangle-resolve-enum}\n*/\nimport matrixTriangleResolveEnum from './../../base/matrix-triangle-resolve-enum';\nsetReadOnly( blas, 'matrixTriangleResolveEnum', matrixTriangleResolveEnum );\n\n/**\n* @name matrixTriangleResolveStr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/matrix-triangle-resolve-str}\n*/\nimport matrixTriangleResolveStr from './../../base/matrix-triangle-resolve-str';\nsetReadOnly( blas, 'matrixTriangleResolveStr', matrixTriangleResolveStr );\n\n/**\n* @name matrixTriangleStr2Enum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/matrix-triangle-str2enum}\n*/\nimport matrixTriangleStr2Enum from './../../base/matrix-triangle-str2enum';\nsetReadOnly( blas, 'matrixTriangleStr2Enum', matrixTriangleStr2Enum );\n\n/**\n* @name matrixTriangles\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/matrix-triangles}\n*/\nimport matrixTriangles from './../../base/matrix-triangles';\nsetReadOnly( blas, 'matrixTriangles', matrixTriangles );\n\n/**\n* @name operationSideEnum2Str\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/operation-side-enum2str}\n*/\nimport operationSideEnum2Str from './../../base/operation-side-enum2str';\nsetReadOnly( blas, 'operationSideEnum2Str', operationSideEnum2Str );\n\n/**\n* @name operationSideResolveEnum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/operation-side-resolve-enum}\n*/\nimport operationSideResolveEnum from './../../base/operation-side-resolve-enum';\nsetReadOnly( blas, 'operationSideResolveEnum', operationSideResolveEnum );\n\n/**\n* @name operationSideResolveStr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/operation-side-resolve-str}\n*/\nimport operationSideResolveStr from './../../base/operation-side-resolve-str';\nsetReadOnly( blas, 'operationSideResolveStr', operationSideResolveStr );\n\n/**\n* @name operationSideStr2Enum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/operation-side-str2enum}\n*/\nimport operationSideStr2Enum from './../../base/operation-side-str2enum';\nsetReadOnly( blas, 'operationSideStr2Enum', operationSideStr2Enum );\n\n/**\n* @name operationSides\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/operation-sides}\n*/\nimport operationSides from './../../base/operation-sides';\nsetReadOnly( blas, 'operationSides', operationSides );\n\n/**\n* @name sasum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sasum}\n*/\nimport sasum from './../../base/sasum';\nsetReadOnly( blas, 'sasum', sasum );\n\n/**\n* @name saxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/saxpy}\n*/\nimport saxpy from './../../base/saxpy';\nsetReadOnly( blas, 'saxpy', saxpy );\n\n/**\n* @name scabs1\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/scabs1}\n*/\nimport scabs1 from './../../base/scabs1';\nsetReadOnly( blas, 'scabs1', scabs1 );\n\n/**\n* @name scasum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/scasum}\n*/\nimport scasum from './../../base/scasum';\nsetReadOnly( blas, 'scasum', scasum );\n\n/**\n* @name scnrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/scnrm2}\n*/\nimport scnrm2 from './../../base/scnrm2';\nsetReadOnly( blas, 'scnrm2', scnrm2 );\n\n/**\n* @name scopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/scopy}\n*/\nimport scopy from './../../base/scopy';\nsetReadOnly( blas, 'scopy', scopy );\n\n/**\n* @name sdot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sdot}\n*/\nimport sdot from './../../base/sdot';\nsetReadOnly( blas, 'sdot', sdot );\n\n/**\n* @name sdsdot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sdsdot}\n*/\nimport sdsdot from './../../base/sdsdot';\nsetReadOnly( blas, 'sdsdot', sdsdot );\n\n/**\n* @name sgemv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sgemv}\n*/\nimport sgemv from './../../base/sgemv';\nsetReadOnly( blas, 'sgemv', sgemv );\n\n/**\n* @name snrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/snrm2}\n*/\nimport snrm2 from './../../base/snrm2';\nsetReadOnly( blas, 'snrm2', snrm2 );\n\n/**\n* @name srot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/srot}\n*/\nimport srot from './../../base/srot';\nsetReadOnly( blas, 'srot', srot );\n\n/**\n* @name srotg\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/srotg}\n*/\nimport srotg from './../../base/srotg';\nsetReadOnly( blas, 'srotg', srotg );\n\n/**\n* @name srotm\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/srotm}\n*/\nimport srotm from './../../base/srotm';\nsetReadOnly( blas, 'srotm', srotm );\n\n/**\n* @name sscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sscal}\n*/\nimport sscal from './../../base/sscal';\nsetReadOnly( blas, 'sscal', sscal );\n\n/**\n* @name sspmv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sspmv}\n*/\nimport sspmv from './../../base/sspmv';\nsetReadOnly( blas, 'sspmv', sspmv );\n\n/**\n* @name sswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sswap}\n*/\nimport sswap from './../../base/sswap';\nsetReadOnly( blas, 'sswap', sswap );\n\n/**\n* @name ssymv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ssymv}\n*/\nimport ssymv from './../../base/ssymv';\nsetReadOnly( blas, 'ssymv', ssymv );\n\n/**\n* @name ssyr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ssyr}\n*/\nimport ssyr from './../../base/ssyr';\nsetReadOnly( blas, 'ssyr', ssyr );\n\n/**\n* @name ssyr2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ssyr2}\n*/\nimport ssyr2 from './../../base/ssyr2';\nsetReadOnly( blas, 'ssyr2', ssyr2 );\n\n/**\n* @name strmv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/strmv}\n*/\nimport strmv from './../../base/strmv';\nsetReadOnly( blas, 'strmv', strmv );\n\n/**\n* @name transposeOperationEnum2Str\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/transpose-operation-enum2str}\n*/\nimport transposeOperationEnum2Str from './../../base/transpose-operation-enum2str';\nsetReadOnly( blas, 'transposeOperationEnum2Str', transposeOperationEnum2Str );\n\n/**\n* @name transposeOperationResolveEnum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/transpose-operation-resolve-enum}\n*/\nimport transposeOperationResolveEnum from './../../base/transpose-operation-resolve-enum';\nsetReadOnly( blas, 'transposeOperationResolveEnum', transposeOperationResolveEnum );\n\n/**\n* @name transposeOperationResolveStr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/transpose-operation-resolve-str}\n*/\nimport transposeOperationResolveStr from './../../base/transpose-operation-resolve-str';\nsetReadOnly( blas, 'transposeOperationResolveStr', transposeOperationResolveStr );\n\n/**\n* @name transposeOperationStr2Enum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/transpose-operation-str2enum}\n*/\nimport transposeOperationStr2Enum from './../../base/transpose-operation-str2enum';\nsetReadOnly( blas, 'transposeOperationStr2Enum', transposeOperationStr2Enum );\n\n/**\n* @name transposeOperations\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/transpose-operations}\n*/\nimport transposeOperations from './../../base/transpose-operations';\nsetReadOnly( blas, 'transposeOperations', transposeOperations );\n\n/**\n* @name zaxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zaxpy}\n*/\nimport zaxpy from './../../base/zaxpy';\nsetReadOnly( blas, 'zaxpy', zaxpy );\n\n/**\n* @name zcopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zcopy}\n*/\nimport zcopy from './../../base/zcopy';\nsetReadOnly( blas, 'zcopy', zcopy );\n\n/**\n* @name zdrot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zdrot}\n*/\nimport zdrot from './../../base/zdrot';\nsetReadOnly( blas, 'zdrot', zdrot );\n\n/**\n* @name zscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zscal}\n*/\nimport zscal from './../../base/zscal';\nsetReadOnly( blas, 'zscal', zscal );\n\n/**\n* @name zswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zswap}\n*/\nimport zswap from './../../base/zswap';\nsetReadOnly( blas, 'zswap', zswap );\n\n\n// EXPORTS //\n\nexport default blas;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat64ndarrayLike from '@stdlib/assert/is-float64ndarray-like';\nimport { isPrimitive as isNegativeInteger } from '@stdlib/assert/is-negative-integer';\nimport min from '@stdlib/math/base/special/fast/min';\nimport without from '@stdlib/array/base/without';\nimport numel from '@stdlib/ndarray/base/numel';\nimport normalizeIndex from '@stdlib/ndarray/base/normalize-index';\nimport maybeBroadcastArrays from '@stdlib/ndarray/base/maybe-broadcast-arrays';\nimport ndarraylike2ndarray from '@stdlib/ndarray/base/ndarraylike2ndarray';\nimport nditerStacks from '@stdlib/ndarray/iter/stacks';\nimport empty from '@stdlib/ndarray/empty';\nimport { ndarray as base } from './../../base/ddot';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two double-precision floating-point vectors.\n*\n* @param {ndarrayLike} x - first input array\n* @param {ndarrayLike} y - second input array\n* @param {NegativeInteger} [dim=-1] - dimension for which to compute the dot product\n* @throws {TypeError} first argument must be a ndarray containing double-precision floating-point numbers\n* @throws {TypeError} first argument must have at least one dimension\n* @throws {TypeError} second argument must be a ndarray containing double-precision floating-point numbers\n* @throws {TypeError} second argument must have at least one dimension\n* @throws {TypeError} third argument must be a negative integer\n* @throws {Error} input arrays must be broadcast compatible\n* @throws {RangeError} the size of the contracted dimension must be the same for both input arrays\n* @throws {RangeError} third argument is out-of-bounds\n* @returns {ndarray} ndarray containing the dot product\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* var z = ddot( x, y );\n* // returns <ndarray>\n*\n* var v = z.get();\n* // returns -5.0\n*/\nfunction ddot( x, y ) {\n\tvar dim;\n\tvar xsh;\n\tvar ysh;\n\tvar osh;\n\tvar xit;\n\tvar yit;\n\tvar out;\n\tvar tmp;\n\tvar xc;\n\tvar yc;\n\tvar vx;\n\tvar vy;\n\tvar dm;\n\tvar S;\n\tvar v;\n\tvar i;\n\n\tif ( !isFloat64ndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray containing double-precision floating-point numbers. Value: `%s`.', x ) );\n\t}\n\tif ( !isFloat64ndarrayLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray containing double-precision floating-point numbers. Value: `%s`.', y ) );\n\t}\n\t// Convert the input arrays to \"base\" ndarrays:\n\txc = ndarraylike2ndarray( x );\n\tyc = ndarraylike2ndarray( y );\n\n\t// Resolve the input array shapes:\n\txsh = xc.shape;\n\tysh = yc.shape;\n\n\t// Validate that we've been provided non-zero-dimensional arrays...\n\tif ( xsh.length < 1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have at least one dimension.' ) );\n\t}\n\tif ( ysh.length < 1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have at least one dimension.' ) );\n\t}\n\t// Validate that the dimension argument is a negative integer...\n\tif ( arguments.length > 2 ) {\n\t\tdim = arguments[ 2 ];\n\t\tif ( !isNegativeInteger( dim ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a negative integer. Value: `%s`.', dim ) );\n\t\t}\n\t} else {\n\t\tdim = -1;\n\t}\n\t// Validate that a provided dimension index is within bounds **before** broadcasting...\n\tdm = min( xsh.length, ysh.length ) - 1;\n\tdim = normalizeIndex( dim, dm );\n\tif ( dim === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a value on the interval: [%d,%d]. Value: `%d`.', -dm, -1, arguments[ 2 ] ) );\n\t}\n\t// Validate that the contracted dimension size is the same for both input arrays...\n\tS = xsh[ dim ];\n\tif ( ysh[ dim ] !== S ) {\n\t\tthrow new RangeError( format( 'invalid argument. The size of the contracted dimension must be the same for both input ndarrays. Dim(%s,%d) = %d. Dim(%s,%d) = %d.', 'x', dim, S, 'y', dim, ysh[ dim ] ) );\n\t}\n\t// Broadcast the input arrays to a common shape....\n\ttry {\n\t\ttmp = maybeBroadcastArrays( [ xc, yc ] );\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tthrow new Error( format( 'invalid arguments. Input ndarrays must be broadcast compatible. Shape(%s) = (%s). Shape(%s) = (%s).', 'x', xsh.join( ',' ), 'y', ysh.join( ',' ) ) );\n\t}\n\txc = tmp[ 0 ];\n\tyc = tmp[ 1 ];\n\n\t// Resolve the output array shape by excluding the contracted dimension:\n\tosh = without( xc.shape, dim );\n\n\t// Allocate an empty output array:\n\tout = empty( osh, {\n\t\t'dtype': xc.dtype,\n\t\t'order': xc.order\n\t});\n\n\t// If we are only provided one-dimensional input arrays, we can skip iterating over stacks...\n\tif ( osh.length === 0 ) {\n\t\tv = base( S, xc.data, xc.strides[0], xc.offset, yc.data, yc.strides[0], yc.offset ); // eslint-disable-line max-len\n\t\tout.iset( v );\n\t\treturn out;\n\t}\n\t// Create iterators for iterating over stacks of vectors:\n\txit = nditerStacks( xc, [ dim ] );\n\tyit = nditerStacks( yc, [ dim ] );\n\n\t// Compute the dot product for each pair of vectors...\n\tfor ( i = 0; i < numel( osh ); i++ ) {\n\t\tvx = xit.next().value;\n\t\tvy = yit.next().value;\n\t\tv = base( S, vx.data, vx.strides[0], vx.offset, vy.data, vy.strides[0], vy.offset ); // eslint-disable-line max-len\n\t\tout.iset( i, v );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default ddot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert/is-function';\nimport isndarrayLikeWithDataType from '@stdlib/assert/is-ndarray-like-with-data-type';\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport { isPrimitive as isNegativeInteger } from '@stdlib/assert/is-negative-integer';\nimport isDataType from '@stdlib/ndarray/base/assert/is-data-type';\nimport isReadOnly from '@stdlib/ndarray/base/assert/is-read-only';\nimport hasEqualValues from '@stdlib/array/base/assert/has-equal-values-indexed';\nimport min from '@stdlib/math/base/special/fast/min';\nimport without from '@stdlib/array/base/without';\nimport ndarraylike2ndarray from '@stdlib/ndarray/base/ndarraylike2ndarray';\nimport normalizeIndex from '@stdlib/ndarray/base/normalize-index';\nimport nditerStacks from '@stdlib/ndarray/iter/stacks';\nimport numel from '@stdlib/ndarray/base/numel';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns a function which interchanges two vectors.\n*\n* @param {Function} base - \"base\" function which interchanges two vectors\n* @param {(String|null)} dtype - array data type\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a data type\n* @returns {Function} function wrapper\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import array from '@stdlib/ndarray/array';\n* import { ndarray as dswap } from '@stdlib/blas/base/dswap';\n*\n* var swap = factory( dswap, 'float64' );\n*\n* var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* swap( x, y );\n*\n* var xbuf = x.data;\n* // returns <Float64Array>[ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n*\n* var ybuf = y.data;\n* // returns <Float64Array>[ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nfunction factory( base, dtype ) {\n\tvar isValid;\n\tif ( !isFunction( base ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', base ) );\n\t}\n\tif ( !isDataType( dtype ) && dtype !== null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a data type. Value: `%s`.', dtype ) );\n\t}\n\tisValid = ( dtype ) ? isValidWrapper : isndarrayLike;\n\treturn swap;\n\n\t/**\n\t* Tests if an input value is an ndarray-like object having a specified data type.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating if an input value is an ndarray-like object having a specified data type\n\t*/\n\tfunction isValidWrapper( value ) {\n\t\treturn isndarrayLikeWithDataType( value, dtype );\n\t}\n\n\t/**\n\t* Interchanges two vectors.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - first input array\n\t* @param {ndarrayLike} y - second input array\n\t* @param {NegativeInteger} [dim] - dimension along which to interchange elements\n\t* @throws {TypeError} first argument must be an ndarray\n\t* @throws {TypeError} first argument must have at least one dimension\n\t* @throws {TypeError} second argument must be an ndarray\n\t* @throws {TypeError} second argument must have at least one dimension\n\t* @throws {Error} both input arrays must have the same shape\n\t* @throws {RangeError} third argument is out-of-bounds\n\t* @throws {Error} cannot write to read-only array\n\t* @returns {ndarrayLike} `y`\n\t*/\n\tfunction swap( x, y ) {\n\t\tvar dim;\n\t\tvar xsh;\n\t\tvar ysh;\n\t\tvar xit;\n\t\tvar yit;\n\t\tvar xc;\n\t\tvar yc;\n\t\tvar vx;\n\t\tvar vy;\n\t\tvar dm;\n\t\tvar S;\n\t\tvar N;\n\t\tvar i;\n\t\tif ( !isValid( x ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object having a supported data type. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( !isValid( y ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object having a supported data type. Value: `%s`.', y ) );\n\t\t}\n\t\tif ( isReadOnly( x ) || isReadOnly( y ) ) {\n\t\t\tthrow new Error( 'invalid argument. Cannot write to read-only array.' );\n\t\t}\n\t\t// Convert the input arrays to \"base\" ndarrays:\n\t\txc = ndarraylike2ndarray( x );\n\t\tyc = ndarraylike2ndarray( y );\n\n\t\t// Resolve the input array shapes:\n\t\txsh = xc.shape;\n\t\tysh = yc.shape;\n\n\t\t// Validate that we've been provided non-zero-dimensional arrays...\n\t\tif ( xsh.length < 1 ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must have at least one dimension.' ) );\n\t\t}\n\t\tif ( ysh.length < 1 ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must have at least one dimension.' ) );\n\t\t}\n\t\t// Validate that the arrays have the same shape...\n\t\tif ( !hasEqualValues( xsh, ysh ) ) {\n\t\t\tthrow new Error( 'invalid arguments. The first and second arguments must have the same shape.' );\n\t\t}\n\t\t// Validate that the dimension argument is a negative integer...\n\t\tif ( arguments.length > 2 ) {\n\t\t\tdim = arguments[ 2 ];\n\t\t\tif ( !isNegativeInteger( dim ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a negative integer. Value: `%s`.', dim ) );\n\t\t\t}\n\t\t} else {\n\t\t\tdim = -1;\n\t\t}\n\t\t// Validate that a provided dimension index is within bounds...\n\t\tdm = min( xsh.length, ysh.length ) - 1;\n\t\tdim = normalizeIndex( dim, dm );\n\t\tif ( dim === -1 ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a value on the interval: [%d,%d]. Value: `%d`.', -dm, -1, arguments[ 2 ] ) );\n\t\t}\n\t\t// Resolve the size of the interchange dimension:\n\t\tS = xsh[ dim ];\n\n\t\t// If we are only provided one-dimensional input arrays, we can skip iterating over stacks...\n\t\tif ( xsh.length === 1 ) {\n\t\t\tbase( S, xc.data, xc.strides[0], xc.offset, yc.data, yc.strides[0], yc.offset ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\t// Resolve the number of stacks:\n\t\tN = numel( without( xsh, dim ) );\n\n\t\t// Create iterators for iterating over stacks of vectors:\n\t\txit = nditerStacks( xc, [ dim ] );\n\t\tyit = nditerStacks( yc, [ dim ] );\n\n\t\t// Interchange each pair of vectors...\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tvx = xit.next().value;\n\t\t\tvy = yit.next().value;\n\t\t\tbase( S, vx.data, vx.strides[0], vx.offset, vy.data, vy.strides[0], vy.offset ); // eslint-disable-line max-len\n\t\t}\n\t\treturn y;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/diagonal-type-enum2str';\nimport str2enum from './../../../base/diagonal-type-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported BLAS diagonal type value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `UNIT == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} value - diagonal type value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'non-unit' );\n* // returns <number>\n*/\nfunction resolve( value ) {\n\tvar t = ( typeof value );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( value ) ) ? value : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( value );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/diagonal-type-enum2str';\nimport str2enum from './../../../base/diagonal-type-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the diagonal type string associated with a supported BLAS diagonal type value.\n*\n* @param {*} value - diagonal type value\n* @returns {(string|null)} diagonal type string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/diagonal-type-str2enum';\n*\n* var v = resolve( str2enum( 'unit' ) );\n* // returns 'unit'\n*/\nfunction resolve( value ) {\n\tvar t = ( typeof value );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( value ) === null ) ? null : value;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( value );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/layout-enum2str';\nimport str2enum from './../../../base/layout-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported BLAS memory layout value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `ROW_MAJOR == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} layout - layout value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'row-major' );\n* // returns <number>\n*/\nfunction resolve( layout ) {\n\tvar t = ( typeof layout );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( layout ) ) ? layout : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( layout );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/layout-enum2str';\nimport str2enum from './../../../base/layout-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the layout string associated with a supported BLAS memory layout value.\n*\n* @param {*} layout - layout value\n* @returns {(string|null)} layout string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/layout-str2enum';\n*\n* var v = resolve( str2enum( 'row-major' ) );\n* // returns 'row-major'\n*/\nfunction resolve( layout ) {\n\tvar t = ( typeof layout );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( layout ) === null ) ? null : layout;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( layout );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/matrix-triangle-enum2str';\nimport str2enum from './../../../base/matrix-triangle-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported BLAS matrix triangle value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `UPPER == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} value - matrix triangle value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'lower' );\n* // returns <number>\n*/\nfunction resolve( value ) {\n\tvar t = ( typeof value );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( value ) ) ? value : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( value );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/matrix-triangle-enum2str';\nimport str2enum from './../../../base/matrix-triangle-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the matrix triangle string associated with a supported BLAS matrix triangle value.\n*\n* @param {*} value - matrix triangle value\n* @returns {(string|null)} matrix triangle string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/matrix-triangle-str2enum';\n*\n* var v = resolve( str2enum( 'upper' ) );\n* // returns 'upper'\n*/\nfunction resolve( value ) {\n\tvar t = ( typeof value );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( value ) === null ) ? null : value;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( value );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/operation-side-enum2str';\nimport str2enum from './../../../base/operation-side-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported BLAS operation side value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `LEFT == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} operation - operation value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'right' );\n* // returns <number>\n*/\nfunction resolve( operation ) {\n\tvar t = ( typeof operation );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( operation ) ) ? operation : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( operation );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/operation-side-enum2str';\nimport str2enum from './../../../base/operation-side-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the operation side string associated with a supported BLAS operation side value.\n*\n* @param {*} operation - operation value\n* @returns {(string|null)} operation side string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/operation-side-str2enum';\n*\n* var v = resolve( str2enum( 'left' ) );\n* // returns 'left'\n*/\nfunction resolve( operation ) {\n\tvar t = ( typeof operation );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( operation ) === null ) ? null : operation;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( operation );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/transpose-operation-enum2str';\nimport str2enum from './../../../base/transpose-operation-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported BLAS transpose operation value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `TRANSPOSE == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} operation - operation value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'conjugate-transpose' );\n* // returns <number>\n*/\nfunction resolve( operation ) {\n\tvar t = ( typeof operation );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( operation ) ) ? operation : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( operation );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/transpose-operation-enum2str';\nimport str2enum from './../../../base/transpose-operation-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the transpose operation string associated with a supported BLAS transpose operation value.\n*\n* @param {*} operation - operation value\n* @returns {(string|null)} transpose operation string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/transpose-operation-str2enum';\n*\n* var v = resolve( str2enum( 'transpose' ) );\n* // returns 'transpose'\n*/\nfunction resolve( operation ) {\n\tvar t = ( typeof operation );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( operation ) === null ) ? null : operation;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( operation );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as base } from './../../base/dswap';\nimport factory from './../../tools/swap-factory';\n\n\n// MAIN //\n\n/**\n* Interchanges two double-precision floating-point vectors.\n*\n* @name dswap\n* @type {Function}\n* @param {ndarrayLike} x - first input array\n* @param {ndarrayLike} y - second input array\n* @param {NegativeInteger} [dim] - dimension along which to interchange elements\n* @throws {TypeError} first argument must be a ndarray containing double-precision floating-point numbers\n* @throws {TypeError} first argument must have at least one dimension\n* @throws {TypeError} second argument must be a ndarray containing double-precision floating-point numbers\n* @throws {TypeError} second argument must have at least one dimension\n* @throws {Error} both input arrays must have the same shape\n* @throws {RangeError} third argument is out-of-bounds\n* @throws {Error} cannot write to read-only array\n* @returns {ndarrayLike} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* dswap( x, y );\n*\n* var xbuf = x.data;\n* // returns <Float64Array>[ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n*\n* var ybuf = y.data;\n* // returns <Float64Array>[ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nvar dswap = factory( base, 'float64' );\n\n\n// EXPORTS //\n\nexport default dswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* dapx( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, 1.0, 10.0, -1.0 ]\n*/\nfunction dapx( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] += alpha;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] += alpha;\n\t\t\tx[ ix+1 ] += alpha;\n\t\t\tx[ ix+2 ] += alpha;\n\t\t\tx[ ix+3 ] += alpha;\n\t\t\tx[ ix+4 ] += alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* dapx( x.length, 5.0, x, 1 );\n* // x => <Float64Array>[ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\nfunction dapx( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsumkbn( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumkbn( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default dapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dapxsumkbn( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumkbn( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dapxsumkbn } from './../../../../ext/base/dapxsumkbn';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsum( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsum( N, alpha, x, strideX, offsetX ) {\n\treturn dapxsumkbn( N, alpha, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default dapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dapxsum( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsum( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsumkbn2( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumkbn2( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default dapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dapxsumkbn2( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumkbn2( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsumors( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumors( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += alpha + x[ ix ];\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dapxsumors( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumors( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapx from './dapx.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapx, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapxsumkbn from './dapxsumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapxsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapxsum from './dapxsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapxsumkbn2 from './dapxsumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapxsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapxsumors from './dapxsumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapxsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumpw( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+strideX ];\n\t\ts2 = alpha + x[ ix+(2*strideX) ];\n\t\ts3 = alpha + x[ ix+(3*strideX) ];\n\t\ts4 = alpha + x[ ix+(4*strideX) ];\n\t\ts5 = alpha + x[ ix+(5*strideX) ];\n\t\ts6 = alpha + x[ ix+(6*strideX) ];\n\t\ts7 = alpha + x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+strideX ];\n\t\t\ts2 += alpha + x[ ix+(2*strideX) ];\n\t\t\ts3 += alpha + x[ ix+(3*strideX) ];\n\t\t\ts4 += alpha + x[ ix+(4*strideX) ];\n\t\t\ts5 += alpha + x[ ix+(5*strideX) ];\n\t\t\ts6 += alpha + x[ ix+(6*strideX) ];\n\t\t\ts7 += alpha + x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dapxsumpw( n, alpha, x, strideX, ix ) + dapxsumpw( N-n, alpha, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dapxsumpw( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumpw( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapxsumpw from './dapxsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dasumpw( 4, x, 2, 1 );\n* // returns 9.0\n*/\nfunction dasumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * abs( x[ ix ] );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = abs( x[ ix ] );\n\t\ts1 = abs( x[ ix+strideX ] );\n\t\ts2 = abs( x[ ix+(2*strideX) ] );\n\t\ts3 = abs( x[ ix+(3*strideX) ] );\n\t\ts4 = abs( x[ ix+(4*strideX) ] );\n\t\ts5 = abs( x[ ix+(5*strideX) ] );\n\t\ts6 = abs( x[ ix+(6*strideX) ] );\n\t\ts7 = abs( x[ ix+(7*strideX) ] );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += abs( x[ ix ] );\n\t\t\ts1 += abs( x[ ix+strideX ] );\n\t\t\ts2 += abs( x[ ix+(2*strideX) ] );\n\t\t\ts3 += abs( x[ ix+(3*strideX) ] );\n\t\t\ts4 += abs( x[ ix+(4*strideX) ] );\n\t\t\ts5 += abs( x[ ix+(5*strideX) ] );\n\t\t\ts6 += abs( x[ ix+(6*strideX) ] );\n\t\t\ts7 += abs( x[ ix+(7*strideX) ] );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dasumpw( n, x, strideX, ix ) + dasumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dasumpw( x.length, x, 1 );\n* // returns 5.0\n*/\nfunction dasumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumkbn( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = s + v;\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc += (s-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + s;\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = s + c;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumkbn( 3, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumkbn( N, sum, x, strideX, y, strideY ) {\n\tndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dcusumkbn } from './../../../../ext/base/dcusumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusum( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusum( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn dcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY );\n}\n\n\n// EXPORTS //\n\nexport default dcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusum( 3, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusum( N, sum, x, strideX, y, strideY ) {\n\treturn ndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n* var N = 4;\n*\n* var v = dcusumkbn2( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumkbn2( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\n\t\ty[ iy ] = sum + cs + ccs;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n* var N = x.length;\n*\n* var v = dcusumkbn2( N, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumkbn2( N, sum, x, strideX, y, strideY ) {\n\tndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumors( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumors( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumors( 3, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumors( N, sum, x, strideX, y, strideY ) {\n\tndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dasumpw from './dasumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dasumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcusumkbn from './dcusumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcusumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcusum from './dcusum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcusum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcusumkbn2 from './dcusumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcusumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcusumors from './dcusumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcusumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation:\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumpw( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumpw( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( N <= BLOCKSIZE ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\ty[ iy ] = sum + s;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tn = floor( N/2 );\n\tdcusumpw( n, sum, x, strideX, ix, y, strideY, iy );\n\tiy += (n-1) * strideY;\n\tdcusumpw( N-n, y[ iy ], x, strideX, ix+(n*strideX), y, strideY, iy+strideY ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumpw( 3, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumpw( N, sum, x, strideX, y, strideY ) {\n\tndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - index increment\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnanasumors( 4, x, 2, 1 );\n* // returns 9.0\n*/\nfunction dnanasumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ offsetX ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn abs( x[ offsetX ] ) * N;\n\t}\n\tix = offsetX;\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tsum += abs( v );\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dnanasumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnanasumors( N, x, 1 );\n* // returns 5.0\n*/\nfunction dnanasumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dnanasumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dnanasumors } from './../../../../ext/base/dnanasumors';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnanasum( 5, x, 2, 1 );\n* // returns 9.0\n*/\nfunction dnanasum( N, x, strideX, offsetX ) {\n\treturn dnanasumors( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default dnanasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dnanasum( 4, x, 1 );\n* // returns 5.0\n*/\nfunction dnanasum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dnanasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ offsetOut ] = sum;\n\t\tout[ offsetOut+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ offsetOut ] = sum;\n\t\t\tout[ offsetOut+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offsetOut ] = x[ ix ] * N;\n\t\tout[ offsetOut+strideOut ] = N;\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ offsetOut ] = sum + c;\n\tout[ offsetOut+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumkbn( N, x, strideX, out, strideOut ) {\n\tvar ix;\n\tvar io;\n\n\tix = stride2offset( N, strideX );\n\tio = stride2offset( 2, strideOut );\n\treturn ndarray( N, x, strideX, ix, out, strideOut, io );\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dnannsumkbn } from './../../../../ext/base/dnannsumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsum( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsum( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\treturn dnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut );\n}\n\n\n// EXPORTS //\n\nexport default dnannsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsum( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsum( N, x, strideX, out, strideOut ) {\n\tvar ix;\n\tvar io;\n\n\tix = stride2offset( N, strideX );\n\tio = stride2offset( 2, strideOut );\n\treturn ndarray( N, x, strideX, ix, out, strideOut, io );\n}\n\n\n// EXPORTS //\n\nexport default dnannsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn2( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumkbn2( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ccs;\n\tvar cs;\n\tvar cc;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tsum = 0.0;\n\tio = offsetOut;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ] * N;\n\t\tout[ io+strideOut ] = N;\n\t\treturn out;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum + cs + ccs;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn2( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumkbn2( N, x, strideX, out, strideOut ) {\n\tvar ix;\n\tvar io;\n\n\tix = stride2offset( N, strideX );\n\tio = stride2offset( 2, strideOut );\n\treturn ndarray( N, x, strideX, ix, out, strideOut, io );\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumors( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumors( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar n;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ offsetOut ] = sum;\n\t\tout[ offsetOut+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ offsetOut ] = sum;\n\t\t\tout[ offsetOut+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offsetOut ] = x[ ix ] * N;\n\t\tout[ offsetOut+strideOut ] = N;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ offsetOut ] = sum;\n\tout[ offsetOut+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumors( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumors( N, x, strideX, out, strideOut ) {\n\tvar ix;\n\tvar io;\n\n\tix = stride2offset( N, strideX );\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\treturn ndarray( N, x, strideX, ix, out, strideOut, io );\n}\n\n\n// EXPORTS //\n\nexport default dnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcusumpw from './dcusumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcusumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnanasumors from './dnanasumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnanasumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnanasumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnanasum from './dnanasum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnanasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnanasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnannsumkbn from './dnannsumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnannsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnannsum from './dnannsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnannsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnannsumkbn2 from './dnannsumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnannsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnannsumors from './dnannsumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnannsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of a double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - two-element output array whose first element is the accumulated sum and whose second element is the accumulated number of summed values\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var out = new Float64Array( [ 0.0, 0 ] );\n* var v = sumpw( 5.0, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction sumpw( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn out;\n\t\t}\n\t\tout[ offsetOut ] += x[ ix ] * N;\n\t\tout[ offsetOut+strideOut ] += N;\n\t\treturn out;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tn = 0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\tout[ offsetOut ] += s;\n\t\tout[ offsetOut+strideOut ] += n;\n\t\treturn out;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = 0.0;\n\t\ts1 = 0.0;\n\t\ts2 = 0.0;\n\t\ts3 = 0.0;\n\t\ts4 = 0.0;\n\t\ts5 = 0.0;\n\t\ts6 = 0.0;\n\t\ts7 = 0.0;\n\t\tn = 0;\n\n\t\tM = N % 8;\n\t\tfor ( i = 0; i < N-M; i += 8 ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts0 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts1 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts2 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts3 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts4 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts5 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts6 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts7 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\tout[ offsetOut ] += s;\n\t\tout[ offsetOut+strideOut ] += n;\n\t\treturn out;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\tsumpw( n, x, strideX, ix, out, strideOut, offsetOut );\n\tsumpw( N-n, x, strideX, ix+(n*strideX), out, strideOut, offsetOut );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default sumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sumpw from './sumpw.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumpw( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumpw( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = 0.0;\n\tout[ offsetOut+strideOut ] = 0;\n\treturn sumpw( N, x, strideX, offsetX, out, strideOut, offsetOut );\n}\n\n\n// EXPORTS //\n\nexport default dnannsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumpw( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumpw( N, x, strideX, out, strideOut ) {\n\tvar ix;\n\tvar io;\n\n\tix = stride2offset( N, strideX );\n\tio = stride2offset( 2, strideOut );\n\tout[ io ] = 0.0;\n\tout[ io+strideOut ] = 0;\n\treturn ndarray( N, x, strideX, ix, out, strideOut, io );\n}\n\n\n// EXPORTS //\n\nexport default dnannsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnansumkbn( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumkbn( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ ix ] * N;\n\t}\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default dnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dnansumkbn( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumkbn( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dnansumkbn } from './../../../../ext/base/dnansumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnansum( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansum( N, x, strideX, offsetX ) {\n\treturn dnansumkbn( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default dnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dnansum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dnansum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnansumkbn2( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumkbn2( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ ix ] * N;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default dnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dnansumkbn2( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumkbn2( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnansumors( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ ix ] * N;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dnansumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnannsumpw from './dnannsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnannsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnansumkbn from './dnansumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnansumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnansum from './dnansum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnansumkbn2 from './dnansumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnansumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnansumors from './dnansumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnansumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnansumpw( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ offsetX ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offsetX ] * N;\n\t}\n\tix = offsetX;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts1 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts2 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts3 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts4 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts5 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts6 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts7 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts1 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts2 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts3 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts4 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts5 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts6 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts7 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dnansumpw( n, x, strideX, ix ) + dnansumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dnansumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnansumpw from './dnansumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a double-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* drev( 3, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, -6.0, 5.0, -4.0 ]\n*/\nfunction drev( N, x, strideX, offsetX ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tn = floor( N/2 );\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = n % M;\n\t\tiy = ix + N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy -= strideX;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < n; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tiy = ix + ( (N-1) * strideX );\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy -= strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default drev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Reverses a double-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* drev( x.length, x, 1 );\n* // x => <Float64Array>[ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\nfunction drev( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default drev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport drev from './drev.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( drev, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default drev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element, and computes the sum using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dsapxsumpw( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+strideX ];\n\t\ts2 = alpha + x[ ix+(2*strideX) ];\n\t\ts3 = alpha + x[ ix+(3*strideX) ];\n\t\ts4 = alpha + x[ ix+(4*strideX) ];\n\t\ts5 = alpha + x[ ix+(5*strideX) ];\n\t\ts6 = alpha + x[ ix+(6*strideX) ];\n\t\ts7 = alpha + x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+strideX ];\n\t\t\ts2 += alpha + x[ ix+(2*strideX) ];\n\t\t\ts3 += alpha + x[ ix+(3*strideX) ];\n\t\t\ts4 += alpha + x[ ix+(4*strideX) ];\n\t\t\ts5 += alpha + x[ ix+(5*strideX) ];\n\t\t\ts6 += alpha + x[ ix+(6*strideX) ];\n\t\t\ts7 += alpha + x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsapxsumpw( n, alpha, x, strideX, ix ) + dsapxsumpw( N-n, alpha, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element, and computes the sum using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dsapxsumpw( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dsapxsumpw( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dsapxsumpw } from './../../../../ext/base/dsapxsumpw';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element, and computes the sum using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsapxsum( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dsapxsum( N, alpha, x, strideX, offsetX ) {\n\treturn dsapxsumpw( N, alpha, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default dsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element, and computes the sum using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dsapxsum( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dsapxsum( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dsnannsumors( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dsnannsumors( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar n;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ offsetOut ] = sum;\n\t\tout[ offsetOut+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ offsetOut ] = sum;\n\t\t\tout[ offsetOut+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offsetOut ] = x[ ix ] * N;\n\t\tout[ offsetOut+strideOut ] = N;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ offsetOut ] = sum;\n\tout[ offsetOut+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dsnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dsnannsumors( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dsnannsumors( N, x, strideX, out, strideOut ) {\n\tvar ix;\n\tvar io;\n\n\tix = stride2offset( N, strideX );\n\tio = stride2offset( 2, strideOut );\n\treturn ndarray( N, x, strideX, ix, out, strideOut, io );\n}\n\n\n// EXPORTS //\n\nexport default dsnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsapxsumpw from './dsapxsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsapxsum from './dsapxsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsnannsumors from './dsnannsumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsnannsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using pairwise summation with extended accumulation, and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dsnansumpw( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsnansumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnanf( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts1 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts2 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts3 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts4 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts5 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts6 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts7 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts1 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts2 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts3 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts4 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts5 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts6 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts7 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsnansumpw( n, x, strideX, ix ) + dsnansumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using pairwise summation with extended accumulation, and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dsnansumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsnansumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dsnansumpw } from './../../../../ext/base/dsnansumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dsnansum( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsnansum( N, x, strideX, offsetX ) {\n\treturn dsnansumpw( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default dsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n\n* var v = dsnansum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsnansum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX) );\n}\n\n\n// EXPORTS //\n\nexport default dsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dsnansumors( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsnansumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dsnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dsnansumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsnansumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2hp( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2ins( N, order, x, strideX, y, strideY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideY < 0 ) {\n\t\tfy = (1-N) * strideY;\n\t\tly = 0;\n\t} else {\n\t\tfy = 0;\n\t\tly = (N-1) * strideY;\n\t}\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * strideX; // first index\n\t\tlx = 0;               // last index\n\t\tix = fx + strideX;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * strideX; // last index\n\tix = fx + strideX;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsnansumpw from './dsnansumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsnansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsnansum from './dsnansum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsnansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsnansumors from './dsnansumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsnansumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsort2hp from './dsort2hp.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsort2hp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsort2ins from './dsort2ins.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsort2ins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2sh( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsorthp( x.length, 1.0, x, 1, 0 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsorthp( N, order, x, strideX, offsetX ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offsetX+(parent*strideX) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offsetX + (n*strideX);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offsetX ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsorthp( x.length, 1.0, x, 1 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsorthp( N, order, x, strideX ) {\n\treturn ndarray( N, order, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortins( x.length, 1.0, x, 1, 0 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortins( N, order, x, strideX, offsetX ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - strideX;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = u;\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = v;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\tjx += strideX;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - strideX;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = u;\n\t\t\t\tjx -= strideX;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = v;\n\t\t\tix += strideX;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortins( x.length, 1.0, x, 1 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortins( N, order, x, strideX ) {\n\treturn ndarray( N, order, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsort2sh from './dsort2sh.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsort2sh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsorthp from './dsorthp.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsorthp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsortins from './dsortins.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsortins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortsh( x.length, 1.0, x, 1 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortsh( N, order, x, stride ) {\n\tvar offset;\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortsh( x.length, 1.0, x, 1, 0 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortsh( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsortsh from './dsortsh.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsortsh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dssumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dssumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+strideX ];\n\t\ts2 = x[ ix+(2*strideX) ];\n\t\ts3 = x[ ix+(3*strideX) ];\n\t\ts4 = x[ ix+(4*strideX) ];\n\t\ts5 = x[ ix+(5*strideX) ];\n\t\ts6 = x[ ix+(6*strideX) ];\n\t\ts7 = x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+strideX ];\n\t\t\ts2 += x[ ix+(2*strideX) ];\n\t\t\ts3 += x[ ix+(3*strideX) ];\n\t\t\ts4 += x[ ix+(4*strideX) ];\n\t\t\ts5 += x[ ix+(5*strideX) ];\n\t\t\ts6 += x[ ix+(6*strideX) ];\n\t\t\ts7 += x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dssumpw( n, x, strideX, ix ) + dssumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dssumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dssumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dssumpw } from './../../../../ext/base/dssumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dssum( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dssum( N, x, strideX, offsetX ) {\n\treturn dssumpw( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default dssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dssum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dssum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dssumpw from './dssumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dssumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dssum from './dssum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dssum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation with extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dssumors( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dssumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation with extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dssumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dssumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsumkbn( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumkbn( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default dsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dsumkbn( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsumkbn( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dsumkbn } from './../../../../ext/base/dsumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsum( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsum( N, x, strideX, offsetX ) {\n\treturn dsumkbn( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default dsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dsum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsumkbn2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumkbn2( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default dsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dsumkbn2( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsumkbn2( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dssumors from './dssumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dssumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsumkbn from './dsumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsum from './dsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsumkbn2 from './dsumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsumors( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dsumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsumors from './dsumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+strideX ];\n\t\ts2 = x[ ix+(2*strideX) ];\n\t\ts3 = x[ ix+(3*strideX) ];\n\t\ts4 = x[ ix+(4*strideX) ];\n\t\ts5 = x[ ix+(5*strideX) ];\n\t\ts6 = x[ ix+(6*strideX) ];\n\t\ts7 = x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+strideX ];\n\t\t\ts2 += x[ ix+(2*strideX) ];\n\t\t\ts3 += x[ ix+(3*strideX) ];\n\t\t\ts4 += x[ ix+(4*strideX) ];\n\t\t\ts5 += x[ ix+(5*strideX) ];\n\t\t\ts6 += x[ ix+(6*strideX) ];\n\t\t\ts7 += x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsumpw( n, x, strideX, ix ) + dsumpw( N-n, x, strideX, ix+(n*strideX) );\t// eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dsumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsumpw from './dsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* gapx( 3, 5.0, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, 1.0, 10.0, -1.0 ]\n*/\nfunction gapx( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, alpha, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] += alpha;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] += alpha;\n\t\t\tx[ ix+1 ] += alpha;\n\t\t\tx[ ix+2 ] += alpha;\n\t\t\tx[ ix+3 ] += alpha;\n\t\t\tx[ ix+4 ] += alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a strided array.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Object} input array object\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gapx( 4, 5.0, arraylike2object( x ), 2, 1 );\n* // returns {...}\n*/\nfunction gapx( N, alpha, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar set;\n\tvar ix;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\tget = x.accessors[ 0 ];\n\tset = x.accessors[ 1 ];\n\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( xbuf, ix, alpha + get( xbuf, ix ) );\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx( x.length, 5.0, x, 1 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\nfunction gapx( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport abs from '@stdlib/math/base/special/abs';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumkbn( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumkbn( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, alpha, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gapxsumkbn( 4, 5.0, arraylike2object( x ), 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumkbn( N, alpha, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + get( xbuf, ix ) );\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + get( xbuf, ix );\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumkbn( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumkbn( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gapxsumkbn } from './../../../../ext/base/gapxsumkbn';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsum( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsum( N, alpha, x, strideX, offsetX ) {\n\treturn gapxsumkbn( N, alpha, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default gapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsum( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsum( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport abs from '@stdlib/math/base/special/abs';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumkbn2( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumkbn2( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, alpha, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gapxsumkbn2( 4, 5.0, arraylike2object( x ), 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumkbn2( N, alpha, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + get( xbuf, ix ) );\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + get( xbuf, ix );\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumkbn2( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumkbn2( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumors( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumors( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, alpha, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += alpha + x[ ix ];\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using ordinary recursive summation.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gapxsumors( 4, 5.0, arraylike2object( x ), 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumors( N, alpha, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar sum;\n\tvar get;\n\tvar ix;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + get( xbuf, ix ) );\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += alpha + get( xbuf, ix );\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumors( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumors( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a scalar constant to each element in a strided array.\n*\n* @module @stdlib/blas/ext/base/gapx\n*\n* @example\n* import gapx from '@stdlib/blas/ext/base/gapx';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx( x.length, 5.0, x, 1 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*\n* @example\n* import gapx from '@stdlib/blas/ext/base/gapx';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a scalar constant to each strided array element and compute the sum using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gapxsumkbn\n*\n* @example\n* import gapxsumkbn from '@stdlib/blas/ext/base/gapxsumkbn';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumkbn( x.length, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import gapxsumkbn from '@stdlib/blas/ext/base/gapxsumkbn';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumkbn.ndarray( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a scalar constant to each strided array element and compute the sum.\n*\n* @module @stdlib/blas/ext/base/gapxsum\n*\n* @example\n* import gapxsum from '@stdlib/blas/ext/base/gapxsum';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsum( x.length, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import gapxsum from '@stdlib/blas/ext/base/gapxsum';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsum.ndarray( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a scalar constant to each strided array element and compute the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gapxsumkbn2\n*\n* @example\n* import gapxsumkbn2 from '@stdlib/blas/ext/base/gapxsumkbn2';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumkbn2( x.length, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import gapxsumkbn2 from '@stdlib/blas/ext/base/gapxsumkbn2';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumkbn2.ndarray( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a scalar constant to each strided array element and compute the sum using ordinary recursive summation.\n*\n* @module @stdlib/blas/ext/base/gapxsumors\n*\n* @example\n* import gapxsumors from '@stdlib/blas/ext/base/gapxsumors';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumors( x.length, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import gapxsumors from '@stdlib/blas/ext/base/gapxsumors';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumors.ndarray( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gapxsumpw( 4, 5.0, arraylike2object( x ), 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumpw( N, alpha, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + get( xbuf, ix ) );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + get( xbuf, ix );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + get( xbuf, ix );\n\t\ts1 = alpha + get( xbuf, ix+strideX );\n\t\ts2 = alpha + get( xbuf, ix+(2*strideX) );\n\t\ts3 = alpha + get( xbuf, ix+(3*strideX) );\n\t\ts4 = alpha + get( xbuf, ix+(4*strideX) );\n\t\ts5 = alpha + get( xbuf, ix+(5*strideX) );\n\t\ts6 = alpha + get( xbuf, ix+(6*strideX) );\n\t\ts7 = alpha + get( xbuf, ix+(7*strideX) );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + get( xbuf, ix );\n\t\t\ts1 += alpha + get( xbuf, ix+strideX );\n\t\t\ts2 += alpha + get( xbuf, ix+(2*strideX) );\n\t\t\ts3 += alpha + get( xbuf, ix+(3*strideX) );\n\t\t\ts4 += alpha + get( xbuf, ix+(4*strideX) );\n\t\t\ts5 += alpha + get( xbuf, ix+(5*strideX) );\n\t\t\ts6 += alpha + get( xbuf, ix+(6*strideX) );\n\t\t\ts7 += alpha + get( xbuf, ix+(7*strideX) );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + get( xbuf, ix );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gapxsumpw( n, alpha, x, strideX, ix ) + gapxsumpw( N-n, alpha, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport floor from '@stdlib/math/base/special/floor';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumpw( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar o;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, alpha, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+strideX ];\n\t\ts2 = alpha + x[ ix+(2*strideX) ];\n\t\ts3 = alpha + x[ ix+(3*strideX) ];\n\t\ts4 = alpha + x[ ix+(4*strideX) ];\n\t\ts5 = alpha + x[ ix+(5*strideX) ];\n\t\ts6 = alpha + x[ ix+(6*strideX) ];\n\t\ts7 = alpha + x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+strideX ];\n\t\t\ts2 += alpha + x[ ix+(2*strideX) ];\n\t\t\ts3 += alpha + x[ ix+(3*strideX) ];\n\t\t\ts4 += alpha + x[ ix+(4*strideX) ];\n\t\t\ts5 += alpha + x[ ix+(5*strideX) ];\n\t\t\ts6 += alpha + x[ ix+(6*strideX) ];\n\t\t\ts7 += alpha + x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gapxsumpw( n, alpha, x, strideX, ix ) + gapxsumpw( N-n, alpha, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumpw( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumpw( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a scalar constant to each strided array element and compute the sum using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gapxsumpw\n*\n* @example\n* import gapxsumpw from '@stdlib/blas/ext/base/gapxsumpw';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumpw( x.length, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import gapxsumpw from '@stdlib/blas/ext/base/gapxsumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumpw.ndarray( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of strided array elements using pairwise summation.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gasumpw( 4, arraylike2object( x ), 2, 1 );\n* // returns 9.0\n*/\nfunction gasumpw( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( abs( get( xbuf, ix ) ) );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += abs( get( xbuf, ix ) );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = abs( get( xbuf, ix ) );\n\t\ts1 = abs( get( xbuf, ix+strideX ) );\n\t\ts2 = abs( get( xbuf, ix+(2*strideX) ) );\n\t\ts3 = abs( get( xbuf, ix+(3*strideX) ) );\n\t\ts4 = abs( get( xbuf, ix+(4*strideX) ) );\n\t\ts5 = abs( get( xbuf, ix+(5*strideX) ) );\n\t\ts6 = abs( get( xbuf, ix+(6*strideX) ) );\n\t\ts7 = abs( get( xbuf, ix+(7*strideX) ) );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += abs( get( xbuf, ix ) );\n\t\t\ts1 += abs( get( xbuf, ix+strideX ) );\n\t\t\ts2 += abs( get( xbuf, ix+(2*strideX) ) );\n\t\t\ts3 += abs( get( xbuf, ix+(3*strideX) ) );\n\t\t\ts4 += abs( get( xbuf, ix+(4*strideX) ) );\n\t\t\ts5 += abs( get( xbuf, ix+(5*strideX) ) );\n\t\t\ts6 += abs( get( xbuf, ix+(6*strideX) ) );\n\t\t\ts7 += abs( get( xbuf, ix+(7*strideX) ) );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += abs( get( xbuf, ix ) );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gasumpw( n, x, strideX, ix ) + gasumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport floor from '@stdlib/math/base/special/floor';\nimport abs from '@stdlib/math/base/special/abs';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gasumpw( 4, x, 2, 1 );\n* // returns 9.0\n*/\nfunction gasumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( abs( x[ix] ) );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = abs( x[ ix ] );\n\t\ts1 = abs( x[ ix+strideX ] );\n\t\ts2 = abs( x[ ix+(2*strideX) ] );\n\t\ts3 = abs( x[ ix+(3*strideX) ] );\n\t\ts4 = abs( x[ ix+(4*strideX) ] );\n\t\ts5 = abs( x[ ix+(5*strideX) ] );\n\t\ts6 = abs( x[ ix+(6*strideX) ] );\n\t\ts7 = abs( x[ ix+(7*strideX) ] );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += abs( x[ ix ] );\n\t\t\ts1 += abs( x[ ix+strideX ] );\n\t\t\ts2 += abs( x[ ix+(2*strideX) ] );\n\t\t\ts3 += abs( x[ ix+(3*strideX) ] );\n\t\t\ts4 += abs( x[ ix+(4*strideX) ] );\n\t\t\ts5 += abs( x[ ix+(5*strideX) ] );\n\t\t\ts6 += abs( x[ ix+(6*strideX) ] );\n\t\t\ts7 += abs( x[ ix+(7*strideX) ] );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gasumpw( n, x, strideX, ix ) + gasumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gasumpw( x.length, x, 1 );\n* // returns 5.0\n*/\nfunction gasumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport abs from '@stdlib/math/base/special/abs';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, sum, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = s + v;\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc += (s-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + s;\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = s + c;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} y - output array object\n* @param {Collection} y.data - output array data\n* @param {Array<Function>} y.accessors - array element accessors\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Object} output array object\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn( 4, 0.0, arraylike2object( toAccessorArray( x ) ), 2, 1, arraylike2object( toAccessorArray( y ) ), 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar xget;\n\tvar yset;\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\tix = offsetX;\n\tiy = offsetY;\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tt = s + v;\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc += (s-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + s;\n\t\t}\n\t\ts = t;\n\t\tyset( ybuf, iy, s + c );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumkbn( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumkbn( N, sum, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, sum, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gcusumkbn } from './../../../../ext/base/gcusumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusum( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusum( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn gcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY );\n}\n\n\n// EXPORTS //\n\nexport default gcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusum( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusum( N, sum, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, sum, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default gcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport abs from '@stdlib/math/base/special/abs';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn2( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumkbn2( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, sum, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\n\t\ty[ iy ] = sum + cs + ccs;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} y - output array object\n* @param {Collection} y.data - output array data\n* @param {Array<Function>} y.accessors - array element accessors\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Object} output array object\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn2( 4, 0.0, arraylike2object( toAccessorArray( x ) ), 2, 1, arraylike2object( toAccessorArray( y ) ), 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumkbn2( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar xget;\n\tvar yset;\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\tix = offsetX;\n\tiy = offsetY;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\n\t\tyset( ybuf, iy, sum + cs + ccs );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumkbn2( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumkbn2( N, sum, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, sum, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumors( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumors( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, sum, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using ordinary recursive summation.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} y - output array object\n* @param {Collection} y.data - output array data\n* @param {Array<Function>} y.accessors - array element accessors\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Object} output array object\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumors( 4, 0.0, arraylike2object( toAccessorArray( x ) ), 2, 1, arraylike2object( toAccessorArray( y ) ), 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumors( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar xget;\n\tvar yset;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += xget( xbuf, ix );\n\t\tyset( ybuf, iy, sum );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumors( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumors( N, sum, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, sum, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default gcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of absolute values (L1 norm) of strided array elements using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gasumpw\n*\n* @example\n* import gasumpw from '@stdlib/blas/ext/base/gasumpw';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gasumpw( x.length, x, 1 );\n* // returns 5.0\n*\n* @example\n* import gasumpw from '@stdlib/blas/ext/base/gasumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gasumpw.ndarray( 4, x, 2, 1 );\n* // returns 9.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gcusumkbn\n*\n* @example\n* import gcusumkbn from '@stdlib/blas/ext/base/gcusumkbn';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import gcusumkbn from '@stdlib/blas/ext/base/gcusumkbn';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn.ndarray( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements.\n*\n* @module @stdlib/blas/ext/base/gcusum\n*\n* @example\n* import gcusum from '@stdlib/blas/ext/base/gcusum';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusum( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gcusum from '@stdlib/blas/ext/base/gcusum';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusum.ndarray( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gcusumkbn2\n*\n* @example\n* import gcusumkbn2 from '@stdlib/blas/ext/base/gcusumkbn2';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn2( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import gcusumkbn2 from '@stdlib/blas/ext/base/gcusumkbn2';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn2.ndarray( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using ordinary recursive summation.\n*\n* @module @stdlib/blas/ext/base/gcusumors\n*\n* @example\n* import gcusumors from '@stdlib/blas/ext/base/gcusumors';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumors( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import gcusumors from '@stdlib/blas/ext/base/gcusumors';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumors.ndarray( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation:\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} y - output array object\n* @param {Collection} y.data - output array data\n* @param {Array<Function>} y.accessors - array element accessors\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Object} output array object\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumpw( 4, 0.0, arraylike2object( toAccessorArray( x ) ), 2, 1, arraylike2object( toAccessorArray( y ) ), 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumpw( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar xget;\n\tvar yget;\n\tvar yset;\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( N <= BLOCKSIZE ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += xget( xbuf, ix );\n\t\t\tyset( ybuf, iy, sum + s);\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tn = floor( N/2 );\n\tgcusumpw( n, sum, x, strideX, ix, y, strideY, iy );\n\tiy += (n-1) * strideY;\n\tgcusumpw( N-n, yget( ybuf, iy ), x, strideX, ix+(n*strideX), y, strideY, iy+strideY ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport floor from '@stdlib/math/base/special/floor';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation:\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumpw( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumpw( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, sum, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( N <= BLOCKSIZE ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\ty[ iy ] = sum + s;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tn = floor( N/2 );\n\tgcusumpw( n, sum, x, strideX, ix, y, strideY, iy );\n\tiy += (n-1) * strideY;\n\tgcusumpw( N-n, y[ iy ], x, strideX, ix+(n*strideX), y, strideY, iy+strideY ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumpw( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumpw( N, sum, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, sum, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default gcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gcusumpw\n*\n* @example\n* import gcusumpw from '@stdlib/blas/ext/base/gcusumpw';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumpw( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import gcusumpw from '@stdlib/blas/ext/base/gcusumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumpw.ndarray( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar constant\n* @param {Collection} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Collection} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* gfill( 3, 5.0, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\taccessors( N, alpha, o, strideX, offsetX );\n\t\treturn o.data;\n\t}\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] = alpha;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] = alpha;\n\t\t\tx[ ix+1 ] = alpha;\n\t\t\tx[ ix+2 ] = alpha;\n\t\t\tx[ ix+3 ] = alpha;\n\t\t\tx[ ix+4 ] = alpha;\n\t\t\tx[ ix+5 ] = alpha;\n\t\t\tx[ ix+6 ] = alpha;\n\t\t\tx[ ix+7 ] = alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar constant\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Object} input array object\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import reinterpret64 from '@stdlib/strided/base/reinterpret-complex64';\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* var data = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var x = {\n*     'data': data,\n*     'accessors': [ null, setter ]\n* };\n*\n* var alpha = new Complex64( 5.0, 5.0 );\n*\n* gfill( data.length, alpha, x, 1, 0 );\n*\n* var view = reinterpret64( x.data, 0 );\n* // returns <Float32Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar set;\n\tvar ix;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tset = x.accessors[ 1 ];\n\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( xbuf, ix, alpha );\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar constant\n* @param {Collection} x - input array\n* @param {integer} strideX - stride length\n* @returns {Collection} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill( x.length, 5.0, x, 1 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Fills a strided array according to a provided callback function.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Callback} clbk - callback function\n* @param {*} [thisArg] - execution context\n* @returns {Collection} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* gfillBy( 3, x, 1, x.length-3, fill );\n* // x => [ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfillBy( N, x, strideX, offsetX, clbk, thisArg ) {\n\tvar ix;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\taccessors( N, o, strideX, offsetX, clbk, thisArg );\n\t\treturn o.data;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfillBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Fills a strided array according to a provided callback function.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Callback} clbk - callback function\n* @param {*} thisArg - execution context\n* @returns {Object} input array object\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import reinterpret64 from '@stdlib/strided/base/reinterpret-complex64';\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var data = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var x = {\n*     'data': data,\n*     'accessors': [ getter, setter ]\n* };\n*\n* function clbk() {\n*     return new Complex64( 5.0, 5.0 );\n* }\n*\n* gfillBy( data.length, x, 1, 0, clbk, void 0 );\n*\n* var view = reinterpret64( x.data, 0 );\n* // view => <Float32Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfillBy( N, x, strideX, offsetX, clbk, thisArg ) {\n\tvar xbuf;\n\tvar set;\n\tvar get;\n\tvar ix;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessors:\n\tget = x.accessors[ 0 ];\n\tset = x.accessors[ 1 ];\n\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( xbuf, ix, clbk.call( thisArg, get( xbuf, ix ), i, ix, x ) );\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfillBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Fills a strided array according to a provided callback function.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - stride length\n* @param {Callback} clbk - callback function\n* @param {*} [thisArg] - execution context\n* @returns {Collection} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* gfillBy( x.length, x, 1, fill );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfillBy( N, x, strideX, clbk, thisArg ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), clbk, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default gfillBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var out = [ 0.0, 0 ];\n*\n* var v = gnannsumkbn( 5, x, 2, 1, out, 1, 0 );\n* // returns [ 5.0, 4 ]\n*/\nfunction gnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar ox;\n\tvar oo;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ offsetOut ] = sum;\n\t\tout[ offsetOut+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tox = arraylike2object( x );\n\too = arraylike2object( out );\n\tif ( ox.accessorProtocol || oo.accessorProtocol ) {\n\t\taccessors( N, ox, strideX, offsetX, oo, strideOut, offsetOut );\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ offsetOut ] = sum;\n\t\t\tout[ offsetOut+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offsetOut ] = x[ ix ] * N;\n\t\tout[ offsetOut+strideOut ] = N;\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ offsetOut ] = sum + c;\n\tout[ offsetOut+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default gnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} out - output array object\n* @param {Collection} out.data - output array data\n* @param {Array<Function>} out.accessors - array element accessors\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Object} output array object\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = toAccessorArray( [ 0.0, 0 ] );\n*\n* var v = gnannsumkbn( 5, arraylike2object( x ), 2, 1, arraylike2object( out ), 1, 0 );\n* // returns {...}\n*/\nfunction gnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar obuf;\n\tvar xbuf;\n\tvar xget;\n\tvar oset;\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tobuf = out.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\toset = out.accessors[ 1 ];\n\n\tsum = 0.0;\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) ) {\n\t\t\toset( obuf, offsetOut, sum );\n\t\t\toset( obuf, offsetOut+strideOut, 0 );\n\t\t\treturn out;\n\t\t}\n\t\toset( obuf, offsetOut, v * N );\n\t\toset( obuf, offsetOut+strideOut, N );\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\toset( obuf, offsetOut, sum + c );\n\toset( obuf, offsetOut+strideOut, n );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default gnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gnansumkbn( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumkbn( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gnansumkbn( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumkbn( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( xget( xbuf, ix ) ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * xget( xbuf, ix );\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumkbn( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumkbn( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gnansumkbn } from './../../../../ext/base/gnansumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gnansum( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansum( N, x, strideX, offsetX ) {\n\treturn gnansumkbn( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default gnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gnansum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gnansumkbn2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumkbn2( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gnansumkbn2( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumkbn2( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar sum;\n\tvar ccs;\n\tvar cs;\n\tvar cc;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( xget( xbuf, ix ) ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * xget( xbuf, ix );\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumkbn2( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumkbn2( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gnansumors( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gnansumors( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumors( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * v;\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) === false ) {\n\t\t\tsum += v;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with a specified scalar constant.\n*\n* @module @stdlib/blas/ext/base/gfill\n*\n* @example\n* import gfill from '@stdlib/blas/ext/base/gfill';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill( x.length, 5.0, x, 1 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*\n* @example\n* import gfill from '@stdlib/blas/ext/base/gfill';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array according to a provided callback function.\n*\n* @module @stdlib/blas/ext/base/gfill-by\n*\n* @example\n* import gfillBy from '@stdlib/blas/ext/base/gfill-by';\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfillBy( x.length, x, 1, fill );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*\n* @example\n* import gfillBy from '@stdlib/blas/ext/base/gfill-by';\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfillBy.ndarray( x.length, x, 1, 0, fill );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gnansumkbn\n*\n* @example\n* import gnansumkbn from '@stdlib/blas/ext/base/gnansumkbn';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumkbn( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gnansumkbn from '@stdlib/blas/ext/base/gnansumkbn';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = gnansumkbn.ndarray( 5, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values.\n*\n* @module @stdlib/blas/ext/base/gnansum\n*\n* @example\n* import gnansum from '@stdlib/blas/ext/base/gnansum';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansum( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gnansum from '@stdlib/blas/ext/base/gnansum';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = gnansum.ndarray( 5, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gnansumkbn2\n*\n* @example\n* import gnansumkbn2 from '@stdlib/blas/ext/base/gnansumkbn2';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumkbn2( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gnansumkbn2 from '@stdlib/blas/ext/base/gnansumkbn2';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = gnansumkbn2.ndarray( 5, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @module @stdlib/blas/ext/base/gnansumors\n*\n* @example\n* import gnansumors from '@stdlib/blas/ext/base/gnansumors';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumors( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gnansumors from '@stdlib/blas/ext/base/gnansumors';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = gnansumors.ndarray( 5, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gnansumpw( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumpw( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * v;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = xget( xbuf, ix );\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts += v;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\tv = xget( xbuf, ix );\n\t\ts0 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts1 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts2 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts3 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts4 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts5 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts6 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts7 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts0 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts1 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts2 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts3 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts4 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts5 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts6 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts7 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tv = xget( xbuf, ix );\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts += v;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gnansumpw( n, x, strideX, ix ) + gnansumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gnansumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts1 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts2 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts3 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts4 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts5 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts6 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts7 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts1 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts2 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts3 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts4 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts5 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts6 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts7 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gnansumpw( n, x, strideX, ix ) + gnansumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gnansumpw\n*\n* @example\n* import gnansumpw from '@stdlib/blas/ext/base/gnansumpw';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumpw( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gnansumpw from '@stdlib/blas/ext/base/gnansumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = gnansumpw.ndarray( 5, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* grev( 3, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, -6.0, 5.0, -4.0 ]\n*/\nfunction grev( N, x, strideX, offsetX ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar o;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\taccessors( N, o, strideX, offsetX );\n\t\treturn o.data;\n\t}\n\tn = floor( N/2 );\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = n % M;\n\t\tiy = ix + N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy -= strideX;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < n; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tiy = ix + ( ( N - 1 ) * strideX );\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy -= strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default grev;\n","\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Reverses a strided array in-place.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Object} input array object\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import reinterpret64 from '@stdlib/strided/base/reinterpret-complex64';\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var data = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var x = {\n*     'data': data,\n*     'accessors': [ getter, setter ]\n* };\n*\n* grev( data.length, x, 1, 0 );\n*\n* var view = reinterpret64( x.data, 0 );\n* // view => <Float32Array>[ -1.0, -3.0, 4.0, 0.0, 3.0, -5.0, -2.0, 1.0 ]\n*/\nfunction grev( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar set;\n\tvar get;\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessors:\n\tget = x.accessors[ 0 ];\n\tset = x.accessors[ 1 ];\n\n\tn = floor( N/2 );\n\tix = offsetX;\n\tiy = ix + ( ( N - 1 ) * strideX );\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = get( xbuf, ix );\n\t\tset( xbuf, ix, get( xbuf, iy ) );\n\t\tset( xbuf, iy, tmp );\n\t\tix += strideX;\n\t\tiy -= strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default grev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Reverses a strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* grev( x.length, x, 1 );\n* // x => [ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\nfunction grev( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default grev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, order, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Object} x - first input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - first input array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} y - second input array object\n* @param {Collection} y.data - second input array data\n* @param {Array<Function>} y.accessors - second input array element accessors\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Object} `x`\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, arraylike2object( toAccessorArray( x ) ), 1, 0, arraylike2object( toAccessorArray( y ) ), 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar xbuf;\n\tvar ybuf;\n\tvar xget;\n\tvar yget;\n\tvar xset;\n\tvar yset;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\txset = x.accessors[ 1 ];\n\tyget = y.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = xget( xbuf, offsetX+(parent*strideX) );\n\t\t\tty = yget( ybuf, offsetY+(parent*strideY) );\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = xget( xbuf, ix );\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = yget( ybuf, iy );\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\txset( xbuf, ix, xget( xbuf, offsetX ) );\n\t\t\tyset( ybuf, iy, yget( ybuf, offsetY ) );\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = xget( xbuf, offsetX+(k*strideX) );\n\t\t\t\tv2 = xget( xbuf, offsetX+(child*strideX) );\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = xget( xbuf, offsetX+(child*strideX) );\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\txset( xbuf, offsetX+(j*strideX), v1 );\n\t\t\t\tyset( ybuf, offsetY+(j*strideY), yget( ybuf, offsetY+(child*strideY) ) ); // eslint-disable-line max-len\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\txset( xbuf, offsetX+(j*strideX), tx );\n\t\tyset( ybuf, offsetY+(j*strideY), ty );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2hp( N, order, x, strideX, y, strideY ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, order, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default gsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar ox;\n\tvar oy;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, order, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Object} x - first input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - first input array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} y - second input array object\n* @param {Collection} y.data - second input array data\n* @param {Array<Function>} y.accessors - second input array element accessors\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Object} `x`\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, arraylike2object( toAccessorArray( x ) ), 1, 0, arraylike2object( toAccessorArray( y ) ), 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar xget;\n\tvar yget;\n\tvar xset;\n\tvar yset;\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\txset = x.accessors[ 1 ];\n\tyget = y.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = xget( xbuf, ix );\n\t\t\tvy = yget( ybuf, iy );\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\txset( xbuf, jx, xget( xbuf, jx+strideX ) );\n\t\t\t\t\tyset( ybuf, jy, yget( ybuf, jy+strideY ) );\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\txset( xbuf, lx, vx );\n\t\t\t\tyset( ybuf, ly, vy );\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = xget( xbuf, jx );\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\txset( xbuf, jx+strideX, ux );\n\t\t\t\t\tyset( ybuf, jy+strideY, yget( ybuf, jy ) );\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\txset( xbuf, jx+strideX, vx );\n\t\t\t\tyset( ybuf, jy+strideY, vy );\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = xget( xbuf, ix );\n\t\tvy = yget( ybuf, iy );\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\txset( xbuf, jx, xget( xbuf, jx+strideX ) );\n\t\t\t\tyset( ybuf, jy, yget( ybuf, jy+strideY ) );\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\txset( xbuf, lx, vx );\n\t\t\tyset( ybuf, ly, vy );\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = xget( xbuf, jx );\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\txset( xbuf, jx+strideX, ux );\n\t\t\t\tyset( ybuf, jy+strideY, yget( ybuf, jy ) );\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\txset( xbuf, jx+strideX, vx );\n\t\t\tyset( ybuf, jy+strideY, vy );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2ins( N, order, x, strideX, y, strideY ) {\n\treturn ndarray( N, order, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Reverse a strided array in-place.\n*\n* @module @stdlib/blas/ext/base/grev\n*\n* @example\n* import grev from '@stdlib/blas/ext/base/grev';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* grev( x.length, x, 1 );\n* // x => [ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*\n* @example\n* import grev from '@stdlib/blas/ext/base/grev';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* grev( x.length, x, 1, 0 );\n* // x => [ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously sort two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* @module @stdlib/blas/ext/base/gsort2hp\n*\n* @example\n* import gsort2hp from '@stdlib/blas/ext/base/gsort2hp';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* import gsort2hp from '@stdlib/blas/ext/base/gsort2hp';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously sort two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @module @stdlib/blas/ext/base/gsort2ins\n*\n* @example\n* import gsort2ins from '@stdlib/blas/ext/base/gsort2ins';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* import gsort2ins from '@stdlib/blas/ext/base/gsort2ins';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Object} x - first input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - first input array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} y - second input array object\n* @param {Collection} y.data - second input array data\n* @param {Array<Function>} y.accessors - second input array element accessors\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Object} `x`\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, arraylike2object( toAccessorArray( x ) ), 1, 0, arraylike2object( toAccessorArray( y ) ), 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar xget;\n\tvar yget;\n\tvar xset;\n\tvar yset;\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\txset = x.accessors[ 1 ];\n\tyget = y.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = xget( xbuf, offsetX+(j*strideX) );\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = yget( ybuf, offsetY+(j*strideY) );\n\n\t\t\t// Perform Shellsort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = xget( xbuf, offsetX+((k-gap)*strideX) );\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\txset( xbuf, offsetX+(k*strideX), ux );\n\t\t\t\tyset( ybuf, offsetY+(k*strideY), yget( ybuf, offsetY+((k-gap)*strideY) ) ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\txset( xbuf, offsetX+(k*strideX), vx );\n\t\t\tyset( ybuf, offsetY+(k*strideY), vy );\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar ox;\n\tvar oy;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, order, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform Shellsort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2sh( N, order, x, strideX, y, strideY ) {\n\treturn ndarray( N, order, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsorthp( N, order, x, strideX, offsetX ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar ox;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\tox = arraylike2object( x );\n\tif ( ox.accessorProtocol ) {\n\t\taccessors( N, order, ox, strideX, offsetX );\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offsetX+(parent*strideX) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offsetX + (n*strideX);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offsetX ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Object} x - input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - first input array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Object} `x`\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp( x.length, 1.0, arraylike2object( toAccessorArray( x ) ), 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsorthp( N, order, x, strideX, offsetX ) {\n\tvar parent;\n\tvar child;\n\tvar xbuf;\n\tvar xget;\n\tvar xset;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\txset = x.accessors[ 1 ];\n\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = xget( xbuf, offsetX+(parent*strideX) );\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offsetX + (n*strideX);\n\t\t\tt = xget( xbuf, i );\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\txset( xbuf, i, xget( xbuf, offsetX ) );\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = xget( xbuf, offsetX+(k*strideX) );\n\t\t\t\tv2 = xget( xbuf, offsetX+(child*strideX) );\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = xget( xbuf, offsetX+(child*strideX) );\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\txset( xbuf, offsetX+(j*strideX), v1 );\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\txset( xbuf, offsetX+(j*strideX), t );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsorthp( N, order, x, strideX ) {\n\treturn ndarray( N, order, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortins( N, order, x, strideX, offsetX ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar ox;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\tox = arraylike2object( x );\n\tif ( ox.accessorProtocol ) {\n\t\taccessors( N, order, ox, strideX, offsetX );\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ( (N-1)*strideX ); // last index\n\tix = fx + strideX;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - strideX;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = u;\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = v;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\tjx += strideX;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - strideX;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = u;\n\t\t\t\tjx -= strideX;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = v;\n\t\t\tix += strideX;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using insertion sort.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Object} x - input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - first input array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Object} `x`\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, arraylike2object( toAccessorArray( x ) ), 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortins( N, order, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar xset;\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\txset = x.accessors[ 1 ];\n\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ( (N-1)*strideX ); // last index\n\tix = fx + strideX;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = xget( xbuf, ix );\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\txset( xbuf, jx, xget( xbuf, jx+strideX ) );\n\t\t\t\t\tjx += strideX;\n\t\t\t\t}\n\t\t\t\txset( xbuf, lx, v );\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - strideX;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = xget( xbuf, jx );\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\txset( xbuf, jx+strideX, u );\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t}\n\t\t\t\txset( xbuf, jx+strideX, v );\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\txset( xbuf, jx, xget( xbuf, jx+strideX ) );\n\t\t\t\tjx += strideX;\n\t\t\t}\n\t\t\txset( xbuf, lx, v );\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - strideX;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = xget( xbuf, jx );\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\txset( xbuf, jx+strideX, u );\n\t\t\t\tjx -= strideX;\n\t\t\t}\n\t\t\txset( xbuf, jx+strideX, v );\n\t\t\tix += strideX;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortins( N, order, x, strideX ) {\n\treturn ndarray( N, order, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously sort two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* @module @stdlib/blas/ext/base/gsort2sh\n*\n* @example\n* import gsort2sh from '@stdlib/blas/ext/base/gsort2sh';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* import gsort2sh from '@stdlib/blas/ext/base/gsort2sh';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sort a strided array using heapsort.\n*\n* @module @stdlib/blas/ext/base/gsorthp\n*\n* @example\n* import gsorthp from '@stdlib/blas/ext/base/gsorthp';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* @example\n* import gsorthp from '@stdlib/blas/ext/base/gsorthp';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp.ndarray( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sort a strided array using insertion sort.\n*\n* @module @stdlib/blas/ext/base/gsortins\n*\n* @example\n* import gsortins from '@stdlib/blas/ext/base/gsortins';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* @example\n* import gsortins from '@stdlib/blas/ext/base/gsortins';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins.ndarray( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Object} x - input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - first input array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Object} `x`\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh( x.length, 1.0, arraylike2object( toAccessorArray( x ) ), 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortsh( N, order, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar xset;\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\txset = x.accessors[ 1 ];\n\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = xget( xbuf, offsetX+(j*strideX) );\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = xget( xbuf, offsetX+((k-gap)*strideX) );\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\txset( xbuf, offsetX+(k*strideX), u );\n\t\t\t}\n\t\t\txset( xbuf, offsetX+(k*strideX), v );\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortsh( N, order, x, strideX, offsetX ) {\n\tvar flg;\n\tvar gap;\n\tvar ox;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\tox = arraylike2object( x );\n\tif ( ox.accessorProtocol ) {\n\t\taccessors( N, order, ox, strideX, offsetX );\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = u;\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortsh( N, order, x, strideX ) {\n\treturn ndarray( N, order, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumkbn( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumkbn( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar o;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gsumkbn( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gsumkbn( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * get( xbuf, ix );\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = get( xbuf, ix );\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumkbn( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gsumkbn( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gsumkbn } from './../../../../ext/base/gsumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsum( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsum( N, x, strideX, offsetX ) {\n\treturn gsumkbn( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default gsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gsum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumkbn2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumkbn2( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar o;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gsumkbn2( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gsumkbn2( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * get( xbuf, ix );\n\t}\n\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = get( xbuf, ix );\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumkbn2( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gsumkbn2( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sort a strided array using Shellsort.\n*\n* @module @stdlib/blas/ext/base/gsortsh\n*\n* @example\n* import gsortsh from '@stdlib/blas/ext/base/gsortsh';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* @example\n* import gsortsh from '@stdlib/blas/ext/base/gsortsh';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh.ndarray( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gsumkbn\n*\n* @example\n* import gsumkbn from '@stdlib/blas/ext/base/gsumkbn';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumkbn( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gsumkbn from '@stdlib/blas/ext/base/gsumkbn';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumkbn.ndarray( 4, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements.\n*\n* @module @stdlib/blas/ext/base/gsum\n*\n* @example\n* import gsum from '@stdlib/blas/ext/base/gsum';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsum( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gsum from '@stdlib/blas/ext/base/gsum';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsum.ndarray( 4, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gsumkbn2\n*\n* @example\n* import gsumkbn2 from '@stdlib/blas/ext/base/gsumkbn2';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumkbn2( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gsumkbn2 from '@stdlib/blas/ext/base/gsumkbn2';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumkbn2.ndarray( 4, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumors( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumors( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar s;\n\tvar o;\n\tvar i;\n\n\ts = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn s;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn s;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ts += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn s;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ts += x[ ix ];\n\t\tix += strideX;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default gsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using ordinary recursive summation.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gsumors( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gsumors( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * get( xbuf, ix );\n\t}\n\ts = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ts += get( xbuf, ix );\n\t\tix += strideX;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default gsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gsumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using ordinary recursive summation.\n*\n* @module @stdlib/blas/ext/base/gsumors\n*\n* @example\n* import gsumors from '@stdlib/blas/ext/base/gsumors';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumors( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gsumors from '@stdlib/blas/ext/base/gsumors';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumors.ndarray( 4, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gsumpw( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gsumpw( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar n;\n\tvar s;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * get( xbuf, ix );\n\t}\n\n\tif ( N <= 8 ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += get( xbuf, ix );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = get( xbuf, ix );\n\t\ts1 = get( xbuf, ix+strideX );\n\t\ts2 = get( xbuf, ix+(2*strideX) );\n\t\ts3 = get( xbuf, ix+(3*strideX) );\n\t\ts4 = get( xbuf, ix+(4*strideX) );\n\t\ts5 = get( xbuf, ix+(5*strideX) );\n\t\ts6 = get( xbuf, ix+(6*strideX) );\n\t\ts7 = get( xbuf, ix+(7*strideX) );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += get( xbuf, ix );\n\t\t\ts1 += get( xbuf, ix+strideX );\n\t\t\ts2 += get( xbuf, ix+(2*strideX) );\n\t\t\ts3 += get( xbuf, ix+(3*strideX) );\n\t\t\ts4 += get( xbuf, ix+(4*strideX) );\n\t\t\ts5 += get( xbuf, ix+(5*strideX) );\n\t\t\ts6 += get( xbuf, ix+(6*strideX) );\n\t\t\ts7 += get( xbuf, ix+(7*strideX) );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += get( xbuf, ix );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gsumpw( n, x, strideX, ix ) + gsumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar o;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+strideX ];\n\t\ts2 = x[ ix+(2*strideX) ];\n\t\ts3 = x[ ix+(3*strideX) ];\n\t\ts4 = x[ ix+(4*strideX) ];\n\t\ts5 = x[ ix+(5*strideX) ];\n\t\ts6 = x[ ix+(6*strideX) ];\n\t\ts7 = x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+strideX ];\n\t\t\ts2 += x[ ix+(2*strideX) ];\n\t\t\ts3 += x[ ix+(3*strideX) ];\n\t\t\ts4 += x[ ix+(4*strideX) ];\n\t\t\ts5 += x[ ix+(5*strideX) ];\n\t\t\ts6 += x[ ix+(6*strideX) ];\n\t\t\ts7 += x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gsumpw( n, x, strideX, ix ) + gsumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gsumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gsumpw\n*\n* @example\n* import gsumpw from '@stdlib/blas/ext/base/gsumpw';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumpw( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gsumpw from '@stdlib/blas/ext/base/gsumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumpw.ndarray( 4, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* sapx( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, 1.0, 10.0, -1.0 ]\n*/\nfunction sapx( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] += alpha;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] += alpha;\n\t\t\tx[ ix+1 ] += alpha;\n\t\t\tx[ ix+2 ] += alpha;\n\t\t\tx[ ix+3 ] += alpha;\n\t\t\tx[ ix+4 ] += alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default sapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* sapx( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\nfunction sapx( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport absf from '@stdlib/math/base/special/absf';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsumkbn( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumkbn( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * float64ToFloat32( alpha + x[ ix ] ) );\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum + v );\n\t\tif ( absf( sum ) >= absf( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t}\n\t\tsum = t;\n\t\tix += strideX;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sapxsumkbn( 3, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumkbn( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sapxsumkbn } from './../../../../ext/base/sapxsumkbn';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsum( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsum( N, alpha, x, strideX, offsetX ) {\n\treturn sapxsumkbn( N, alpha, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default sapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sapxsum( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsum( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsumkbn2( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumkbn2( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * float64ToFloat32( alpha + x[ ix ] ) );\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += strideX;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sapxsumkbn2( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumkbn2( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsumors( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumors( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * float64ToFloat32( alpha + x[ ix ] ) );\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + float64ToFloat32( alpha+x[ ix ] ) );\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default sapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sapxsumors( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumors( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapx from './sapx.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapx, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapxsumkbn from './sapxsumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapxsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapxsum from './sapxsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapxsumkbn2 from './sapxsumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapxsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapxsumors from './sapxsumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapxsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumpw( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * float64ToFloat32( alpha + x[ ix ] ) );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = float64ToFloat32( alpha + x[ ix ] );\n\t\ts1 = float64ToFloat32( alpha + x[ ix+strideX ] );\n\t\ts2 = float64ToFloat32( alpha + x[ ix+(2*strideX) ] );\n\t\ts3 = float64ToFloat32( alpha + x[ ix+(3*strideX) ] );\n\t\ts4 = float64ToFloat32( alpha + x[ ix+(4*strideX) ] );\n\t\ts5 = float64ToFloat32( alpha + x[ ix+(5*strideX) ] );\n\t\ts6 = float64ToFloat32( alpha + x[ ix+(6*strideX) ] );\n\t\ts7 = float64ToFloat32( alpha + x[ ix+(7*strideX) ] );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\ts1 = float64ToFloat32( s1 + float64ToFloat32( alpha + x[ ix+strideX ] ) );\n\t\t\ts2 = float64ToFloat32( s2 + float64ToFloat32( alpha + x[ ix+(2*strideX) ] ) );\n\t\t\ts3 = float64ToFloat32( s3 + float64ToFloat32( alpha + x[ ix+(3*strideX) ] ) );\n\t\t\ts4 = float64ToFloat32( s4 + float64ToFloat32( alpha + x[ ix+(4*strideX) ] ) );\n\t\t\ts5 = float64ToFloat32( s5 + float64ToFloat32( alpha + x[ ix+(5*strideX) ] ) );\n\t\t\ts6 = float64ToFloat32( s6 + float64ToFloat32( alpha + x[ ix+(6*strideX) ] ) );\n\t\t\ts7 = float64ToFloat32( s7 + float64ToFloat32( alpha + x[ ix+(7*strideX) ] ) );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sapxsumpw( n, alpha, x, strideX, ix ) + sapxsumpw( N-n, alpha, x, strideX, ix+(n*strideX) ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sapxsumpw( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumpw( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapxsumpw from './sapxsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\nimport absf from '@stdlib/math/base/special/absf';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sasumpw( 4, x, 2, 1 );\n* // returns 9.0\n*/\nfunction sasumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * absf( x[ ix ] ) );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + absf( x[ ix ] ) );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = absf( x[ ix ] );\n\t\ts1 = absf( x[ ix+strideX ] );\n\t\ts2 = absf( x[ ix+(2*strideX) ] );\n\t\ts3 = absf( x[ ix+(3*strideX) ] );\n\t\ts4 = absf( x[ ix+(4*strideX) ] );\n\t\ts5 = absf( x[ ix+(5*strideX) ] );\n\t\ts6 = absf( x[ ix+(6*strideX) ] );\n\t\ts7 = absf( x[ ix+(7*strideX) ] );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + absf( x[ ix ] ) );\n\t\t\ts1 = float64ToFloat32( s1 + absf( x[ ix+strideX ] ) );\n\t\t\ts2 = float64ToFloat32( s2 + absf( x[ ix+(2*strideX) ] ) );\n\t\t\ts3 = float64ToFloat32( s3 + absf( x[ ix+(3*strideX) ] ) );\n\t\t\ts4 = float64ToFloat32( s4 + absf( x[ ix+(4*strideX) ] ) );\n\t\t\ts5 = float64ToFloat32( s5 + absf( x[ ix+(5*strideX) ] ) );\n\t\t\ts6 = float64ToFloat32( s6 + absf( x[ ix+(6*strideX) ] ) );\n\t\t\ts7 = float64ToFloat32( s7 + absf( x[ ix+(7*strideX) ] ) );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) ); // eslint-disable-line max-len\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + absf( x[ ix ] ) );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sasumpw( n, x, strideX, ix ) + sasumpw( N-n, x, strideX, ix+(n*strideX) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sasumpw( x.length, x, 1 );\n* // returns 5.0\n*/\nfunction sasumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusumkbn( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( s + v );\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( s - t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v - t ) + s ) ); // eslint-disable-line max-len\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = float64ToFloat32( s + c );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusumkbn( x.length, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumkbn( N, sum, x, strideX, y, strideY ) {\n\tndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport scusumkbn from './../../../../ext/base/scusumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusum( 3, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusum( N, sum, x, strideX, y, strideY ) {\n\treturn scusumkbn( N, sum, x, strideX, y, strideY );\n}\n\n\n// EXPORTS //\n\nexport default scusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusumkbn2( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumkbn2( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\n\t\ty[ iy ] = float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusumkbn2( x.length, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumkbn2( N, sum, x, strideX, y, strideY ) {\n\tndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusumors( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumors( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusumors( x.length, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumors( N, sum, x, strideX, y, strideY ) {\n\tndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sasumpw from './sasumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sasumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scusumkbn from './scusumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scusumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scusum from './scusum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scusum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as scusumkbn } from './../../../../ext/base/scusumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusum( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusum( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn scusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY );\n}\n\n\n// EXPORTS //\n\nexport default scusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scusumkbn2 from './scusumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scusumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scusumors from './scusumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scusumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation:\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusumpw( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumpw( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( N <= BLOCKSIZE ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\ty[ iy ] = float64ToFloat32( sum + s );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tn = floor( N/2 );\n\tscusumpw( n, sum, x, strideX, ix, y, strideY, iy );\n\tiy += (n-1) * strideY;\n\tscusumpw( N-n, y[ iy ], x, strideX, ix+(n*strideX), y, strideY, iy+strideY ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusumpw( x.length, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumpw( N, sum, x, strideX, y, strideY ) {\n\treturn ndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default scusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scusumpw from './scusumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scusumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sdsapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sdsapxsumpw( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * float64ToFloat32( alpha + x[ ix ] ) );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+strideX ];\n\t\ts2 = alpha + x[ ix+(2*strideX) ];\n\t\ts3 = alpha + x[ ix+(3*strideX) ];\n\t\ts4 = alpha + x[ ix+(4*strideX) ];\n\t\ts5 = alpha + x[ ix+(5*strideX) ];\n\t\ts6 = alpha + x[ ix+(6*strideX) ];\n\t\ts7 = alpha + x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+strideX ];\n\t\t\ts2 += alpha + x[ ix+(2*strideX) ];\n\t\t\ts3 += alpha + x[ ix+(3*strideX) ];\n\t\t\ts4 += alpha + x[ ix+(4*strideX) ];\n\t\t\ts5 += alpha + x[ ix+(5*strideX) ];\n\t\t\ts6 += alpha + x[ ix+(6*strideX) ];\n\t\t\ts7 += alpha + x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sdsapxsumpw( n, alpha, x, strideX, ix ) + sdsapxsumpw( N-n, alpha, x, strideX, ix+(n*strideX) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sdsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sdsapxsumpw( 3, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sdsapxsumpw( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sdsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sdsapxsumpw } from './../../../../ext/base/sdsapxsumpw';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sdsapxsum( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sdsapxsum( N, alpha, x, strideX, offsetX ) {\n\treturn sdsapxsumpw( N, alpha, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default sdsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sdsapxsum( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sdsapxsum( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sdsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdsapxsumpw from './sdsapxsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdsapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdsapxsum from './sdsapxsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdsapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = sdsnansumpw( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdsnansumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnanf( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn float64ToFloat32( N * x[ ix ] );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts1 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts2 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts3 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts4 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts5 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts6 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts7 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts1 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts2 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts3 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts4 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts5 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts6 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts7 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sdsnansumpw( n, x, strideX, ix ) + sdsnansumpw( N-n, x, strideX, ix+(n*strideX) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sdsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = sdsnansumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction sdsnansumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sdsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sdsnansumpw from './../../../../ext/base/sdsnansumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = sdsnansum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction sdsnansum( N, x, strideX ) {\n\treturn sdsnansumpw( N, x, strideX );\n}\n\n\n// EXPORTS //\n\nexport default sdsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdsnansumpw from './sdsnansumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdsnansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdsnansum from './sdsnansum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdsnansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sdsnansumpw } from './../../../../ext/base/sdsnansumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = sdsnansum( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdsnansum( N, x, strideX, offsetX ) {\n\treturn sdsnansumpw( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default sdsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sdssumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdssumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * x[ ix ] );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+strideX ];\n\t\ts2 = x[ ix+(2*strideX) ];\n\t\ts3 = x[ ix+(3*strideX) ];\n\t\ts4 = x[ ix+(4*strideX) ];\n\t\ts5 = x[ ix+(5*strideX) ];\n\t\ts6 = x[ ix+(6*strideX) ];\n\t\ts7 = x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+strideX ];\n\t\t\ts2 += x[ ix+(2*strideX) ];\n\t\t\ts3 += x[ ix+(3*strideX) ];\n\t\t\ts4 += x[ ix+(4*strideX) ];\n\t\t\ts5 += x[ ix+(5*strideX) ];\n\t\t\ts6 += x[ ix+(6*strideX) ];\n\t\t\ts7 += x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sdssumpw( n, x, strideX, ix ) + sdssumpw( N-n, x, strideX, ix+(n*strideX) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sdssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sdssumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction sdssumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sdssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sdssumpw } from './../../../../ext/base/sdssumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sdssum( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdssum( N, x, strideX, offsetX ) {\n\treturn sdssumpw( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default sdssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sdssum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction sdssum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sdssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport absf from '@stdlib/math/base/special/absf';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = snansumkbn( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumkbn( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnanf( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn float64ToFloat32( N * x[ ix ] );\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( absf( sum ) >= absf( v ) ) {\n\t\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default snansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = snansumkbn( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction snansumkbn( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default snansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as snansumkbn } from './../../../../ext/base/snansumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = snansum( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansum( N, x, strideX, offsetX ) {\n\treturn snansumkbn( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default snansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = snansum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction snansum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default snansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport absf from '@stdlib/math/base/special/absf';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = snansumkbn2( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumkbn2( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnanf( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn float64ToFloat32( N * x[ ix ] );\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = float64ToFloat32( sum + v );\n\t\t\tif ( absf( sum ) >= absf( v ) ) {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = float64ToFloat32( cs + c );\n\t\t\tif ( absf( cs ) >= absf( c ) ) {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t\t} else {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs = float64ToFloat32( ccs + cc );\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs + ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default snansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = snansumkbn2( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction snansumkbn2( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default snansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = snansumors( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnanf( x[ ix ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default snansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = snansumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction snansumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default snansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdssumpw from './sdssumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdssumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdssum from './sdssum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdssum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snansumkbn from './snansumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snansumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snansum from './snansum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snansumkbn2 from './snansumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snansumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snansumors from './snansumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snansumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = snansumpw( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnanf( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts1 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts2 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts3 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts4 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts5 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts6 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts7 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = ( isnanf( x[ ix ] ) ) ? s0 : float64ToFloat32( s0 + x[ ix ] );\n\t\t\tix += strideX;\n\t\t\ts1 = ( isnanf( x[ ix ] ) ) ? s1 : float64ToFloat32( s1 + x[ ix ] );\n\t\t\tix += strideX;\n\t\t\ts2 = ( isnanf( x[ ix ] ) ) ? s2 : float64ToFloat32( s2 + x[ ix ] );\n\t\t\tix += strideX;\n\t\t\ts3 = ( isnanf( x[ ix ] ) ) ? s3 : float64ToFloat32( s3 + x[ ix ] );\n\t\t\tix += strideX;\n\t\t\ts4 = ( isnanf( x[ ix ] ) ) ? s4 : float64ToFloat32( s4 + x[ ix ] );\n\t\t\tix += strideX;\n\t\t\ts5 = ( isnanf( x[ ix ] ) ) ? s5 : float64ToFloat32( s5 + x[ ix ] );\n\t\t\tix += strideX;\n\t\t\ts6 = ( isnanf( x[ ix ] ) ) ? s6 : float64ToFloat32( s6 + x[ ix ] );\n\t\t\tix += strideX;\n\t\t\ts7 = ( isnanf( x[ ix ] ) ) ? s7 : float64ToFloat32( s7 + x[ ix ] );\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) ); // eslint-disable-line max-len\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( snansumpw( n, x, strideX, ix ) + snansumpw( N-n, x, strideX, ix+(n*strideX) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default snansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = snansumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction snansumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default snansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snansumpw from './snansumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a single-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* srev( 3, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, -6.0, 5.0, -4.0 ]\n*/\nfunction srev( N, x, strideX, offsetX ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tn = floor( N/2 );\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = n % M;\n\t\tiy = ix + N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy -= strideX;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < n; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tiy = ix + ( ( N-1 ) * strideX );\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy -= strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default srev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Reverses a single-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* srev( x.length, x, 1 );\n* // x => <Float32Array>[ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\nfunction srev( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default srev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZerof from '@stdlib/math/base/assert/is-positive-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2hp( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnanf( v1 ) || ( v1 === tx && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ssort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2ins( N, order, x, strideX, y, strideY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideY < 0 ) {\n\t\tfy = (1-N) * strideY;\n\t\tly = 0;\n\t} else {\n\t\tfy = 0;\n\t\tly = (N-1) * strideY;\n\t}\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * strideX; // first index\n\t\tlx = 0;               // last index\n\t\tix = fx + strideX;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * strideX; // last index\n\tix = fx + strideX;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport srev from './srev.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( srev, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default srev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssort2hp from './ssort2hp.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssort2hp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZerof from '@stdlib/math/base/assert/is-positive-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnanf( v1 ) || ( v1 === tx && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ssort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssort2ins from './ssort2ins.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssort2ins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2sh( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZerof from '@stdlib/math/base/assert/is-positive-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssorthp( x.length, 1.0, x, 1 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssorthp( N, order, x, stride ) {\n\tvar offset;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnanf( v1 ) || ( v1 === t && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ssorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortins( x.length, 1.0, x, 1 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortins( N, order, x, stride ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * stride; // first index\n\t\tlx = 0;              // last index\n\t\tix = fx + stride;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * stride; // last index\n\tix = fx + stride;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssort2sh from './ssort2sh.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssort2sh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssorthp from './ssorthp.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssorthp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZerof from '@stdlib/math/base/assert/is-positive-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssorthp( x.length, 1.0, x, 1, 0 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssorthp( N, order, x, stride, offset ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnanf( v1 ) || ( v1 === t && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ssorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssortins from './ssortins.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssortins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortins( x.length, 1.0, x, 1, 0 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortins( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfx = offset;              // first index\n\tlx = fx + ((N-1)*stride); // last index\n\tix = fx + stride;\n\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortsh( x.length, 1.0, x, 1 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortsh( N, order, x, stride ) {\n\tvar offset;\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortsh( x.length, 1.0, x, 1, 0 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortsh( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport absf from '@stdlib/math/base/special/absf';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = ssumkbn( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumkbn( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * x[ ix ] );\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum + v );\n\t\tif ( absf( sum ) >= absf( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t}\n\t\tsum = t;\n\t\tix += strideX;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default ssumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = ssumkbn( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction ssumkbn( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default ssumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as ssumkbn } from './../../../../ext/base/ssumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = ssum( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssum( N, x, strideX, offsetX ) {\n\treturn ssumkbn( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default ssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = ssum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction ssum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default ssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport absf from '@stdlib/math/base/special/absf';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = ssumkbn2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumkbn2( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * x[ ix ] );\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( absf( sum ) >= absf( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( absf( cs ) >= absf( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += strideX;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default ssumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = ssumkbn2( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction ssumkbn2( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default ssumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = ssumors( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default ssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = ssumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction ssumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default ssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssortsh from './ssortsh.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssortsh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssumkbn from './ssumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssum from './ssum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssumkbn2 from './ssumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssumors from './ssumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = ssumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+strideX ];\n\t\ts2 = x[ ix+(2*strideX) ];\n\t\ts3 = x[ ix+(3*strideX) ];\n\t\ts4 = x[ ix+(4*strideX) ];\n\t\ts5 = x[ ix+(5*strideX) ];\n\t\ts6 = x[ ix+(6*strideX) ];\n\t\ts7 = x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + x[ ix ] );\n\t\t\ts1 = float64ToFloat32( s1 + x[ ix+strideX ] );\n\t\t\ts2 = float64ToFloat32( s2 + x[ ix+(2*strideX) ] );\n\t\t\ts3 = float64ToFloat32( s3 + x[ ix+(3*strideX) ] );\n\t\t\ts4 = float64ToFloat32( s4 + x[ ix+(4*strideX) ] );\n\t\t\ts5 = float64ToFloat32( s5 + x[ ix+(5*strideX) ] );\n\t\t\ts6 = float64ToFloat32( s6 + x[ ix+(6*strideX) ] );\n\t\t\ts7 = float64ToFloat32( s7 + x[ ix+(7*strideX) ] );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) ); // eslint-disable-line max-len\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( ssumpw( n, x, strideX, ix ) + ssumpw( N-n, x, strideX, ix+(n*strideX) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = ssumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction ssumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssumpw from './ssumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name dapx\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapx}\n*/\nimport dapx from './../../../ext/base/dapx';\nsetReadOnly( ns, 'dapx', dapx );\n\n/**\n* @name dapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsum}\n*/\nimport dapxsum from './../../../ext/base/dapxsum';\nsetReadOnly( ns, 'dapxsum', dapxsum );\n\n/**\n* @name dapxsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumkbn}\n*/\nimport dapxsumkbn from './../../../ext/base/dapxsumkbn';\nsetReadOnly( ns, 'dapxsumkbn', dapxsumkbn );\n\n/**\n* @name dapxsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumkbn2}\n*/\nimport dapxsumkbn2 from './../../../ext/base/dapxsumkbn2';\nsetReadOnly( ns, 'dapxsumkbn2', dapxsumkbn2 );\n\n/**\n* @name dapxsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumors}\n*/\nimport dapxsumors from './../../../ext/base/dapxsumors';\nsetReadOnly( ns, 'dapxsumors', dapxsumors );\n\n/**\n* @name dapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumpw}\n*/\nimport dapxsumpw from './../../../ext/base/dapxsumpw';\nsetReadOnly( ns, 'dapxsumpw', dapxsumpw );\n\n/**\n* @name dasumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dasumpw}\n*/\nimport dasumpw from './../../../ext/base/dasumpw';\nsetReadOnly( ns, 'dasumpw', dasumpw );\n\n/**\n* @name dcusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusum}\n*/\nimport dcusum from './../../../ext/base/dcusum';\nsetReadOnly( ns, 'dcusum', dcusum );\n\n/**\n* @name dcusumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumkbn}\n*/\nimport dcusumkbn from './../../../ext/base/dcusumkbn';\nsetReadOnly( ns, 'dcusumkbn', dcusumkbn );\n\n/**\n* @name dcusumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumkbn2}\n*/\nimport dcusumkbn2 from './../../../ext/base/dcusumkbn2';\nsetReadOnly( ns, 'dcusumkbn2', dcusumkbn2 );\n\n/**\n* @name dcusumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumors}\n*/\nimport dcusumors from './../../../ext/base/dcusumors';\nsetReadOnly( ns, 'dcusumors', dcusumors );\n\n/**\n* @name dcusumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumpw}\n*/\nimport dcusumpw from './../../../ext/base/dcusumpw';\nsetReadOnly( ns, 'dcusumpw', dcusumpw );\n\n/**\n* @name dfill\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dfill}\n*/\nimport dfill from './../../../ext/base/dfill';\nsetReadOnly( ns, 'dfill', dfill );\n\n/**\n* @name dnanasum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnanasum}\n*/\nimport dnanasum from './../../../ext/base/dnanasum';\nsetReadOnly( ns, 'dnanasum', dnanasum );\n\n/**\n* @name dnanasumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnanasumors}\n*/\nimport dnanasumors from './../../../ext/base/dnanasumors';\nsetReadOnly( ns, 'dnanasumors', dnanasumors );\n\n/**\n* @name dnannsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsum}\n*/\nimport dnannsum from './../../../ext/base/dnannsum';\nsetReadOnly( ns, 'dnannsum', dnannsum );\n\n/**\n* @name dnannsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumkbn}\n*/\nimport dnannsumkbn from './../../../ext/base/dnannsumkbn';\nsetReadOnly( ns, 'dnannsumkbn', dnannsumkbn );\n\n/**\n* @name dnannsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumkbn2}\n*/\nimport dnannsumkbn2 from './../../../ext/base/dnannsumkbn2';\nsetReadOnly( ns, 'dnannsumkbn2', dnannsumkbn2 );\n\n/**\n* @name dnannsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumors}\n*/\nimport dnannsumors from './../../../ext/base/dnannsumors';\nsetReadOnly( ns, 'dnannsumors', dnannsumors );\n\n/**\n* @name dnannsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumpw}\n*/\nimport dnannsumpw from './../../../ext/base/dnannsumpw';\nsetReadOnly( ns, 'dnannsumpw', dnannsumpw );\n\n/**\n* @name dnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansum}\n*/\nimport dnansum from './../../../ext/base/dnansum';\nsetReadOnly( ns, 'dnansum', dnansum );\n\n/**\n* @name dnansumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumkbn}\n*/\nimport dnansumkbn from './../../../ext/base/dnansumkbn';\nsetReadOnly( ns, 'dnansumkbn', dnansumkbn );\n\n/**\n* @name dnansumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumkbn2}\n*/\nimport dnansumkbn2 from './../../../ext/base/dnansumkbn2';\nsetReadOnly( ns, 'dnansumkbn2', dnansumkbn2 );\n\n/**\n* @name dnansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumors}\n*/\nimport dnansumors from './../../../ext/base/dnansumors';\nsetReadOnly( ns, 'dnansumors', dnansumors );\n\n/**\n* @name dnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumpw}\n*/\nimport dnansumpw from './../../../ext/base/dnansumpw';\nsetReadOnly( ns, 'dnansumpw', dnansumpw );\n\n/**\n* @name drev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/drev}\n*/\nimport drev from './../../../ext/base/drev';\nsetReadOnly( ns, 'drev', drev );\n\n/**\n* @name dsapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsapxsum}\n*/\nimport dsapxsum from './../../../ext/base/dsapxsum';\nsetReadOnly( ns, 'dsapxsum', dsapxsum );\n\n/**\n* @name dsapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsapxsumpw}\n*/\nimport dsapxsumpw from './../../../ext/base/dsapxsumpw';\nsetReadOnly( ns, 'dsapxsumpw', dsapxsumpw );\n\n/**\n* @name dsnannsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnannsumors}\n*/\nimport dsnannsumors from './../../../ext/base/dsnannsumors';\nsetReadOnly( ns, 'dsnannsumors', dsnannsumors );\n\n/**\n* @name dsnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnansum}\n*/\nimport dsnansum from './../../../ext/base/dsnansum';\nsetReadOnly( ns, 'dsnansum', dsnansum );\n\n/**\n* @name dsnansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnansumors}\n*/\nimport dsnansumors from './../../../ext/base/dsnansumors';\nsetReadOnly( ns, 'dsnansumors', dsnansumors );\n\n/**\n* @name dsnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnansumpw}\n*/\nimport dsnansumpw from './../../../ext/base/dsnansumpw';\nsetReadOnly( ns, 'dsnansumpw', dsnansumpw );\n\n/**\n* @name dsort2hp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsort2hp}\n*/\nimport dsort2hp from './../../../ext/base/dsort2hp';\nsetReadOnly( ns, 'dsort2hp', dsort2hp );\n\n/**\n* @name dsort2ins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsort2ins}\n*/\nimport dsort2ins from './../../../ext/base/dsort2ins';\nsetReadOnly( ns, 'dsort2ins', dsort2ins );\n\n/**\n* @name dsort2sh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsort2sh}\n*/\nimport dsort2sh from './../../../ext/base/dsort2sh';\nsetReadOnly( ns, 'dsort2sh', dsort2sh );\n\n/**\n* @name dsorthp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsorthp}\n*/\nimport dsorthp from './../../../ext/base/dsorthp';\nsetReadOnly( ns, 'dsorthp', dsorthp );\n\n/**\n* @name dsortins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsortins}\n*/\nimport dsortins from './../../../ext/base/dsortins';\nsetReadOnly( ns, 'dsortins', dsortins );\n\n/**\n* @name dsortsh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsortsh}\n*/\nimport dsortsh from './../../../ext/base/dsortsh';\nsetReadOnly( ns, 'dsortsh', dsortsh );\n\n/**\n* @name dssum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dssum}\n*/\nimport dssum from './../../../ext/base/dssum';\nsetReadOnly( ns, 'dssum', dssum );\n\n/**\n* @name dssumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dssumors}\n*/\nimport dssumors from './../../../ext/base/dssumors';\nsetReadOnly( ns, 'dssumors', dssumors );\n\n/**\n* @name dssumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dssumpw}\n*/\nimport dssumpw from './../../../ext/base/dssumpw';\nsetReadOnly( ns, 'dssumpw', dssumpw );\n\n/**\n* @name dsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsum}\n*/\nimport dsum from './../../../ext/base/dsum';\nsetReadOnly( ns, 'dsum', dsum );\n\n/**\n* @name dsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumkbn}\n*/\nimport dsumkbn from './../../../ext/base/dsumkbn';\nsetReadOnly( ns, 'dsumkbn', dsumkbn );\n\n/**\n* @name dsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumkbn2}\n*/\nimport dsumkbn2 from './../../../ext/base/dsumkbn2';\nsetReadOnly( ns, 'dsumkbn2', dsumkbn2 );\n\n/**\n* @name dsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumors}\n*/\nimport dsumors from './../../../ext/base/dsumors';\nsetReadOnly( ns, 'dsumors', dsumors );\n\n/**\n* @name dsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumpw}\n*/\nimport dsumpw from './../../../ext/base/dsumpw';\nsetReadOnly( ns, 'dsumpw', dsumpw );\n\n/**\n* @name gapx\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapx}\n*/\nimport gapx from './../../../ext/base/gapx';\nsetReadOnly( ns, 'gapx', gapx );\n\n/**\n* @name gapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsum}\n*/\nimport gapxsum from './../../../ext/base/gapxsum';\nsetReadOnly( ns, 'gapxsum', gapxsum );\n\n/**\n* @name gapxsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumkbn}\n*/\nimport gapxsumkbn from './../../../ext/base/gapxsumkbn';\nsetReadOnly( ns, 'gapxsumkbn', gapxsumkbn );\n\n/**\n* @name gapxsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumkbn2}\n*/\nimport gapxsumkbn2 from './../../../ext/base/gapxsumkbn2';\nsetReadOnly( ns, 'gapxsumkbn2', gapxsumkbn2 );\n\n/**\n* @name gapxsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumors}\n*/\nimport gapxsumors from './../../../ext/base/gapxsumors';\nsetReadOnly( ns, 'gapxsumors', gapxsumors );\n\n/**\n* @name gapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumpw}\n*/\nimport gapxsumpw from './../../../ext/base/gapxsumpw';\nsetReadOnly( ns, 'gapxsumpw', gapxsumpw );\n\n/**\n* @name gasumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gasumpw}\n*/\nimport gasumpw from './../../../ext/base/gasumpw';\nsetReadOnly( ns, 'gasumpw', gasumpw );\n\n/**\n* @name gcusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusum}\n*/\nimport gcusum from './../../../ext/base/gcusum';\nsetReadOnly( ns, 'gcusum', gcusum );\n\n/**\n* @name gcusumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumkbn}\n*/\nimport gcusumkbn from './../../../ext/base/gcusumkbn';\nsetReadOnly( ns, 'gcusumkbn', gcusumkbn );\n\n/**\n* @name gcusumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumkbn2}\n*/\nimport gcusumkbn2 from './../../../ext/base/gcusumkbn2';\nsetReadOnly( ns, 'gcusumkbn2', gcusumkbn2 );\n\n/**\n* @name gcusumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumors}\n*/\nimport gcusumors from './../../../ext/base/gcusumors';\nsetReadOnly( ns, 'gcusumors', gcusumors );\n\n/**\n* @name gcusumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumpw}\n*/\nimport gcusumpw from './../../../ext/base/gcusumpw';\nsetReadOnly( ns, 'gcusumpw', gcusumpw );\n\n/**\n* @name gfill\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gfill}\n*/\nimport gfill from './../../../ext/base/gfill';\nsetReadOnly( ns, 'gfill', gfill );\n\n/**\n* @name gfillBy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gfill-by}\n*/\nimport gfillBy from './../../../ext/base/gfill-by';\nsetReadOnly( ns, 'gfillBy', gfillBy );\n\n/**\n* @name gnannsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnannsumkbn}\n*/\nimport gnannsumkbn from './../../../ext/base/gnannsumkbn';\nsetReadOnly( ns, 'gnannsumkbn', gnannsumkbn );\n\n/**\n* @name gnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansum}\n*/\nimport gnansum from './../../../ext/base/gnansum';\nsetReadOnly( ns, 'gnansum', gnansum );\n\n/**\n* @name gnansumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumkbn}\n*/\nimport gnansumkbn from './../../../ext/base/gnansumkbn';\nsetReadOnly( ns, 'gnansumkbn', gnansumkbn );\n\n/**\n* @name gnansumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumkbn2}\n*/\nimport gnansumkbn2 from './../../../ext/base/gnansumkbn2';\nsetReadOnly( ns, 'gnansumkbn2', gnansumkbn2 );\n\n/**\n* @name gnansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumors}\n*/\nimport gnansumors from './../../../ext/base/gnansumors';\nsetReadOnly( ns, 'gnansumors', gnansumors );\n\n/**\n* @name gnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumpw}\n*/\nimport gnansumpw from './../../../ext/base/gnansumpw';\nsetReadOnly( ns, 'gnansumpw', gnansumpw );\n\n/**\n* @name grev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/grev}\n*/\nimport grev from './../../../ext/base/grev';\nsetReadOnly( ns, 'grev', grev );\n\n/**\n* @name gsort2hp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsort2hp}\n*/\nimport gsort2hp from './../../../ext/base/gsort2hp';\nsetReadOnly( ns, 'gsort2hp', gsort2hp );\n\n/**\n* @name gsort2ins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsort2ins}\n*/\nimport gsort2ins from './../../../ext/base/gsort2ins';\nsetReadOnly( ns, 'gsort2ins', gsort2ins );\n\n/**\n* @name gsort2sh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsort2sh}\n*/\nimport gsort2sh from './../../../ext/base/gsort2sh';\nsetReadOnly( ns, 'gsort2sh', gsort2sh );\n\n/**\n* @name gsorthp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsorthp}\n*/\nimport gsorthp from './../../../ext/base/gsorthp';\nsetReadOnly( ns, 'gsorthp', gsorthp );\n\n/**\n* @name gsortins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsortins}\n*/\nimport gsortins from './../../../ext/base/gsortins';\nsetReadOnly( ns, 'gsortins', gsortins );\n\n/**\n* @name gsortsh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsortsh}\n*/\nimport gsortsh from './../../../ext/base/gsortsh';\nsetReadOnly( ns, 'gsortsh', gsortsh );\n\n/**\n* @name gsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsum}\n*/\nimport gsum from './../../../ext/base/gsum';\nsetReadOnly( ns, 'gsum', gsum );\n\n/**\n* @name gsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumkbn}\n*/\nimport gsumkbn from './../../../ext/base/gsumkbn';\nsetReadOnly( ns, 'gsumkbn', gsumkbn );\n\n/**\n* @name gsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumkbn2}\n*/\nimport gsumkbn2 from './../../../ext/base/gsumkbn2';\nsetReadOnly( ns, 'gsumkbn2', gsumkbn2 );\n\n/**\n* @name gsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumors}\n*/\nimport gsumors from './../../../ext/base/gsumors';\nsetReadOnly( ns, 'gsumors', gsumors );\n\n/**\n* @name gsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumpw}\n*/\nimport gsumpw from './../../../ext/base/gsumpw';\nsetReadOnly( ns, 'gsumpw', gsumpw );\n\n/**\n* @name sapx\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapx}\n*/\nimport sapx from './../../../ext/base/sapx';\nsetReadOnly( ns, 'sapx', sapx );\n\n/**\n* @name sapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsum}\n*/\nimport sapxsum from './../../../ext/base/sapxsum';\nsetReadOnly( ns, 'sapxsum', sapxsum );\n\n/**\n* @name sapxsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumkbn}\n*/\nimport sapxsumkbn from './../../../ext/base/sapxsumkbn';\nsetReadOnly( ns, 'sapxsumkbn', sapxsumkbn );\n\n/**\n* @name sapxsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumkbn2}\n*/\nimport sapxsumkbn2 from './../../../ext/base/sapxsumkbn2';\nsetReadOnly( ns, 'sapxsumkbn2', sapxsumkbn2 );\n\n/**\n* @name sapxsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumors}\n*/\nimport sapxsumors from './../../../ext/base/sapxsumors';\nsetReadOnly( ns, 'sapxsumors', sapxsumors );\n\n/**\n* @name sapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumpw}\n*/\nimport sapxsumpw from './../../../ext/base/sapxsumpw';\nsetReadOnly( ns, 'sapxsumpw', sapxsumpw );\n\n/**\n* @name sasumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sasumpw}\n*/\nimport sasumpw from './../../../ext/base/sasumpw';\nsetReadOnly( ns, 'sasumpw', sasumpw );\n\n/**\n* @name scusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusum}\n*/\nimport scusum from './../../../ext/base/scusum';\nsetReadOnly( ns, 'scusum', scusum );\n\n/**\n* @name scusumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumkbn}\n*/\nimport scusumkbn from './../../../ext/base/scusumkbn';\nsetReadOnly( ns, 'scusumkbn', scusumkbn );\n\n/**\n* @name scusumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumkbn2}\n*/\nimport scusumkbn2 from './../../../ext/base/scusumkbn2';\nsetReadOnly( ns, 'scusumkbn2', scusumkbn2 );\n\n/**\n* @name scusumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumors}\n*/\nimport scusumors from './../../../ext/base/scusumors';\nsetReadOnly( ns, 'scusumors', scusumors );\n\n/**\n* @name scusumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumpw}\n*/\nimport scusumpw from './../../../ext/base/scusumpw';\nsetReadOnly( ns, 'scusumpw', scusumpw );\n\n/**\n* @name sdsapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsapxsum}\n*/\nimport sdsapxsum from './../../../ext/base/sdsapxsum';\nsetReadOnly( ns, 'sdsapxsum', sdsapxsum );\n\n/**\n* @name sdsapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsapxsumpw}\n*/\nimport sdsapxsumpw from './../../../ext/base/sdsapxsumpw';\nsetReadOnly( ns, 'sdsapxsumpw', sdsapxsumpw );\n\n/**\n* @name sdsnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsnansum}\n*/\nimport sdsnansum from './../../../ext/base/sdsnansum';\nsetReadOnly( ns, 'sdsnansum', sdsnansum );\n\n/**\n* @name sdsnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsnansumpw}\n*/\nimport sdsnansumpw from './../../../ext/base/sdsnansumpw';\nsetReadOnly( ns, 'sdsnansumpw', sdsnansumpw );\n\n/**\n* @name sdssum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdssum}\n*/\nimport sdssum from './../../../ext/base/sdssum';\nsetReadOnly( ns, 'sdssum', sdssum );\n\n/**\n* @name sdssumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdssumpw}\n*/\nimport sdssumpw from './../../../ext/base/sdssumpw';\nsetReadOnly( ns, 'sdssumpw', sdssumpw );\n\n/**\n* @name sfill\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sfill}\n*/\nimport sfill from './../../../ext/base/sfill';\nsetReadOnly( ns, 'sfill', sfill );\n\n/**\n* @name snansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansum}\n*/\nimport snansum from './../../../ext/base/snansum';\nsetReadOnly( ns, 'snansum', snansum );\n\n/**\n* @name snansumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumkbn}\n*/\nimport snansumkbn from './../../../ext/base/snansumkbn';\nsetReadOnly( ns, 'snansumkbn', snansumkbn );\n\n/**\n* @name snansumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumkbn2}\n*/\nimport snansumkbn2 from './../../../ext/base/snansumkbn2';\nsetReadOnly( ns, 'snansumkbn2', snansumkbn2 );\n\n/**\n* @name snansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumors}\n*/\nimport snansumors from './../../../ext/base/snansumors';\nsetReadOnly( ns, 'snansumors', snansumors );\n\n/**\n* @name snansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumpw}\n*/\nimport snansumpw from './../../../ext/base/snansumpw';\nsetReadOnly( ns, 'snansumpw', snansumpw );\n\n/**\n* @name srev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/srev}\n*/\nimport srev from './../../../ext/base/srev';\nsetReadOnly( ns, 'srev', srev );\n\n/**\n* @name ssort2hp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssort2hp}\n*/\nimport ssort2hp from './../../../ext/base/ssort2hp';\nsetReadOnly( ns, 'ssort2hp', ssort2hp );\n\n/**\n* @name ssort2ins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssort2ins}\n*/\nimport ssort2ins from './../../../ext/base/ssort2ins';\nsetReadOnly( ns, 'ssort2ins', ssort2ins );\n\n/**\n* @name ssort2sh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssort2sh}\n*/\nimport ssort2sh from './../../../ext/base/ssort2sh';\nsetReadOnly( ns, 'ssort2sh', ssort2sh );\n\n/**\n* @name ssorthp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssorthp}\n*/\nimport ssorthp from './../../../ext/base/ssorthp';\nsetReadOnly( ns, 'ssorthp', ssorthp );\n\n/**\n* @name ssortins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssortins}\n*/\nimport ssortins from './../../../ext/base/ssortins';\nsetReadOnly( ns, 'ssortins', ssortins );\n\n/**\n* @name ssortsh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssortsh}\n*/\nimport ssortsh from './../../../ext/base/ssortsh';\nsetReadOnly( ns, 'ssortsh', ssortsh );\n\n/**\n* @name ssum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssum}\n*/\nimport ssum from './../../../ext/base/ssum';\nsetReadOnly( ns, 'ssum', ssum );\n\n/**\n* @name ssumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumkbn}\n*/\nimport ssumkbn from './../../../ext/base/ssumkbn';\nsetReadOnly( ns, 'ssumkbn', ssumkbn );\n\n/**\n* @name ssumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumkbn2}\n*/\nimport ssumkbn2 from './../../../ext/base/ssumkbn2';\nsetReadOnly( ns, 'ssumkbn2', ssumkbn2 );\n\n/**\n* @name ssumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumors}\n*/\nimport ssumors from './../../../ext/base/ssumors';\nsetReadOnly( ns, 'ssumors', ssumors );\n\n/**\n* @name ssumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumpw}\n*/\nimport ssumpw from './../../../ext/base/ssumpw';\nsetReadOnly( ns, 'ssumpw', ssumpw );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var out = [ 0.0, 0 ];\n*\n* var v = gnannsumkbn( x.length, x, 1, out, 1 );\n* // returns [ 1.0, 3 ]\n*/\nfunction gnannsumkbn( N, x, strideX, out, strideOut ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar io = stride2offset( 2, strideOut );\n\treturn ndarray( N, x, strideX, ix, out, strideOut, io );\n}\n\n\n// EXPORTS //\n\nexport default gnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/ext/base}\n*/\nimport base from './../../ext/base';\nsetReadOnly( ns, 'base', base );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isCollection from '@stdlib/assert/is-collection';\nimport isFloat64Array from '@stdlib/assert/is-float64array';\nimport isFloat32Array from '@stdlib/assert/is-float32array';\nimport format from '@stdlib/string/format';\nimport { ndarray as ddot } from './../../base/ddot';\nimport { ndarray as sdot } from './../../base/sdot';\nimport { ndarray as dot } from './../../base/gdot';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of vectors `x` and `y`.\n*\n* ## Notes\n*\n* -   In general, for best performance, especially for large vectors, provide 1-dimensional `ndarrays` whose underlying data type is either `float64` or `float32`.\n*\n* @param {(Collection|VectorLike)} x - first input array\n* @param {(Collection|VectorLike)} y - second input array\n* @throws {TypeError} first argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {TypeError} second argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {RangeError} input arrays must be the same length\n* @returns {number} dot product\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* var z = gdot( x, y );\n* // returns -5.0\n*/\nfunction gdot( x, y ) {\n\tvar isxf64;\n\tvar isxf32;\n\tvar isyf64;\n\tvar isyf32;\n\tvar isxa;\n\tvar isxv;\n\tvar isya;\n\tvar isyv;\n\n\tisxa = isndarrayLike( x );\n\tisya = isndarrayLike( y );\n\tisxv = isxa && x.ndims === 1 && x.strides.length === 1; // is ndarray-like vector?\n\tisyv = isya && y.ndims === 1 && y.strides.length === 1; // is ndarray-like vector?\n\tif ( isxv ) {\n\t\tisxf64 = isFloat64Array( x.data );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x.data );\n\t} else if ( isxa === false && isCollection( x ) ) {\n\t\tisxf64 = isFloat64Array( x );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( isyv ) {\n\t\tisyf64 = isFloat64Array( y.data );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y.data );\n\t} else if ( isya === false && isCollection( y ) ) {\n\t\tisyf64 = isFloat64Array( y );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', y ) );\n\t}\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( format( 'invalid argument. Arrays must be the same length. First argument length: `%u`. Second argument length: `%u`.', x.length, y.length ) );\n\t}\n\tif ( isxv && isyv ) {\n\t\tif ( isxf64 && isyf64 ) {\n\t\t\treturn ddot( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t}\n\t\tif ( isxf32 && isyf32 ) {\n\t\t\treturn sdot( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t}\n\t\treturn dot( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t}\n\tif ( isxv ) {\n\t\treturn dot( x.length, x.data, x.strides[ 0 ], x.offset, y, 1, 0 );\n\t}\n\tif ( isyv ) {\n\t\treturn dot( x.length, x, 1, 0, y.data, y.strides[ 0 ], y.offset );\n\t}\n\treturn dot( x.length, x, 1, 0, y, 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default gdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isCollection from '@stdlib/assert/is-collection';\nimport isFloat64Array from '@stdlib/assert/is-float64array';\nimport isFloat32Array from '@stdlib/assert/is-float32array';\nimport format from '@stdlib/string/format';\nimport { ndarray as dswap } from './../../base/dswap';\nimport { ndarray as sswap } from './../../base/sswap';\nimport { ndarray as swap } from './../../base/gswap';\n\n\n// MAIN //\n\n/**\n* Interchanges two vectors.\n*\n* ## Notes\n*\n* -   In general, for best performance, especially for large vectors, provide 1-dimensional `ndarrays` whose underlying data type is either `float64` or `float32`.\n*\n* @param {(Collection|VectorLike)} x - first input array\n* @param {(Collection|VectorLike)} y - second input array\n* @throws {TypeError} first argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {TypeError} second argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {RangeError} input arrays must be the same length\n* @returns {(Collection|VectorLike)} `y`\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* gswap( x, y );\n* // x => [ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n* // y => [ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nfunction gswap( x, y ) {\n\tvar isxf64;\n\tvar isxf32;\n\tvar isyf64;\n\tvar isyf32;\n\tvar isxa;\n\tvar isxv;\n\tvar isya;\n\tvar isyv;\n\n\tisxa = isndarrayLike( x );\n\tisya = isndarrayLike( y );\n\tisxv = isxa && x.ndims === 1 && x.strides.length === 1; // is ndarray-like vector?\n\tisyv = isya && y.ndims === 1 && y.strides.length === 1; // is ndarray-like vector?\n\tif ( isxv ) {\n\t\tisxf64 = isFloat64Array( x.data );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x.data );\n\t} else if ( isxa === false && isCollection( x ) ) {\n\t\tisxf64 = isFloat64Array( x );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( isyv ) {\n\t\tisyf64 = isFloat64Array( y.data );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y.data );\n\t} else if ( isya === false && isCollection( y ) ) {\n\t\tisyf64 = isFloat64Array( y );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', y ) );\n\t}\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( format( 'invalid argument. Arrays must be the same length. First argument length: `%u`. Second argument length: `%u`.', x.length, y.length ) );\n\t}\n\tif ( isxv && isyv ) {\n\t\tif ( isxf64 && isyf64 ) {\n\t\t\tdswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\tif ( isxf32 && isyf32 ) {\n\t\t\tsswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\tswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\treturn y;\n\t}\n\tif ( isxv ) {\n\t\tswap( x.length, x.data, x.strides[ 0 ], x.offset, y, 1, 0 );\n\t\treturn y;\n\t}\n\tif ( isyv ) {\n\t\tswap( x.length, x, 1, 0, y.data, y.strides[ 0 ], y.offset );\n\t\treturn y;\n\t}\n\tswap( x.length, x, 1, 0, y, 1, 0 );\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat32ndarrayLike from '@stdlib/assert/is-float32ndarray-like';\nimport { isPrimitive as isNegativeInteger } from '@stdlib/assert/is-negative-integer';\nimport min from '@stdlib/math/base/special/fast/min';\nimport without from '@stdlib/array/base/without';\nimport numel from '@stdlib/ndarray/base/numel';\nimport normalizeIndex from '@stdlib/ndarray/base/normalize-index';\nimport maybeBroadcastArrays from '@stdlib/ndarray/base/maybe-broadcast-arrays';\nimport ndarraylike2ndarray from '@stdlib/ndarray/base/ndarraylike2ndarray';\nimport nditerStacks from '@stdlib/ndarray/iter/stacks';\nimport empty from '@stdlib/ndarray/empty';\nimport { ndarray as base } from './../../base/sdot';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two single-precision floating-point vectors.\n*\n* @param {ndarrayLike} x - first input array\n* @param {ndarrayLike} y - second input array\n* @param {NegativeInteger} [dim=-1] - dimension for which to compute the dot product\n* @throws {TypeError} first argument must be a ndarray containing single-precision floating-point numbers\n* @throws {TypeError} first argument must have at least one dimension\n* @throws {TypeError} second argument must be a ndarray containing single-precision floating-point numbers\n* @throws {TypeError} second argument must have at least one dimension\n* @throws {TypeError} third argument must be a negative integer\n* @throws {Error} input arrays must be broadcast compatible\n* @throws {RangeError} the size of the contracted dimension must be the same for both input arrays\n* @throws {RangeError} third argument is out-of-bounds\n* @returns {ndarray} ndarray containing the dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* var z = sdot( x, y );\n* // returns <ndarray>\n*\n* var v = z.get();\n* // returns -5.0\n*/\nfunction sdot( x, y ) {\n\tvar dim;\n\tvar xsh;\n\tvar ysh;\n\tvar osh;\n\tvar xit;\n\tvar yit;\n\tvar out;\n\tvar tmp;\n\tvar xc;\n\tvar yc;\n\tvar vx;\n\tvar vy;\n\tvar dm;\n\tvar S;\n\tvar v;\n\tvar i;\n\n\tif ( !isFloat32ndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray containing single-precision floating-point numbers. Value: `%s`.', x ) );\n\t}\n\tif ( !isFloat32ndarrayLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray containing single-precision floating-point numbers. Value: `%s`.', y ) );\n\t}\n\t// Convert the input arrays to \"base\" ndarrays:\n\txc = ndarraylike2ndarray( x );\n\tyc = ndarraylike2ndarray( y );\n\n\t// Resolve the input array shapes:\n\txsh = xc.shape;\n\tysh = yc.shape;\n\n\t// Validate that we've been provided non-zero-dimensional arrays...\n\tif ( xsh.length < 1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have at least one dimension.' ) );\n\t}\n\tif ( ysh.length < 1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have at least one dimension.' ) );\n\t}\n\t// Validate that the dimension argument is a negative integer...\n\tif ( arguments.length > 2 ) {\n\t\tdim = arguments[ 2 ];\n\t\tif ( !isNegativeInteger( dim ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a negative integer. Value: `%s`.', dim ) );\n\t\t}\n\t} else {\n\t\tdim = -1;\n\t}\n\t// Validate that a provided dimension index is within bounds **before** broadcasting...\n\tdm = min( xsh.length, ysh.length ) - 1;\n\tdim = normalizeIndex( dim, dm );\n\tif ( dim === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a value on the interval: [%d,%d]. Value: `%d`.', -dm, -1, arguments[ 2 ] ) );\n\t}\n\t// Validate that the contracted dimension size is the same for both input arrays...\n\tS = xsh[ dim ];\n\tif ( ysh[ dim ] !== S ) {\n\t\tthrow new RangeError( format( 'invalid argument. The size of the contracted dimension must be the same for both input ndarrays. Dim(%s,%d) = %d. Dim(%s,%d) = %d.', 'x', dim, S, 'y', dim, ysh[ dim ] ) );\n\t}\n\t// Broadcast the input arrays to a common shape....\n\ttry {\n\t\ttmp = maybeBroadcastArrays( [ xc, yc ] );\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tthrow new Error( format( 'invalid arguments. Input ndarrays must be broadcast compatible. Shape(%s) = (%s). Shape(%s) = (%s).', 'x', xsh.join( ',' ), 'y', ysh.join( ',' ) ) );\n\t}\n\txc = tmp[ 0 ];\n\tyc = tmp[ 1 ];\n\n\t// Resolve the output array shape by excluding the contracted dimension:\n\tosh = without( xc.shape, dim );\n\n\t// Allocate an empty output array:\n\tout = empty( osh, {\n\t\t'dtype': xc.dtype,\n\t\t'order': xc.order\n\t});\n\n\t// If we are only provided one-dimensional input arrays, we can skip iterating over stacks...\n\tif ( osh.length === 0 ) {\n\t\tv = base( S, xc.data, xc.strides[0], xc.offset, yc.data, yc.strides[0], yc.offset ); // eslint-disable-line max-len\n\t\tout.iset( v );\n\t\treturn out;\n\t}\n\t// Create iterators for iterating over stacks of vectors:\n\txit = nditerStacks( xc, [ dim ] );\n\tyit = nditerStacks( yc, [ dim ] );\n\n\t// Compute the dot product for each pair of vectors...\n\tfor ( i = 0; i < numel( osh ); i++ ) {\n\t\tvx = xit.next().value;\n\t\tvy = yit.next().value;\n\t\tv = base( S, vx.data, vx.strides[0], vx.offset, vy.data, vy.strides[0], vy.offset ); // eslint-disable-line max-len\n\t\tout.iset( i, v );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default sdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as base } from './../../base/sswap';\nimport factory from './../../tools/swap-factory';\n\n\n// MAIN //\n\n/**\n* Interchanges two single-precision floating-point vectors.\n*\n* @name sswap\n* @type {Function}\n* @param {ndarrayLike} x - first input array\n* @param {ndarrayLike} y - second input array\n* @param {NegativeInteger} [dim=-1] - dimension along which to interchange elements\n* @throws {TypeError} first argument must be a ndarray containing single-precision floating-point numbers\n* @throws {TypeError} first argument must have at least one dimension\n* @throws {TypeError} second argument must be a ndarray containing single-precision floating-point numbers\n* @throws {TypeError} second argument must have at least one dimension\n* @throws {Error} both input arrays must have the same shape\n* @throws {RangeError} third argument is out-of-bounds\n* @throws {Error} cannot write to read-only array\n* @returns {ndarrayLike} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* sswap( x, y );\n*\n* var xbuf = x.data;\n* // returns <Float32Array>[ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n*\n* var ybuf = y.data;\n* // returns <Float32Array>[ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nvar sswap = factory( base, 'float32' );\n\n\n// EXPORTS //\n\nexport default sswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/base}\n*/\nimport base from './../base';\nsetReadOnly( ns, 'base', base );\n\n/**\n* @name ddot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ddot}\n*/\nimport ddot from './../ddot';\nsetReadOnly( ns, 'ddot', ddot );\n\n/**\n* @name dswap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/dswap}\n*/\nimport dswap from './../dswap';\nsetReadOnly( ns, 'dswap', dswap );\n\n/**\n* @name ext\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/ext}\n*/\nimport ext from './../ext';\nsetReadOnly( ns, 'ext', ext );\n\n/**\n* @name gdot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/gdot}\n*/\nimport gdot from './../gdot';\nsetReadOnly( ns, 'gdot', gdot );\n\n/**\n* @name gswap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/gswap}\n*/\nimport gswap from './../gswap';\nsetReadOnly( ns, 'gswap', gswap );\n\n/**\n* @name sdot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/sdot}\n*/\nimport sdot from './../sdot';\nsetReadOnly( ns, 'sdot', sdot );\n\n/**\n* @name sswap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/sswap}\n*/\nimport sswap from './../sswap';\nsetReadOnly( ns, 'sswap', sswap );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["diagonalTypes","DATA","slice","enumerated","unit","setReadOnly","main","enumeration","isDiagonalType","contains","layouts","isLayout","matrixTriangles","upper","lower","isMatrixTriangle","operationSides","left","right","isOperationSide","transpose","isTransposeOperation","ops","ns","scabs1","c","absf","realf","imagf","caxpy","N","ca","cx","strideX","offsetX","cy","strideY","offsetY","ix","iy","i","set","caddf","cmulf","get","ndarray","stride2offset","ccopy","x","y","viewX","viewY","sx","sy","reinterpret","cscal","csrot","s","tmp","f32","cswap","dasum","stride","offset","sum","abs","M","daxpy","alpha","m","dcabs1","z","real","imag","dcopy","ddot","dot","hash","objectInverse","duplicates","enum2str","value","v","ENUM","str2enum","diagonal","tsml","tbig","ssml","sbig","dnrm2","notbig","sumsq","abig","amed","asml","ymax","ymin","scl","ax","abs2","FLOAT64_MAX","sqrt","drot","drotg","a","b","out","scale","sign","aa","ab","r","copysign","fcn","Float64Array","drotm","param","dflag","dh11","dh12","dh21","dh22","w","assign","dscal","dsdot","dfill","dspmv","order","uplo","AP","offsetAP","beta","temp1","temp2","jx","jy","kk","kx","ky","j","k","TypeError","format","RangeError","base","tryRequire","join","require$$0","dspmv$1","isError","dswap","dsymv","A","LDA","jmin","jmax","ox","oy","max","dsymv$1","dsyr","strideA1","strideA2","offsetA","isrm","ix0","ix1","sa0","sa1","i0","i1","oa","isRowMajor","sa2","dsyr$1","dsyr2","tmp1","tmp2","iy0","iy1","dsyr2$1","dtrmv","trans","diag","nonunit","isDiagonal","dtrmv$1","dznrm2","zx","dznrm2$1","gasum","gaxpy","gcopy","xbuf","ybuf","data","accessors","arraylike2object","accessorProtocol","gdot","gnrm2","ssq","pow","gscal","gswap","idamax","dmax","idx","isamax","smax","layout","operation","sasum","saxpy","float64ToFloat32","scasum","stemp","scasum$1","scnrm2","abs2f","FLOAT32_MAX","sqrtf","scnrm2$1","scopy","sdot","sdsdot","scalar","sfill","sscal","sgemv","xlen","ylen","isMatrixTranspose","sgemv$1","snrm2","srot","srotg","copysignf","Float32Array","srotm","sflag","sh11","sh12","sh21","sh22","sspmv","sspmv$1","sswap","ssymv","ssymv$1","ssyr","ssyr2","ssyr2$1","strmv","strmv$1","zaxpy","za","zy","re","im","muladd","zaxpy$1","zcopy","zdrot","zscal","strideZX","offsetZX","view","re1","im1","re2","im2","cmul","zswap","blas","dim","xsh","ysh","osh","xit","yit","xc","yc","vx","vy","dm","S","isFloat64ndarrayLike","ndarraylike2ndarray","shape","length","arguments","isNegativeInteger","min","normalizeIndex","maybeBroadcastArrays","err","Error","without","empty","dtype","strides","iset","nditerStacks","numel","next","factory","isValid","isFunction","isDataType","isndarrayLikeWithDataType","isndarrayLike","isReadOnly","hasEqualValues","assert","diagonalTypeEnum2Str","t","diagonalTypeStr2Enum","layoutEnum2Str","layoutStr2Enum","matrixTriangleEnum2Str","matrixTriangleStr2Enum","operationSideEnum2Str","operationSideStr2Enum","transposeOperationEnum2Str","transposeOperationStr2Enum","transposeOperations","dapx","dapxsumkbn","dapxsum","dapxsumkbn2","ccs","cs","cc","dapxsumors","BLOCKSIZE","dapxsumpw","s0","s1","s2","s3","s4","s5","s6","s7","n","floor","dasumpw","dcusumkbn","dcusum","dcusumkbn2","dcusumors","dcusumpw","dnanasumors","isnan","dnanasum","dnannsumkbn","strideOut","offsetOut","dnannsum","dnannsumkbn2","io","dnannsumors","sumpw","dnannsumpw","dnansumkbn","dnansum","dnansumkbn2","dnansumors","dnansumpw","drev","dsapxsumpw","dsapxsum","dsnannsumors","dsnansumpw","isnanf","dsnansum","dsnansumors","dsort2hp","parent","child","v1","v2","tx","ty","isPositiveZero","dsort2ins","flg","fx","lx","fy","ly","ux","isNegativeZero","NGAPS","GAPS","dsort2sh","gap","dsorthp","dsortins","u","dsortsh","dssumpw","dssum","dssumors","dsumkbn","dsum","dsumkbn2","dsumors","dsumpw","gapx","o","gapxsumkbn","gapxsum","gapxsumkbn2","gapxsumors","gapxsumpw","gasumpw","gcusumkbn","xget","yset","gcusum","gcusumkbn2","gcusumors","gcusumpw","yget","gfill","gfillBy","clbk","thisArg","call","gnannsumkbn","oo","obuf","oset","gnansumkbn","gnansum","gnansumkbn2","gnansumors","gnansumpw","grev","gsort2hp","xset","gsort2ins","gsort2sh","gsorthp","gsortins","gsortsh","gsumkbn","gsum","gsumkbn2","gsumors","gsumpw","sapx","sapxsumkbn","sapxsum","sapxsumkbn2","sapxsumors","sapxsumpw","sasumpw","scusumkbn","scusum","scusumkbn2","scusumors","scusumpw","sdsapxsumpw","sdsapxsum","sdsnansumpw","sdsnansum","sdssumpw","sdssum","snansumkbn","snansum","snansumkbn2","snansumors","snansumpw","srev","ssort2hp","isPositiveZerof","ssort2ins","isNegativeZerof","ssort2sh","ssorthp","ssortins","ssortsh","ssumkbn","ssum","ssumkbn2","ssumors","ssumpw","isxf64","isxf32","isyf64","isyf32","isxa","isxv","isya","isyv","ndims","isFloat64Array","isFloat32Array","isCollection","swap","isFloat32ndarrayLike","ext"],"mappings":"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"}