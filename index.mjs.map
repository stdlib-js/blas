{"version":3,"file":"index.mjs","sources":["../base/diagonal-types/lib/main.js","../base/diagonal-types/lib/enum.js","../base/diagonal-types/lib/index.js","../base/assert/is-diagonal-type/lib/main.js","../base/layouts/lib/main.js","../base/layouts/lib/enum.js","../base/layouts/lib/index.js","../base/assert/is-layout/lib/main.js","../base/matrix-triangles/lib/main.js","../base/matrix-triangles/lib/enum.js","../base/matrix-triangles/lib/index.js","../base/assert/is-matrix-triangle/lib/main.js","../base/operation-sides/lib/main.js","../base/operation-sides/lib/enum.js","../base/operation-sides/lib/index.js","../base/assert/is-operation-side/lib/main.js","../base/transpose-operations/lib/main.js","../base/transpose-operations/lib/enum.js","../base/transpose-operations/lib/index.js","../base/assert/is-transpose-operation/lib/main.js","../base/assert/lib/index.js","../base/scabs1/lib/main.js","../base/caxpy/lib/ndarray.js","../base/caxpy/lib/caxpy.js","../base/ccopy/lib/ndarray.js","../base/ccopy/lib/ccopy.js","../base/cscal/lib/ndarray.js","../base/cscal/lib/cscal.js","../base/csrot/lib/ndarray.js","../base/csrot/lib/csrot.js","../base/cswap/lib/ndarray.js","../base/cswap/lib/cswap.js","../base/dasum/lib/ndarray.js","../base/dasum/lib/dasum.js","../base/caxpy/lib/main.js","../base/ccopy/lib/main.js","../base/cscal/lib/main.js","../base/csrot/lib/main.js","../base/cswap/lib/main.js","../base/dasum/lib/main.js","../base/daxpy/lib/ndarray.js","../base/daxpy/lib/daxpy.js","../base/dcabs1/lib/main.js","../base/daxpy/lib/main.js","../base/dcopy/lib/ndarray.js","../base/dcopy/lib/dcopy.js","../base/dcopy/lib/main.js","../base/ddot/lib/ndarray.js","../base/ddot/lib/ddot.js","../base/ddot/lib/main.js","../base/dgemm/lib/base.js","../base/dgemm/lib/dgemm.js","../base/dgemm/lib/main.js","../base/dgemm/lib/ndarray.js","../base/dgemm/lib/index.js","../aa874f122b270b5c9109d714b9210e","../ext/base/dfill/lib/ndarray.js","../ext/base/dfill/lib/dfill.js","../ext/base/dfill/lib/main.js","../base/dscal/lib/ndarray.js","../base/dscal/lib/dscal.js","../base/dgemv/lib/base.js","../base/dgemv/lib/dgemv.js","../base/dscal/lib/main.js","../base/dgemv/lib/main.js","../base/dgemv/lib/ndarray.js","../base/dgemv/lib/index.js","../45b4721b6900b458a2604f9062f54f","../base/diagonal-type-enum2str/lib/main.js","../base/diagonal-type-str2enum/lib/main.js","../base/dnrm2/lib/ndarray.js","../base/dnrm2/lib/dnrm2.js","../base/drot/lib/ndarray.js","../base/drot/lib/drot.js","../base/drotg/lib/assign.js","../base/drotg/lib/main.js","../base/drotm/lib/ndarray.js","../base/drotm/lib/drotm.js","../base/dnrm2/lib/main.js","../base/drot/lib/main.js","../base/drotg/lib/index.js","../base/drotm/lib/main.js","../base/dsdot/lib/ndarray.js","../base/dsdot/lib/dsdot.js","../base/dsdot/lib/main.js","../base/dspmv/lib/base.js","../base/dspmv/lib/dspmv.js","../base/dspmv/lib/main.js","../base/dspmv/lib/ndarray.js","../base/dspmv/lib/index.js","../c296733b1d48cab53ff8259716c58d","../base/dspr/lib/base.js","../base/dspr/lib/dspr.js","../base/dspr/lib/main.js","../base/dspr/lib/ndarray.js","../base/dspr/lib/index.js","../58074b5ee1da45c8309c11a3743b28","../base/dswap/lib/ndarray.js","../base/dswap/lib/dswap.js","../base/dswap/lib/main.js","../base/dsymv/lib/dsymv.js","../base/dsymv/lib/main.js","../base/dsymv/lib/ndarray.js","../base/dsymv/lib/index.js","../18b3a4b56d0f634001b4aa3b4d049c","../base/dsyr/lib/base.js","../base/dsyr/lib/dsyr.js","../base/dsyr/lib/main.js","../base/dsyr/lib/ndarray.js","../base/dsyr/lib/index.js","../d2c9e136afd1866ce7e8ecc0ff1f4d","../base/dsyr2/lib/base.js","../base/dsyr2/lib/dsyr2.js","../base/dsyr2/lib/main.js","../base/dsyr2/lib/ndarray.js","../base/dsyr2/lib/index.js","../d2b7e0fdb8a654669c8d10dcbbc446","../base/dtrmv/lib/base.js","../base/dtrmv/lib/dtrmv.js","../base/dtrmv/lib/main.js","../base/dtrmv/lib/ndarray.js","../base/dtrmv/lib/index.js","../57593e8e9857ac6111a7cd55a4161d","../base/dtrsv/lib/base.js","../base/dtrsv/lib/dtrsv.js","../base/dtrsv/lib/main.js","../base/dtrsv/lib/ndarray.js","../base/dtrsv/lib/index.js","../93cabc12cfde8df97b037f48d9f8af","../base/dznrm2/lib/ndarray.js","../base/dznrm2/lib/dznrm2.js","../base/dznrm2/lib/main.js","../base/dznrm2/lib/index.js","../9c31214df93e147b53228dca976e2b","../base/gasum/lib/accessors.js","../base/gasum/lib/ndarray.js","../base/gasum/lib/main.js","../base/gasum/lib/index.js","../base/gaxpy/lib/main.js","../base/gcopy/lib/accessors.js","../base/gaxpy/lib/index.js","../base/gaxpy/lib/ndarray.js","../base/gcopy/lib/main.js","../base/gcopy/lib/index.js","../base/gcopy/lib/ndarray.js","../base/gdot/lib/main.js","../base/gdot/lib/ndarray.js","../base/gnrm2/lib/main.js","../base/gdot/lib/index.js","../base/gnrm2/lib/index.js","../base/gnrm2/lib/ndarray.js","../base/gscal/lib/accessors.js","../base/gscal/lib/ndarray.js","../base/gscal/lib/main.js","../base/gswap/lib/accessors.js","../base/gscal/lib/index.js","../base/gswap/lib/main.js","../base/gswap/lib/ndarray.js","../base/idamax/lib/ndarray.js","../base/idamax/lib/idamax.js","../base/isamax/lib/ndarray.js","../base/isamax/lib/isamax.js","../base/gswap/lib/index.js","../base/idamax/lib/main.js","../base/isamax/lib/main.js","../base/layout-enum2str/lib/main.js","../base/layout-str2enum/lib/main.js","../base/matrix-triangle-enum2str/lib/main.js","../base/matrix-triangle-str2enum/lib/main.js","../base/operation-side-enum2str/lib/main.js","../base/operation-side-str2enum/lib/main.js","../base/sasum/lib/ndarray.js","../base/sasum/lib/sasum.js","../base/sasum/lib/main.js","../base/saxpy/lib/ndarray.js","../base/saxpy/lib/saxpy.js","../base/saxpy/lib/main.js","../base/scasum/lib/ndarray.js","../base/scasum/lib/scasum.js","../base/scasum/lib/main.js","../base/scasum/lib/index.js","../a493cfa3c810c623b1dce60fdb6c66","../base/scnrm2/lib/ndarray.js","../base/scnrm2/lib/scnrm2.js","../base/scnrm2/lib/main.js","../base/scnrm2/lib/index.js","../8ac7964fa70de2cf6340f7d9469c19","../base/scopy/lib/ndarray.js","../base/scopy/lib/scopy.js","../base/sdot/lib/ndarray.js","../base/sdot/lib/sdot.js","../base/scopy/lib/main.js","../base/sdot/lib/main.js","../base/sdsdot/lib/ndarray.js","../base/sdsdot/lib/sdsdot.js","../base/sdsdot/lib/main.js","../e92e1a0dd3c6548237a0500c3c736b","../base/sgemm/lib/base.js","../base/sgemm/lib/sgemm.js","../base/sgemm/lib/main.js","../base/sgemm/lib/ndarray.js","../base/sgemm/lib/index.js","../ext/base/sfill/lib/ndarray.js","../ext/base/sfill/lib/sfill.js","../ext/base/sfill/lib/main.js","../base/sscal/lib/ndarray.js","../base/sscal/lib/sscal.js","../base/sgemv/lib/base.js","../base/sgemv/lib/sgemv.js","../base/sscal/lib/main.js","../base/sgemv/lib/main.js","../base/sgemv/lib/ndarray.js","../base/sgemv/lib/index.js","../0d681d3e4f7eed31f1477f48354dec","../base/snrm2/lib/ndarray.js","../base/snrm2/lib/snrm2.js","../base/srot/lib/ndarray.js","../base/srot/lib/srot.js","../base/srotg/lib/assign.js","../base/srotg/lib/main.js","../base/srotm/lib/ndarray.js","../base/srotm/lib/srotm.js","../base/snrm2/lib/main.js","../base/srot/lib/main.js","../base/srotg/lib/index.js","../base/srotm/lib/main.js","../base/sspmv/lib/sspmv.js","../base/sspmv/lib/main.js","../base/sspmv/lib/ndarray.js","../base/sspmv/lib/index.js","../ee7ffe4338332db13b2dabf6c20242","../base/sspr/lib/base.js","../base/sspr/lib/sspr.js","../base/sspr/lib/main.js","../base/sspr/lib/ndarray.js","../base/sswap/lib/ndarray.js","../base/sswap/lib/sswap.js","../base/sswap/lib/main.js","../base/ssymv/lib/ssymv.js","../base/ssymv/lib/main.js","../base/ssymv/lib/ndarray.js","../base/ssymv/lib/index.js","../204f1e07e7bc55406525e1affd4663","../base/ssyr/lib/base.js","../base/ssyr/lib/ssyr.js","../base/ssyr/lib/main.js","../base/ssyr/lib/ndarray.js","../base/ssyr2/lib/base.js","../base/ssyr2/lib/ssyr2.js","../base/ssyr2/lib/main.js","../base/ssyr2/lib/ndarray.js","../base/ssyr2/lib/index.js","../aa333ede88664829bd21542fd81e67","../base/strmv/lib/base.js","../base/strmv/lib/strmv.js","../base/strmv/lib/main.js","../base/strmv/lib/ndarray.js","../base/strmv/lib/index.js","../5d77c3d6adc82ddb9dd131bd3fb679","../base/strsv/lib/base.js","../base/strsv/lib/strsv.js","../base/strsv/lib/main.js","../base/strsv/lib/ndarray.js","../base/strsv/lib/index.js","../c933b3e4eaef5ec0079db7569d6f30","../base/transpose-operation-enum2str/lib/main.js","../base/transpose-operation-str2enum/lib/main.js","../base/zcopy/lib/ndarray.js","../base/zcopy/lib/zcopy.js","../base/zdrot/lib/ndarray.js","../base/zdrot/lib/zdrot.js","../base/zswap/lib/ndarray.js","../base/zswap/lib/zswap.js","../base/zcopy/lib/main.js","../base/zdrot/lib/main.js","../base/zswap/lib/main.js","../base/wasm/lib/index.js","../base/zaxpy/lib/ndarray.js","../base/zaxpy/lib/zaxpy.js","../base/zaxpy/lib/main.js","../base/zaxpy/lib/index.js","../6bda1c2cb872ea7299cb9bf74bebf2","../base/zdscal/lib/ndarray.js","../base/zdscal/lib/zdscal.js","../base/zscal/lib/ndarray.js","../base/zscal/lib/zscal.js","../base/zdscal/lib/main.js","../base/zscal/lib/main.js","../base/lib/index.js","../ddot/lib/main.js","../tools/swap-factory/lib/main.js","../base/diagonal-type-resolve-enum/lib/main.js","../base/diagonal-type-resolve-str/lib/main.js","../base/layout-resolve-enum/lib/main.js","../base/layout-resolve-str/lib/main.js","../base/matrix-triangle-resolve-enum/lib/main.js","../base/matrix-triangle-resolve-str/lib/main.js","../base/operation-side-resolve-enum/lib/main.js","../base/operation-side-resolve-str/lib/main.js","../base/transpose-operation-resolve-enum/lib/main.js","../base/transpose-operation-resolve-str/lib/main.js","../dswap/lib/main.js","../ext/base/dapx/lib/ndarray.js","../ext/base/dapx/lib/dapx.js","../ext/base/dapxsumkbn/lib/ndarray.js","../ext/base/dapxsumkbn/lib/dapxsumkbn.js","../ext/base/dapxsum/lib/ndarray.js","../ext/base/dapxsum/lib/dapxsum.js","../ext/base/dapxsumkbn2/lib/ndarray.js","../ext/base/dapxsumkbn2/lib/dapxsumkbn2.js","../ext/base/dapxsumors/lib/ndarray.js","../ext/base/dapxsumors/lib/dapxsumors.js","../ext/base/dapx/lib/main.js","../ext/base/dapxsumkbn/lib/main.js","../ext/base/dapxsum/lib/main.js","../ext/base/dapxsumkbn2/lib/main.js","../ext/base/dapxsumors/lib/main.js","../ext/base/dapxsumpw/lib/ndarray.js","../ext/base/dapxsumpw/lib/dapxsumpw.js","../ext/base/dapxsumpw/lib/main.js","../ext/base/dasumpw/lib/ndarray.js","../ext/base/dasumpw/lib/dasumpw.js","../ext/base/dcusumkbn/lib/ndarray.js","../ext/base/dcusumkbn/lib/dcusumkbn.js","../ext/base/dcusum/lib/ndarray.js","../ext/base/dcusum/lib/dcusum.js","../ext/base/dcusumkbn2/lib/ndarray.js","../ext/base/dcusumkbn2/lib/dcusumkbn2.js","../ext/base/dcusumors/lib/ndarray.js","../ext/base/dcusumors/lib/dcusumors.js","../ext/base/dasumpw/lib/main.js","../ext/base/dcusumkbn/lib/main.js","../ext/base/dcusum/lib/main.js","../ext/base/dcusumkbn2/lib/main.js","../ext/base/dcusumors/lib/main.js","../ext/base/dcusumpw/lib/ndarray.js","../ext/base/dcusumpw/lib/dcusumpw.js","../ext/base/dnanasumors/lib/ndarray.js","../ext/base/dnanasumors/lib/dnanasumors.js","../ext/base/dnanasum/lib/ndarray.js","../ext/base/dnanasum/lib/dnanasum.js","../ext/base/dnannsumkbn/lib/ndarray.js","../ext/base/dnannsumkbn/lib/dnannsumkbn.js","../ext/base/dnannsum/lib/ndarray.js","../ext/base/dnannsum/lib/dnannsum.js","../ext/base/dnannsumkbn2/lib/ndarray.js","../ext/base/dnannsumkbn2/lib/dnannsumkbn2.js","../ext/base/dnannsumors/lib/ndarray.js","../ext/base/dnannsumors/lib/dnannsumors.js","../ext/base/dcusumpw/lib/main.js","../ext/base/dnanasumors/lib/main.js","../ext/base/dnanasum/lib/main.js","../ext/base/dnannsumkbn/lib/main.js","../ext/base/dnannsum/lib/main.js","../ext/base/dnannsumkbn2/lib/main.js","../ext/base/dnannsumors/lib/main.js","../ext/base/dnannsumpw/lib/sumpw.js","../ext/base/dnannsumpw/lib/ndarray.js","../ext/base/dnannsumpw/lib/dnannsumpw.js","../ext/base/dnansumkbn/lib/ndarray.js","../ext/base/dnansumkbn/lib/dnansumkbn.js","../ext/base/dnansum/lib/ndarray.js","../ext/base/dnansum/lib/dnansum.js","../ext/base/dnansumkbn2/lib/ndarray.js","../ext/base/dnansumkbn2/lib/dnansumkbn2.js","../ext/base/dnansumors/lib/ndarray.js","../ext/base/dnansumors/lib/dnansumors.js","../ext/base/dnannsumpw/lib/main.js","../ext/base/dnansumkbn/lib/main.js","../ext/base/dnansum/lib/main.js","../ext/base/dnansumkbn2/lib/main.js","../ext/base/dnansumors/lib/main.js","../ext/base/dnansumpw/lib/ndarray.js","../ext/base/dnansumpw/lib/dnansumpw.js","../ext/base/dnansumpw/lib/main.js","../ext/base/drev/lib/ndarray.js","../ext/base/drev/lib/drev.js","../ext/base/drev/lib/main.js","../ext/base/dsapxsumpw/lib/ndarray.js","../ext/base/dsapxsumpw/lib/dsapxsumpw.js","../ext/base/dsapxsum/lib/ndarray.js","../ext/base/dsapxsum/lib/dsapxsum.js","../ext/base/dsnannsumors/lib/ndarray.js","../ext/base/dsnannsumors/lib/dsnannsumors.js","../ext/base/dsapxsumpw/lib/main.js","../ext/base/dsapxsum/lib/main.js","../ext/base/dsnannsumors/lib/main.js","../ext/base/dsnansumpw/lib/ndarray.js","../ext/base/dsnansumpw/lib/dsnansumpw.js","../ext/base/dsnansum/lib/ndarray.js","../ext/base/dsnansum/lib/dsnansum.js","../ext/base/dsnansumors/lib/ndarray.js","../ext/base/dsnansumors/lib/dsnansumors.js","../ext/base/dsort2hp/lib/dsort2hp.js","../ext/base/dsort2ins/lib/dsort2ins.js","../ext/base/dsnansumpw/lib/main.js","../ext/base/dsnansum/lib/main.js","../ext/base/dsnansumors/lib/main.js","../ext/base/dsort2hp/lib/main.js","../ext/base/dsort2hp/lib/ndarray.js","../ext/base/dsort2ins/lib/main.js","../ext/base/dsort2ins/lib/ndarray.js","../ext/base/dsort2sh/lib/dsort2sh.js","../ext/base/dsort2sh/lib/ndarray.js","../ext/base/dsorthp/lib/ndarray.js","../ext/base/dsorthp/lib/dsorthp.js","../ext/base/dsortins/lib/ndarray.js","../ext/base/dsortins/lib/dsortins.js","../ext/base/dsort2sh/lib/main.js","../ext/base/dsorthp/lib/main.js","../ext/base/dsortins/lib/main.js","../ext/base/dsortsh/lib/dsortsh.js","../ext/base/dsortsh/lib/ndarray.js","../ext/base/dsortsh/lib/main.js","../ext/base/dssumpw/lib/ndarray.js","../ext/base/dssumpw/lib/dssumpw.js","../ext/base/dssum/lib/ndarray.js","../ext/base/dssum/lib/dssum.js","../ext/base/dssumpw/lib/main.js","../ext/base/dssum/lib/main.js","../ext/base/dssumors/lib/ndarray.js","../ext/base/dssumors/lib/dssumors.js","../ext/base/dsumkbn/lib/ndarray.js","../ext/base/dsumkbn/lib/dsumkbn.js","../ext/base/dsum/lib/ndarray.js","../ext/base/dsum/lib/dsum.js","../ext/base/dsumkbn2/lib/ndarray.js","../ext/base/dsumkbn2/lib/dsumkbn2.js","../ext/base/dssumors/lib/main.js","../ext/base/dsumkbn/lib/main.js","../ext/base/dsum/lib/main.js","../ext/base/dsumkbn2/lib/main.js","../ext/base/dsumors/lib/ndarray.js","../ext/base/dsumors/lib/dsumors.js","../ext/base/dsumors/lib/main.js","../ext/base/dsumpw/lib/ndarray.js","../ext/base/dsumpw/lib/dsumpw.js","../ext/base/dsumpw/lib/main.js","../ext/base/gapx/lib/ndarray.js","../ext/base/gapx/lib/accessors.js","../ext/base/gapx/lib/main.js","../ext/base/gapxsumkbn/lib/ndarray.js","../ext/base/gapxsumkbn/lib/accessors.js","../ext/base/gapxsumkbn/lib/main.js","../ext/base/gapxsum/lib/ndarray.js","../ext/base/gapxsum/lib/main.js","../ext/base/gapxsumkbn2/lib/ndarray.js","../ext/base/gapxsumkbn2/lib/accessors.js","../ext/base/gapxsumkbn2/lib/main.js","../ext/base/gapxsumors/lib/ndarray.js","../ext/base/gapxsumors/lib/accessors.js","../ext/base/gapxsumors/lib/main.js","../ext/base/gapx/lib/index.js","../ext/base/gapxsumkbn/lib/index.js","../ext/base/gapxsum/lib/index.js","../ext/base/gapxsumkbn2/lib/index.js","../ext/base/gapxsumors/lib/index.js","../ext/base/gapxsumpw/lib/accessors.js","../ext/base/gapxsumpw/lib/ndarray.js","../ext/base/gapxsumpw/lib/main.js","../ext/base/gapxsumpw/lib/index.js","../ext/base/gasumpw/lib/accessors.js","../ext/base/gasumpw/lib/ndarray.js","../ext/base/gasumpw/lib/main.js","../ext/base/gcusumkbn/lib/ndarray.js","../ext/base/gcusumkbn/lib/accessors.js","../ext/base/gcusumkbn/lib/main.js","../ext/base/gcusum/lib/ndarray.js","../ext/base/gcusum/lib/main.js","../ext/base/gcusumkbn2/lib/ndarray.js","../ext/base/gcusumkbn2/lib/accessors.js","../ext/base/gcusumkbn2/lib/main.js","../ext/base/gcusumors/lib/ndarray.js","../ext/base/gcusumors/lib/accessors.js","../ext/base/gcusumors/lib/main.js","../ext/base/gasumpw/lib/index.js","../ext/base/gcusumkbn/lib/index.js","../ext/base/gcusum/lib/index.js","../ext/base/gcusumkbn2/lib/index.js","../ext/base/gcusumors/lib/index.js","../ext/base/gcusumpw/lib/accessors.js","../ext/base/gcusumpw/lib/ndarray.js","../ext/base/gcusumpw/lib/main.js","../ext/base/gcusumpw/lib/index.js","../ext/base/gfill/lib/ndarray.js","../ext/base/gfill/lib/accessors.js","../ext/base/gfill/lib/main.js","../ext/base/gfill-by/lib/ndarray.js","../ext/base/gfill-by/lib/accessors.js","../ext/base/gfill-by/lib/main.js","../ext/base/gnannsumkbn/lib/ndarray.js","../ext/base/gnannsumkbn/lib/accessors.js","../ext/base/gnansumkbn/lib/ndarray.js","../ext/base/gnansumkbn/lib/accessors.js","../ext/base/gnansumkbn/lib/main.js","../ext/base/gnansum/lib/ndarray.js","../ext/base/gnansum/lib/main.js","../ext/base/gnansumkbn2/lib/ndarray.js","../ext/base/gnansumkbn2/lib/accessors.js","../ext/base/gnansumkbn2/lib/main.js","../ext/base/gnansumors/lib/ndarray.js","../ext/base/gnansumors/lib/accessors.js","../ext/base/gnansumors/lib/main.js","../ext/base/gfill/lib/index.js","../ext/base/gfill-by/lib/index.js","../ext/base/gnansumkbn/lib/index.js","../ext/base/gnansum/lib/index.js","../ext/base/gnansumkbn2/lib/index.js","../ext/base/gnansumors/lib/index.js","../ext/base/gnansumpw/lib/accessors.js","../ext/base/gnansumpw/lib/ndarray.js","../ext/base/gnansumpw/lib/main.js","../ext/base/gnansumpw/lib/index.js","../ext/base/grev/lib/ndarray.js","../ext/base/grev/lib/accessors.js","../ext/base/grev/lib/main.js","../ext/base/gsort2hp/lib/ndarray.js","../ext/base/gsort2hp/lib/accessors.js","../ext/base/gsort2hp/lib/main.js","../ext/base/gsort2ins/lib/ndarray.js","../ext/base/gsort2ins/lib/accessors.js","../ext/base/gsort2ins/lib/main.js","../ext/base/grev/lib/index.js","../ext/base/gsort2hp/lib/index.js","../ext/base/gsort2ins/lib/index.js","../ext/base/gsort2sh/lib/accessors.js","../ext/base/gsort2sh/lib/ndarray.js","../ext/base/gsort2sh/lib/main.js","../ext/base/gsorthp/lib/ndarray.js","../ext/base/gsorthp/lib/accessors.js","../ext/base/gsorthp/lib/main.js","../ext/base/gsortins/lib/ndarray.js","../ext/base/gsortins/lib/accessors.js","../ext/base/gsortins/lib/main.js","../ext/base/gsort2sh/lib/index.js","../ext/base/gsorthp/lib/index.js","../ext/base/gsortins/lib/index.js","../ext/base/gsortsh/lib/accessors.js","../ext/base/gsortsh/lib/ndarray.js","../ext/base/gsortsh/lib/main.js","../ext/base/gsumkbn/lib/ndarray.js","../ext/base/gsumkbn/lib/accessors.js","../ext/base/gsumkbn/lib/main.js","../ext/base/gsum/lib/ndarray.js","../ext/base/gsum/lib/main.js","../ext/base/gsumkbn2/lib/ndarray.js","../ext/base/gsumkbn2/lib/accessors.js","../ext/base/gsumkbn2/lib/main.js","../ext/base/gsortsh/lib/index.js","../ext/base/gsumkbn/lib/index.js","../ext/base/gsum/lib/index.js","../ext/base/gsumkbn2/lib/index.js","../ext/base/gsumors/lib/ndarray.js","../ext/base/gsumors/lib/accessors.js","../ext/base/gsumors/lib/main.js","../ext/base/gsumors/lib/index.js","../ext/base/gsumpw/lib/accessors.js","../ext/base/gsumpw/lib/ndarray.js","../ext/base/gsumpw/lib/main.js","../ext/base/gsumpw/lib/index.js","../ext/base/sapx/lib/ndarray.js","../ext/base/sapx/lib/sapx.js","../ext/base/sapxsumkbn/lib/ndarray.js","../ext/base/sapxsumkbn/lib/sapxsumkbn.js","../ext/base/sapxsum/lib/ndarray.js","../ext/base/sapxsum/lib/sapxsum.js","../ext/base/sapxsumkbn2/lib/ndarray.js","../ext/base/sapxsumkbn2/lib/sapxsumkbn2.js","../ext/base/sapxsumors/lib/ndarray.js","../ext/base/sapxsumors/lib/sapxsumors.js","../ext/base/sapx/lib/main.js","../ext/base/sapxsumkbn/lib/main.js","../ext/base/sapxsum/lib/main.js","../ext/base/sapxsumkbn2/lib/main.js","../ext/base/sapxsumors/lib/main.js","../ext/base/sapxsumpw/lib/ndarray.js","../ext/base/sapxsumpw/lib/sapxsumpw.js","../ext/base/sapxsumpw/lib/main.js","../ext/base/sasumpw/lib/ndarray.js","../ext/base/sasumpw/lib/sasumpw.js","../ext/base/scusumkbn/lib/ndarray.js","../ext/base/scusumkbn/lib/scusumkbn.js","../ext/base/scusum/lib/scusum.js","../ext/base/scusumkbn2/lib/ndarray.js","../ext/base/scusumkbn2/lib/scusumkbn2.js","../ext/base/scusumors/lib/ndarray.js","../ext/base/scusumors/lib/scusumors.js","../ext/base/sasumpw/lib/main.js","../ext/base/scusumkbn/lib/main.js","../ext/base/scusum/lib/main.js","../ext/base/scusum/lib/ndarray.js","../ext/base/scusumkbn2/lib/main.js","../ext/base/scusumors/lib/main.js","../ext/base/scusumpw/lib/ndarray.js","../ext/base/scusumpw/lib/scusumpw.js","../ext/base/scusumpw/lib/main.js","../ext/base/sdsapxsumpw/lib/ndarray.js","../ext/base/sdsapxsumpw/lib/sdsapxsumpw.js","../ext/base/sdsapxsum/lib/ndarray.js","../ext/base/sdsapxsum/lib/sdsapxsum.js","../ext/base/sdsapxsumpw/lib/main.js","../ext/base/sdsapxsum/lib/main.js","../ext/base/sdsnansumpw/lib/ndarray.js","../ext/base/sdsnansumpw/lib/sdsnansumpw.js","../ext/base/sdsnansum/lib/sdsnansum.js","../ext/base/sdsnansumpw/lib/main.js","../ext/base/sdsnansum/lib/main.js","../ext/base/sdsnansum/lib/ndarray.js","../ext/base/sdssumpw/lib/ndarray.js","../ext/base/sdssumpw/lib/sdssumpw.js","../ext/base/sdssum/lib/ndarray.js","../ext/base/sdssum/lib/sdssum.js","../ext/base/snansumkbn/lib/ndarray.js","../ext/base/snansumkbn/lib/snansumkbn.js","../ext/base/snansum/lib/ndarray.js","../ext/base/snansum/lib/snansum.js","../ext/base/snansumkbn2/lib/ndarray.js","../ext/base/snansumkbn2/lib/snansumkbn2.js","../ext/base/snansumors/lib/ndarray.js","../ext/base/snansumors/lib/snansumors.js","../ext/base/sdssumpw/lib/main.js","../ext/base/sdssum/lib/main.js","../ext/base/snansumkbn/lib/main.js","../ext/base/snansum/lib/main.js","../ext/base/snansumkbn2/lib/main.js","../ext/base/snansumors/lib/main.js","../ext/base/snansumpw/lib/ndarray.js","../ext/base/snansumpw/lib/snansumpw.js","../ext/base/snansumpw/lib/main.js","../ext/base/srev/lib/ndarray.js","../ext/base/srev/lib/srev.js","../ext/base/ssort2hp/lib/ssort2hp.js","../ext/base/ssort2ins/lib/ndarray.js","../ext/base/ssort2ins/lib/ssort2ins.js","../ext/base/srev/lib/main.js","../ext/base/ssort2hp/lib/main.js","../ext/base/ssort2hp/lib/ndarray.js","../ext/base/ssort2ins/lib/main.js","../ext/base/ssort2sh/lib/ssort2sh.js","../ext/base/ssort2sh/lib/ndarray.js","../ext/base/ssorthp/lib/ssorthp.js","../ext/base/ssortins/lib/ssortins.js","../ext/base/ssort2sh/lib/main.js","../ext/base/ssorthp/lib/main.js","../ext/base/ssorthp/lib/ndarray.js","../ext/base/ssortins/lib/main.js","../ext/base/ssortins/lib/ndarray.js","../ext/base/ssortsh/lib/ssortsh.js","../ext/base/ssortsh/lib/ndarray.js","../ext/base/ssumkbn/lib/ndarray.js","../ext/base/ssumkbn/lib/ssumkbn.js","../ext/base/ssum/lib/ndarray.js","../ext/base/ssum/lib/ssum.js","../ext/base/ssumkbn2/lib/ndarray.js","../ext/base/ssumkbn2/lib/ssumkbn2.js","../ext/base/ssumors/lib/ndarray.js","../ext/base/ssumors/lib/ssumors.js","../ext/base/ssortsh/lib/main.js","../ext/base/ssumkbn/lib/main.js","../ext/base/ssum/lib/main.js","../ext/base/ssumkbn2/lib/main.js","../ext/base/ssumors/lib/main.js","../ext/base/ssumpw/lib/ndarray.js","../ext/base/ssumpw/lib/ssumpw.js","../ext/base/ssumpw/lib/main.js","../ext/base/wasm/lib/index.js","../ext/base/lib/index.js","../ext/base/gnannsumkbn/lib/main.js","../ext/lib/index.js","../gdot/lib/main.js","../gswap/lib/main.js","../sdot/lib/main.js","../sswap/lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DATA from './data.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of BLAS diagonal element types.\n*\n* @returns {StringArray} list of diagonal element types\n*\n* @example\n* var list = diagonalTypes();\n* // e.g., returns [ 'non-unit', 'unit' ]\n*/\nfunction diagonalTypes() {\n\treturn DATA.slice();\n}\n\n\n// EXPORTS //\n\nexport default diagonalTypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported diagonal types to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `unit == 132`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of array objects.\n*\n* @returns {Object} object mapping supported types to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `diagonal_types.h` enumeration!!!!\n\treturn {\n\t\t// Elements along a diagonal are not all equal to one:\n\t\t'non-unit': 131,\n\n\t\t// Elements along a diagonal are all equal to one:\n\t\t'unit': 132\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of BLAS diagonal element types.\n*\n* @module @stdlib/blas/base/diagonal-types\n*\n* @example\n* import diagonalTypes from '@stdlib/blas/base/diagonal-types';\n*\n* var list = diagonalTypes();\n* // e.g., returns [ 'non-unit', 'unit' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport diagonalTypes from './../../../../base/diagonal-types';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a BLAS diagonal type.\n*\n* @name isDiagonalType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a diagonal type\n*\n* @example\n* var bool = isDiagonalType( 'unit' );\n* // returns true\n*\n* bool = isDiagonalType( 'non-unit' );\n* // returns true\n*\n* bool = isDiagonalType( 'foo' );\n* // returns false\n*/\nvar isDiagonalType = contains( diagonalTypes() );\n\n\n// EXPORTS //\n\nexport default isDiagonalType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DATA from './data.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of BLAS memory layouts.\n*\n* @returns {StringArray} list of memory layouts\n*\n* @example\n* var list = layouts();\n* // e.g., returns [ 'row-major', 'column-major' ]\n*/\nfunction layouts() {\n\treturn DATA.slice();\n}\n\n\n// EXPORTS //\n\nexport default layouts;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported layouts to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `row-major == 101`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of array objects.\n*\n* @returns {Object} object mapping supported layouts to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `layouts.h` enumeration!!!!\n\treturn {\n\t\t// Row-major (C-style):\n\t\t'row-major': 101,\n\n\t\t// Column-major (Fortran-style):\n\t\t'column-major': 102\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of BLAS memory layouts.\n*\n* @module @stdlib/blas/base/layouts\n*\n* @example\n* import layouts from '@stdlib/blas/base/layouts';\n*\n* var list = layouts();\n* // e.g., returns [ 'row-major', 'column-major' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport layouts from './../../../../base/layouts';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a BLAS memory layout.\n*\n* @name isLayout\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a memory layout\n*\n* @example\n* var bool = isLayout( 'row-major' );\n* // returns true\n*\n* bool = isLayout( 'column-major' );\n* // returns true\n*\n* bool = isLayout( 'foo' );\n* // returns false\n*/\nvar isLayout = contains( layouts() );\n\n\n// EXPORTS //\n\nexport default isLayout;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DATA from './data.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of BLAS matrix triangles.\n*\n* @returns {StringArray} list of matrix triangles\n*\n* @example\n* var list = matrixTriangles();\n* // e.g., returns [ 'upper', 'lower' ]\n*/\nfunction matrixTriangles() {\n\treturn DATA.slice();\n}\n\n\n// EXPORTS //\n\nexport default matrixTriangles;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported matrix triangles to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `upper == 121`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of array objects.\n*\n* @returns {Object} object mapping supported matrix triangles to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `matrix_triangles.h` enumeration!!!!\n\treturn {\n\t\t// Upper triangular part of a matrix:\n\t\t'upper': 121,\n\n\t\t// Lower triangular part of a matrix:\n\t\t'lower': 122\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of BLAS matrix triangles.\n*\n* @module @stdlib/blas/base/matrix-triangles\n*\n* @example\n* import matrixTriangles from '@stdlib/blas/base/matrix-triangles';\n*\n* var list = matrixTriangles();\n* // e.g., returns [ 'upper', 'lower' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport matrixTriangles from './../../../../base/matrix-triangles';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a BLAS matrix triangle.\n*\n* @name isMatrixTriangle\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a matrix triangle\n*\n* @example\n* var bool = isMatrixTriangle( 'lower' );\n* // returns true\n*\n* bool = isMatrixTriangle( 'upper' );\n* // returns true\n*\n* bool = isMatrixTriangle( 'foo' );\n* // returns false\n*/\nvar isMatrixTriangle = contains( matrixTriangles() );\n\n\n// EXPORTS //\n\nexport default isMatrixTriangle;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DATA from './data.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of BLAS operation sides.\n*\n* @returns {StringArray} list of operation sides\n*\n* @example\n* var list = operationSides();\n* // e.g., returns [ 'left', 'right' ]\n*/\nfunction operationSides() {\n\treturn DATA.slice();\n}\n\n\n// EXPORTS //\n\nexport default operationSides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported operation sides to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `left == 141`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of array objects.\n*\n* @returns {Object} object mapping supported types to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `operation_sides.h` enumeration!!!!\n\treturn {\n\t\t// Triangular matrix is on the left side of a matrix-matrix operation (e.g., AX = B, where A is a triangular matrix):\n\t\t'left': 141,\n\n\t\t// Triangular matrix is on the right side of a matrix-matrix operation (e.g., XA = B, where A is a triangular matrix):\n\t\t'right': 142\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of BLAS operation sides.\n*\n* @module @stdlib/blas/base/operation-sides\n*\n* @example\n* import operationSides from '@stdlib/blas/base/operation-sides';\n*\n* var list = operationSides();\n* // e.g., returns [ 'left', 'right' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport operationSides from './../../../../base/operation-sides';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a BLAS operation side.\n*\n* @name isOperationSide\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is an operation side\n*\n* @example\n* var bool = isOperationSide( 'right' );\n* // returns true\n*\n* bool = isOperationSide( 'left' );\n* // returns true\n*\n* bool = isOperationSide( 'foo' );\n* // returns false\n*/\nvar isOperationSide = contains( operationSides() );\n\n\n// EXPORTS //\n\nexport default isOperationSide;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DATA from './data.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of BLAS transpose operations.\n*\n* @returns {StringArray} list of transpose operations\n*\n* @example\n* var list = layouts();\n* // e.g., returns [ 'no-transpose', 'transpose', 'conjugate-transpose' ]\n*/\nfunction layouts() {\n\treturn DATA.slice();\n}\n\n\n// EXPORTS //\n\nexport default layouts;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported transpose operations to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `transpose == 112`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of array objects.\n*\n* @returns {Object} object mapping supported transpose operations to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `transpose_operations.h` enumeration!!!!\n\treturn {\n\t\t// No transposition:\n\t\t'no-transpose': 111,\n\n\t\t// Transposition:\n\t\t'transpose': 112,\n\n\t\t// Conjugate transposition:\n\t\t'conjugate-transpose': 113\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of BLAS transpose operations.\n*\n* @module @stdlib/blas/base/transpose-operations\n*\n* @example\n* import transposeOperations from '@stdlib/blas/base/transpose-operations';\n*\n* var list = transposeOperations();\n* // e.g., returns [ 'no-transpose', 'transpose', 'conjugate-transpose' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport ops from './../../../../base/transpose-operations';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a BLAS transpose operation.\n*\n* @name isTransposeOperation\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a transpose operation\n*\n* @example\n* var bool = isTransposeOperation( 'transpose' );\n* // returns true\n*\n* bool = isTransposeOperation( 'conjugate-transpose' );\n* // returns true\n*\n* bool = isTransposeOperation( 'foo' );\n* // returns false\n*/\nvar isTransposeOperation = contains( ops() );\n\n\n// EXPORTS //\n\nexport default isTransposeOperation;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name isDiagonalType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/assert/is-diagonal-type}\n*/\nimport isDiagonalType from './../../../base/assert/is-diagonal-type';\nsetReadOnly( ns, 'isDiagonalType', isDiagonalType );\n\n/**\n* @name isLayout\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/assert/is-layout}\n*/\nimport isLayout from './../../../base/assert/is-layout';\nsetReadOnly( ns, 'isLayout', isLayout );\n\n/**\n* @name isMatrixTriangle\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/assert/is-matrix-triangle}\n*/\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nsetReadOnly( ns, 'isMatrixTriangle', isMatrixTriangle );\n\n/**\n* @name isOperationSide\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/assert/is-operation-side}\n*/\nimport isOperationSide from './../../../base/assert/is-operation-side';\nsetReadOnly( ns, 'isOperationSide', isOperationSide );\n\n/**\n* @name isTransposeOperation\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/assert/is-transpose-operation}\n*/\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nsetReadOnly( ns, 'isTransposeOperation', isTransposeOperation );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport absf from '@stdlib/math/base/special/absf';\nimport realf from '@stdlib/complex/float32/real';\nimport imagf from '@stdlib/complex/float32/imag';\n\n\n// MAIN //\n\n/**\n* Computes the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point number.\n*\n* @param {Complex64} c - complex number\n* @returns {number} result\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var v = scabs1( new Complex64( 5.0, -3.0 ) );\n* // returns 8.0\n*/\nfunction scabs1( c ) {\n\treturn absf( realf( c ) ) + absf( imagf( c ) );\n}\n\n\n// EXPORTS //\n\nexport default scabs1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport scabs1 from './../../../base/scabs1';\nimport cmulf from '@stdlib/complex/float32/base/mul';\nimport caddf from '@stdlib/complex/float32/base/add';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant and adds the result to a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} ca - scalar constant\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {integer} offsetX - starting index for `cx`\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @param {integer} offsetY - starting index for `cy`\n* @returns {Complex64Array} second input array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var cy = new Complex64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var ca = new Complex64( 2.0, 2.0 );\n*\n* caxpy( 3, ca, cx, 1, 0, cy, 1, 0 );\n* // cy => <Complex64Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*/\nfunction caxpy( N, ca, cx, strideX, offsetX, cy, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn cy;\n\t}\n\tif ( scabs1( ca ) === 0.0 ) {\n\t\treturn cy;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tcy.set( caddf( cmulf( ca, cx.get( ix ) ), cy.get( iy ) ), iy );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn cy;\n}\n\n\n// EXPORTS //\n\nexport default caxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant and adds the result to a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} ca - scalar constant\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @returns {Complex64Array} second input array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var cy = new Complex64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var ca = new Complex64( 2.0, 2.0 );\n*\n* caxpy( 3, ca, cx, 1, cy, 1 );\n* // cy => <Complex64Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*/\nfunction caxpy( N, ca, cx, strideX, cy, strideY ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, ca, cx, strideX, ix, cy, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default caxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex64';\n\n\n// MAIN //\n\n/**\n* Copies values from one complex single-precision floating-point vector to another complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Complex64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Complex64Array} output array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* ccopy( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Complex64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*/\nfunction ccopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = reinterpret( x, 0 );\n\tviewY = reinterpret( y, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tviewY[ iy ] = viewX[ ix ];\n\t\tviewY[ iy+1 ] = viewX[ ix+1 ];\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default ccopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Copies values from one complex single-precision floating-point vector to another complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Complex64Array} output array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* ccopy( x.length, x, 1, y, 1 );\n* // y => <Complex64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*/\nfunction ccopy( N, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default ccopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cmulf from '@stdlib/complex/float32/base/mul';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} ca - constant\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting `cx` index\n* @returns {Complex64Array} input array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var ca = new Complex64( 2.0, 2.0 );\n*\n* cscal( 3, ca, cx, 1, 0 );\n* // cx => <Complex64Array>[ -2.0, 6.0, -2.0, 14.0, -2.0, 22.0 ]\n*/\nfunction cscal( N, ca, cx, strideX, offsetX ) {\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn cx;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tcx.set( cmulf( ca, cx.get( ix ) ), ix );\n\t\tix += strideX;\n\t}\n\treturn cx;\n}\n\n\n// EXPORTS //\n\nexport default cscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} ca - constant\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @returns {Complex64Array} input array\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var ca = new Complex64( 2.0, 2.0 );\n*\n* cscal( 3, ca, cx, 1 );\n* // cx => <Complex64Array>[ -2.0, 6.0, -2.0, 14.0, -2.0, 22.0 ]\n*/\nfunction cscal( N, ca, cx, strideX ) {\n\tvar ox = stride2offset( N, strideX );\n\treturn ndarray( N, ca, cx, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default cscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex64';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting `cx` index\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @param {NonNegativeInteger} offsetY - starting `cy` index\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex64Array} `cy`\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* csrot( cx.length, cx, 1, 0, cy, 1, 0, 0.8, 0.6 );\n* // cx => <Complex64Array>[ ~0.8, ~1.6, ~2.4, ~3.2, 4.0, ~4.8, ~5.6, ~6.4 ]\n* // cy => <Complex64Array>[ ~-0.6, ~-1.2, ~-1.8, ~-2.4, -3.0, ~-3.6, ~-4.2, ~-4.8 ]\n*/\nfunction csrot( N, cx, strideX, offsetX, cy, strideY, offsetY, c, s ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn cy;\n\t}\n\tviewX = reinterpret( cx, 0 );\n\tviewY = reinterpret( cy, 0 );\n\tc = f32( c );\n\ts = f32( s );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = f32( c*viewX[ ix ] ) + f32( s*viewY[ iy ] );\n\t\tviewY[ iy ] = f32( c*viewY[ iy ] ) - f32( s*viewX[ ix ] );\n\t\tviewX[ ix ] = tmp;\n\n\t\ttmp = f32( c*viewX[ ix+1 ] ) + f32( s*viewY[ iy+1 ] );\n\t\tviewY[ iy+1 ] = f32( c*viewY[ iy+1 ] ) - f32( s*viewX[ ix+1 ] );\n\t\tviewX[ ix+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn cy;\n}\n\n\n// EXPORTS //\n\nexport default csrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex64Array} `cy`\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* csrot( cx.length, cx, 1, cy, 1, 0.8, 0.6 );\n* // cx => <Complex64Array>[ ~0.8, ~1.6, ~2.4, ~3.2, 4.0, ~4.8, ~5.6, ~6.4 ]\n* // cy => <Complex64Array>[ ~-0.6, ~-1.2, ~-1.8, ~-2.4, -3.0, ~-3.6, ~-4.2, ~-4.8 ]\n*/\nfunction csrot( N, cx, strideX, cy, strideY, c, s ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, cx, strideX, ix, cy, strideY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nexport default csrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex64';\n\n\n// MAIN //\n\n/**\n* Interchanges two complex single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Complex64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Complex64Array} `y`\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* cswap( x.length, x, 1, 0, y, 1, 0 );\n* // x => <Complex64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]\n* // y => <Complex64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*/\nfunction cswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = reinterpret( x, 0 );\n\tviewY = reinterpret( y, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = viewX[ ix ];\n\t\tviewX[ ix ] = viewY[ iy ];\n\t\tviewY[ iy ] = tmp;\n\n\t\ttmp = viewX[ ix+1 ];\n\t\tviewX[ ix+1 ] = viewY[ iy+1 ];\n\t\tviewY[ iy+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default cswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Interchanges two complex single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Complex64Array} `y`\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* cswap( x.length, x, 1, y, 1 );\n* // x => <Complex64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]\n* // y => <Complex64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*/\nfunction cswap( N, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default cswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - `x` stride length\n* @param {NonNegativeInteger} offset - starting index for `x`\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = dasum( x.length, x, 1, 0 );\n* // returns 15.0\n*/\nfunction dasum( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += abs( x[ix] );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - `x` stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = dasum( x.length, x, 1 );\n* // returns 15.0\n*/\nfunction dasum( N, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default dasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport caxpy from './caxpy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( caxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default caxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ccopy from './ccopy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ccopy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ccopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport cscal from './cscal.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( cscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default cscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport csrot from './csrot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( csrot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default csrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport cswap from './cswap.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( cswap, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default cswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dasum from './dasum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* daxpy( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction daxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\ty[ iy+1 ] += alpha * x[ ix+1 ];\n\t\t\ty[ iy+2 ] += alpha * x[ ix+2 ];\n\t\t\ty[ iy+3 ] += alpha * x[ ix+3 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += alpha * x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default daxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* daxpy( x.length, alpha, x, 1, y, 1 );\n* // y => <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction daxpy( N, alpha, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, alpha, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default daxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\nimport real from '@stdlib/complex/float64/real';\nimport imag from '@stdlib/complex/float64/imag';\n\n\n// MAIN //\n\n/**\n* Computes the sum of the absolute value of the real and imaginary part of a double-precision complex floating-point number.\n*\n* @param {Complex128} z - complex number\n* @returns {number} result\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var v = dcabs1( new Complex128( 5.0, -3.0 ) );\n* // returns 8.0\n*/\nfunction dcabs1( z ) {\n\treturn abs( real(z) ) + abs( imag(z) );\n}\n\n\n// EXPORTS //\n\nexport default dcabs1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport daxpy from './daxpy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( daxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default daxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dcopy( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dcopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] = x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] = x[ ix ];\n\t\t\ty[ iy+1 ] = x[ ix+1 ];\n\t\t\ty[ iy+2 ] = x[ ix+2 ];\n\t\t\ty[ iy+3 ] = x[ ix+3 ];\n\t\t\ty[ iy+4 ] = x[ ix+4 ];\n\t\t\ty[ iy+5 ] = x[ ix+5 ];\n\t\t\ty[ iy+6 ] = x[ ix+6 ];\n\t\t\ty[ iy+7 ] = x[ ix+7 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dcopy( x.length, x, 1, y, 1 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dcopy( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default dcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcopy from './dcopy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcopy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {integer} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = ddot( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction ddot( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += ( x[ ix ] * y[ iy ] );\n\t\t\t\tix += 1;\n\t\t\t\tiy += 1;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ ix ] * y[ iy ] ) + ( x[ ix+1 ] * y[ iy+1 ] ) + ( x[ ix+2 ] * y[ iy+2 ] ) + ( x[ ix+3 ] * y[ iy+3 ] ) + ( x[ ix+4 ] * y[ iy+4 ] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn dot;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nexport default ddot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = ddot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction ddot( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default ddot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ddot from './ddot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ddot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ddot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\nimport { ndarray as ddot } from './../../../base/ddot';\nimport blockSize from '@stdlib/ndarray/base/unary-tiling-block-size';\n\n\n// VARIABLES //\n\nvar bsize = blockSize( 'float64' ); // TODO: consider using a larger block size\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether a provided string indicates to transpose a matrix.\n*\n* @private\n* @param {string} str - input string\n* @returns {boolean} boolean indicating whether to transpose a matrix\n*\n* @example\n* var bool = isTransposed( 'transpose' );\n* // returns true\n*\n* @example\n* var bool = isTransposed( 'conjugate-transpose' );\n* // returns true\n*\n* @example\n* var bool = isTransposed( 'no-transpose' );\n* // returns false\n*/\nfunction isTransposed( str ) { // TODO: consider moving to a separate helper utility package\n\treturn ( str !== 'no-transpose' );\n}\n\n/**\n* Fills a matrix with zeros.\n*\n* @private\n* @param {NonNegativeInteger} M - number of rows\n* @param {NonNegativeInteger} N - number of columns\n* @param {Float64Array} X - matrix to fill\n* @param {integer} strideX1 - stride of the first dimension of `X`\n* @param {integer} strideX2 - stride of the second dimension of `X`\n* @param {NonNegativeInteger} offsetX - starting index for `X`\n* @returns {Float64Array} input matrix\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* zeros( 2, 3, X, 3, 1, 0 );\n* // X => <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* zeros( 2, 3, X, 1, 2, 0 );\n* // X => <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction zeros( M, N, X, strideX1, strideX2, offsetX ) { // TODO: consider moving to a separate package\n\tvar dx0;\n\tvar dx1;\n\tvar S0;\n\tvar S1;\n\tvar i0;\n\tvar i1;\n\tvar ix;\n\n\tif ( isRowMajor( [ strideX1, strideX2 ] ) ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tS0 = N;\n\t\tS1 = M;\n\t\tdx0 = strideX2;                   // offset increment for innermost loop\n\t\tdx1 = strideX1 - ( S0*strideX2 ); // offset increment for outermost loop\n\t} else { // column-major\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tS0 = M;\n\t\tS1 = N;\n\t\tdx0 = strideX1;                   // offset increment for innermost loop\n\t\tdx1 = strideX2 - ( S0*strideX1 ); // offset increment for outermost loop\n\t}\n\tix = offsetX;\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tX[ ix ] = 0.0;\n\t\t\tix += dx0;\n\t\t}\n\t\tix += dx1;\n\t}\n\treturn X;\n}\n\n/**\n* Scales each element in a matrix by a scalar `β`.\n*\n* @private\n* @param {NonNegativeInteger} M - number of rows\n* @param {NonNegativeInteger} N - number of columns\n* @param {number} beta - scalar\n* @param {Float64Array} X - matrix to fill\n* @param {integer} strideX1 - stride of the first dimension of `X`\n* @param {integer} strideX2 - stride of the second dimension of `X`\n* @param {NonNegativeInteger} offsetX - starting index for `X`\n* @returns {Float64Array} input matrix\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* scal( 2, 3, 5.0, X, 3, 1, 0 );\n* // X => <Float64Array>[ 5.0, 10.0, 15.0, 20.0, 25.0, 30.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* scal( 2, 3, 5.0, X, 1, 2, 0 );\n* // X => <Float64Array>[ 5.0, 10.0, 15.0, 20.0, 25.0, 30.0 ]\n*/\nfunction scal( M, N, beta, X, strideX1, strideX2, offsetX ) { // TODO: consider moving to a separate package\n\tvar dx0;\n\tvar dx1;\n\tvar S0;\n\tvar S1;\n\tvar i0;\n\tvar i1;\n\tvar ix;\n\n\tif ( isRowMajor( [ strideX1, strideX2 ] ) ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tS0 = N;\n\t\tS1 = M;\n\t\tdx0 = strideX2;                   // offset increment for innermost loop\n\t\tdx1 = strideX1 - ( S0*strideX2 ); // offset increment for outermost loop\n\t} else { // column-major\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tS0 = M;\n\t\tS1 = N;\n\t\tdx0 = strideX1;                   // offset increment for innermost loop\n\t\tdx1 = strideX2 - ( S0*strideX1 ); // offset increment for outermost loop\n\t}\n\tix = offsetX;\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tX[ ix ] *= beta;\n\t\t\tix += dx0;\n\t\t}\n\t\tix += dx1;\n\t}\n\treturn X;\n}\n\n/**\n* Performs matrix multiplication using a naive algorithm which is cache-optimal when `A` is row-major and `B` is column-major.\n*\n* @private\n* @param {NonNegativeInteger} M - number of rows in the matrix `op(A)` and in the matrix `C`\n* @param {NonNegativeInteger} N - number of columns in the matrix `op(B)` and in the matrix `C`\n* @param {NonNegativeInteger} K - number of columns in the matrix `op(A)` and number of rows in the matrix `op(B)`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} A - first matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} B - second matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @param {Float64Array} C - third matrix\n* @param {integer} strideC1 - stride of the first dimension of `C`\n* @param {integer} strideC2 - stride of the second dimension of `C`\n* @param {NonNegativeInteger} offsetC - starting index for `C`\n* @returns {Float64Array} `C`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( [ 1.0, 1.0, 0.0, 1.0 ] );\n* var C = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* naive( 2, 2, 2, 1.0, A, 2, 1, 0, B, 2, 1, 0, C, 2, 1, 0 );\n* // C => <Float64Array>[ 2.0, 5.0, 6.0, 11.0 ]\n*/\nfunction naive( M, N, K, alpha, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB, C, strideC1, strideC2, offsetC ) {\n\tvar da0;\n\tvar db0;\n\tvar dc0;\n\tvar dc1;\n\tvar S0;\n\tvar S1;\n\tvar i0;\n\tvar i1;\n\tvar ia;\n\tvar ib;\n\tvar ic;\n\n\t// Note on variable naming convention: S#, da#, db#, dc#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tS0 = N;\n\tS1 = M;\n\tda0 = strideA2;\n\tdb0 = strideB1;\n\tdc0 = strideC2;                   // offset increment for innermost loop\n\tdc1 = strideC1 - ( S0*strideC2 ); // offset increment for outermost loop\n\n\tic = offsetC;\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tia = offsetA + ( i1*strideA1 );\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tib = offsetB + ( i0*strideB2 );\n\t\t\tC[ ic ] += alpha * ddot( K, A, da0, ia, B, db0, ib );\n\t\t\tic += dc0;\n\t\t}\n\t\tic += dc1;\n\t}\n\treturn C;\n}\n\n/**\n* Performs matrix multiplication using loop tiling.\n*\n* @private\n* @param {NonNegativeInteger} M - number of rows in the matrix `op(A)` and in the matrix `C`\n* @param {NonNegativeInteger} N - number of columns in the matrix `op(B)` and in the matrix `C`\n* @param {NonNegativeInteger} K - number of columns in the matrix `op(A)` and number of rows in the matrix `op(B)`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} A - first matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} B - second matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @param {Float64Array} C - third matrix\n* @param {integer} strideC1 - stride of the first dimension of `C`\n* @param {integer} strideC2 - stride of the second dimension of `C`\n* @param {NonNegativeInteger} offsetC - starting index for `C`\n* @returns {Float64Array} `C`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( [ 1.0, 1.0, 0.0, 1.0 ] );\n* var C = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* blocked( 2, 2, 2, 1.0, A, 2, 1, 0, B, 2, 1, 0, C, 2, 1, 0 );\n* // C => <Float64Array>[ 2.0, 5.0, 6.0, 11.0 ]\n*/\nfunction blocked( M, N, K, alpha, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB, C, strideC1, strideC2, offsetC ) {\n\tvar da0;\n\tvar db0;\n\tvar dc0;\n\tvar dc1;\n\tvar oa1;\n\tvar ob0;\n\tvar oc0;\n\tvar oc1;\n\tvar S0;\n\tvar S1;\n\tvar s0;\n\tvar s1;\n\tvar sk;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar ia;\n\tvar ib;\n\tvar ic;\n\tvar oa;\n\tvar ob;\n\tvar k;\n\n\t// Note on variable naming convention: S#, da#, db#, dc#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tS0 = N;\n\tS1 = M;\n\n\t// Define increments for the innermost loop:\n\tda0 = strideA2;\n\tdb0 = strideB1;\n\tdc0 = strideC2;\n\n\t// Iterate over blocks...\n\tfor ( j1 = S1; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\toa1 = offsetA + ( j1*strideA1 );\n\t\toc1 = offsetC + ( j1*strideC1 );\n\t\tfor ( j0 = S0; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\tob0 = offsetB + ( j0*strideB2 );\n\t\t\toc0 = oc1 + ( j0*strideC2 );      // index offset for `C` for the current block\n\t\t\tdc1 = strideC1 - ( s0*strideC2 ); // loop offset increment for `C`\n\t\t\tfor ( k = K; k > 0; ) {\n\t\t\t\tif ( k < bsize ) {\n\t\t\t\t\tsk = k;\n\t\t\t\t\tk = 0;\n\t\t\t\t} else {\n\t\t\t\t\tsk = bsize;\n\t\t\t\t\tk -= bsize;\n\t\t\t\t}\n\t\t\t\toa = oa1 + ( k*strideA2 );\n\t\t\t\tob = ob0 + ( k*strideB1 );\n\t\t\t\tic = oc0;\n\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\tia = oa + ( i1*strideA1 );\n\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\tib = ob + ( i0*strideB2 );\n\t\t\t\t\t\tC[ ic ] += alpha * ddot( sk, A, da0, ia, B, db0, ib );\n\t\t\t\t\t\tic += dc0;\n\t\t\t\t\t}\n\t\t\t\t\tic += dc1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn C;\n}\n\n\n// MAIN //\n\n/**\n* Performs the matrix-matrix operation `C = α*op(A)*op(B) + β*C` where `op(X)` is either `op(X) = X` or `op(X) = X^T`, `α` and `β` are scalars, `A`, `B`, and `C` are matrices, with `op(A)` an `M` by `K` matrix, `op(B)` a `K` by `N` matrix, and `C` an `M` by `N` matrix.\n*\n* @private\n* @param {string} transA - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} transB - specifies whether `B` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `op(A)` and in the matrix `C`\n* @param {NonNegativeInteger} N - number of columns in the matrix `op(B)` and in the matrix `C`\n* @param {NonNegativeInteger} K - number of columns in the matrix `op(A)` and number of rows in the matrix `op(B)`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} A - first matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} B - second matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @param {number} beta - scalar constant\n* @param {Float64Array} C - third matrix\n* @param {integer} strideC1 - stride of the first dimension of `C`\n* @param {integer} strideC2 - stride of the second dimension of `C`\n* @param {NonNegativeInteger} offsetC - starting index for `C`\n* @returns {Float64Array} `C`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( [ 1.0, 1.0, 0.0, 1.0 ] );\n* var C = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* dgemm( 'no-transpose', 'no-transpose', 2, 2, 2, 1.0, A, 2, 1, 0, B, 2, 1, 0, 1.0, C, 2, 1, 0 );\n* // C => <Float64Array>[ 2.0, 5.0, 6.0, 11.0 ]\n*/\nfunction dgemm( transA, transB, M, N, K, alpha, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB, beta, C, strideC1, strideC2, offsetC ) {\n\tvar isrma;\n\tvar isrmb;\n\tvar sa1;\n\tvar sa2;\n\tvar sb1;\n\tvar sb2;\n\n\tif ( M === 0 || N === 0 || ( ( beta === 1.0 ) && ( ( alpha === 0.0 ) || ( K === 0 ) ) ) ) {\n\t\treturn C;\n\t}\n\t// Form: C = β⋅C\n\tif ( beta === 0.0 ) {\n\t\tC = zeros( M, N, C, strideC1, strideC2, offsetC );\n\t} else if ( beta !== 1.0 ) {\n\t\tC = scal( M, N, beta, C, strideC1, strideC2, offsetC );\n\t}\n\t// Check whether we can early return...\n\tif ( alpha === 0.0 ) {\n\t\treturn C;\n\t}\n\t// Determine the memory layouts of `A` and `B`...\n\tisrma = isRowMajor( [ strideA1, strideA2 ] );\n\tisrmb = isRowMajor( [ strideB1, strideB2 ] );\n\n\t// Check whether we can avoid loop tiling and simply use the \"naive\" (cache-optimal) algorithm for performing matrix multiplication...\n\tif ( isrma ) { // orderA === 'row-major'\n\t\tif ( !isTransposed( transA ) ) {\n\t\t\tif ( !isrmb && !isTransposed( transB ) ) { // orderB === 'column-major'\n\t\t\t\t// Form: C = α⋅A⋅B + C\n\t\t\t\treturn naive( M, N, K, alpha, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB, C, strideC1, strideC2, offsetC );\n\t\t\t}\n\t\t\tif ( isrmb && isTransposed( transB ) ) { // orderB === 'row-major'\n\t\t\t\t// Form: C = α⋅A⋅B^T + C\n\t\t\t\treturn naive( M, N, K, alpha, A, strideA1, strideA2, offsetA, B, strideB2, strideB1, offsetB, C, strideC1, strideC2, offsetC );\n\t\t\t}\n\t\t}\n\t} else if ( isTransposed( transA ) ) { // orderA === 'column-major'\n\t\tif ( isrmb && isTransposed( transB ) ) { // orderB === 'row-major'\n\t\t\t// Form: C = α⋅A^T⋅B^T + C\n\t\t\treturn naive( M, N, K, alpha, A, strideA2, strideA1, offsetA, B, strideB2, strideB1, offsetB, C, strideC1, strideC2, offsetC );\n\t\t}\n\t\tif ( !isrmb && !isTransposed( transB ) ) { // orderB === 'column-major'\n\t\t\t// Form: C = α⋅A^T⋅B + C\n\t\t\treturn naive( M, N, K, alpha, A, strideA2, strideA1, offsetA, B, strideB1, strideB2, offsetB, C, strideC1, strideC2, offsetC );\n\t\t}\n\t}\n\t// Swap strides to perform transposes...\n\tif ( isTransposed( transA ) ) {\n\t\tsa1 = strideA2;\n\t\tsa2 = strideA1;\n\t} else {\n\t\tsa1 = strideA1;\n\t\tsa2 = strideA2;\n\t}\n\tif ( isTransposed( transB ) ) {\n\t\tsb1 = strideB2;\n\t\tsb2 = strideB1;\n\t} else {\n\t\tsb1 = strideB1;\n\t\tsb2 = strideB2;\n\t}\n\t// Perform loop tiling to promote cache locality:\n\treturn blocked( M, N, K, alpha, A, sa1, sa2, offsetA, B, sb1, sb2, offsetB, C, strideC1, strideC2, offsetC );\n}\n\n\n// EXPORTS //\n\nexport default dgemm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTranspose from './../../../base/assert/is-transpose-operation';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-matrix operation `C = α*op(A)*op(B) + β*C` where `op(X)` is either `op(X) = X` or `op(X) = X^T`, `α` and `β` are scalars, `A`, `B`, and `C` are matrices, with `op(A)` an `M` by `K` matrix, `op(B)` a `K` by `N` matrix, and `C` an `M` by `N` matrix.\n*\n* @param {string} order - storage layout\n* @param {string} transA - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} transB - specifies whether `B` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `op(A)` and in the matrix `C`\n* @param {NonNegativeInteger} N - number of columns in the matrix `op(B)` and in the matrix `C`\n* @param {NonNegativeInteger} K - number of columns in the matrix `op(A)` and number of rows in the matrix `op(B)`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} A - first matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float64Array} B - second matrix\n* @param {PositiveInteger} LDB - stride of the first dimension of `B` (a.k.a., leading dimension of the matrix `B`)\n* @param {number} beta - scalar constant\n* @param {Float64Array} C - third matrix\n* @param {PositiveInteger} LDC - stride of the first dimension of `C` (a.k.a., leading dimension of the matrix `C`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must be a valid transpose operation\n* @throws {TypeError} third argument must be a valid transpose operation\n* @throws {RangeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be a nonnegative integer\n* @throws {RangeError} ninth argument must be greater than or equal to max(1,M) when `A` is not transposed and max(1,K) otherwise\n* @throws {RangeError} eleventh argument must be greater than or equal to max(1,K) when `B` is not transposed and max(1,N) otherwise\n* @throws {RangeError} fourteenth argument must be greater than or equal to max(1,M)\n* @returns {Float64Array} `C`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( [ 1.0, 1.0, 0.0, 1.0 ] );\n* var C = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* dgemm( 'row-major', 'no-transpose', 'no-transpose', 2, 2, 2, 1.0, A, 2, B, 2, 1.0, C, 2 );\n* // C => <Float64Array>[ 2.0, 5.0, 6.0, 11.0 ]\n*/\nfunction dgemm( order, transA, transB, M, N, K, alpha, A, LDA, B, LDB, beta, C, LDC ) { // eslint-disable-line max-params, max-len\n\tvar nrowsa;\n\tvar nrowsb;\n\tvar valc;\n\tvar sa1;\n\tvar sa2;\n\tvar sb1;\n\tvar sb2;\n\tvar sc1;\n\tvar sc2;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTranspose( transA ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', transA ) );\n\t}\n\tif ( !isMatrixTranspose( transB ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid transpose operation. Value: `%s`.', transB ) );\n\t}\n\tif ( M < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( K < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be a nonnegative integer. Value: `%d`.', K ) );\n\t}\n\tif (\n\t\t( order === 'row-major' && transA === 'no-transpose' ) ||\n\t\t( order === 'column-major' && transA === 'transpose' )\n\t) {\n\t\tnrowsa = K;\n\t} else {\n\t\tnrowsa = M;\n\t}\n\tif (\n\t\t( order === 'row-major' && transB === 'no-transpose' ) ||\n\t\t( order === 'column-major' && transB === 'transpose' )\n\t) {\n\t\tnrowsb = N;\n\t} else {\n\t\tnrowsb = K;\n\t}\n\tif ( LDA < max( 1, nrowsa ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be greater than or equal to max(1,%d). Value: `%d`.', nrowsa, LDA ) );\n\t}\n\tif ( LDB < max( 1, nrowsb ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eleventh argument must be greater than or equal to max(1,%d). Value: `%d`.', nrowsb, LDB ) );\n\t}\n\tif ( order === 'row-major' ) {\n\t\tvalc = N;\n\t} else {\n\t\tvalc = M;\n\t}\n\tif ( LDC < max( 1, valc ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourteenth argument must be greater than or equal to max(1,%d). Value: `%d`.', valc, LDC ) );\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t\tsb1 = 1;\n\t\tsb2 = LDB;\n\t\tsc1 = 1;\n\t\tsc2 = LDC;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t\tsb1 = LDB;\n\t\tsb2 = 1;\n\t\tsc1 = LDC;\n\t\tsc2 = 1;\n\t}\n\treturn base( transA, transB, M, N, K, alpha, A, sa1, sa2, 0, B, sb1, sb2, 0, beta, C, sc1, sc2, 0 ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dgemm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dgemm from './dgemm.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dgemm, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dgemm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTranspose from './../../../base/assert/is-transpose-operation';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-matrix operation `C = α*op(A)*op(B) + β*C` where `op(X)` is either `op(X) = X` or `op(X) = X^T`, `α` and `β` are scalars, `A`, `B`, and `C` are matrices, with `op(A)` an `M` by `K` matrix, `op(B)` a `K` by `N` matrix, and `C` an `M` by `N` matrix.\n*\n* @param {string} transA - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} transB - specifies whether `B` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `op(A)` and in the matrix `C`\n* @param {NonNegativeInteger} N - number of columns in the matrix `op(B)` and in the matrix `C`\n* @param {NonNegativeInteger} K - number of columns in the matrix `op(A)` and number of rows in the matrix `op(B)`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} A - first matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} B - second matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @param {number} beta - scalar constant\n* @param {Float64Array} C - third matrix\n* @param {integer} strideC1 - stride of the first dimension of `C`\n* @param {integer} strideC2 - stride of the second dimension of `C`\n* @param {NonNegativeInteger} offsetC - starting index for `C`\n* @throws {TypeError} first argument must be a valid transpose operation\n* @throws {TypeError} second argument must be a valid transpose operation\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be a nonnegative integer\n* @returns {Float64Array} `C`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( [ 1.0, 1.0, 0.0, 1.0 ] );\n* var C = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* dgemm( 'no-transpose', 'no-transpose', 2, 2, 2, 1.0, A, 2, 1, 0, B, 2, 1, 0, 1.0, C, 2, 1, 0 );\n* // C => <Float64Array>[ 2.0, 5.0, 6.0, 11.0 ]\n*/\nfunction dgemm( transA, transB, M, N, K, alpha, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB, beta, C, strideC1, strideC2, offsetC ) { // eslint-disable-line max-params, max-len\n\tif ( !isMatrixTranspose( transA ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid transpose operation. Value: `%s`.', transA ) );\n\t}\n\tif ( !isMatrixTranspose( transB ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', transB ) );\n\t}\n\tif ( M < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( K < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%d`.', K ) );\n\t}\n\treturn base( transA, transB, M, N, K, alpha, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB, beta, C, strideC1, strideC2, offsetC ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dgemm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 3 routine to perform the matrix-matrix operation `C = α*op(A)*op(B) + β*C` where `op(X)` is either `op(X) = X` or `op(X) = X^T`, `α` and `β` are scalars, `A`, `B`, and `C` are matrices, with `op(A)` an `M` by `K` matrix, `op(B)` a `K` by `N` matrix, and `C` an `M` by `N` matrix.\n*\n* @module @stdlib/blas/base/dgemm\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dgemm from '@stdlib/blas/base/dgemm';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( [ 1.0, 1.0, 0.0, 1.0 ] );\n* var C = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* dgemm( 'row-major', 'no-transpose', 'no-transpose', 2, 2, 2, 1.0, A, 2, B, 2, 1.0, C, 2 );\n* // C => <Float64Array>[ 2.0, 5.0, 6.0, 11.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dgemm from '@stdlib/blas/base/dgemm';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( [ 1.0, 1.0, 0.0, 1.0 ] );\n* var C = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* dgemm.ndarray( 'no-transpose', 'no-transpose', 2, 2, 2, 1.0, A, 2, 1, 0, B, 2, 1, 0, 1.0, C, 2, 1, 0 );\n* // C => <Float64Array>[ 2.0, 5.0, 6.0, 11.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dgemm;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdgemm = main;\n} else {\n\tdgemm = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dgemm;\n\n// exports: { \"ndarray\": \"dgemm.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dgemm/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a double-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* dfill( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction dfill( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] = alpha;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] = alpha;\n\t\t\tx[ ix+1 ] = alpha;\n\t\t\tx[ ix+2 ] = alpha;\n\t\t\tx[ ix+3 ] = alpha;\n\t\t\tx[ ix+4 ] = alpha;\n\t\t\tx[ ix+5 ] = alpha;\n\t\t\tx[ ix+6 ] = alpha;\n\t\t\tx[ ix+7 ] = alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Fills a double-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* dfill( x.length, 5.0, x, 1 );\n* // x => <Float64Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction dfill( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dfill from './dfill.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dfill, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* dscal( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, -20.0, 25.0, -30.0 ]\n*/\nfunction dscal( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] *= alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] *= alpha;\n\t\t\tx[ ix+1 ] *= alpha;\n\t\t\tx[ ix+2 ] *= alpha;\n\t\t\tx[ ix+3 ] *= alpha;\n\t\t\tx[ ix+4 ] *= alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] *= alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* dscal( x.length, 5.0, x, 1 );\n* // x => <Float64Array>[ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\nfunction dscal( N, alpha, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, alpha, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default dscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\nimport { ndarray as dfill } from './../../../ext/base/dfill';\nimport { ndarray as dscal } from './../../../base/dscal';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `y = α*A*x + β*y` or `y = α*A^T*x + β*y`, where `α` and `β` are scalars, `x` and `y` are vectors, and `A` is an `M` by `N` matrix.\n*\n* @private\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `A`\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0 ] );\n*\n* dgemv( 'no-transpose', 2, 3, 1.0, A, 3, 1, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float64Array>[ 7.0, 16.0 ]\n*/\nfunction dgemv( trans, M, N, alpha, A, strideA1, strideA2, offsetA, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tvar isrm;\n\tvar xlen;\n\tvar ylen;\n\tvar tmp;\n\tvar ix1;\n\tvar iy1;\n\tvar sa0;\n\tvar sa1;\n\tvar i1;\n\tvar i0;\n\tvar oa;\n\n\t// Note on variable naming convention: sa#, ix#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tif ( trans === 'no-transpose' ) {\n\t\txlen = N;\n\t\tylen = M;\n\t} else {\n\t\txlen = M;\n\t\tylen = N;\n\t}\n\t// y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tdfill( ylen, 0.0, y, strideY, offsetY );\n\t\t} else {\n\t\t\tdscal( ylen, beta, y, strideY, offsetY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\t// Form: y = α*A*x + y\n\tif (\n\t\t( !isrm && trans === 'no-transpose' ) ||\n\t\t( isrm && trans !== 'no-transpose' )\n\t) {\n\t\tix1 = offsetX;\n\t\tfor ( i1 = 0; i1 < xlen; i1++ ) {\n\t\t\ttmp = alpha * x[ ix1 ];\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tiy1 = offsetY;\n\t\t\tfor ( i0 = 0; i0 < ylen; i0++ ) {\n\t\t\t\ty[ iy1 ] += A[ oa+(sa0*i0) ] * tmp;\n\t\t\t\tiy1 += strideY;\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn y;\n\t}\n\t// Form: y = α*A^T*x + y\n\n\t// ( !isrm && trans !== 'no-transpose' ) || ( isrm && trans === 'no-transpose' )\n\tiy1 = offsetY;\n\tfor ( i1 = 0; i1 < ylen; i1++ ) {\n\t\ttmp = 0.0;\n\t\tix1 = offsetX;\n\t\toa = offsetA + (sa1*i1);\n\t\tfor ( i0 = 0; i0 < xlen; i0++ ) {\n\t\t\ttmp += A[ oa+(sa0*i0) ] * x[ ix1 ];\n\t\t\tix1 += strideX;\n\t\t}\n\t\ty[ iy1 ] += alpha * tmp;\n\t\tiy1 += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dgemv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTranspose from './../../../base/assert/is-transpose-operation';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `y = α*A*x + β*y` or `y = α*A^T*x + β*y`, where `α` and `β` are scalars, `x` and `y` are vectors, and `A` is an `M` by `N` matrix.\n*\n* @param {string} order - storage layout\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `A`\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} A - input matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float64Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must be a valid transpose operation\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be greater than or equal to max(1,M)\n* @throws {RangeError} ninth argument must be non-zero\n* @throws {RangeError} twelfth argument must be non-zero\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0 ] );\n*\n* dgemv( 'row-major', 'no-transpose', 2, 3, 1.0, A, 3, x, 1, 1.0, y, 1 );\n* // y => <Float64Array>[ 7.0, 16.0 ]\n*/\nfunction dgemv( order, trans, M, N, alpha, A, LDA, x, strideX, beta, y, strideY ) { // eslint-disable-line max-params, max-len\n\tvar xlen;\n\tvar ylen;\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\tvar oy;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTranspose( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( M < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero.' ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Twelfth argument must be non-zero.' ) );\n\t}\n\t// Check if we can early return...\n\tif ( M === 0 || N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\tif ( trans === 'no-transpose' ) {\n\t\txlen = N;\n\t\tylen = M;\n\t} else {\n\t\txlen = M;\n\t\tylen = N;\n\t}\n\tox = stride2offset( xlen, strideX );\n\toy = stride2offset( ylen, strideY );\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\treturn base( trans, M, N, alpha, A, sa1, sa2, 0, x, strideX, ox, beta, y, strideY, oy ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dgemv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dscal from './dscal.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dgemv from './dgemv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dgemv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dgemv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTranspose from './../../../base/assert/is-transpose-operation';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `y = α*A*x + β*y` or `y = α*A^T*x + β*y`, where `α` and `β` are scalars, `x` and `y` are vectors, and `A` is an `M` by `N` matrix.\n*\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `A`\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @throws {TypeError} first argument must be a valid transpose operation\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} tenth argument must be non-zero\n* @throws {RangeError} fourteenth argument must be non-zero\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0 ] );\n*\n* dgemv( 'no-transpose', 2, 3, 1.0, A, 3, 1, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float64Array>[ 7.0, 16.0 ]\n*/\nfunction dgemv( trans, M, N, alpha, A, strideA1, strideA2, offsetA, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tif ( !isMatrixTranspose( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( M < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be non-zero.' ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourteenth argument must be non-zero.' ) );\n\t}\n\t// Check if we can early return...\n\tif ( M === 0 || N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\treturn base( trans, M, N, alpha, A, strideA1, strideA2, offsetA, x, strideX, offsetX, beta, y, strideY, offsetY ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dgemv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform one of the matrix-vector operations `y = α*A*x + β*y` or `y = α*A^T*x + β*y`, where `α` and `β` are scalars, `x` and `y` are vectors, and `A` is an `M` by `N` matrix.\n*\n* @module @stdlib/blas/base/dgemv\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dgemv from '@stdlib/blas/base/dgemv';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0 ] );\n*\n* dgemv( 'row-major', 'no-transpose', 2, 3, 1.0, A, 3, x, 1, 1.0, y, 1 );\n* // y => <Float64Array>[ 7.0, 16.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dgemv from '@stdlib/blas/base/dgemv';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0 ] );\n*\n* dgemv.ndarray( 'no-transpose', 2, 3, 1.0, A, 3, 1, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float64Array>[ 7.0, 16.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dgemv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdgemv = main;\n} else {\n\tdgemv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dgemv;\n\n// exports: { \"ndarray\": \"dgemv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dgemv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport { enum as enumeration } from './../../../base/diagonal-types';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the BLAS diagonal type string associated with a BLAS diagonal type enumeration constant.\n*\n* @param {integer} value - diagonal type enumeration constant\n* @returns {(string|null)} diagonal type string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/diagonal-type-str2enum';\n*\n* var v = str2enum( 'unit' );\n* // returns <number>\n*\n* var s = enum2str( v );\n* // returns 'unit'\n*/\nfunction enum2str( value ) {\n\tvar v = hash[ value ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from './../../../base/diagonal-types';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a BLAS diagonal type.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `UNIT == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} diagonal - diagonal type\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'unit' );\n* // returns <number>\n*/\nfunction str2enum( diagonal ) {\n\tvar v = ENUM[ diagonal ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT64_MAX from '@stdlib/constants/float64/max';\nimport abs from '@stdlib/math/base/special/abs';\nimport abs2 from '@stdlib/math/base/special/abs2';\nimport sqrt from '@stdlib/math/base/special/sqrt';\n\n\n// VARIABLES //\n\n// Blue's scaling constants:\nvar tsml = 1.4916681462400413E-154;\nvar tbig = 1.9979190722022350E+146;\nvar ssml = 4.4989137945431964E+161;\nvar sbig = 1.1113793747425387E-162;\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} L2-norm\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var z = dnrm2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnrm2( N, x, stride, offset ) {\n\tvar notbig;\n\tvar sumsq;\n\tvar abig;\n\tvar amed;\n\tvar asml;\n\tvar ymax;\n\tvar ymin;\n\tvar scl;\n\tvar ax;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offset;\n\n\t// Initialize loop values for accumulation:\n\tnotbig = true;\n\n\tsumsq = 0.0;\n\tabig = 0.0;\n\tamed = 0.0;\n\tasml = 0.0;\n\tscl = 1.0;\n\n\t// Compute the sum of squares using 3 accumulators--`abig` (sum of squares scaled down to avoid overflow), `asml` (sum of squares scaled up to avoid underflow), `amed` (sum of squares that do not require scaling)--and thresholds and multipliers--`tbig` (values bigger than this are scaled down by `sbig`) and `tsml` (values smaller than this are scaled up by `ssml`)...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = abs( x[ ix ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig += abs2( ax * sbig );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml += abs2( ax * ssml );\n\t\t\t}\n\t\t} else {\n\t\t\tamed += ( ax * ax );\n\t\t}\n\t\tix += stride;\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig` > 0...\n\t\tif ( amed > 0.0 || ( amed > FLOAT64_MAX ) || ( amed !== amed ) ) {\n\t\t\tabig += ( ( amed * sbig ) * sbig );\n\t\t}\n\t\tscl = 1.0 / sbig;\n\t\tsumsq = abig;\n\t} else if ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml` > 0...\n\t\tif ( amed > 0.0 || amed > FLOAT64_MAX || ( amed !== amed ) ) {\n\t\t\tamed = sqrt( amed );\n\t\t\tasml = sqrt( asml ) / ssml;\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscl = 1.0;\n\t\t\tsumsq = ( ymax * ymax ) * ( 1.0 + abs2( ymin / ymax ) );\n\t\t} else {\n\t\t\tscl = 1.0 / ssml;\n\t\t\tsumsq = asml;\n\t\t}\n\t} else {\n\t\t// All values are mid-range...\n\t\tscl = 1.0;\n\t\tsumsq = amed;\n\t}\n\treturn sqrt( sumsq ) * scl;\n}\n\n\n// EXPORTS //\n\nexport default dnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} L2-norm\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var out = dnrm2( 3, x, 1 );\n* // returns 3.0\n*/\nfunction dnrm2( N, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default dnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* drot( 4, x, 1, 1, y, 1, 1, 0.8, 0.6 );\n* // x => <Float64Array>[ 1.0, ~5.8, 7.2, 8.6, 10.0 ]\n* // y => <Float64Array>[ 6.0, 4.4, ~4.6, ~4.8, 5.0 ]\n*/\nfunction drot( N, x, strideX, offsetX, y, strideY, offsetY, c, s ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = ( c * x[ ix ] ) + ( s * y[ iy ] );\n\t\ty[ iy ] = ( c * y[ iy ] ) - ( s * x[ ix ] );\n\t\tx[ ix ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default drot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* drot( x.length, x, 1, y, 1, 0.8, 0.6 );\n* // x => <Float64Array>[ ~4.4, ~5.8, 7.2, 8.6, 10.0 ]\n* // y => <Float64Array>[ ~4.2, 4.4, 4.6, 4.8, 5.0 ]\n*/\nfunction drot( N, x, strideX, y, strideY, c, s ) {\n\tvar ix;\n\tvar iy;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nexport default drot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport abs2 from '@stdlib/math/base/special/abs2';\nimport copysign from '@stdlib/math/base/special/copysign';\n\n\n// MAIN //\n\n/**\n* Constructs a Givens plane rotation.\n*\n* @param {number} a - rotational elimination parameter\n* @param {number} b - rotational elimination parameter\n* @param {Float64Array} out - output array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var out = drotg( 0.0, 2.0, new Float64Array( 4 ), 1, 0 );\n* // returns <Float64Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*/\nfunction drotg( a, b, out, stride, offset ) {\n\tvar scale;\n\tvar sign;\n\tvar aa;\n\tvar ab;\n\tvar r;\n\tvar c;\n\tvar s;\n\tvar z;\n\n\taa = abs( a );\n\tab = abs( b );\n\tif ( aa > ab ) {\n\t\tsign = copysign( 1.0, a );\n\t} else {\n\t\tsign = copysign( 1.0, b );\n\t}\n\tscale = aa + ab;\n\tif ( scale === 0.0 ) {\n\t\tc = 1.0;\n\t\ts = 0.0;\n\t\tr = 0.0;\n\t\tz = 0.0;\n\t} else {\n\t\tr = scale * sqrt( abs2( a/scale ) + abs2( b/scale ) );\n\t\tr *= sign;\n\t\tc = a / r;\n\t\ts = b / r;\n\t\tz = 1.0;\n\t\tif ( aa > ab ) {\n\t\t\tz = s;\n\t\t} else if ( c !== 0.0 ) {\n\t\t\tz = 1.0 / c;\n\t\t}\n\t}\n\ta = r;\n\tb = z;\n\tout[ offset ] = a;\n\tout[ offset + stride ] = b;\n\tout[ offset + ( 2 * stride ) ] = c;\n\tout[ offset + ( 3 * stride ) ] = s;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default drotg;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float64Array from '@stdlib/array/float64';\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Constructs a Givens plane rotation.\n*\n* @param {number} a - rotational elimination parameter\n* @param {number} b - rotational elimination parameter\n* @returns {Float64Array} output array\n*\n* @example\n* var out = drotg( 0.0, 2.0 );\n* // returns <Float64Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*/\nfunction drotg( a, b ) {\n\tvar out = new Float64Array( 4 );\n\treturn fcn( a, b, out, 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default drotg;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a modified Givens plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float64Array} param - parameters for the modified Givens transformation\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 0.6, 0.1, -0.5, 0.8, 0.9, -0.3, -0.4 ] );\n* var y = new Float64Array( [ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ] );\n* var param = new Float64Array( [ 0.0, 0.0, 2.0, -3.0, 0.0 ] );\n*\n* drotm( 4, x, -1, 3, y, -2, 6, param );\n* // x => <Float64Array>[ -0.9, -0.8, 1.3, -1.6, 0.9, -0.3, -0.4 ]\n* // y => <Float64Array>[ 1.7, -0.9, 0.5, 0.7, -1.6, 0.2, 2.4 ]\n*/\nfunction drotm( N, x, strideX, offsetX, y, strideY, offsetY, param ) {\n\tvar dflag;\n\tvar dh11;\n\tvar dh12;\n\tvar dh21;\n\tvar dh22;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tvar w;\n\tvar z;\n\n\tdflag = param[ 0 ];\n\tif ( N <= 0 || dflag === -2.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( strideX === strideY && strideX > 0 ) {\n\t\tif ( dflag < 0.0 ) {\n\t\t\tdh11 = param[ 1 ];\n\t\t\tdh12 = param[ 3 ];\n\t\t\tdh21 = param[ 2 ];\n\t\t\tdh22 = param[ 4 ];\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tw = x[ ix ];\n\t\t\t\tz = y[ ix ];\n\t\t\t\tx[ ix ] = ( w * dh11 ) + ( z * dh12 );\n\t\t\t\ty[ ix ] = ( w * dh21 ) + ( z * dh22 );\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tif ( dflag === 0.0 ) {\n\t\t\tdh12 = param[ 3 ];\n\t\t\tdh21 = param[ 2 ];\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tw = x[ ix ];\n\t\t\t\tz = y[ ix ];\n\t\t\t\tx[ ix ] = w + ( z * dh12 );\n\t\t\t\ty[ ix ] = ( w * dh21 ) + z;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tdh11 = param[ 1 ];\n\t\tdh22 = param[ 4 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ ix ];\n\t\t\tx[ ix ] = ( w * dh11 ) + z;\n\t\t\ty[ ix ] = -w + ( z * dh22 );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( dflag < 0.0 ) {\n\t\tdh11 = param[ 1 ];\n\t\tdh12 = param[ 3 ];\n\t\tdh21 = param[ 2 ];\n\t\tdh22 = param[ 4 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ iy ];\n\t\t\tx[ ix ] = ( w * dh11 ) + ( z * dh12 );\n\t\t\ty[ iy ] = ( w * dh21 ) + ( z * dh22 );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( dflag === 0.0 ) {\n\t\tdh12 = param[ 3 ];\n\t\tdh21 = param[ 2 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ iy ];\n\t\t\tx[ ix ] = w + ( z * dh12 );\n\t\t\ty[ iy ] = ( w * dh21 ) + z;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tdh11 = param[ 1 ];\n\tdh22 = param[ 4 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tw = x[ ix ];\n\t\tz = y[ iy ];\n\t\tx[ ix ] = ( w * dh11 ) + z;\n\t\ty[ iy ] = -w + ( z * dh22 );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default drotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a modified Givens plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {Float64Array} param - parameters for the modified Givens transformation\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 0.6, 0.1, -0.5, 0.8, 0.9, -0.3, -0.4 ] );\n* var y = new Float64Array( [ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ] );\n* var param = new Float64Array( [ 0.0, 0.0, 2.0, -3.0, 0.0 ] );\n*\n* drotm( 4, x, -1, y, -2, param );\n* // x => <Float64Array>[ -0.9, -0.8, 1.3, -1.6, 0.9, -0.3, -0.4 ]\n* // y => <Float64Array>[ 1.7, -0.9, 0.5, 0.7, -1.6, 0.2, 2.4 ]\n*/\nfunction drotm( N, x, strideX, y, strideY, param ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy, param );\n}\n\n\n// EXPORTS //\n\nexport default drotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnrm2 from './dnrm2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport drot from './drot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( drot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default drot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Construct a Givens plane rotation.\n*\n* @module @stdlib/blas/base/drotg\n*\n* @example\n* import drotg from '@stdlib/blas/base/drotg';\n*\n* var out = drotg( 0.0, 2.0 );\n* // returns <Float64Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*\n* out = drotg( 6.0, -8.0 );\n* // returns <Float64Array>[ 10.0, ~-1.666, -0.6, 0.8 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import drotg from '@stdlib/blas/base/drotg';\n*\n* var out = new Float64Array( 4 );\n*\n* var y = drotg.assign( 0.0, 2.0, out, 1, 0 );\n* // returns <Float64Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport drotm from './drotm.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( drotm, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default drotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y` with extended accumulation and result.\n*\n* @param {integer} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = dsdot( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction dsdot( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += x[ ix ] * y[ iy ];\n\t\t\t\tix += 1;\n\t\t\t\tiy += 1;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ix]*y[iy] ) + ( x[ix+1]*y[iy+1] ) + ( x[ix+2]*y[iy+2] ) + ( x[ix+3]*y[iy+3] ) + ( x[ix+4]*y[iy+4] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn dot;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nexport default dsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y` with extended accumulation and result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = dsdot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction dsdot( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default dsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsdot from './dsdot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsdot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dfill } from './../../../ext/base/dfill';\nimport { ndarray as dscal } from './../../../base/dscal';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @private\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @param {NonNegativeInteger} offsetAP - starting `AP` index\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n*\n* dspmv( 'column-major', 'lower', 3, 1.0, AP, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float64Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\nfunction dspmv( order, uplo, N, alpha, AP, offsetAP, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tvar temp1;\n\tvar temp2;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar kk;\n\tvar kx;\n\tvar ky;\n\tvar j;\n\tvar k;\n\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tdfill( N, 0.0, y, strideY, offsetY );\n\t\t} else {\n\t\t\tdscal( N, beta, y, strideY, offsetY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\t// Form: y = alpha*A*x + y\n\tkx = offsetX;\n\tky = offsetY;\n\tkk = offsetAP;\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tjx = kx;\n\t\tjy = ky;\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\ttemp1 = alpha * x[ jx ];\n\t\t\ttemp2 = 0.0;\n\t\t\ty[ jy ] += temp1 * AP[ kk ];\n\t\t\tix = jx;\n\t\t\tiy = jy;\n\t\t\tfor ( k = kk + 1; k < kk + N - j; k++ ) {\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t\ty[ iy ] += temp1 * AP[ k ];\n\t\t\t\ttemp2 += AP[ k ] * x[ ix ];\n\t\t\t}\n\t\t\ty[ jy ] += alpha * temp2;\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t\tkk += N - j;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tjx = kx;\n\tjy = ky;\n\tfor ( j = 0; j < N; j++ ) {\n\t\ttemp1 = alpha * x[ jx ];\n\t\ttemp2 = 0.0;\n\t\tix = kx;\n\t\tiy = ky;\n\t\tfor ( k = kk; k < kk + j; k++ ) {\n\t\t\ty[ iy ] += temp1 * AP[ k ];\n\t\t\ttemp2 += AP[ k ] * x[ ix ];\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\ty[ jy ] += ( temp1 * AP[ kk + j ] ) + ( alpha * temp2 );\n\t\tjx += strideX;\n\t\tjy += strideY;\n\t\tkk += j + 1;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be non-zero\n* @throws {RangeError} tenth argument must be non-zero\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n*\n* dspmv( 'column-major', 'lower', 3, 1.0, AP, x, 1, 1.0, y, 1 );\n* // y => <Float64Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\nfunction dspmv( order, uplo, N, alpha, AP, x, strideX, beta, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Seventh argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be non-zero. Value: `%d`.', strideY ) );\n\t}\n\toffsetX = stride2offset( N, strideX );\n\toffsetY = stride2offset( N, strideY );\n\treturn base( order, uplo, N, alpha, AP, 0, x, strideX, offsetX, beta, y, strideY, offsetY ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dspmv from './dspmv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dspmv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @param {NonNegativeInteger} offsetAP - starting `AP` index\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} twelfth argument must be non-zero\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n*\n* dspmv( 'column-major', 'lower', 3, 1.0, AP, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float64Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\nfunction dspmv( order, uplo, N, alpha, AP, offsetAP, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Twelfth argument must be non-zero. Value: `%d`.', strideY ) );\n\t}\n\treturn base( order, uplo, N, alpha, AP, offsetAP, x, strideX, offsetX, beta, y, strideY, offsetY ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @module @stdlib/blas/base/dspmv\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dspmv from '@stdlib/blas/base/dspmv';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n*\n* dspmv( 'column-major', 'lower', 3, 1.0, AP, x, 1, 1.0, y, 1 );\n* // y => <Float64Array>[ ~7.0, ~12.0, ~15.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dspmv from '@stdlib/blas/base/dspmv';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n*\n* dspmv.ndarray( 'column-major', 'lower', 3, 1.0, AP, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float64Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dspmv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdspmv = main;\n} else {\n\tdspmv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dspmv;\n\n// exports: { \"ndarray\": \"dspmv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dspmv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @private\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @param {integer} strideAP - `AP` stride length\n* @param {NonNegativeInteger} offsetAP - starting index for `AP`\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dspr( 'row-major', 'upper', 3, 1.0, x, 1, 0, AP, 1, 0 );\n* // AP => <Float64Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*/\nfunction dspr( order, uplo, N, alpha, x, strideX, offsetX, AP, strideAP, offsetAP ) { // eslint-disable-line max-len\n\tvar tmp;\n\tvar ix0;\n\tvar ix1;\n\tvar iap;\n\tvar i0;\n\tvar i1;\n\tvar kk;\n\tvar ox;\n\n\tox = offsetX;\n\tkk = offsetAP;\n\tif (\n\t\t( order === 'column-major' && uplo === 'upper' ) ||\n\t\t( order === 'row-major' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = alpha * x[ ix1 ];\n\t\t\t\tix0 = ox;\n\t\t\t\tiap = kk;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tAP[ iap ] += x[ ix0 ] * tmp;\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t\tiap += strideAP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t\tkk += ( i1 + 1 ) * strideAP;\n\t\t}\n\t\treturn AP;\n\t}\n\t// ( order === 'column-major' && uplo === 'lower' ) || ( order === 'row-major' && uplo === 'upper' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\ttmp = alpha * x[ ix1 ];\n\t\t\tix0 = ix1;\n\t\t\tiap = kk;\n\t\t\tfor ( i0 = 0; i0 < N - i1; i0++ ) {\n\t\t\t\tAP[ iap ] += x[ ix0 ] * tmp;\n\t\t\t\tix0 += strideX;\n\t\t\t\tiap += strideAP;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t\tkk += ( N - i1 ) * strideAP;\n\t}\n\treturn AP;\n}\n\n\n// EXPORTS //\n\nexport default dspr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dspr( 'row-major', 'upper', 3, 1.0, x, 1, AP );\n* // AP => <Float64Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*/\nfunction dspr( order, uplo, N, alpha, x, strideX, AP ) {\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn AP;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( order, uplo, N, alpha, x, strideX, ox, AP, 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default dspr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dspr from './dspr.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dspr, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dspr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @param {integer} strideAP - `AP` stride length\n* @param {NonNegativeInteger} offsetAP - starting index for `AP`\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} ninth argument must be non-zero\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dspr( 'row-major', 'upper', 3, 1.0, x, 1, 0, AP, 1, 0 );\n* // AP => <Float64Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*/\nfunction dspr( order, uplo, N, alpha, x, strideX, offsetX, AP, strideAP, offsetAP ) { // eslint-disable-line max-len\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideAP === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero. Value: `%d`.', strideAP ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn AP;\n\t}\n\treturn base( order, uplo, N, alpha, x, strideX, offsetX, AP, strideAP, offsetAP ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dspr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @module @stdlib/blas/base/dspr\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dspr from '@stdlib/blas/base/dspr';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dspr( 'row-major', 'upper', 3, 1.0, x, 1, AP );\n* // AP => <Float64Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dspr from '@stdlib/blas/base/dspr';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dspr.ndarray( 'row-major', 'upper', 3, 1.0, x, 1, 0, AP, 1, 0 );\n* // AP => <Float64Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dspr;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdspr = main;\n} else {\n\tdspr = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dspr;\n\n// exports: { \"ndarray\": \"dspr.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dspr/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges two double-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dswap( x.length, x, 1, 0, y, 1, 0 );\n* // x => <Float64Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = y[ iy ];\n\t\t\t\ty[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = y[ iy ];\n\t\t\ty[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = y[ iy+1 ];\n\t\t\ty[ iy+1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = y[ iy+2 ];\n\t\t\ty[ iy+2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Interchanges two double-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* dswap( x.length, x, 1, y, 1 );\n* // x => <Float64Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dswap( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default dswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dswap from './dswap.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dswap, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dfill from './../../../ext/base/dfill';\nimport dscal from './../../../base/dscal';\nimport max from '@stdlib/math/base/special/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} A - matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be greater than or equal to max(1,N)\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} eleventh argument must be non-zero\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* dsymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0.0, y, 1 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction dsymv( order, uplo, N, alpha, A, LDA, x, strideX, beta, y, strideY ) { // eslint-disable-line max-params\n\tvar temp1;\n\tvar temp2;\n\tvar jmin;\n\tvar jmax;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar ox;\n\tvar oy;\n\tvar sy;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( 'invalid argument. Sixth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eleventh argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\n\t// Form: y = beta*y\n\tsy = strideY;\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tdfill( N, 0.0, y, strideY );\n\t\t} else {\n\t\t\tif ( sy < 0 ) {\n\t\t\t\tsy = -sy;\n\t\t\t}\n\t\t\tdscal( N, beta, y, sy );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX > 0 ) {\n\t\tox = 0;\n\t} else {\n\t\tox = ( 1 - N ) * strideX;\n\t}\n\tif ( strideY > 0 ) {\n\t\toy = 0;\n\t} else {\n\t\toy = ( 1 - N ) * strideY;\n\t}\n\t// Form: y = alpha*A*x + y\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tix = ox;\n\t\tiy = oy;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ttemp1 = alpha * x[ ix ];\n\t\t\ttemp2 = 0.0;\n\t\t\tjmin = i + 1;\n\t\t\tjmax = N;\n\t\t\tjx = ox + ( jmin*strideX );\n\t\t\tjy = oy + ( jmin*strideY );\n\t\t\ty[ iy ] += temp1 * A[ ( LDA * i ) + i ];\n\t\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\t\tk = ( LDA * i ) + j;\n\t\t\t\ty[ jy ] += temp1 * A[ k ];\n\t\t\t\ttemp2 += x[ jx ] * A[ k ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\ty[ iy ] += alpha * temp2;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tix = ox + ( ( N - 1 ) * strideX );\n\tiy = oy + ( ( N - 1 ) * strideY );\n\tfor ( i = N - 1; i >= 0; i-- ) {\n\t\ttemp1 = alpha * x[ ix ];\n\t\ttemp2 = 0.0;\n\t\tjmin = 0;\n\t\tjmax = i;\n\t\tjx = ox + ( jmin * strideX );\n\t\tjy = oy + ( jmin * strideY );\n\t\ty[ iy ] += temp1 * A[ ( LDA * i ) + i ];\n\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\tk = ( LDA * i ) + j;\n\t\t\ty[ jy ] += temp1 * A[ k ];\n\t\t\ttemp2 += x[ jx ] * A[ k ];\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t}\n\t\ty[ iy ] += alpha * temp2;\n\t\tix -= strideX;\n\t\tiy -= strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dsymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsymv from './dsymv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsymv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dfill } from './../../../ext/base/dfill';\nimport { ndarray as dscal } from './../../../base/dscal';\nimport max from '@stdlib/math/base/special/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} A - matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {number} beta - scalar constant\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be greater than or equal to max(1,N)\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} twelfth argument must be non-zero\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* dsymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0, 0.0, y, 1, 0 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction dsymv( order, uplo, N, alpha, A, LDA, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tvar temp1;\n\tvar temp2;\n\tvar jmin;\n\tvar jmax;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar ox;\n\tvar oy;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( 'invalid argument. Sixth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Twelfth argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tdfill( N, 0.0, y, strideY, offsetY );\n\t\t} else {\n\t\t\tdscal( N, beta, y, strideY, offsetY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tox = offsetX;\n\toy = offsetY;\n\n\t// Form: y = alpha*A*x + y\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tix = ox;\n\t\tiy = oy;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ttemp1 = alpha * x[ ix ];\n\t\t\ttemp2 = 0.0;\n\t\t\tjmin = i + 1;\n\t\t\tjmax = N;\n\t\t\tjx = ox + ( jmin * strideX );\n\t\t\tjy = oy + ( jmin * strideY );\n\t\t\ty[ iy ] += temp1 * A[ ( LDA * i ) + i ];\n\t\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\t\tk = ( LDA * i ) + j;\n\t\t\t\ty[ jy ] += temp1 * A[ k ];\n\t\t\t\ttemp2 += x[ jx ] * A[ k ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\ty[ iy ] += alpha * temp2;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tix = ox + ( ( N - 1 ) * strideX );\n\tiy = oy + ( ( N - 1 ) * strideY );\n\tfor ( i = N - 1; i >= 0; i-- ) {\n\t\ttemp1 = alpha * x[ ix ];\n\t\ttemp2 = 0.0;\n\t\tjmin = 0;\n\t\tjmax = i;\n\t\tjx = ox + ( jmin * strideX );\n\t\tjy = oy + ( jmin * strideY );\n\t\ty[ iy ] += temp1 * A[ ( LDA * i ) + i ];\n\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\tk = ( LDA * i ) + j;\n\t\t\ty[ jy ] += temp1 * A[ k ];\n\t\t\ttemp2 += x[ jx ] * A[ k ];\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t}\n\t\ty[ iy ] += alpha * temp2;\n\t\tix -= strideX;\n\t\tiy -= strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dsymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas/base/dsymv\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsymv from '@stdlib/blas/base/dsymv';\n*\n* var A = new Float64Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* dsymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0.0, y, 1 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsymv from '@stdlib/blas/base/dsymv';\n*\n* var A = new Float64Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* dsymv.ndarray( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0, 0.0, y, 1, 0 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dsymv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdsymv = main;\n} else {\n\tdsymv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dsymv;\n\n// exports: { \"ndarray\": \"dsymv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dsymv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @private\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction dsyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tvar isrm;\n\tvar tmp;\n\tvar ix0;\n\tvar ix1;\n\tvar sa0;\n\tvar sa1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\tif (\n\t\t( !isrm && uplo === 'upper' ) ||\n\t\t( isrm && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = alpha * x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tA[ oa+(sa0*i0) ] += x[ ix0 ] * tmp;\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn A;\n\t}\n\t// ( isrm && uplo === 'upper' ) || ( !isrm && uplo === 'lower' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\ttmp = alpha * x[ ix1 ];\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tA[ oa+(sa0*i0) ] += x[ ix0 ] * tmp;\n\t\t\t\tix0 += strideX;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nexport default dsyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} eighth argument must be greater than or equal to max(1,N)\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr( 'row-major', 'upper', 3, 1.0, x, 1, A, 3 );\n* // A => <Float64Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction dsyr( order, uplo, N, alpha, x, strideX, A, LDA ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, N, alpha, x, strideX, ox, A, sa1, sa2, 0 );\n}\n\n\n// EXPORTS //\n\nexport default dsyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsyr from './dsyr.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsyr, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @throws {TypeError} first argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be non-zero\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction dsyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\treturn base( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas/base/dsyr\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsyr from '@stdlib/blas/base/dsyr';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr( 'row-major', 'upper', 3, 1.0, x, 1, A, 3 );\n* // A => <Float64Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsyr from '@stdlib/blas/base/dsyr';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr.ndarray( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dsyr;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdsyr = main;\n} else {\n\tdsyr = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dsyr;\n\n// exports: { \"ndarray\": \"dsyr.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dsyr/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @private\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr2( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction dsyr2( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len, max-params\n\tvar tmp1;\n\tvar tmp2;\n\tvar isrm;\n\tvar ix0;\n\tvar ix1;\n\tvar iy0;\n\tvar iy1;\n\tvar sa0;\n\tvar sa1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\tvar oy;\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) { // row-major\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // column-major\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\toy = offsetY;\n\tix1 = ox;\n\tiy1 = oy;\n\tif (\n\t\t( isrm && uplo === 'lower' ) ||\n\t\t( !isrm && uplo === 'upper' )\n\t) {\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( ( x[ ix1 ] !== 0.0 ) || ( y[ iy1 ] !== 0.0 ) ) {\n\t\t\t\ttmp1 = alpha * y[ iy1 ];\n\t\t\t\ttmp2 = alpha * x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tiy0 = oy;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tA[ oa+(sa0*i0) ] += ( x[ ix0 ] * tmp1 ) + ( y[ iy0 ] * tmp2 ); // eslint-disable-line max-len\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t\tiy0 += strideY;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t\tiy1 += strideY;\n\t\t}\n\t\treturn A;\n\t}\n\t// ( isrm && uplo === 'upper' ) || ( !isrm && uplo === 'lower' )\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( ( x[ ix1 ] !== 0.0 ) || ( y[ iy1 ] !== 0.0 ) ) {\n\t\t\ttmp1 = alpha * y[ iy1 ];\n\t\t\ttmp2 = alpha * x[ ix1 ];\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tiy0 = iy1;\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tA[ oa+(sa0*i0) ] += ( x[ ix0 ] * tmp1 ) + ( y[ iy0 ] * tmp2 );\n\t\t\t\tix0 += strideX;\n\t\t\t\tiy0 += strideY;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t\tiy1 += strideY;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nexport default dsyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {Float64Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} eighth argument must be greater than or equal to max(1,N)\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr2( 'row-major', 'upper', 3, 1.0, x, 1, y, 1, A, 3 );\n* // A => <Float64Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction dsyr2( order, uplo, N, alpha, x, strideX, y, strideY, A, LDA ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\tvar oy;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\toy = stride2offset( N, strideY );\n\treturn base( uplo, N, alpha, x, strideX, ox, y, strideY, oy, A, sa1, sa2, 0 ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsyr2 from './dsyr2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsyr2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @throws {TypeError} first argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be non-zero\n* @throws {RangeError} eighth argument must be non-zero\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr2( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction dsyr2( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len, max-params\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether the reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\treturn base( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas/base/dsyr2\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsyr2 from '@stdlib/blas/base/dsyr2';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr2( 'row-major', 'upper', 3, 1.0, x, 1, y, 1, A, 3 );\n* // A => <Float64Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dsyr2 from '@stdlib/blas/base/dsyr2';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dsyr2.ndarray( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float64Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dsyr2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdsyr2 = main;\n} else {\n\tdsyr2 = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dsyr2;\n\n// exports: { \"ndarray\": \"dsyr2.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dsyr2/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @private\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction dtrmv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tvar nonunit;\n\tvar isrm;\n\tvar tmp;\n\tvar sa0;\n\tvar sa1;\n\tvar ix0;\n\tvar ix1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\n\t// Note on variable naming convention: sa#, ix#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tnonunit = ( diag === 'non-unit' );\n\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = 0; i0 < i1; i0++ ) {\n\t\t\t\t\tx[ ix0 ] += tmp * A[ oa+(sa0*i0) ];\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t}\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] *= A[ oa+(sa0*i1) ];\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'lower' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'upper' )\n\t) {\n\t\tox += ( N - 1 ) * strideX;\n\t\tix1 = ox;\n\t\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = N-1; i0 > i1; i0-- ) {\n\t\t\t\t\tx[ ix0 ] += tmp * A[ oa+(sa0*i0) ];\n\t\t\t\t\tix0 -= strideX;\n\t\t\t\t}\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] *= A[ oa+(sa0*i1) ];\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 -= strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans !== 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans === 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox + ( ( N - 1 ) * strideX );\n\t\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\t\ttmp = x[ ix1 ];\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tif ( nonunit ) {\n\t\t\t\ttmp *= A[ oa+(sa0*i1) ];\n\t\t\t}\n\t\t\tfor ( i0 = i1-1; i0 >= 0; i0-- ) {\n\t\t\t\tix0 -= strideX;\n\t\t\t\ttmp += x[ ix0 ] * A[ oa+(sa0*i0) ];\n\t\t\t}\n\t\t\tx[ ix1 ] = tmp;\n\t\t\tix1 -= strideX;\n\t\t}\n\t\treturn x;\n\t}\n\t// ( !isrm && trans !== 'no-transpose' && uplo === 'lower' ) || ( isrm && trans === 'no-transpose' && uplo === 'upper' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\ttmp = x[ ix1 ];\n\t\toa = offsetA + (sa1*i1);\n\t\tix0 = ix1;\n\t\tif ( nonunit ) {\n\t\t\ttmp *= A[ oa+(sa0*i1) ];\n\t\t}\n\t\tfor ( i0 = i1+1; i0 < N; i0++ ) {\n\t\t\tix0 += strideX;\n\t\t\ttmp += x[ ix0 ] * A[ oa+(sa0*i0) ];\n\t\t}\n\t\tx[ ix1 ] = tmp;\n\t\tix1 += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dtrmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nimport isDiagonal from './../../../base/assert/is-diagonal-type';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} third argument must be a valid transpose operation\n* @throws {TypeError} fourth argument must be a valid diagonal type\n* @throws {RangeError} fifth argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be greater than or equal to max(1,N)\n* @throws {RangeError} ninth argument must be non-zero\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction dtrmv( order, uplo, trans, diag, N, A, LDA, x, strideX ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Seventh argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, trans, diag, N, A, sa1, sa2, 0, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default dtrmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dtrmv from './dtrmv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dtrmv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dtrmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nimport isDiagonal from './../../../base/assert/is-diagonal-type';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @throws {TypeError} first argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} second argument must be a valid transpose operation\n* @throws {TypeError} third argument must be a valid diagonal type\n* @throws {RangeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} tenth argument must be non-zero\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction dtrmv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\treturn base( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dtrmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @module @stdlib/blas/base/dtrmv\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dtrmv from '@stdlib/blas/base/dtrmv';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dtrmv from '@stdlib/blas/base/dtrmv';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv.ndarray( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dtrmv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdtrmv = main;\n} else {\n\tdtrmv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dtrmv;\n\n// exports: { \"ndarray\": \"dtrmv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dtrmv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\n\n\n// MAIN //\n\n/**\n* Solves one of the systems of equations `A*x = b` or `A^T*x = b` where `b` and `x` are `N` element vectors and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @private\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrsv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float64Array>[ 0.0, -4.0, 3.0 ]\n*/\nfunction dtrsv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tvar nonunit;\n\tvar isrm;\n\tvar tmp;\n\tvar sa0;\n\tvar sa1;\n\tvar ix0;\n\tvar ix1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\n\t// Note on variable naming convention: sa#, ix#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tnonunit = ( diag === 'non-unit' );\n\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox + ( ( N - 1 ) * strideX );\n\t\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] /= A[ oa+(sa0*i1) ];\n\t\t\t\t}\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\tix0 = ix1;\n\t\t\t\tfor ( i0 = i1-1; i0 >= 0; i0-- ) {\n\t\t\t\t\tix0 -= strideX;\n\t\t\t\t\tx[ ix0 ] -= tmp * A[ oa+(sa0*i0) ];\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 -= strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'lower' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'upper' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] /= A[ oa+(sa0*i1) ];\n\t\t\t\t}\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\tix0 = ix1;\n\t\t\t\tfor ( i0 = i1+1; i0 < N; i0++ ) {\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t\tx[ ix0 ] -= tmp * A[ oa+(sa0*i0) ];\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans !== 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans === 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\ttmp = x[ ix1 ];\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ox;\n\t\t\tfor ( i0 = 0; i0 <= i1-1; i0++ ) {\n\t\t\t\ttmp -= x[ ix0 ] * A[ oa+(sa0*i0) ];\n\t\t\t\tix0 += strideX;\n\t\t\t}\n\t\t\tif ( nonunit ) {\n\t\t\t\ttmp /= A[ oa+(sa0*i1) ];\n\t\t\t}\n\t\t\tx[ ix1 ] = tmp;\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn x;\n\t}\n\t// ( !isrm && trans !== 'no-transpose' && uplo === 'lower' ) || ( isrm && trans === 'no-transpose' && uplo === 'upper' )\n\tox += ( N - 1 ) * strideX;\n\tix1 = ox;\n\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\ttmp = x[ ix1 ];\n\t\toa = offsetA + (sa1*i1);\n\t\tix0 = ox;\n\t\tfor ( i0 = N-1; i0 > i1; i0-- ) {\n\t\t\ttmp -= x[ ix0 ] * A[ oa+(sa0*i0) ];\n\t\t\tix0 -= strideX;\n\t\t}\n\t\tif ( nonunit ) {\n\t\t\ttmp /= A[ oa+(sa0*i1) ];\n\t\t}\n\t\tx[ ix1 ] = tmp;\n\t\tix1 -= strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dtrsv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nimport isDiagonal from './../../../base/assert/is-diagonal-type';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Solves one of the systems of equations `A*x = b` or `A^T*x = b` where `b` and `x` are `N` element vectors and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} third argument must be a valid transpose operation\n* @throws {TypeError} fourth argument must be a valid diagonal type\n* @throws {RangeError} fifth argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be greater than or equal to max(1,N)\n* @throws {RangeError} ninth argument must be non-zero\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrsv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float64Array>[ 0.0, -4.0, 3.0 ]\n*/\nfunction dtrsv( order, uplo, trans, diag, N, A, LDA, x, strideX ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Seventh argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, trans, diag, N, A, sa1, sa2, 0, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default dtrsv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dtrsv from './dtrsv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dtrsv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dtrsv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nimport isDiagonal from './../../../base/assert/is-diagonal-type';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Solves one of the systems of equations `A*x = b` or `A^T*x = b` where `b` and `x` are `N` element vectors and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @throws {TypeError} first argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} second argument must be a valid transpose operation\n* @throws {TypeError} third argument must be a valid diagonal type\n* @throws {RangeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} tenth argument must be non-zero\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrsv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float64Array>[ 0.0, -4.0, 3.0 ]\n*/\nfunction dtrsv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\treturn base( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dtrsv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to solve one of the systems of equations `A*x = b` or `A^T*x = b` where `b` and `x` are `N` element vectors and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @module @stdlib/blas/base/dtrsv\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dtrsv from '@stdlib/blas/base/dtrsv';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrsv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float64Array>[ 0.0, -4.0, 3.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import dtrsv from '@stdlib/blas/base/dtrsv';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrsv.ndarray( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float64Array>[ 0.0, -4.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dtrsv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdtrsv = main;\n} else {\n\tdtrsv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dtrsv;\n\n// exports: { \"ndarray\": \"dtrsv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dtrsv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT64_MAX from '@stdlib/constants/float64/max';\nimport abs from '@stdlib/math/base/special/abs';\nimport abs2 from '@stdlib/math/base/special/abs2';\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\n\n\n// VARIABLES //\n\n// Blue's scaling constants:\nvar tsml = 1.4916681462400413E-154;\nvar tbig = 1.9979190722022350E+146;\nvar ssml = 4.4989137945431964E+161;\nvar sbig = 1.1113793747425387E-162;\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a complex double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - input array\n* @param {integer} strideX - `zx` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `zx`\n* @returns {number} L2-norm\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n*\n* var zx = new Complex128Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = dznrm2( 4, zx, 1, 0 );\n* // returns ~0.8\n*/\nfunction dznrm2( N, zx, strideX, offsetX ) {\n\tvar notbig;\n\tvar sumsq;\n\tvar viewX;\n\tvar abig;\n\tvar amed;\n\tvar asml;\n\tvar ymax;\n\tvar ymin;\n\tvar scl;\n\tvar ax;\n\tvar ix;\n\tvar sx;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\t// Reinterpret the input array as a real-valued array comprised of interleaved real and imaginary components:\n\tviewX = reinterpret( zx, 0 );\n\tsx = strideX * 2;\n\tix = offsetX * 2;\n\n\t// Initialize loop values for accumulation:\n\tnotbig = true;\n\n\tsumsq = 0.0;\n\tabig = 0.0;\n\tamed = 0.0;\n\tasml = 0.0;\n\tscl = 1.0;\n\n\t// Compute the sum of squares using 3 accumulators--`abig` (sum of squares scaled down to avoid overflow), `asml` (sum of squares scaled up to avoid underflow), `amed` (sum of squares that do not require scaling)--and thresholds and multipliers--`tbig` (values bigger than this are scaled down by `sbig`) and `tsml` (values smaller than this are scaled up by `ssml`)...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = abs( viewX[ ix ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig += abs2( ax * sbig );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml += abs2( ax * ssml );\n\t\t\t}\n\t\t} else {\n\t\t\tamed += ax * ax;\n\t\t}\n\t\tax = abs( viewX[ ix + 1 ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig += abs2( ax * sbig );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml += abs2( ax * ssml );\n\t\t\t}\n\t\t} else {\n\t\t\tamed += ax * ax;\n\t\t}\n\t\tix += sx;\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig` > 0...\n\t\tif ( amed > 0.0 || ( amed > FLOAT64_MAX ) || ( amed !== amed ) ) {\n\t\t\tabig += ( amed * sbig ) * sbig;\n\t\t}\n\t\tscl = 1.0 / sbig;\n\t\tsumsq = abig;\n\t} else if ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml` > 0...\n\t\tif ( amed > 0.0 || amed > FLOAT64_MAX || ( amed !== amed ) ) {\n\t\t\tamed = sqrt( amed );\n\t\t\tasml = sqrt( asml ) / ssml;\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscl = 1.0;\n\t\t\tsumsq = ( ymax * ymax ) * ( 1.0 + abs2( ymin / ymax ) );\n\t\t} else {\n\t\t\tscl = 1.0 / ssml;\n\t\t\tsumsq = asml;\n\t\t}\n\t} else {\n\t\t// All values are mid-range...\n\t\tscl = 1.0;\n\t\tsumsq = amed;\n\t}\n\treturn sqrt( sumsq ) * scl;\n}\n\n\n// EXPORTS //\n\nexport default dznrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a complex double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - input array\n* @param {integer} strideX - `zx` stride length\n* @returns {number} L2-norm\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n*\n* var zx = new Complex128Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = dznrm2( 4, zx, 1 );\n* // returns ~0.8\n*/\nfunction dznrm2( N, zx, strideX ) {\n\treturn ndarray( N, zx, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dznrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dznrm2 from './dznrm2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dznrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dznrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to find the euclidean norm of a complex double-precision floating-point vector.\n*\n* @module @stdlib/blas/base/dznrm2\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import dznrm2 from '@stdlib/blas/base/dznrm2';\n*\n* var zx = new Complex128Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = dznrm2( 4, zx, 1 );\n* // returns ~0.8\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import dznrm2 from '@stdlib/blas/base/dznrm2';\n*\n* var zx = new Complex128Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = dznrm2.ndarray( 4, zx, 1, 0 );\n* // returns ~0.8\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dznrm2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdznrm2 = main;\n} else {\n\tdznrm2 = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dznrm2;\n\n// exports: { \"ndarray\": \"dznrm2.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/dznrm2/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n*\n* var s = gasum( x.length, arraylike2object( toAccessorArray( x ) ), 1, 0 );\n* // returns 15.0\n*/\nfunction gasum( N, x, stride, offset ) {\n\tvar buf;\n\tvar get;\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tbuf = x.data;\n\tget = x.accessors[ 0 ];\n\n\tsum = 0.0;\n\tix = offset;\n\tif ( stride === 0 ) {\n\t\tsum = abs( get( buf, ix ) * N );\n\t\treturn sum;\n\t}\n\n\t// Use unrolled loops if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += abs( get( buf, ix ) );\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += abs( get( buf, ix ) ) + abs( get( buf, ix+1 ) ) + abs( get( buf, ix+2 ) ) + abs( get( buf, ix+3 ) ) + abs( get( buf, ix+4 ) ) + abs( get( buf, ix+5 ) ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += abs( get( buf, ix ) );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - `x` stride length\n* @param {NonNegativeInteger} offset - starting `x` index\n* @returns {number} sum\n*\n* @example\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = gasum( x.length, x, 1, 0 );\n* // returns 15.0\n*/\nfunction gasum( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\tvar o;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, stride, offset );\n\t}\n\n\tix = offset;\n\tif ( stride === 0 ) {\n\t\tsum = abs( x[ix] * N );\n\t\treturn sum;\n\t}\n\n\t// Use unrolled loops if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += abs( x[ix] );\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += abs( x[ix] ) + abs( x[ix+1] ) + abs( x[ix+2] ) + abs( x[ix+3] ) + abs( x[ix+4] ) + abs( x[ix+5] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += abs( x[ix] );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {PositiveInteger} stride - `x` stride length\n* @returns {number} sum\n*\n* @example\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = gasum( x.length, x, 1 );\n* // returns 15.0\n*/\nfunction gasum( N, x, stride ) {\n\treturn ndarray( N, x, stride, stride2offset( N, stride ) );\n}\n\n\n// EXPORTS //\n\nexport default gasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the sum of absolute values.\n*\n* @module @stdlib/blas/base/gasum\n*\n* @example\n* import gasum from '@stdlib/blas/base/gasum';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = gasum( x.length, x, 1 );\n* // 15.0\n*\n* @example\n* // Use the `ndarray` interface...\n* import { ndarray as gasum } from '@stdlib/blas/base/gasum';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = gasum( x.length, x, 1, 0 );\n* // 15.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy( x.length, alpha, x, 1, y, 1 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction gaxpy( N, alpha, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ i ] += alpha * x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ i ] += alpha * x[ i ];\n\t\t\ty[ i+1 ] += alpha * x[ i+1 ];\n\t\t\ty[ i+2 ] += alpha * x[ i+2 ];\n\t\t\ty[ i+3 ] += alpha * x[ i+3 ];\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += alpha * x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Object} y - output array object\n* @param {Collection} y.data - output array data\n* @param {Array<Function>} y.accessors - array element accessors\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Object} output array object\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import reinterpret64 from '@stdlib/strided/base/reinterpret-complex64';\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var x = {\n*     'data': new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] ),\n*     'accessors': [ getter, setter ]\n* };\n*\n* var y = {\n*     'data': new Complex64Array( [ 5.0, 6.0, 7.0, 8.0 ] ),\n*     'accessors': [ getter, setter ]\n* };\n*\n* gcopy( x.data.length, x, 1, 0, y, 1, 0 );\n*\n* var view = reinterpret64( y.data, 0 );\n* // view => <Float32Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*/\nfunction gcopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar set;\n\tvar get;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache a reference to the element accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to multiply `x` and a constant and add the result to `y`.\n*\n* @module @stdlib/blas/base/gaxpy\n*\n* @example\n* import gaxpy from '@stdlib/blas/base/gaxpy';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy( x.length, alpha, x, 1, y, 1 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*\n* @example\n* import gaxpy from '@stdlib/blas/base/gaxpy';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction gaxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\ty[ iy+1 ] += alpha * x[ ix+1 ];\n\t\t\ty[ iy+2 ] += alpha * x[ ix+2 ];\n\t\t\ty[ iy+3 ] += alpha * x[ ix+3 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += alpha * x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Collection} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gcopy( x.length, x, 1, y, 1 );\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction gcopy( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\tif ( strideX < 0 ) {\n\t\t\tix = (1-N) * strideX;\n\t\t} else {\n\t\t\tix = 0;\n\t\t}\n\t\tif ( strideY < 0 ) {\n\t\t\tiy = (1-N) * strideY;\n\t\t} else {\n\t\t\tiy = 0;\n\t\t}\n\t\taccessors( N, ox, strideX, ix, oy, strideY, iy );\n\t\treturn oy.data;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ i ] = x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ i ] = x[ i ];\n\t\t\ty[ i+1 ] = x[ i+1 ];\n\t\t\ty[ i+2 ] = x[ i+2 ];\n\t\t\ty[ i+3 ] = x[ i+3 ];\n\t\t\ty[ i+4 ] = x[ i+4 ];\n\t\t\ty[ i+5 ] = x[ i+5 ];\n\t\t\ty[ i+6 ] = x[ i+6 ];\n\t\t\ty[ i+7 ] = x[ i+7 ];\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to copy values from `x` into `y`.\n*\n* @module @stdlib/blas/base/gcopy\n*\n* @example\n* import gcopy from '@stdlib/blas/base/gcopy';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gcopy( x.length, x, 1, y, 1 );\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* @example\n* import gcopy from '@stdlib/blas/base/gcopy';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gcopy.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Collection} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gcopy( x.length, x, 1, 0, y, 1, 0 );\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction gcopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn oy.data;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] = x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] = x[ ix ];\n\t\t\ty[ iy+1 ] = x[ ix+1 ];\n\t\t\ty[ iy+2 ] = x[ ix+2 ];\n\t\t\ty[ iy+3 ] = x[ ix+3 ];\n\t\t\ty[ iy+4 ] = x[ ix+4 ];\n\t\t\ty[ iy+5 ] = x[ ix+5 ];\n\t\t\ty[ iy+6 ] = x[ ix+6 ];\n\t\t\ty[ iy+7 ] = x[ ix+7 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n\n* var z = gdot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction gdot( N, x, strideX, y, strideY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += x[ i ] * y[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[i]*y[i] ) + ( x[i+1]*y[i+1] ) + ( x[i+2]*y[i+2] ) + ( x[i+3]*y[i+3] ) + ( x[i+4]*y[i+4] ); // eslint-disable-line max-len\n\t\t}\n\t\treturn dot;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = ( 1-N ) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = ( 1-N ) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += ( x[ ix ] * y[ iy ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nexport default gdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {integer} N - number of indexed elements\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n\n* var z = gdot( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction gdot( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += ( x[ ix ] * y[ iy ] );\n\t\t\t\tix += 1;\n\t\t\t\tiy += 1;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn dot;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ix]*y[iy] ) + ( x[ix+1]*y[iy+1] ) + ( x[ix+2]*y[iy+2] ) + ( x[ix+3]*y[iy+3] ) + ( x[ix+4]*y[iy+4] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn dot;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nexport default gdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport abs from '@stdlib/math/base/special/abs';\nimport pow from '@stdlib/math/base/special/pow';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {PositiveInteger} stride - stride length\n* @returns {number} L2-norm\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var z = gnrm2( x.length, x, 1 );\n* // returns 3.0\n*/\nfunction gnrm2( N, x, stride ) {\n\tvar scale;\n\tvar ssq;\n\tvar ax;\n\tvar i;\n\n\tif ( N <= 0 || stride <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 ) {\n\t\treturn abs( x[ 0 ] );\n\t}\n\tscale = 0.0;\n\tssq = 1.0;\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tif ( x[ i ] !== 0.0 ) {\n\t\t\tax = abs( x[ i ] );\n\t\t\tif ( scale < ax ) {\n\t\t\t\tssq = 1.0 + ( ssq * pow( scale/ax, 2 ) );\n\t\t\t\tscale = ax;\n\t\t\t} else {\n\t\t\t\tssq += pow( ax/scale, 2 );\n\t\t\t}\n\t\t}\n\t}\n\treturn scale * sqrt( ssq );\n}\n\n\n// EXPORTS //\n\nexport default gnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the dot product of vectors `x` and `y`.\n*\n* @module @stdlib/blas/base/gdot\n*\n* @example\n* import gdot from '@stdlib/blas/base/gdot';\n*\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* var z = gdot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*\n* @example\n* import gdot from '@stdlib/blas/base/gdot';\n*\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* var z = gdot.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the L2-norm of a vector.\n*\n* @module @stdlib/blas/base/gnrm2\n*\n* @example\n* import gnrm2 from '@stdlib/blas/base/gnrm2';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var z = gnrm2( x.length, x, 1 );\n* // returns 3.0\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gnrm2 from '@stdlib/blas/base/gnrm2';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var z = gnrm2.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport abs from '@stdlib/math/base/special/abs';\nimport pow from '@stdlib/math/base/special/pow';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} L2-norm\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var z = gnrm2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnrm2( N, x, stride, offset ) {\n\tvar scale;\n\tvar ssq;\n\tvar ax;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 ) {\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tscale = 0.0;\n\tssq = 1.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( x[ ix ] !== 0.0 ) {\n\t\t\tax = abs( x[ ix ] );\n\t\t\tif ( scale < ax ) {\n\t\t\t\tssq = 1.0 + ( ssq * pow( scale/ax, 2 ) );\n\t\t\t\tscale = ax;\n\t\t\t} else {\n\t\t\t\tssq += pow( ax/scale, 2 );\n\t\t\t}\n\t\t}\n\t\tix += stride;\n\t}\n\treturn scale * sqrt( ssq );\n}\n\n\n// EXPORTS //\n\nexport default gnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* gscal( 3, 5.0, arraylike2object( toAccessorArray( x ) ), 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, -20.0, 25.0, -30.0 ]\n*/\nfunction gscal( N, alpha, x, stride, offset ) {\n\tvar xbuf;\n\tvar xget;\n\tvar xset;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\txbuf = x.data;\n\txget = x.accessors[ 0 ];\n\txset = x.accessors[ 1 ];\n\n\tix = offset;\n\tif ( stride === 0 ) {\n\t\txset( xbuf, ix, xget( xbuf, ix ) * N * alpha );\n\t\treturn x;\n\t}\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\txset( xbuf, ix, xget( xbuf, ix ) * alpha );\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\txset( xbuf, ix, xget( xbuf, ix ) * alpha );\n\t\t\txset( xbuf, ix+1, xget( xbuf, ix+1 ) * alpha );\n\t\t\txset( xbuf, ix+2, xget( xbuf, ix+2 ) * alpha );\n\t\t\txset( xbuf, ix+3, xget( xbuf, ix+3 ) * alpha );\n\t\t\txset( xbuf, ix+4, xget( xbuf, ix+4 ) * alpha );\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\txset( xbuf, ix, xget( xbuf, ix ) * alpha );\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* gscal( 3, 5.0, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, -20.0, 25.0, -30.0 ]\n*/\nfunction gscal( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\taccessors( N, alpha, o, stride, offset );\n\t\treturn x;\n\t}\n\n\tix = offset;\n\tif ( stride === 0 ) {\n\t\tx[ ix ] *= alpha * N;\n\t\treturn x;\n\t}\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] *= alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] *= alpha;\n\t\t\tx[ ix+1 ] *= alpha;\n\t\t\tx[ ix+2 ] *= alpha;\n\t\t\tx[ ix+3 ] *= alpha;\n\t\t\tx[ ix+4 ] *= alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] *= alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {PositiveInteger} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal( x.length, 5.0, x, 1 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\nfunction gscal( N, alpha, x, stride ) {\n\treturn ndarray( N, alpha, x, stride, stride2offset( N, stride ) );\n}\n\n\n// EXPORTS //\n\nexport default gscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Interchanges vectors `x` and `y`.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - first input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Object} y - second input array object\n* @param {Collection} y.data - second input array array\n* @param {Array<Function>} y.accessors - array element accessors\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Object} `y`\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import reinterpret64 from '@stdlib/strided/base/reinterpret-complex64';\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var x = {\n*     'data': new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] ),\n*     'accessors': [ getter, setter ]\n* };\n*\n* var y = {\n*     'data': new Complex64Array( [ 5.0, 6.0, 7.0, 8.0 ] ),\n*     'accessors': [ getter, setter ]\n* };\n*\n* gswap( x.data.length, x, 1, 0, y, 1, 0 );\n*\n* var viewX = reinterpret64( x.data, 0 );\n* // viewX => <Float32Array>[ 5.0, 6.0, 7.0, 8.0 ]\n*\n* var viewY = reinterpret64( y.data, 0 );\n* // viewY => <Float32Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*/\nfunction gswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar set;\n\tvar get;\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache a reference to the element accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = get( xbuf, ix );\n\t\tset( xbuf, ix, get( ybuf, iy ) );\n\t\tset( ybuf, iy, tmp );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to multiply `x` by a constant.\n*\n* @module @stdlib/blas/base/gscal\n*\n* @example\n* import gscal from '@stdlib/blas/base/gscal';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal( x.length, 5.0, x, 1 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*\n* @example\n* import gscal from '@stdlib/blas/base/gscal';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges vectors `x` and `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Collection} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Collection} `y`\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gswap( x.length, x, 1, y, 1 );\n* // x => [ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction gswap( N, x, strideX, y, strideY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar m;\n\tvar i;\n\tvar j;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\tif ( strideX < 0 ) {\n\t\t\tix = (1-N) * strideX;\n\t\t} else {\n\t\t\tix = 0;\n\t\t}\n\t\tif ( strideY < 0 ) {\n\t\t\tiy = (1-N) * strideY;\n\t\t} else {\n\t\t\tiy = 0;\n\t\t}\n\t\taccessors( N, ox, strideX, ix, oy, strideY, iy );\n\t\treturn oy.data;\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ i ];\n\t\t\t\tx[ i ] = y[ i ];\n\t\t\t\ty[ i ] = tmp;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ i ];\n\t\t\tx[ i ] = y[ i ];\n\t\t\ty[ i ] = tmp;\n\n\t\t\tj = i + 1;\n\t\t\ttmp = x[ j ];\n\t\t\tx[ j ] = y[ j ];\n\t\t\ty[ j ] = tmp;\n\n\t\t\tj += 1;\n\t\t\ttmp = x[ j ];\n\t\t\tx[ j ] = y[ j ];\n\t\t\ty[ j ] = tmp;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges vectors `x` and `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Collection} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Collection} `y`\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gswap( x.length, x, 1, 0, y, 1, 0 );\n* // x => [ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction gswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn oy.data;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = y[ iy ];\n\t\t\t\ty[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = y[ iy ];\n\t\t\ty[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = y[ iy+1 ];\n\t\t\ty[ iy+1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = y[ iy+2 ];\n\t\t\ty[ iy+2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Finds the index of the first element having the maximum absolute value.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {integer} index value\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var idx = idamax( x.length, x, 1, 0 );\n* // returns 4\n*/\nfunction idamax( N, x, strideX, offsetX ) {\n\tvar dmax;\n\tvar idx;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N < 1 ) {\n\t\treturn -1;\n\t}\n\tidx = 0;\n\tif ( N === 1 ) {\n\t\treturn idx;\n\t}\n\tdmax = abs( x[ offsetX ] );\n\tix = offsetX + strideX;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = abs( x[ ix ] );\n\t\tif ( v > dmax ) {\n\t\t\tidx = i;\n\t\t\tdmax = v;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default idamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Finds the index of the first element having the maximum absolute value.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @returns {integer} index value\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var idx = idamax( x.length, x, 1 );\n* // returns 4\n*/\nfunction idamax( N, x, strideX ) {\n\tvar ox = stride2offset( N, strideX );\n\treturn ndarray( N, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default idamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport absf from '@stdlib/math/base/special/absf';\n\n\n// MAIN //\n\n/**\n* Finds the index of the first element having the maximum absolute value.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {integer} index value\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var idx = isamax( x.length, x, 1, 0 );\n* // returns 4\n*/\nfunction isamax( N, x, strideX, offsetX ) {\n\tvar smax;\n\tvar idx;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N < 1 ) {\n\t\treturn -1;\n\t}\n\tidx = 0;\n\tif ( N === 1 ) {\n\t\treturn idx;\n\t}\n\tsmax = absf( x[ offsetX ] );\n\tix = offsetX + strideX;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = absf( x[ ix ] );\n\t\tif ( v > smax ) {\n\t\t\tidx = i;\n\t\t\tsmax = v;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default isamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Finds the index of the first element having the maximum absolute value.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @returns {integer} index value\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var idx = isamax( x.length, x, 1 );\n* // returns 4\n*/\nfunction isamax( N, x, strideX ) {\n\tvar ox = stride2offset( N, strideX );\n\treturn ndarray( N, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default isamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to interchange vectors `x` and `y`.\n*\n* @module @stdlib/blas/base/gswap\n*\n* @example\n* import gswap from '@stdlib/blas/base/gswap';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gswap( x.length, x, 1, y, 1 );\n* // x => [ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* @example\n* import gswap from '@stdlib/blas/base/gswap';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n*\n* gswap.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // x => [ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport idamax from './idamax.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( idamax, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default idamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport isamax from './isamax.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( isamax, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default isamax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport { enum as enumeration } from './../../../base/layouts';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the BLAS memory layout string associated with a BLAS memory layout enumeration constant.\n*\n* @param {integer} layout - layout enumeration constant\n* @returns {(string|null)} layout string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/layout-str2enum';\n*\n* var v = str2enum( 'row-major' );\n* // returns <number>\n*\n* var s = enum2str( v );\n* // returns 'row-major'\n*/\nfunction enum2str( layout ) {\n\tvar v = hash[ layout ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from './../../../base/layouts';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a BLAS memory layout string.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `ROW_MAJOR == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} layout - memory layout string\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'row-major' );\n* // returns <number>\n*/\nfunction str2enum( layout ) {\n\tvar v = ENUM[ layout ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport { enum as enumeration } from './../../../base/matrix-triangles';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the BLAS matrix triangle string associated with a BLAS matrix triangle enumeration constant.\n*\n* @param {integer} value - enumeration constant\n* @returns {(string|null)} matrix triangle string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/matrix-triangle-str2enum';\n*\n* var v = str2enum( 'upper' );\n* // returns <number>\n*\n* var s = enum2str( v );\n* // returns 'upper'\n*/\nfunction enum2str( value ) {\n\tvar v = hash[ value ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from './../../../base/matrix-triangles';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a BLAS matrix triangle.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `UPPER == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} value - matrix triangle string\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'upper' );\n* // returns <number>\n*/\nfunction str2enum( value ) {\n\tvar v = ENUM[ value ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport { enum as enumeration } from './../../../base/operation-sides';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the BLAS operation side string associated with a BLAS operation side enumeration constant.\n*\n* @param {integer} operation - operation enumeration constant\n* @returns {(string|null)} operation string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/operation-side-str2enum';\n*\n* var v = str2enum( 'left' );\n* // returns <number>\n*\n* var s = enum2str( v );\n* // returns 'left'\n*/\nfunction enum2str( operation ) {\n\tvar v = hash[ operation ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from './../../../base/operation-sides';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a BLAS operation side.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `LEFT == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} operation - operation side\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'left' );\n* // returns <number>\n*/\nfunction str2enum( operation ) {\n\tvar v = ENUM[ operation ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport absf from '@stdlib/math/base/special/absf';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - `x` stride length\n* @param {NonNegativeInteger} offset - starting index for `x`\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = sasum( x.length, x, 1, 0 );\n* // returns 15.0\n*/\nfunction sasum( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = f32( sum + absf( x[ ix ] ) );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default sasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - `x` stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n*\n* var s = sasum( x.length, x, 1 );\n* // returns 15.0\n*/\nfunction sasum( N, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default sasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sasum from './sasum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* saxpy( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction saxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] += float64ToFloat32( alpha * x[ ix ] );\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] += float64ToFloat32( alpha * x[ ix ] );\n\t\t\ty[ iy+1 ] += float64ToFloat32( alpha * x[ ix+1 ] );\n\t\t\ty[ iy+2 ] += float64ToFloat32( alpha * x[ ix+2 ] );\n\t\t\ty[ iy+3 ] += float64ToFloat32( alpha * x[ ix+3 ] );\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += float64ToFloat32( alpha * x[ ix ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default saxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = 5.0;\n*\n* saxpy( x.length, alpha, x, 1, y, 1 );\n* // y => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction saxpy( N, alpha, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, alpha, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default saxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport saxpy from './saxpy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( saxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default saxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport absf from '@stdlib/math/base/special/absf';\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex64';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `cx`\n* @returns {number} result\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var cx = new Complex64Array( [ 5.0, -3.0, 6.0, 4.0 ] );\n*\n* var out = scasum( cx.length, cx, 1, 0 );\n* // returns 18.0\n*/\nfunction scasum( N, cx, strideX, offsetX ) {\n\tvar stemp;\n\tvar viewX;\n\tvar ix;\n\tvar sx;\n\tvar i;\n\n\tstemp = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn stemp;\n\t}\n\tviewX = reinterpret( cx, 0 );\n\tsx = strideX * 2;\n\tix = offsetX * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tstemp = f32( stemp + f32( absf( viewX[ ix ] ) + absf( viewX[ ix+1 ] ) ) );\n\t\tix += sx;\n\t}\n\treturn stemp;\n}\n\n\n// EXPORTS //\n\nexport default scasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @returns {number} result\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var cx = new Complex64Array( [ 5.0, -3.0, 6.0, 4.0 ] );\n*\n* var out = scasum( cx.length, cx, 1 );\n* // returns 18.0\n*/\nfunction scasum( N, cx, strideX ) {\n\tvar ox = stride2offset( N, strideX );\n\treturn ndarray( N, cx, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default scasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scasum from './scasum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point vector.\n*\n* @module @stdlib/blas/base/scasum\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import scasum from '@stdlib/blas/base/scasum';\n*\n* var cx = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var out = scasum( cx.length, cx, 1 );\n* // returns 19.0\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import scasum from '@stdlib/blas/base/scasum';\n*\n* var cx = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var out = scasum.ndarray( cx.length, cx, 1, 0 );\n* // returns 19.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar scasum;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tscasum = main;\n} else {\n\tscasum = tmp;\n}\n\n\n// EXPORTS //\n\nexport default scasum;\n\n// exports: { \"ndarray\": \"scasum.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/scasum/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport FLOAT32_MAX from '@stdlib/constants/float32/max';\nimport absf from '@stdlib/math/base/special/absf';\nimport abs2f from '@stdlib/math/base/special/abs2f';\nimport sqrtf from '@stdlib/math/base/special/sqrtf';\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex64';\n\n\n// VARIABLES //\n\n// Blue's scaling constants:\nvar tsml = 1.08420217E-19;\nvar tbig = 4.50359963E+15;\nvar ssml = 3.77789319E+22;\nvar sbig = 1.32348898E-23;\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `cx`\n* @returns {number} L2-norm\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2( 4, cx, 1, 0 );\n* // returns ~0.8\n*/\nfunction scnrm2( N, cx, strideX, offsetX ) {\n\tvar notbig;\n\tvar sumsq;\n\tvar viewX;\n\tvar abig;\n\tvar amed;\n\tvar asml;\n\tvar ymax;\n\tvar ymin;\n\tvar scl;\n\tvar ax;\n\tvar ix;\n\tvar sx;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\t// Reinterpret the input array as a real-valued array comprised of interleaved real and imaginary components:\n\tviewX = reinterpret( cx, 0 );\n\tsx = strideX * 2;\n\tix = offsetX * 2;\n\n\t// Initialize loop values for accumulation:\n\tnotbig = true;\n\n\tsumsq = 0.0;\n\tabig = 0.0;\n\tamed = 0.0;\n\tasml = 0.0;\n\tscl = 1.0;\n\n\t// Compute the sum of squares using 3 accumulators--`abig` (sum of squares scaled down to avoid overflow), `asml` (sum of squares scaled up to avoid underflow), `amed` (sum of squares that do not require scaling)--and thresholds and multipliers--`tbig` (values bigger than this are scaled down by `sbig`) and `tsml` (values smaller than this are scaled up by `ssml`)...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = absf( viewX[ ix ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig = f32( abig + abs2f( ax * sbig ) );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml = f32( asml + abs2f( ax * ssml ) );\n\t\t\t}\n\t\t} else {\n\t\t\tamed = f32( amed + f32( ax * ax ) );\n\t\t}\n\t\tax = absf( viewX[ ix + 1 ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig = f32( abig + abs2f( ax * sbig ) );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml = f32( asml + abs2f( ax * ssml ) );\n\t\t\t}\n\t\t} else {\n\t\t\tamed = f32( amed + f32( ax * ax ) );\n\t\t}\n\t\tix += sx;\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig` > 0...\n\t\tif ( amed > 0.0 || ( amed > FLOAT32_MAX ) || ( amed !== amed ) ) {\n\t\t\tabig = f32( abig + f32( f32( amed * sbig ) * sbig ) );\n\t\t}\n\t\tscl = f32( 1.0 / sbig );\n\t\tsumsq = abig;\n\t} else if ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml` > 0...\n\t\tif ( amed > 0.0 || amed > FLOAT32_MAX || ( amed !== amed ) ) {\n\t\t\tamed = sqrtf( amed );\n\t\t\tasml = f32( sqrtf( asml ) / ssml );\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscl = 1.0;\n\t\t\tsumsq = f32( f32( ymax * ymax ) * f32( 1.0 + abs2f( ymin / ymax ) ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tscl = f32( 1.0 / ssml );\n\t\t\tsumsq = asml;\n\t\t}\n\t} else {\n\t\t// All values are mid-range...\n\t\tscl = 1.0;\n\t\tsumsq = amed;\n\t}\n\treturn f32( sqrtf( sumsq ) * scl );\n}\n\n\n// EXPORTS //\n\nexport default scnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @returns {number} L2-norm\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2( 4, cx, 1 );\n* // returns ~0.8\n*/\nfunction scnrm2( N, cx, strideX ) {\n\treturn ndarray( N, cx, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default scnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scnrm2 from './scnrm2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scnrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the L2-norm of a complex single-precision floating-point vector.\n*\n* @module @stdlib/blas/base/scnrm2\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import scnrm2 from '@stdlib/blas/base/scnrm2';\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2( 4, cx, 1 );\n* // returns ~0.8\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import scnrm2 from '@stdlib/blas/base/scnrm2';\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2.ndarray( 4, cx, 1, 0 );\n* // returns ~0.8\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar scnrm2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tscnrm2 = main;\n} else {\n\tscnrm2 = tmp;\n}\n\n\n// EXPORTS //\n\nexport default scnrm2;\n\n// exports: { \"ndarray\": \"scnrm2.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/scnrm2/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* scopy( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction scopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] = x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] = x[ ix ];\n\t\t\ty[ iy+1 ] = x[ ix+1 ];\n\t\t\ty[ iy+2 ] = x[ ix+2 ];\n\t\t\ty[ iy+3 ] = x[ ix+3 ];\n\t\t\ty[ iy+4 ] = x[ ix+4 ];\n\t\t\ty[ iy+5 ] = x[ ix+5 ];\n\t\t\ty[ iy+6 ] = x[ ix+6 ];\n\t\t\ty[ iy+7 ] = x[ ix+7 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Copies values from `x` into `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* scopy( x.length, x, 1, y, 1 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction scopy( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default scopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {integer} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdot( x.length, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction sdot( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tdot = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn dot;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot = float64ToFloat32( dot + float64ToFloat32( x[ ix ] * y[ iy ] ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn dot;\n}\n\n\n// EXPORTS //\n\nexport default sdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of `x` and `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdot( x.length, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction sdot( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default sdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scopy from './scopy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scopy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdot from './sdot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two single-precision floating-point vectors with extended accumulation.\n*\n* @param {integer} N - number of indexed elements\n* @param {number} scalar - scalar constant to add to dot product\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdsdot( x.length, 0.0, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction sdsdot( N, scalar, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = scalar;\n\tif ( N <= 0 ) {\n\t\treturn float64ToFloat32( dot );\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += x[ ix ] * y[ iy ];\n\t\t\t\tix += 1;\n\t\t\t\tiy += 1;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn float64ToFloat32( dot );\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ix]*y[iy] ) + ( x[ix+1]*y[iy+1] ) + ( x[ix+2]*y[iy+2] ) + ( x[ix+3]*y[iy+3] ) + ( x[ix+4]*y[iy+4] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn float64ToFloat32( dot );\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn float64ToFloat32( dot );\n}\n\n\n// EXPORTS //\n\nexport default sdsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two single-precision floating-point vectors with extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} scalar - scalar constant to add to dot product\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdsdot( x.length, 0.0, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction sdsdot( N, scalar, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn float64ToFloat32( scalar );\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, scalar, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default sdsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdsdot from './sdsdot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdsdot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsdot;\n","export default '/home/runner/work/blas/blas/base/sgemm/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\nimport { ndarray as sdot } from './../../../base/sdot';\nimport blockSize from '@stdlib/ndarray/base/unary-tiling-block-size';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// VARIABLES //\n\nvar bsize = blockSize( 'float32' ); // TODO: consider using a larger block size\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether a provided string indicates to transpose a matrix.\n*\n* @private\n* @param {string} str - input string\n* @returns {boolean} boolean indicating whether to transpose a matrix\n*\n* @example\n* var bool = isTransposed( 'transpose' );\n* // returns true\n*\n* @example\n* var bool = isTransposed( 'conjugate-transpose' );\n* // returns true\n*\n* @example\n* var bool = isTransposed( 'no-transpose' );\n* // returns false\n*/\nfunction isTransposed( str ) { // TODO: consider moving to a separate helper utility package\n\treturn ( str !== 'no-transpose' );\n}\n\n/**\n* Fills a matrix with zeros.\n*\n* @private\n* @param {NonNegativeInteger} M - number of rows\n* @param {NonNegativeInteger} N - number of columns\n* @param {Float32Array} X - matrix to fill\n* @param {integer} strideX1 - stride of the first dimension of `X`\n* @param {integer} strideX2 - stride of the second dimension of `X`\n* @param {NonNegativeInteger} offsetX - starting index for `X`\n* @returns {Float32Array} input matrix\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var X = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* zeros( 2, 3, X, 3, 1, 0 );\n* // X => <Float32Array>[ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var X = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* zeros( 2, 3, X, 1, 2, 0 );\n* // X => <Float32Array>[ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction zeros( M, N, X, strideX1, strideX2, offsetX ) { // TODO: consider moving to a separate package\n\tvar dx0;\n\tvar dx1;\n\tvar S0;\n\tvar S1;\n\tvar i0;\n\tvar i1;\n\tvar ix;\n\n\tif ( isRowMajor( [ strideX1, strideX2 ] ) ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tS0 = N;\n\t\tS1 = M;\n\t\tdx0 = strideX2;                   // offset increment for innermost loop\n\t\tdx1 = strideX1 - ( S0*strideX2 ); // offset increment for outermost loop\n\t} else { // column-major\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tS0 = M;\n\t\tS1 = N;\n\t\tdx0 = strideX1;                   // offset increment for innermost loop\n\t\tdx1 = strideX2 - ( S0*strideX1 ); // offset increment for outermost loop\n\t}\n\tix = offsetX;\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tX[ ix ] = 0.0;\n\t\t\tix += dx0;\n\t\t}\n\t\tix += dx1;\n\t}\n\treturn X;\n}\n\n/**\n* Scales each element in a matrix by a scalar `β`.\n*\n* @private\n* @param {NonNegativeInteger} M - number of rows\n* @param {NonNegativeInteger} N - number of columns\n* @param {number} beta - scalar\n* @param {Float32Array} X - matrix to fill\n* @param {integer} strideX1 - stride of the first dimension of `X`\n* @param {integer} strideX2 - stride of the second dimension of `X`\n* @param {NonNegativeInteger} offsetX - starting index for `X`\n* @returns {Float32Array} input matrix\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var X = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* scal( 2, 3, 5.0, X, 3, 1, 0 );\n* // X => <Float32Array>[ 5.0, 10.0, 15.0, 20.0, 25.0, 30.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var X = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* scal( 2, 3, 5.0, X, 1, 2, 0 );\n* // X => <Float32Array>[ 5.0, 10.0, 15.0, 20.0, 25.0, 30.0 ]\n*/\nfunction scal( M, N, beta, X, strideX1, strideX2, offsetX ) { // TODO: consider moving to a separate package\n\tvar dx0;\n\tvar dx1;\n\tvar S0;\n\tvar S1;\n\tvar i0;\n\tvar i1;\n\tvar ix;\n\n\tif ( isRowMajor( [ strideX1, strideX2 ] ) ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tS0 = N;\n\t\tS1 = M;\n\t\tdx0 = strideX2;                   // offset increment for innermost loop\n\t\tdx1 = strideX1 - ( S0*strideX2 ); // offset increment for outermost loop\n\t} else { // column-major\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tS0 = M;\n\t\tS1 = N;\n\t\tdx0 = strideX1;                   // offset increment for innermost loop\n\t\tdx1 = strideX2 - ( S0*strideX1 ); // offset increment for outermost loop\n\t}\n\tix = offsetX;\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tX[ ix ] *= beta;\n\t\t\tix += dx0;\n\t\t}\n\t\tix += dx1;\n\t}\n\treturn X;\n}\n\n/**\n* Performs matrix multiplication using a naive algorithm which is cache-optimal when `A` is row-major and `B` is column-major.\n*\n* @private\n* @param {NonNegativeInteger} M - number of rows in the matrix `op(A)` and in the matrix `C`\n* @param {NonNegativeInteger} N - number of columns in the matrix `op(B)` and in the matrix `C`\n* @param {NonNegativeInteger} K - number of columns in the matrix `op(A)` and number of rows in the matrix `op(B)`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - first matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} B - second matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @param {Float32Array} C - third matrix\n* @param {integer} strideC1 - stride of the first dimension of `C`\n* @param {integer} strideC2 - stride of the second dimension of `C`\n* @param {NonNegativeInteger} offsetC - starting index for `C`\n* @returns {Float32Array} `C`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float32Array( [ 1.0, 1.0, 0.0, 1.0 ] );\n* var C = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* naive( 2, 2, 2, 1.0, A, 2, 1, 0, B, 2, 1, 0, C, 2, 1, 0 );\n* // C => <Float32Array>[ 2.0, 5.0, 6.0, 11.0 ]\n*/\nfunction naive( M, N, K, alpha, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB, C, strideC1, strideC2, offsetC ) {\n\tvar da0;\n\tvar db0;\n\tvar dc0;\n\tvar dc1;\n\tvar S0;\n\tvar S1;\n\tvar i0;\n\tvar i1;\n\tvar ia;\n\tvar ib;\n\tvar ic;\n\n\t// Note on variable naming convention: S#, da#, db#, dc#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tS0 = N;\n\tS1 = M;\n\tda0 = strideA2;\n\tdb0 = strideB1;\n\tdc0 = strideC2;                   // offset increment for innermost loop\n\tdc1 = strideC1 - ( S0*strideC2 ); // offset increment for outermost loop\n\n\tic = offsetC;\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tia = offsetA + ( i1*strideA1 );\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tib = offsetB + ( i0*strideB2 );\n\t\t\tC[ ic ] += f32( alpha * sdot( K, A, da0, ia, B, db0, ib ) );\n\t\t\tic += dc0;\n\t\t}\n\t\tic += dc1;\n\t}\n\treturn C;\n}\n\n/**\n* Performs matrix multiplication using loop tiling.\n*\n* @private\n* @param {NonNegativeInteger} M - number of rows in the matrix `op(A)` and in the matrix `C`\n* @param {NonNegativeInteger} N - number of columns in the matrix `op(B)` and in the matrix `C`\n* @param {NonNegativeInteger} K - number of columns in the matrix `op(A)` and number of rows in the matrix `op(B)`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - first matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} B - second matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @param {Float32Array} C - third matrix\n* @param {integer} strideC1 - stride of the first dimension of `C`\n* @param {integer} strideC2 - stride of the second dimension of `C`\n* @param {NonNegativeInteger} offsetC - starting index for `C`\n* @returns {Float32Array} `C`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float32Array( [ 1.0, 1.0, 0.0, 1.0 ] );\n* var C = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* blocked( 2, 2, 2, 1.0, A, 2, 1, 0, B, 2, 1, 0, C, 2, 1, 0 );\n* // C => <Float32Array>[ 2.0, 5.0, 6.0, 11.0 ]\n*/\nfunction blocked( M, N, K, alpha, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB, C, strideC1, strideC2, offsetC ) {\n\tvar da0;\n\tvar db0;\n\tvar dc0;\n\tvar dc1;\n\tvar oa1;\n\tvar ob0;\n\tvar oc0;\n\tvar oc1;\n\tvar S0;\n\tvar S1;\n\tvar s0;\n\tvar s1;\n\tvar sk;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar ia;\n\tvar ib;\n\tvar ic;\n\tvar oa;\n\tvar ob;\n\tvar k;\n\n\t// Note on variable naming convention: S#, da#, db#, dc#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tS0 = N;\n\tS1 = M;\n\n\t// Define increments for the innermost loop:\n\tda0 = strideA2;\n\tdb0 = strideB1;\n\tdc0 = strideC2;\n\n\t// Iterate over blocks...\n\tfor ( j1 = S1; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\toa1 = offsetA + ( j1*strideA1 );\n\t\toc1 = offsetC + ( j1*strideC1 );\n\t\tfor ( j0 = S0; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\tob0 = offsetB + ( j0*strideB2 );\n\t\t\toc0 = oc1 + ( j0*strideC2 );      // index offset for `C` for the current block\n\t\t\tdc1 = strideC1 - ( s0*strideC2 ); // loop offset increment for `C`\n\t\t\tfor ( k = K; k > 0; ) {\n\t\t\t\tif ( k < bsize ) {\n\t\t\t\t\tsk = k;\n\t\t\t\t\tk = 0;\n\t\t\t\t} else {\n\t\t\t\t\tsk = bsize;\n\t\t\t\t\tk -= bsize;\n\t\t\t\t}\n\t\t\t\toa = oa1 + ( k*strideA2 );\n\t\t\t\tob = ob0 + ( k*strideB1 );\n\t\t\t\tic = oc0;\n\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\tia = oa + ( i1*strideA1 );\n\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\tib = ob + ( i0*strideB2 );\n\t\t\t\t\t\tC[ ic ] += f32( alpha * sdot( sk, A, da0, ia, B, db0, ib ) );\n\t\t\t\t\t\tic += dc0;\n\t\t\t\t\t}\n\t\t\t\t\tic += dc1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn C;\n}\n\n\n// MAIN //\n\n/**\n* Performs the matrix-matrix operation `C = α*op(A)*op(B) + β*C` where `op(X)` is either `op(X) = X` or `op(X) = X^T`, `α` and `β` are scalars, `A`, `B`, and `C` are matrices, with `op(A)` an `M` by `K` matrix, `op(B)` a `K` by `N` matrix, and `C` an `M` by `N` matrix.\n*\n* @private\n* @param {string} transA - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} transB - specifies whether `B` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `op(A)` and in the matrix `C`\n* @param {NonNegativeInteger} N - number of columns in the matrix `op(B)` and in the matrix `C`\n* @param {NonNegativeInteger} K - number of columns in the matrix `op(A)` and number of rows in the matrix `op(B)`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - first matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} B - second matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @param {number} beta - scalar constant\n* @param {Float32Array} C - third matrix\n* @param {integer} strideC1 - stride of the first dimension of `C`\n* @param {integer} strideC2 - stride of the second dimension of `C`\n* @param {NonNegativeInteger} offsetC - starting index for `C`\n* @returns {Float32Array} `C`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float32Array( [ 1.0, 1.0, 0.0, 1.0 ] );\n* var C = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* sgemm( 'no-transpose', 'no-transpose', 2, 2, 2, 1.0, A, 2, 1, 0, B, 2, 1, 0, 1.0, C, 2, 1, 0 );\n* // C => <Float32Array>[ 2.0, 5.0, 6.0, 11.0 ]\n*/\nfunction sgemm( transA, transB, M, N, K, alpha, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB, beta, C, strideC1, strideC2, offsetC ) {\n\tvar isrma;\n\tvar isrmb;\n\tvar sa1;\n\tvar sa2;\n\tvar sb1;\n\tvar sb2;\n\n\tif ( M === 0 || N === 0 || ( ( beta === 1.0 ) && ( ( alpha === 0.0 ) || ( K === 0 ) ) ) ) {\n\t\treturn C;\n\t}\n\t// Form: C = β⋅C\n\tif ( beta === 0.0 ) {\n\t\tC = zeros( M, N, C, strideC1, strideC2, offsetC );\n\t} else if ( beta !== 1.0 ) {\n\t\tC = scal( M, N, beta, C, strideC1, strideC2, offsetC );\n\t}\n\t// Check whether we can early return...\n\tif ( alpha === 0.0 ) {\n\t\treturn C;\n\t}\n\t// Determine the memory layouts of `A` and `B`...\n\tisrma = isRowMajor( [ strideA1, strideA2 ] );\n\tisrmb = isRowMajor( [ strideB1, strideB2 ] );\n\n\t// Check whether we can avoid loop tiling and simply use the \"naive\" (cache-optimal) algorithm for performing matrix multiplication...\n\tif ( isrma ) { // orderA === 'row-major'\n\t\tif ( !isTransposed( transA ) ) {\n\t\t\tif ( !isrmb && !isTransposed( transB ) ) { // orderB === 'column-major'\n\t\t\t\t// Form: C = α⋅A⋅B + C\n\t\t\t\treturn naive( M, N, K, alpha, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB, C, strideC1, strideC2, offsetC );\n\t\t\t}\n\t\t\tif ( isrmb && isTransposed( transB ) ) { // orderB === 'row-major'\n\t\t\t\t// Form: C = α⋅A⋅B^T + C\n\t\t\t\treturn naive( M, N, K, alpha, A, strideA1, strideA2, offsetA, B, strideB2, strideB1, offsetB, C, strideC1, strideC2, offsetC );\n\t\t\t}\n\t\t}\n\t} else if ( isTransposed( transA ) ) { // orderA === 'column-major'\n\t\tif ( isrmb && isTransposed( transB ) ) { // orderB === 'row-major'\n\t\t\t// Form: C = α⋅A^T⋅B^T + C\n\t\t\treturn naive( M, N, K, alpha, A, strideA2, strideA1, offsetA, B, strideB2, strideB1, offsetB, C, strideC1, strideC2, offsetC );\n\t\t}\n\t\tif ( !isrmb && !isTransposed( transB ) ) { // orderB === 'column-major'\n\t\t\t// Form: C = α⋅A^T⋅B + C\n\t\t\treturn naive( M, N, K, alpha, A, strideA2, strideA1, offsetA, B, strideB1, strideB2, offsetB, C, strideC1, strideC2, offsetC );\n\t\t}\n\t}\n\t// Swap strides to perform transposes...\n\tif ( isTransposed( transA ) ) {\n\t\tsa1 = strideA2;\n\t\tsa2 = strideA1;\n\t} else {\n\t\tsa1 = strideA1;\n\t\tsa2 = strideA2;\n\t}\n\tif ( isTransposed( transB ) ) {\n\t\tsb1 = strideB2;\n\t\tsb2 = strideB1;\n\t} else {\n\t\tsb1 = strideB1;\n\t\tsb2 = strideB2;\n\t}\n\t// Perform loop tiling to promote cache locality:\n\treturn blocked( M, N, K, alpha, A, sa1, sa2, offsetA, B, sb1, sb2, offsetB, C, strideC1, strideC2, offsetC );\n}\n\n\n// EXPORTS //\n\nexport default sgemm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTranspose from './../../../base/assert/is-transpose-operation';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-matrix operation `C = α*op(A)*op(B) + β*C` where `op(X)` is either `op(X) = X` or `op(X) = X^T`, `α` and `β` are scalars, `A`, `B`, and `C` are matrices, with `op(A)` an `M` by `K` matrix, `op(B)` a `K` by `N` matrix, and `C` an `M` by `N` matrix.\n*\n* @param {string} order - storage layout\n* @param {string} transA - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} transB - specifies whether `B` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `op(A)` and in the matrix `C`\n* @param {NonNegativeInteger} N - number of columns in the matrix `op(B)` and in the matrix `C`\n* @param {NonNegativeInteger} K - number of columns in the matrix `op(A)` and number of rows in the matrix `op(B)`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - first matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float32Array} B - second matrix\n* @param {PositiveInteger} LDB - stride of the first dimension of `B` (a.k.a., leading dimension of the matrix `B`)\n* @param {number} beta - scalar constant\n* @param {Float32Array} C - third matrix\n* @param {PositiveInteger} LDC - stride of the first dimension of `C` (a.k.a., leading dimension of the matrix `C`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must be a valid transpose operation\n* @throws {TypeError} third argument must be a valid transpose operation\n* @throws {RangeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be a nonnegative integer\n* @throws {RangeError} ninth argument must be greater than or equal to max(1,M) when `A` is not transposed and max(1,K) otherwise\n* @throws {RangeError} eleventh argument must be greater than or equal to max(1,K) when `B` is not transposed and max(1,N) otherwise\n* @throws {RangeError} fourteenth argument must be greater than or equal to max(1,M)\n* @returns {Float32Array} `C`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float32Array( [ 1.0, 1.0, 0.0, 1.0 ] );\n* var C = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* sgemm( 'row-major', 'no-transpose', 'no-transpose', 2, 2, 2, 1.0, A, 2, B, 2, 1.0, C, 2 );\n* // C => <Float32Array>[ 2.0, 5.0, 6.0, 11.0 ]\n*/\nfunction sgemm( order, transA, transB, M, N, K, alpha, A, LDA, B, LDB, beta, C, LDC ) { // eslint-disable-line max-params, max-len\n\tvar nrowsa;\n\tvar nrowsb;\n\tvar valc;\n\tvar sa1;\n\tvar sa2;\n\tvar sb1;\n\tvar sb2;\n\tvar sc1;\n\tvar sc2;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTranspose( transA ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', transA ) );\n\t}\n\tif ( !isMatrixTranspose( transB ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid transpose operation. Value: `%s`.', transB ) );\n\t}\n\tif ( M < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( K < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be a nonnegative integer. Value: `%d`.', K ) );\n\t}\n\tif (\n\t\t( order === 'row-major' && transA === 'no-transpose' ) ||\n\t\t( order === 'column-major' && transA === 'transpose' )\n\t) {\n\t\tnrowsa = K;\n\t} else {\n\t\tnrowsa = M;\n\t}\n\tif (\n\t\t( order === 'row-major' && transB === 'no-transpose' ) ||\n\t\t( order === 'column-major' && transB === 'transpose' )\n\t) {\n\t\tnrowsb = N;\n\t} else {\n\t\tnrowsb = K;\n\t}\n\tif ( LDA < max( 1, nrowsa ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be greater than or equal to max(1,%d). Value: `%d`.', nrowsa, LDA ) );\n\t}\n\tif ( LDB < max( 1, nrowsb ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eleventh argument must be greater than or equal to max(1,%d). Value: `%d`.', nrowsb, LDB ) );\n\t}\n\tif ( order === 'row-major' ) {\n\t\tvalc = N;\n\t} else {\n\t\tvalc = M;\n\t}\n\tif ( LDC < max( 1, valc ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourteenth argument must be greater than or equal to max(1,%d). Value: `%d`.', valc, LDC ) );\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t\tsb1 = 1;\n\t\tsb2 = LDB;\n\t\tsc1 = 1;\n\t\tsc2 = LDC;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t\tsb1 = LDB;\n\t\tsb2 = 1;\n\t\tsc1 = LDC;\n\t\tsc2 = 1;\n\t}\n\treturn base( transA, transB, M, N, K, alpha, A, sa1, sa2, 0, B, sb1, sb2, 0, beta, C, sc1, sc2, 0 ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sgemm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sgemm from './sgemm.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sgemm, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sgemm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTranspose from './../../../base/assert/is-transpose-operation';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-matrix operation `C = α*op(A)*op(B) + β*C` where `op(X)` is either `op(X) = X` or `op(X) = X^T`, `α` and `β` are scalars, `A`, `B`, and `C` are matrices, with `op(A)` an `M` by `K` matrix, `op(B)` a `K` by `N` matrix, and `C` an `M` by `N` matrix.\n*\n* @param {string} transA - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} transB - specifies whether `B` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `op(A)` and in the matrix `C`\n* @param {NonNegativeInteger} N - number of columns in the matrix `op(B)` and in the matrix `C`\n* @param {NonNegativeInteger} K - number of columns in the matrix `op(A)` and number of rows in the matrix `op(B)`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - first matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} B - second matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @param {number} beta - scalar constant\n* @param {Float32Array} C - third matrix\n* @param {integer} strideC1 - stride of the first dimension of `C`\n* @param {integer} strideC2 - stride of the second dimension of `C`\n* @param {NonNegativeInteger} offsetC - starting index for `C`\n* @throws {TypeError} first argument must be a valid transpose operation\n* @throws {TypeError} second argument must be a valid transpose operation\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be a nonnegative integer\n* @returns {Float32Array} `C`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float32Array( [ 1.0, 1.0, 0.0, 1.0 ] );\n* var C = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* sgemm( 'no-transpose', 'no-transpose', 2, 2, 2, 1.0, A, 2, 1, 0, B, 2, 1, 0, 1.0, C, 2, 1, 0 );\n* // C => <Float32Array>[ 2.0, 5.0, 6.0, 11.0 ]\n*/\nfunction sgemm( transA, transB, M, N, K, alpha, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB, beta, C, strideC1, strideC2, offsetC ) { // eslint-disable-line max-params, max-len\n\tif ( !isMatrixTranspose( transA ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid transpose operation. Value: `%s`.', transA ) );\n\t}\n\tif ( !isMatrixTranspose( transB ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', transB ) );\n\t}\n\tif ( M < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( K < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%d`.', K ) );\n\t}\n\treturn base( transA, transB, M, N, K, alpha, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB, beta, C, strideC1, strideC2, offsetC ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sgemm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 3 routine to perform the matrix-matrix operation `C = α*op(A)*op(B) + β*C` where `op(X)` is either `op(X) = X` or `op(X) = X^T`, `α` and `β` are scalars, `A`, `B`, and `C` are matrices, with `op(A)` an `M` by `K` matrix, `op(B)` a `K` by `N` matrix, and `C` an `M` by `N` matrix.\n*\n* @module @stdlib/blas/base/sgemm\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import sgemm from '@stdlib/blas/base/sgemm';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float32Array( [ 1.0, 1.0, 0.0, 1.0 ] );\n* var C = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* sgemm( 'row-major', 'no-transpose', 'no-transpose', 2, 2, 2, 1.0, A, 2, B, 2, 1.0, C, 2 );\n* // C => <Float32Array>[ 2.0, 5.0, 6.0, 11.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import sgemm from '@stdlib/blas/base/sgemm';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float32Array( [ 1.0, 1.0, 0.0, 1.0 ] );\n* var C = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* sgemm.ndarray( 'no-transpose', 'no-transpose', 2, 2, 2, 1.0, A, 2, 1, 0, B, 2, 1, 0, 1.0, C, 2, 1, 0 );\n* // C => <Float32Array>[ 2.0, 5.0, 6.0, 11.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar sgemm;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsgemm = main;\n} else {\n\tsgemm = tmp;\n}\n\n\n// EXPORTS //\n\nexport default sgemm;\n\n// exports: { \"ndarray\": \"sgemm.ndarray\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a single-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - index increment\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* sfill( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction sfill( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] = alpha;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] = alpha;\n\t\t\tx[ ix+1 ] = alpha;\n\t\t\tx[ ix+2 ] = alpha;\n\t\t\tx[ ix+3 ] = alpha;\n\t\t\tx[ ix+4 ] = alpha;\n\t\t\tx[ ix+5 ] = alpha;\n\t\t\tx[ ix+6 ] = alpha;\n\t\t\tx[ ix+7 ] = alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default sfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Fills a single-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* sfill( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction sfill( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sfill from './sfill.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sfill, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* sscal( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, -20.0, 25.0, -30.0 ]\n*/\nfunction sscal( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] *= alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] *= alpha;\n\t\t\tx[ ix+1 ] *= alpha;\n\t\t\tx[ ix+2 ] *= alpha;\n\t\t\tx[ ix+3 ] *= alpha;\n\t\t\tx[ ix+4 ] *= alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] *= alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default sscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* sscal( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\nfunction sscal( N, alpha, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, alpha, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default sscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\nimport { ndarray as sfill } from './../../../ext/base/sfill';\nimport { ndarray as sscal } from './../../../base/sscal';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `y = α*A*x + β*y` or `y = α*A^T*x + β*y`, where `α` and `β` are scalars, `x` and `y` are vectors, and `A` is an `M` by `N` matrix.\n*\n* @private\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `A`\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0 ] );\n*\n* sgemv( 'no-transpose', 2, 3, 1.0, A, 3, 1, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float32Array>[ 7.0, 16.0 ]\n*/\nfunction sgemv( trans, M, N, alpha, A, strideA1, strideA2, offsetA, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tvar isrm;\n\tvar xlen;\n\tvar ylen;\n\tvar tmp;\n\tvar ix1;\n\tvar iy1;\n\tvar sa0;\n\tvar sa1;\n\tvar i1;\n\tvar i0;\n\tvar oa;\n\n\t// Note on variable naming convention: sa#, ix#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tif ( trans === 'no-transpose' ) {\n\t\txlen = N;\n\t\tylen = M;\n\t} else {\n\t\txlen = M;\n\t\tylen = N;\n\t}\n\t// y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tsfill( ylen, 0.0, y, strideY, offsetY );\n\t\t} else {\n\t\t\tsscal( ylen, beta, y, strideY, offsetY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\t// Form: y = α*A*x + y\n\tif (\n\t\t( !isrm && trans === 'no-transpose' ) ||\n\t\t( isrm && trans !== 'no-transpose' )\n\t) {\n\t\tix1 = offsetX;\n\t\tfor ( i1 = 0; i1 < xlen; i1++ ) {\n\t\t\ttmp = f32( alpha * x[ ix1 ] );\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tiy1 = offsetY;\n\t\t\tfor ( i0 = 0; i0 < ylen; i0++ ) {\n\t\t\t\ty[ iy1 ] += f32( A[ oa+(sa0*i0) ] * tmp );\n\t\t\t\tiy1 += strideY;\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn y;\n\t}\n\t// Form: y = α*A^T*x + y\n\n\t// ( !isrm && trans !== 'no-transpose' ) || ( isrm && trans === 'no-transpose' )\n\tiy1 = offsetY;\n\tfor ( i1 = 0; i1 < ylen; i1++ ) {\n\t\ttmp = 0.0;\n\t\tix1 = offsetX;\n\t\toa = offsetA + (sa1*i1);\n\t\tfor ( i0 = 0; i0 < xlen; i0++ ) {\n\t\t\ttmp += f32( A[ oa+(sa0*i0) ] * x[ ix1 ] );\n\t\t\tix1 += strideX;\n\t\t}\n\t\ty[ iy1 ] += f32( alpha * tmp );\n\t\tiy1 += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default sgemv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTranspose from './../../../base/assert/is-transpose-operation';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `y = α*A*x + β*y` or `y = α*A^T*x + β*y`, where `α` and `β` are scalars, `x` and `y` are vectors, and `A` is an `M` by `N` matrix.\n*\n* @param {string} order - storage layout\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `A`\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - input matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must be a valid transpose operation\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be greater than or equal to max(1,M)\n* @throws {RangeError} ninth argument must be non-zero\n* @throws {RangeError} twelfth argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0 ] );\n*\n* sgemv( 'row-major', 'no-transpose', 2, 3, 1.0, A, 3, x, 1, 1.0, y, 1 );\n* // y => <Float32Array>[ 7.0, 16.0 ]\n*/\nfunction sgemv( order, trans, M, N, alpha, A, LDA, x, strideX, beta, y, strideY ) { // eslint-disable-line max-params, max-len\n\tvar xlen;\n\tvar ylen;\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\tvar oy;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTranspose( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( M < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero.' ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Twelfth argument must be non-zero.' ) );\n\t}\n\t// Check if we can early return...\n\tif ( M === 0 || N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\tif ( trans === 'no-transpose' ) {\n\t\txlen = N;\n\t\tylen = M;\n\t} else {\n\t\txlen = M;\n\t\tylen = N;\n\t}\n\tox = stride2offset( xlen, strideX );\n\toy = stride2offset( ylen, strideY );\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\treturn base( trans, M, N, alpha, A, sa1, sa2, 0, x, strideX, ox, beta, y, strideY, oy ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sgemv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sscal from './sscal.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sgemv from './sgemv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sgemv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sgemv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTranspose from './../../../base/assert/is-transpose-operation';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `y = α*A*x + β*y` or `y = α*A^T*x + β*y`, where `α` and `β` are scalars, `x` and `y` are vectors, and `A` is an `M` by `N` matrix.\n*\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {NonNegativeInteger} M - number of rows in the matrix `A`\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @throws {TypeError} first argument must be a valid transpose operation\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} tenth argument must be non-zero\n* @throws {RangeError} fourteenth argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0 ] );\n*\n* sgemv( 'no-transpose', 2, 3, 1.0, A, 3, 1, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float32Array>[ 7.0, 16.0 ]\n*/\nfunction sgemv( trans, M, N, alpha, A, strideA1, strideA2, offsetA, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tif ( !isMatrixTranspose( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( M < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eleventh argument must be non-zero.' ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifteenth argument must be non-zero.' ) );\n\t}\n\t// Check if we can early return...\n\tif ( M === 0 || N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\treturn base( trans, M, N, alpha, A, strideA1, strideA2, offsetA, x, strideX, offsetX, beta, y, strideY, offsetY ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sgemv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform one of the matrix-vector operations `y = α*A*x + β*y` or `y = α*A^T*x + β*y`, where `α` and `β` are scalars, `x` and `y` are vectors, and `A` is an `M` by `N` matrix.\n*\n* @module @stdlib/blas/base/sgemv\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import sgemv from '@stdlib/blas/base/sgemv';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0 ] );\n*\n* sgemv( 'row-major', 'no-transpose', 2, 3, 1.0, A, 3, x, 1, 1.0, y, 1 );\n* // y => <Float32Array>[ 7.0, 16.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import sgemv from '@stdlib/blas/base/sgemv';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0 ] );\n*\n* sgemv.ndarray( 'no-transpose', 2, 3, 1.0, A, 3, 1, 0, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float32Array>[ 7.0, 16.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar sgemv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsgemv = main;\n} else {\n\tsgemv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default sgemv;\n\n// exports: { \"ndarray\": \"sgemv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/sgemv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT32_MAX from '@stdlib/constants/float32/max';\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport absf from '@stdlib/math/base/special/absf';\nimport abs2f from '@stdlib/math/base/special/abs2f';\nimport sqrtf from '@stdlib/math/base/special/sqrtf';\n\n\n// VARIABLES //\n\n// Blue's scaling constants:\nvar tsml = 1.08420217E-19;\nvar tbig = 4.50359963E+15;\nvar ssml = 3.77789319E+22;\nvar sbig = 1.32348898E-23;\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} L2-norm\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var z = snrm2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snrm2( N, x, stride, offset ) {\n\tvar notbig;\n\tvar sumsq;\n\tvar abig;\n\tvar amed;\n\tvar asml;\n\tvar ymax;\n\tvar ymin;\n\tvar scl;\n\tvar ax;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offset;\n\n\t// Initialize loop values for accumulation:\n\tnotbig = true;\n\n\tsumsq = 0.0;\n\tabig = 0.0;\n\tamed = 0.0;\n\tasml = 0.0;\n\tscl = 1.0;\n\n\t// Compute the sum of squares using 3 accumulators--`abig` (sum of squares scaled down to avoid overflow), `asml` (sum of squares scaled up to avoid underflow), `amed` (sum of squares that do not require scaling)--and thresholds and multipliers--`tbig` (values bigger than this are scaled down by `sbig`) and `tsml` (values smaller than this are scaled up by `ssml`)...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = absf( x[ ix ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig = f32( abig + abs2f( ax * sbig ) );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml = f32( asml + abs2f( ax * ssml ) );\n\t\t\t}\n\t\t} else {\n\t\t\tamed = f32( amed + f32( ax * ax ) );\n\t\t}\n\t\tix += stride;\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig` > 0...\n\t\tif ( amed > 0.0 || ( amed > FLOAT32_MAX ) || ( amed !== amed ) ) {\n\t\t\tabig = f32( abig + f32( f32( amed * sbig ) * sbig ) );\n\t\t}\n\t\tscl = f32( 1.0 / sbig );\n\t\tsumsq = abig;\n\t} else if ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml` > 0...\n\t\tif ( amed > 0.0 || amed > FLOAT32_MAX || ( amed !== amed ) ) {\n\t\t\tamed = sqrtf( amed );\n\t\t\tasml = f32( sqrtf( asml ) / ssml );\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscl = 1.0;\n\t\t\tsumsq = f32( f32( ymax * ymax ) * f32( 1.0 + abs2f( ymin / ymax ) ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tscl = f32( 1.0 / ssml );\n\t\t\tsumsq = asml;\n\t\t}\n\t} else {\n\t\t// All values are mid-range...\n\t\tscl = 1.0;\n\t\tsumsq = amed;\n\t}\n\treturn f32( sqrtf( sumsq ) * scl );\n}\n\n\n// EXPORTS //\n\nexport default snrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} L2-norm\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var z = snrm2( x.length, x, 1 );\n* // returns 3.0\n*/\nfunction snrm2( N, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default snrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* srot( 2, x, 2, 2, y, 2, 2, 0.8, 0.6 );\n* // x => <Float32Array>[ 1.0, 2.0, ~7.8, 4.0, ~10.6, 6.0 ]\n* // y => <Float32Array>[ 7.0, 8.0, ~5.4, 10.0, ~5.8, 12.0 ]\n*/\nfunction srot( N, x, strideX, offsetX, y, strideY, offsetY, c, s ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tc = f32( c );\n\ts = f32( s );\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = f32( c * x[ ix ] ) + f32( s * y[ iy ] );\n\t\ty[ iy ] = f32( c * y[ iy ] ) - f32( s * x[ ix ] );\n\t\tx[ ix ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default srot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* srot( x.length, x, 1, y, 1, 0.8, 0.6 );\n* // x => <Float32Array>[ ~4.4, ~5.8, ~7.2, ~8.6, 10.0 ]\n* // y => <Float32Array>[ ~4.2, 4.4, 4.6, 4.8, 5.0 ]\n*/\nfunction srot( N, x, strideX, y, strideY, c, s ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nexport default srot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport absf from '@stdlib/math/base/special/absf';\nimport sqrtf from '@stdlib/math/base/special/sqrtf';\nimport abs2f from '@stdlib/math/base/special/abs2f';\nimport copysignf from '@stdlib/math/base/special/copysignf';\n\n\n// MAIN //\n\n/**\n* Constructs a Givens plane rotation.\n*\n* @param {number} a - rotational elimination parameter\n* @param {number} b - rotational elimination parameter\n* @param {Float32Array} out - output array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var out = srotg( 0.0, 2.0, new Float32Array( 4 ), 1, 0 );\n*  // returns <Float32Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*/\nfunction srotg( a, b, out, stride, offset ) {\n\tvar scale;\n\tvar sign;\n\tvar aa;\n\tvar ab;\n\tvar r;\n\tvar c;\n\tvar s;\n\tvar z;\n\n\taa = absf( a );\n\tab = absf( b );\n\tif ( aa > ab ) {\n\t\tsign = copysignf( 1.0, a );\n\t} else {\n\t\tsign = copysignf( 1.0, b );\n\t}\n\tscale = float64ToFloat32( aa + ab );\n\tif ( scale === 0.0 ) {\n\t\tc = 1.0;\n\t\ts = 0.0;\n\t\tr = 0.0;\n\t\tz = 0.0;\n\t} else {\n\t\tr = float64ToFloat32( scale * sqrtf( float64ToFloat32( abs2f( float64ToFloat32( a/scale ) ) + abs2f( float64ToFloat32( b/scale ) ) ) ) ); // eslint-disable-line max-len\n\t\tr = float64ToFloat32( r * sign );\n\t\tc = float64ToFloat32( a / r );\n\t\ts = float64ToFloat32( b / r );\n\t\tz = 1.0;\n\t\tif ( aa > ab ) {\n\t\t\tz = s;\n\t\t} else if ( c !== 0.0 ) {\n\t\t\tz = float64ToFloat32( 1.0 / c );\n\t\t}\n\t}\n\ta = r;\n\tb = z;\n\tout[ offset ] = a;\n\tout[ offset + stride ] = b;\n\tout[ offset + ( 2 * stride ) ] = c;\n\tout[ offset + ( 3 * stride ) ] = s;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default srotg;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array/float32';\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Constructs a Givens plane rotation.\n*\n* @param {number} a - rotational elimination parameter\n* @param {number} b - rotational elimination parameter\n* @returns {Float32Array} output array\n*\n* @example\n* var out = srotg( 0.0, 2.0 );\n* // returns <Float32Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*/\nfunction srotg( a, b ) {\n\tvar out = new Float32Array( 4 );\n\treturn fcn( a, b, out, 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default srotg;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Applies a modified Givens plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float32Array} param - parameters for the modified Givens transformation\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 0.6, 0.1, -0.5, 0.8, 0.9, -0.3, -0.4 ] );\n* var y = new Float32Array( [ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ] );\n* var param = new Float32Array( [ 0.0, 0.0, 2.0, -3.0, 0.0 ] );\n*\n* srotm( 4, x, -1, 3, y, -2, 6, param );\n* // x => <Float32Array>[ ~-0.9, ~-0.8, ~1.3, ~-1.6, ~0.9, ~-0.3, ~-0.4 ]\n* // y => <Float32Array>[ ~1.7, ~-0.9, ~0.5, ~0.7, ~-1.6, ~0.2, ~2.4 ]\n*/\nfunction srotm( N, x, strideX, offsetX, y, strideY, offsetY, param ) {\n\tvar sflag;\n\tvar sh11;\n\tvar sh12;\n\tvar sh21;\n\tvar sh22;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tvar w;\n\tvar z;\n\n\tsflag = param[ 0 ];\n\tif ( N <= 0 || sflag === -2.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( strideX === strideY && strideX > 0 ) {\n\t\tif ( sflag < 0.0 ) {\n\t\t\tsh11 = param[ 1 ];\n\t\t\tsh12 = param[ 3 ];\n\t\t\tsh21 = param[ 2 ];\n\t\t\tsh22 = param[ 4 ];\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tw = x[ ix ];\n\t\t\t\tz = y[ ix ];\n\t\t\t\tx[ ix ] = f32( f32( w * sh11 ) + f32( z * sh12 ) );\n\t\t\t\ty[ ix ] = f32( f32( w * sh21 ) + f32( z * sh22 ) );\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tif ( sflag === 0.0 ) {\n\t\t\tsh12 = param[ 3 ];\n\t\t\tsh21 = param[ 2 ];\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tw = x[ ix ];\n\t\t\t\tz = y[ ix ];\n\t\t\t\tx[ ix ] = f32( w + f32( z * sh12 ) );\n\t\t\t\ty[ ix ] = f32( f32( w * sh21 ) + z );\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tsh11 = param[ 1 ];\n\t\tsh22 = param[ 4 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ ix ];\n\t\t\tx[ ix ] = f32( f32( w * sh11 ) + z );\n\t\t\ty[ ix ] = f32( -w + f32( z * sh22 ) );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( sflag < 0.0 ) {\n\t\tsh11 = param[ 1 ];\n\t\tsh12 = param[ 3 ];\n\t\tsh21 = param[ 2 ];\n\t\tsh22 = param[ 4 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ iy ];\n\t\t\tx[ ix ] = f32( f32( w * sh11 ) + f32( z * sh12 ) );\n\t\t\ty[ iy ] = f32( f32( w * sh21 ) + f32( z * sh22 ) );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( sflag === 0.0 ) {\n\t\tsh12 = param[ 3 ];\n\t\tsh21 = param[ 2 ];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tw = x[ ix ];\n\t\t\tz = y[ iy ];\n\t\t\tx[ ix ] = f32( w + f32( z * sh12 ) );\n\t\t\ty[ iy ] = f32( f32( w * sh21 ) + z );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tsh11 = param[ 1 ];\n\tsh22 = param[ 4 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tw = x[ ix ];\n\t\tz = y[ iy ];\n\t\tx[ ix ] = f32( f32( w * sh11 ) + z );\n\t\ty[ iy ] = f32( -w + f32( z * sh22 ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default srotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a modified Givens plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {Float32Array} param - parameters for the modified Givens transformation\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 0.6, 0.1, -0.5, 0.8, 0.9, -0.3, -0.4 ] );\n* var y = new Float32Array( [ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ] );\n* var param = new Float32Array( [ 0.0, 0.0, 2.0, -3.0, 0.0 ] );\n*\n* srotm( 4, x, -1, y, -2, param );\n* // x => <Float32Array>[ ~-0.9, ~-0.8, ~1.3, ~-1.6, ~0.9, ~-0.3, ~-0.4 ]\n* // y => <Float32Array>[ ~1.7, ~-0.9, ~0.5, ~0.7, ~-1.6, ~0.2, ~2.4 ]\n*/\nfunction srotm( N, x, strideX, y, strideY, param ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy, param );\n}\n\n\n// EXPORTS //\n\nexport default srotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snrm2 from './snrm2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport srot from './srot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( srot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default srot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Construct a Givens plane rotation.\n*\n* @module @stdlib/blas/base/srotg\n*\n* @example\n* import srotg from '@stdlib/blas/base/srotg';\n*\n* var out = srotg( 0.0, 2.0 );\n* // returns <Float32Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*\n* out = srotg( 6.0, -8.0 );\n* // returns <Float32Array>[ 10.0, ~-1.666, -0.6, 0.8 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import srotg from '@stdlib/blas/base/srotg';\n*\n* var out = new Float32Array( 4 );\n*\n* var y = srotg.assign( 0.0, 2.0, out, 1, 0 );\n* // returns <Float32Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport srotm from './srotm.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( srotm, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default srotm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sfill from './../../../ext/base/sfill';\nimport sscal from './../../../base/sscal';\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} AP - packed form of a symmetric matrix `A`\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be non-zero\n* @throws {RangeError} tenth argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var AP = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n*\n* sspmv( 'column-major', 'lower', 3, 1.0, AP, x, 1, 1.0, y, 1 );\n* // y => <Float32Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\nfunction sspmv( order, uplo, N, alpha, AP, x, strideX, beta, y, strideY ) {\n\tvar temp1;\n\tvar temp2;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar kk;\n\tvar kx;\n\tvar ky;\n\tvar sy;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Seventh argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Tenth argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tsy = strideY;\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tsfill( N, 0.0, y, strideY );\n\t\t} else {\n\t\t\tif ( strideY < 0 ) {\n\t\t\t\tsy = -sy;\n\t\t\t}\n\t\t\tsscal( N, beta, y, sy );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX > 0 ) {\n\t\tkx = 0;\n\t} else {\n\t\tkx = ( 1 - N ) * strideX;\n\t}\n\tif ( strideY > 0 ) {\n\t\tky = 0;\n\t} else {\n\t\tky = ( 1 - N ) * strideY;\n\t}\n\t// Form: y = alpha*A*x + y\n\tkk = 0;\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tjx = kx;\n\t\tjy = ky;\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\ttemp1 = f32( alpha * x[ jx ] );\n\t\t\ttemp2 = 0.0;\n\t\t\ty[ jy ] += f32( temp1 * AP[ kk ] );\n\t\t\tix = jx;\n\t\t\tiy = jy;\n\t\t\tfor ( k = kk + 1; k < kk + N - j; k++ ) {\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t\ty[ iy ] += f32( temp1 * AP[ k ] );\n\t\t\t\ttemp2 += f32( AP[ k ] * x[ ix ] );\n\t\t\t}\n\t\t\ty[ jy ] += f32( alpha * temp2 );\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t\tkk += N - j;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tjx = kx;\n\tjy = ky;\n\tfor ( j = 0; j < N; j++ ) {\n\t\ttemp1 = f32( alpha * x[ jx ] );\n\t\ttemp2 = 0.0;\n\t\tix = kx;\n\t\tiy = ky;\n\t\tfor ( k = kk; k < kk + j; k++ ) {\n\t\t\ty[ iy ] += f32( temp1 * AP[ k ] );\n\t\t\ttemp2 += f32( AP[ k ] * x[ ix ] );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\ty[ jy ] += f32( f32( temp1 * AP[ kk + j ] ) + f32( alpha * temp2 ) );\n\t\tjx += strideX;\n\t\tjy += strideY;\n\t\tkk += j + 1;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default sspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sspmv from './sspmv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sspmv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sfill } from './../../../ext/base/sfill';\nimport { ndarray as sscal } from './../../../base/sscal';\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} AP - packed form of a symmetric matrix `A`\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be non-zero\n* @throws {RangeError} eleventh argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n*\n* sspmv( 'column-major', 'lower', 3, 1.0, A, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float32Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\nfunction sspmv( order, uplo, N, alpha, AP, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tvar temp1;\n\tvar temp2;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar kk;\n\tvar kx;\n\tvar ky;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Seventh argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eleventh argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tsfill( N, 0.0, y, strideY, offsetY );\n\t\t} else {\n\t\t\tsscal( N, beta, y, strideY, offsetY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\t// Form: y = alpha*A*x + y\n\tkx = offsetX;\n\tky = offsetY;\n\tkk = 0;\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tjx = kx;\n\t\tjy = ky;\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\ttemp1 = f32( alpha * x[ jx ] );\n\t\t\ttemp2 = 0.0;\n\t\t\ty[ jy ] += f32( temp1 * AP[ kk ] );\n\t\t\tix = jx;\n\t\t\tiy = jy;\n\t\t\tfor ( k = kk + 1; k < kk + N - j; k++ ) {\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t\ty[ iy ] += f32( temp1 * AP[ k ] );\n\t\t\t\ttemp2 += f32( AP[ k ] * x[ ix ] );\n\t\t\t}\n\t\t\ty[ jy ] += f32( alpha * temp2 );\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t\tkk += N - j;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tjx = kx;\n\tjy = ky;\n\tfor ( j = 0; j < N; j++ ) {\n\t\ttemp1 = f32( alpha * x[ jx ] );\n\t\ttemp2 = 0.0;\n\t\tix = kx;\n\t\tiy = ky;\n\t\tfor ( k = kk; k < kk + j; k++ ) {\n\t\t\ty[ iy ] += f32( temp1 * AP[ k ] );\n\t\t\ttemp2 += f32( AP[ k ] * x[ ix ] );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\ty[ jy ] += f32( f32( temp1 * AP[ kk + j ] ) + f32( alpha * temp2 ) );\n\t\tjx += strideX;\n\t\tjy += strideY;\n\t\tkk += j + 1;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default sspmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @module @stdlib/blas/base/sspmv\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import sspmv from '@stdlib/blas/base/sspmv';\n*\n* var AP = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n*\n* sspmv( 'column-major', 'lower', 3, 1.0, AP, x, 1, 1.0, y, 1 );\n* // y => <Float32Array>[ ~7.0, ~12.0, ~15.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import sspmv from '@stdlib/blas/base/sspmv';\n*\n* var AP = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n*\n* sspmv.ndarray( 'column-major', 'lower', 3, 1.0, AP, x, 1, 0, 1.0, y, 1, 0 );\n* // y => <Float32Array>[ ~7.0, ~12.0, ~15.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar sspmv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsspmv = main;\n} else {\n\tsspmv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default sspmv;\n\n// exports: { \"ndarray\": \"sspmv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/sspmv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @private\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} AP - packed form of a symmetric matrix `A`\n* @param {integer} strideAP - `AP` stride length\n* @param {NonNegativeInteger} offsetAP - starting index for `AP`\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var AP = new Float32Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* sspr( 'row-major', 'upper', 3, 1.0, x, 1, 0, AP, 1, 0 );\n* // AP => <Float32Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*/\nfunction sspr( order, uplo, N, alpha, x, strideX, offsetX, AP, strideAP, offsetAP ) { // eslint-disable-line max-len\n\tvar tmp;\n\tvar ix0;\n\tvar ix1;\n\tvar iap;\n\tvar i0;\n\tvar i1;\n\tvar kk;\n\tvar ox;\n\n\tox = offsetX;\n\tkk = offsetAP;\n\tif (\n\t\t( order === 'column-major' && uplo === 'upper' ) ||\n\t\t( order === 'row-major' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = f32( alpha * x[ ix1 ] );\n\t\t\t\tix0 = ox;\n\t\t\t\tiap = kk;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tAP[ iap ] += f32( x[ ix0 ] * tmp );\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t\tiap += strideAP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t\tkk += ( i1 + 1 ) * strideAP;\n\t\t}\n\t\treturn AP;\n\t}\n\t// ( order === 'column-major' && uplo === 'lower' ) || ( order === 'row-major' && uplo === 'upper' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\ttmp = f32( alpha * x[ ix1 ] );\n\t\t\tix0 = ix1;\n\t\t\tiap = kk;\n\t\t\tfor ( i0 = 0; i0 < N - i1; i0++ ) {\n\t\t\t\tAP[ iap ] += f32( x[ ix0 ] * tmp );\n\t\t\t\tix0 += strideX;\n\t\t\t\tiap += strideAP;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t\tkk += ( N - i1 ) * strideAP;\n\t}\n\treturn AP;\n}\n\n\n// EXPORTS //\n\nexport default sspr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} AP - packed form of a symmetric matrix `A`\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @returns {Float32Array} `AP`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var AP = new Float32Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* sspr( 'row-major', 'upper', 3, 1.0, x, 1, AP );\n* // AP => <Float32Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*/\nfunction sspr( order, uplo, N, alpha, x, strideX, AP ) {\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn AP;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( order, uplo, N, alpha, x, strideX, ox, AP, 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default sspr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sspr from './sspr.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sspr, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sspr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} AP - packed form of a symmetric matrix `A`\n* @param {integer} strideAP - `AP` stride length\n* @param {NonNegativeInteger} offsetAP - starting index for `AP`\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} ninth argument must be non-zero\n* @returns {Float32Array} `AP`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var AP = new Float32Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* sspr( 'row-major', 'upper', 3, 1.0, x, 1, 0, AP, 1, 0 );\n* // AP => <Float32Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*/\nfunction sspr( order, uplo, N, alpha, x, strideX, offsetX, AP, strideAP, offsetAP ) { // eslint-disable-line max-len\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideAP === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero. Value: `%d`.', strideAP ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn AP;\n\t}\n\treturn base( order, uplo, N, alpha, x, strideX, offsetX, AP, strideAP, offsetAP ); // eslint disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sspr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Interchanges two single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* sswap( x.length, x, 1, 0, y, 1, 0 );\n* // x => <Float32Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction sswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = y[ iy ];\n\t\t\t\ty[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = y[ iy ];\n\t\t\ty[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = y[ iy+1 ];\n\t\t\ty[ iy+1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = y[ iy+2 ];\n\t\t\ty[ iy+2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = y[ iy ];\n\t\ty[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default sswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Interchanges two single-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* sswap( x.length, x, 1, y, 1 );\n* // x => <Float32Array>[ 6.0, 7.0, 8.0, 9.0, 10.0 ]\n* // y => <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction sswap( N, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = stride2offset( N, strideX );\n\tiy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default sswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sswap from './sswap.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sswap, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sfill from './../../../ext/base/sfill';\nimport sscal from './../../../base/sscal';\nimport max from '@stdlib/math/base/special/max';\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be greater than or equal to max(1,N)\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} eleventh argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 0.0, 0.0, 0.0 ] );\n*\n* ssymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0.0, y, 1 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction ssymv( order, uplo, N, alpha, A, LDA, x, strideX, beta, y, strideY ) { // eslint-disable-line max-params\n\tvar temp1;\n\tvar temp2;\n\tvar jmin;\n\tvar jmax;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar ox;\n\tvar oy;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( 'invalid argument. Sixth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eleventh argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tsfill( N, 0.0, y, strideY );\n\t\t} else {\n\t\t\tif ( strideY < 0 ) {\n\t\t\t\tstrideY = -strideY;\n\t\t\t}\n\t\t\tsscal( N, beta, y, strideY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX > 0 ) {\n\t\tox = 0;\n\t} else {\n\t\tox = ( 1 - N ) * strideX;\n\t}\n\tif ( strideY > 0 ) {\n\t\toy = 0;\n\t} else {\n\t\toy = ( 1 - N ) * strideY;\n\t}\n\t// Form: y = alpha*A*x + y\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tix = ox;\n\t\tiy = oy;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ttemp1 = f32( alpha * x[ ix ] );\n\t\t\ttemp2 = 0.0;\n\t\t\tjmin = i + 1;\n\t\t\tjmax = N;\n\t\t\tjx = ox + ( jmin*strideX );\n\t\t\tjy = oy + ( jmin*strideY );\n\t\t\ty[ iy ] += f32( temp1 * A[(LDA*i)+i] );\n\t\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\t\tk = ( LDA*i ) + j;\n\t\t\t\ty[ jy ] += f32( temp1 * A[k] );\n\t\t\t\ttemp2 = f32( temp2 + f32( x[jx] * A[k] ) );\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\ty[ iy ] += f32( alpha * temp2 );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tix = ox + ( (N-1)*strideX );\n\tiy = oy + ( (N-1)*strideY );\n\tfor ( i = N-1; i >= 0; i-- ) {\n\t\ttemp1 = f32( alpha * x[ ix ] );\n\t\ttemp2 = 0.0;\n\t\tjmin = 0;\n\t\tjmax = i;\n\t\tjx = ox + ( jmin*strideX );\n\t\tjy = oy + ( jmin*strideY );\n\t\ty[ iy ] += f32( temp1 * A[(LDA*i)+i] );\n\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\tk = ( LDA*i ) + j;\n\t\t\ty[ jy ] += f32( temp1 * A[k] );\n\t\t\ttemp2 = f32( temp2 + f32( x[jx] * A[k] ) );\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t}\n\t\ty[ iy ] += f32( alpha * temp2 );\n\t\tix -= strideX;\n\t\tiy -= strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default ssymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssymv from './ssymv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssymv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sfill } from './../../../ext/base/sfill';\nimport { ndarray as sscal } from './../../../base/sscal';\nimport max from '@stdlib/math/base/special/max';\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\n\n\n// MAIN //\n\n/**\n* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} A - matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {number} beta - scalar constant\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be greater than or equal to max(1,N)\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} twelfth argument must be non-zero\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 0.0, 0.0, 0.0 ] );\n*\n* ssymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0, 0.0, y, 1, 0 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction ssymv( order, uplo, N, alpha, A, LDA, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len\n\tvar temp1;\n\tvar temp2;\n\tvar jmin;\n\tvar jmax;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar ox;\n\tvar oy;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( 'invalid argument. Sixth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. Twelfth argument must be non-zero. Value: `%d`.', strideY );\n\t}\n\tif ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {\n\t\treturn y;\n\t}\n\t// Form: y = beta*y\n\tif ( beta !== 1.0 ) {\n\t\tif ( beta === 0.0 ) {\n\t\t\tsfill( N, 0.0, y, strideY, offsetY );\n\t\t} else {\n\t\t\tsscal( N, beta, y, strideY, offsetY );\n\t\t}\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tox = offsetX;\n\toy = offsetY;\n\n\t// Form: y = alpha*A*x + y\n\tif (\n\t\t( order === 'row-major' && uplo === 'upper' ) ||\n\t\t( order === 'column-major' && uplo === 'lower' )\n\t) {\n\t\tix = ox;\n\t\tiy = oy;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ttemp1 = f32( alpha * x[ ix ] );\n\t\t\ttemp2 = 0.0;\n\t\t\tjmin = i + 1;\n\t\t\tjmax = N;\n\t\t\tjx = ox + ( jmin*strideX );\n\t\t\tjy = oy + ( jmin*strideY );\n\t\t\ty[ iy ] += f32( temp1 * A[(LDA*i)+i] );\n\t\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\t\tk = ( LDA*i ) + j;\n\t\t\t\ty[ jy ] += f32( temp1 * A[k] );\n\t\t\t\ttemp2 = f32( temp2 + f32( x[jx] * A[k] ) );\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\ty[ iy ] += f32( alpha * temp2 );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\t// ( order === 'row-major' && uplo === 'lower') || ( order === 'column-major' && uplo === 'upper' )\n\tix = ox + ( (N-1)*strideX );\n\tiy = oy + ( (N-1)*strideY );\n\tfor ( i = N-1; i >= 0; i-- ) {\n\t\ttemp1 = f32( alpha * x[ ix ] );\n\t\ttemp2 = 0.0;\n\t\tjmin = 0;\n\t\tjmax = i;\n\t\tjx = ox + ( jmin*strideX );\n\t\tjy = oy + ( jmin*strideY );\n\t\ty[ iy ] += f32( temp1 * A[(LDA*i)+i] );\n\t\tfor ( j = jmin; j < jmax; j++ ) {\n\t\t\tk = ( LDA*i ) + j;\n\t\t\ty[ jy ] += f32( temp1 * A[k] );\n\t\t\ttemp2 = f32( temp2 + f32( x[jx] * A[k] ) );\n\t\t\tjx += strideX;\n\t\t\tjy += strideY;\n\t\t}\n\t\ty[ iy ] += f32( alpha * temp2 );\n\t\tix -= strideX;\n\t\tiy -= strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default ssymv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas/base/ssymv\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import ssymv from '@stdlib/blas/base/ssymv';\n*\n* var A = new Float32Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 0.0, 0.0, 0.0 ] );\n*\n* ssymv( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0.0, y, 1 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import ssymv from '@stdlib/blas/base/ssymv';\n*\n* var A = new Float32Array( [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n* var y = new Float32Array( [ 0.0, 0.0, 0.0 ] );\n*\n* ssymv.ndarray( 'row-major', 'lower', 3, 1.0, A, 3, x, 1, 0, 0.0, y, 1, 0 );\n* // y => <Float32Array>[ 1.0, 2.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar ssymv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tssymv = main;\n} else {\n\tssymv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default ssymv;\n\n// exports: { \"ndarray\": \"ssymv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/ssymv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @private\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction ssyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tvar isrm;\n\tvar tmp;\n\tvar ix0;\n\tvar ix1;\n\tvar sa0;\n\tvar sa1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\tif (\n\t\t( isrm && uplo === 'lower' ) ||\n\t\t( !isrm && uplo === 'upper' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = f32( alpha * x[ ix1 ] );\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tA[ oa+(sa0*i0) ] += f32( x[ ix0 ] * tmp );\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn A;\n\t}\n\t// ( isrm && uplo === 'upper' ) || ( !isrm && uplo === 'lower' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\ttmp = f32( alpha * x[ ix1 ] );\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tA[ oa+(sa0*i0) ] += f32( x[ ix0 ] * tmp );\n\t\t\t\tix0 += strideX;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nexport default ssyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} eighth argument must be greater than or equal to max(1,N)\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr( 'row-major', 'upper', 3, 1.0, x, 1, A, 3 );\n* // A => <Float32Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction ssyr( order, uplo, N, alpha, x, strideX, A, LDA ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, N, alpha, x, strideX, ox, A, sa1, sa2, 0 );\n}\n\n\n// EXPORTS //\n\nexport default ssyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssyr from './ssyr.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssyr, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @throws {TypeError} first argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be non-zero\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 2.0, 4.0, 6.0, 0.0, 5.0, 8.0, 0.0, 0.0, 10.0 ]\n*/\nfunction ssyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\treturn base( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ssyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @private\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr2( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction ssyr2( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len, max-params\n\tvar tmp1;\n\tvar tmp2;\n\tvar isrm;\n\tvar ix0;\n\tvar ix1;\n\tvar iy0;\n\tvar iy1;\n\tvar sa0;\n\tvar sa1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\tvar oy;\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) { // row-major\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // column-major\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\toy = offsetY;\n\tix1 = ox;\n\tiy1 = oy;\n\tif (\n\t\t( isrm && uplo === 'lower' ) ||\n\t\t( !isrm && uplo === 'upper' )\n\t) {\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( ( x[ ix1 ] !== 0.0 ) || ( y[ iy1 ] !== 0.0 ) ) {\n\t\t\t\ttmp1 = f32( alpha * y[ iy1 ] );\n\t\t\t\ttmp2 = f32( alpha * x[ ix1 ] );\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tiy0 = oy;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tA[ oa+(sa0*i0) ] += f32( f32( x[ ix0 ] * tmp1 ) + f32( y[ iy0 ] * tmp2 ) ); // eslint-disable-line max-len\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t\tiy0 += strideY;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t\tiy1 += strideY;\n\t\t}\n\t\treturn A;\n\t}\n\t// ( isrm && uplo === 'upper' ) || ( !isrm && uplo === 'lower' )\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( ( x[ ix1 ] !== 0.0 ) || ( y[ iy1 ] !== 0.0 ) ) {\n\t\t\ttmp1 = f32( alpha * y[ iy1 ] );\n\t\t\ttmp2 = f32( alpha * x[ ix1 ] );\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tiy0 = iy1;\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tA[ oa+(sa0*i0) ] += f32( f32( x[ ix0 ] * tmp1 ) + f32( y[ iy0 ] * tmp2 ) ); // eslint-disable-line max-len\n\t\t\t\tix0 += strideX;\n\t\t\t\tiy0 += strideY;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t\tiy1 += strideY;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nexport default ssyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {Float32Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} eighth argument must be greater than or equal to max(1,N)\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr2( 'row-major', 'upper', 3, 1.0, x, 1, y, 1, A, 3 );\n* // A => <Float32Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction ssyr2( order, uplo, N, alpha, x, strideX, y, strideY, A, LDA ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\tvar oy;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\toy = stride2offset( N, strideY );\n\treturn base( uplo, N, alpha, x, strideX, ox, y, strideY, oy, A, sa1, sa2, 0 ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ssyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssyr2 from './ssyr2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssyr2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @throws {TypeError} first argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be non-zero\n* @throws {RangeError} eighth argument must be non-zero\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr2( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\nfunction ssyr2( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len, max-params\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether the reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\treturn base( uplo, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ssyr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the symmetric rank 2 operation `A = α*x*y^T + α*y*x^T + A` where `α` is a scalar, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas/base/ssyr2\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import ssyr2 from '@stdlib/blas/base/ssyr2';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr2( 'row-major', 'upper', 3, 1.0, x, 1, y, 1, A, 3 );\n* // A => <Float32Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import ssyr2 from '@stdlib/blas/base/ssyr2';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* ssyr2.ndarray( 'upper', 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 3.0, 6.0, 9.0, 0.0, 9.0, 14.0, 0.0, 0.0, 19.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar ssyr2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tssyr2 = main;\n} else {\n\tssyr2 = tmp;\n}\n\n\n// EXPORTS //\n\nexport default ssyr2;\n\n// exports: { \"ndarray\": \"ssyr2.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/ssyr2/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @private\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strmv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float32Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction strmv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tvar nonunit;\n\tvar isrm;\n\tvar tmp;\n\tvar sa0;\n\tvar sa1;\n\tvar ix0;\n\tvar ix1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\n\t// Note on variable naming convention: sa#, ix#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tnonunit = ( diag === 'non-unit' );\n\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = 0; i0 < i1; i0++ ) {\n\t\t\t\t\tx[ ix0 ] = f32( x[ ix0 ] + f32( tmp * A[ oa+(sa0*i0) ] ) );\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t}\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] = f32( x[ ix1 ] * A[ oa+(sa0*i1) ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'lower' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'upper' )\n\t) {\n\t\tox += ( N - 1 ) * strideX;\n\t\tix1 = ox;\n\t\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = N-1; i0 > i1; i0-- ) {\n\t\t\t\t\tx[ ix0 ] = f32( x[ ix0 ] + f32( tmp * A[ oa+(sa0*i0) ] ) );\n\t\t\t\t\tix0 -= strideX;\n\t\t\t\t}\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] = f32( x[ ix1 ] * A[ oa+(sa0*i1) ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 -= strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans !== 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans === 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox + ( ( N - 1 ) * strideX );\n\t\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\t\ttmp = x[ ix1 ];\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tif ( nonunit ) {\n\t\t\t\ttmp = f32( tmp * A[ oa+(sa0*i1) ] );\n\t\t\t}\n\t\t\tfor ( i0 = i1-1; i0 >= 0; i0-- ) {\n\t\t\t\tix0 -= strideX;\n\t\t\t\ttmp = f32( tmp + f32( x[ ix0 ] * A[ oa+(sa0*i0) ] ) );\n\t\t\t}\n\t\t\tx[ ix1 ] = tmp;\n\t\t\tix1 -= strideX;\n\t\t}\n\t\treturn x;\n\t}\n\t// ( !isrm && trans !== 'no-transpose' && uplo === 'lower' ) || ( isrm && trans === 'no-transpose' && uplo === 'upper' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\ttmp = x[ ix1 ];\n\t\toa = offsetA + (sa1*i1);\n\t\tix0 = ix1;\n\t\tif ( nonunit ) {\n\t\t\ttmp = f32( tmp * A[ oa+(sa0*i1) ] );\n\t\t}\n\t\tfor ( i0 = i1+1; i0 < N; i0++ ) {\n\t\t\tix0 += strideX;\n\t\t\ttmp = f32( tmp + f32( x[ ix0 ] * A[ oa+(sa0*i0) ] ) );\n\t\t}\n\t\tx[ ix1 ] = tmp;\n\t\tix1 += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default strmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nimport isDiagonal from './../../../base/assert/is-diagonal-type';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float32Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} third argument must be a valid transpose operation\n* @throws {TypeError} fourth argument must be a valid diagonal type\n* @throws {RangeError} fifth argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be greater than or equal to max(1,N)\n* @throws {RangeError} ninth argument must be non-zero\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strmv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float32Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction strmv( order, uplo, trans, diag, N, A, LDA, x, strideX ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Seventh argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, trans, diag, N, A, sa1, sa2, 0, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default strmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport strmv from './strmv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( strmv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default strmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nimport isDiagonal from './../../../base/assert/is-diagonal-type';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @throws {TypeError} first argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} second argument must be a valid transpose operation\n* @throws {TypeError} third argument must be a valid diagonal type\n* @throws {RangeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} tenth argument must be non-zero\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strmv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float32Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction strmv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\treturn base( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default strmv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @module @stdlib/blas/base/strmv\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import strmv from '@stdlib/blas/base/strmv';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strmv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float32Array>[ 14.0, 8.0, 3.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import strmv from '@stdlib/blas/base/strmv';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strmv.ndarray( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float32Array>[ 14.0, 8.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar strmv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tstrmv = main;\n} else {\n\tstrmv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default strmv;\n\n// exports: { \"ndarray\": \"strmv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/strmv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray/base/assert/is-row-major';\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Solves one of the systems of equations `A*x = b` or `A^T*x = b` where `b` and `x` are `N` element vectors and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @private\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strsv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float32Array>[ 0.0, -4.0, 3.0 ]\n*/\nfunction strsv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tvar nonunit;\n\tvar isrm;\n\tvar tmp;\n\tvar sa0;\n\tvar sa1;\n\tvar ix0;\n\tvar ix1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\n\t// Note on variable naming convention: sa#, ix#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tnonunit = ( diag === 'non-unit' );\n\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox + ( ( N - 1 ) * strideX );\n\t\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] = f32( x[ ix1 ] / A[ oa+(sa0*i1) ] );\n\t\t\t\t}\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\tix0 = ix1;\n\t\t\t\tfor ( i0 = i1-1; i0 >= 0; i0-- ) {\n\t\t\t\t\tix0 -= strideX;\n\t\t\t\t\tx[ ix0 ] = f32( x[ ix0 ] - f32( tmp * A[ oa+(sa0*i0) ] ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 -= strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'lower' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'upper' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] = f32( x[ ix1 ] / A[ oa+(sa0*i1) ] );\n\t\t\t\t}\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\tix0 = ix1;\n\t\t\t\tfor ( i0 = i1+1; i0 < N; i0++ ) {\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t\tx[ ix0 ] = f32( x[ ix0 ] - f32( tmp * A[ oa+(sa0*i0) ] ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans !== 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans === 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\ttmp = x[ ix1 ];\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ox;\n\t\t\tfor ( i0 = 0; i0 <= i1-1; i0++ ) {\n\t\t\t\ttmp = f32( tmp - f32( x[ ix0 ] * A[ oa+(sa0*i0) ] ) );\n\t\t\t\tix0 += strideX;\n\t\t\t}\n\t\t\tif ( nonunit ) {\n\t\t\t\ttmp = f32( tmp / A[ oa+(sa0*i1) ] );\n\t\t\t}\n\t\t\tx[ ix1 ] = tmp;\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn x;\n\t}\n\t// ( !isrm && trans !== 'no-transpose' && uplo === 'lower' ) || ( isrm && trans === 'no-transpose' && uplo === 'upper' )\n\tox += ( N - 1 ) * strideX;\n\tix1 = ox;\n\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\ttmp = x[ ix1 ];\n\t\toa = offsetA + (sa1*i1);\n\t\tix0 = ox;\n\t\tfor ( i0 = N-1; i0 > i1; i0-- ) {\n\t\t\ttmp = f32( tmp - f32( x[ ix0 ] * A[ oa+(sa0*i0) ] ) );\n\t\t\tix0 -= strideX;\n\t\t}\n\t\tif ( nonunit ) {\n\t\t\ttmp = f32( tmp / A[ oa+(sa0*i1) ] );\n\t\t}\n\t\tx[ ix1 ] = tmp;\n\t\tix1 -= strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default strsv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport max from '@stdlib/math/base/special/fast/max';\nimport isLayout from './../../../base/assert/is-layout';\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nimport isDiagonal from './../../../base/assert/is-diagonal-type';\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Solves one of the systems of equations `A*x = b` or `A^T*x = b` where `b` and `x` are `N` element vectors and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float32Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} third argument must be a valid transpose operation\n* @throws {TypeError} fourth argument must be a valid diagonal type\n* @throws {RangeError} fifth argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be greater than or equal to max(1,N)\n* @throws {RangeError} ninth argument must be non-zero\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strsv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float32Array>[ 0.0, -4.0, 3.0 ]\n*/\nfunction strsv( order, uplo, trans, diag, N, A, LDA, x, strideX ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Seventh argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, trans, diag, N, A, sa1, sa2, 0, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default strsv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport strsv from './strsv.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( strsv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default strsv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from './../../../base/assert/is-matrix-triangle';\nimport isTransposeOperation from './../../../base/assert/is-transpose-operation';\nimport isDiagonal from './../../../base/assert/is-diagonal-type';\nimport format from '@stdlib/string/format';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Solves one of the systems of equations `A*x = b` or `A^T*x = b` where `b` and `x` are `N` element vectors and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float32Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @throws {TypeError} first argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} second argument must be a valid transpose operation\n* @throws {TypeError} third argument must be a valid diagonal type\n* @throws {RangeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} tenth argument must be non-zero\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strsv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float32Array>[ 0.0, -4.0, 3.0 ]\n*/\nfunction strsv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\treturn base( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default strsv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to solve one of the systems of equations `A*x = b` or `A^T*x = b` where `b` and `x` are `N` element vectors and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @module @stdlib/blas/base/strsv\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import strsv from '@stdlib/blas/base/strsv';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strsv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float32Array>[ 0.0, -4.0, 3.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import strsv from '@stdlib/blas/base/strsv';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* strsv.ndarray( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float32Array>[ 0.0, -4.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar strsv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tstrsv = main;\n} else {\n\tstrsv = tmp;\n}\n\n\n// EXPORTS //\n\nexport default strsv;\n\n// exports: { \"ndarray\": \"strsv.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/strsv/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport { enum as enumeration } from './../../../base/transpose-operations';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the BLAS transpose operation string associated with a BLAS transpose operation enumeration constant.\n*\n* @param {integer} operation - operation enumeration constant\n* @returns {(string|null)} operation string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/transpose-operation-str2enum';\n*\n* var v = str2enum( 'transpose' );\n* // returns <number>\n*\n* var s = enum2str( v );\n* // returns 'transpose'\n*/\nfunction enum2str( operation ) {\n\tvar v = hash[ operation ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from './../../../base/transpose-operations';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a BLAS transpose operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `TRANSPOSE == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} operation - transpose operation\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'transpose' );\n* // returns <number>\n*/\nfunction str2enum( operation ) {\n\tvar v = ENUM[ operation ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\n\n\n// MAIN //\n\n/**\n* Copies values from one complex double-precision floating-point vector to another complex double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Complex128Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Complex128Array} output array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* zcopy( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Complex128Array>[ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*/\nfunction zcopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = reinterpret( x, 0 );\n\tviewY = reinterpret( y, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tviewY[ iy ] = viewX[ ix ];\n\t\tviewY[ iy+1 ] = viewX[ ix+1 ];\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default zcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Copies values from one complex double-precision floating-point vector to another complex double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex128Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Complex128Array} output array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* zcopy( x.length, x, 1, y, 1 );\n* // y => <Complex128Array>[ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*/\nfunction zcopy( N, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default zcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {NonNegativeInteger} offsetX - starting `zx` index\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @param {NonNegativeInteger} offsetY - starting `zy` index\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex128Array} `zy`\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var zy = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* zdrot( zx.length, zx, 1, 0, zy, 1, 0, 0.8, 0.6 );\n* // zx => <Complex128Array>[ ~0.8, ~1.6, ~2.4, ~3.2, 4.0, ~4.8, ~5.6, ~6.4 ]\n* // zy => <Complex128Array>[ ~-0.6, ~-1.2, ~-1.8, ~-2.4, -3.0, ~-3.6, ~-4.2, ~-4.8 ]\n*/\nfunction zdrot( N, zx, strideX, offsetX, zy, strideY, offsetY, c, s ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn zy;\n\t}\n\tviewX = reinterpret( zx, 0 );\n\tviewY = reinterpret( zy, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = ( c*viewX[ ix ] ) + ( s*viewY[ iy ] );\n\t\tviewY[ iy ] = ( c*viewY[ iy ] ) - ( s*viewX[ ix ] );\n\t\tviewX[ ix ] = tmp;\n\n\t\ttmp = ( c*viewX[ ix+1 ] ) + ( s*viewY[ iy+1 ] );\n\t\tviewY[ iy+1 ] = ( c*viewY[ iy+1 ] ) - ( s*viewX[ ix+1 ] );\n\t\tviewX[ ix+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn zy;\n}\n\n\n// EXPORTS //\n\nexport default zdrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex128Array} `zy`\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var zy = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* zdrot( zx.length, zx, 1, zy, 1, 0.8, 0.6 );\n* // zx => <Complex128Array>[ ~0.8, ~1.6, ~2.4, ~3.2, 4.0, ~4.8, ~5.6, ~6.4 ]\n* // zy => <Complex128Array>[ ~-0.6, ~-1.2, ~-1.8, ~-2.4, -3.0, ~-3.6, ~-4.2, ~-4.8 ]\n*/\nfunction zdrot( N, zx, strideX, zy, strideY, c, s ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, zx, strideX, ix, zy, strideY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nexport default zdrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\n\n\n// MAIN //\n\n/**\n* Interchanges two complex double-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Complex128Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Complex128Array} `y`\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* zswap( x.length, x, 1, 0, y, 1, 0 );\n* // x => <Complex128Array>[ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]\n* // y => <Complex128Array>[ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*/\nfunction zswap( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tviewX = reinterpret( x, 0 );\n\tviewY = reinterpret( y, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = viewX[ ix ];\n\t\tviewX[ ix ] = viewY[ iy ];\n\t\tviewY[ iy ] = tmp;\n\n\t\ttmp = viewX[ ix+1 ];\n\t\tviewX[ ix+1 ] = viewY[ iy+1 ];\n\t\tviewY[ iy+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default zswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Interchanges two complex double-precision floating-point vectors.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex128Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Complex128Array} `y`\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* zswap( x.length, x, 1, y, 1 );\n* // x => <Complex128Array>[ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]\n* // y => <Complex128Array>[ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*/\nfunction zswap( N, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default zswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport zcopy from './zcopy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zcopy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zcopy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport zdrot from './zdrot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zdrot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zdrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport zswap from './zswap.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zswap, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name ccopy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ccopy}\n*/\nimport ccopy from './../../../base/ccopy';\nsetReadOnly( ns, 'ccopy', ccopy );\n\n/**\n* @name cscal\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/cscal}\n*/\nimport cscal from './../../../base/cscal';\nsetReadOnly( ns, 'cscal', cscal );\n\n/**\n* @name csrot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/csrot}\n*/\nimport csrot from './../../../base/csrot';\nsetReadOnly( ns, 'csrot', csrot );\n\n/**\n* @name cswap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/cswap}\n*/\nimport cswap from './../../../base/cswap';\nsetReadOnly( ns, 'cswap', cswap );\n\n/**\n* @name dasum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dasum}\n*/\nimport dasum from './../../../base/dasum';\nsetReadOnly( ns, 'dasum', dasum );\n\n/**\n* @name daxpy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/daxpy}\n*/\nimport daxpy from './../../../base/daxpy';\nsetReadOnly( ns, 'daxpy', daxpy );\n\n/**\n* @name dcopy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dcopy}\n*/\nimport dcopy from './../../../base/dcopy';\nsetReadOnly( ns, 'dcopy', dcopy );\n\n/**\n* @name ddot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ddot}\n*/\nimport ddot from './../../../base/ddot';\nsetReadOnly( ns, 'ddot', ddot );\n\n/**\n* @name dnrm2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dnrm2}\n*/\nimport dnrm2 from './../../../base/dnrm2';\nsetReadOnly( ns, 'dnrm2', dnrm2 );\n\n/**\n* @name drot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/drot}\n*/\nimport drot from './../../../base/drot';\nsetReadOnly( ns, 'drot', drot );\n\n/**\n* @name drotm\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/drotm}\n*/\nimport drotm from './../../../base/drotm';\nsetReadOnly( ns, 'drotm', drotm );\n\n/**\n* @name dscal\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dscal}\n*/\nimport dscal from './../../../base/dscal';\nsetReadOnly( ns, 'dscal', dscal );\n\n/**\n* @name dswap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dswap}\n*/\nimport dswap from './../../../base/dswap';\nsetReadOnly( ns, 'dswap', dswap );\n\n/**\n* @name idamax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/idamax}\n*/\nimport idamax from './../../../base/idamax';\nsetReadOnly( ns, 'idamax', idamax );\n\n/**\n* @name isamax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/isamax}\n*/\nimport isamax from './../../../base/isamax';\nsetReadOnly( ns, 'isamax', isamax );\n\n/**\n* @name sasum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sasum}\n*/\nimport sasum from './../../../base/sasum';\nsetReadOnly( ns, 'sasum', sasum );\n\n/**\n* @name saxpy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/saxpy}\n*/\nimport saxpy from './../../../base/saxpy';\nsetReadOnly( ns, 'saxpy', saxpy );\n\n/**\n* @name scopy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/scopy}\n*/\nimport scopy from './../../../base/scopy';\nsetReadOnly( ns, 'scopy', scopy );\n\n/**\n* @name sdot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sdot}\n*/\nimport sdot from './../../../base/sdot';\nsetReadOnly( ns, 'sdot', sdot );\n\n/**\n* @name snrm2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/snrm2}\n*/\nimport snrm2 from './../../../base/snrm2';\nsetReadOnly( ns, 'snrm2', snrm2 );\n\n/**\n* @name srot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/srot}\n*/\nimport srot from './../../../base/srot';\nsetReadOnly( ns, 'srot', srot );\n\n/**\n* @name sscal\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sscal}\n*/\nimport sscal from './../../../base/sscal';\nsetReadOnly( ns, 'sscal', sscal );\n\n/**\n* @name zcopy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zcopy}\n*/\nimport zcopy from './../../../base/zcopy';\nsetReadOnly( ns, 'zcopy', zcopy );\n\n/**\n* @name zdrot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zdrot}\n*/\nimport zdrot from './../../../base/zdrot';\nsetReadOnly( ns, 'zdrot', zdrot );\n\n/**\n* @name zswap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zswap}\n*/\nimport zswap from './../../../base/zswap';\nsetReadOnly( ns, 'zswap', zswap );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\nimport { assign as muladd } from '@stdlib/complex/float64/base/mul-add';\nimport real from '@stdlib/complex/float64/real';\nimport imag from '@stdlib/complex/float64/imag';\nimport dcabs1 from './../../../base/dcabs1';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant and adds the result to a double-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} za - scalar constant\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {integer} offsetX - starting index for `zx`\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @param {integer} offsetY - starting index for `zy`\n* @returns {Complex128Array} second input array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, za, zx, 1, 0, zy, 1, 0 );\n* // zy => <Complex128Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*/\nfunction zaxpy( N, za, zx, strideX, offsetX, zy, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar re;\n\tvar im;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn zy;\n\t}\n\tif ( dcabs1( za ) === 0.0 ) {\n\t\treturn zy;\n\t}\n\tre = real( za );\n\tim = imag( za );\n\tviewX = reinterpret( zx, 0 );\n\tviewY = reinterpret( zy, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tmuladd( re, im, viewX[ ix ], viewX[ ix+1 ], viewY[ iy ], viewY[ iy+1 ], viewY, 1, iy ); // eslint-disable-line max-len\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn zy;\n}\n\n\n// EXPORTS //\n\nexport default zaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant and adds the result to a double-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} za - scalar constant\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @returns {Complex128Array} second input array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, za, zx, 1, zy, 1 );\n* // zy => <Complex128Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*/\nfunction zaxpy( N, za, zx, strideX, zy, strideY ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, za, zx, strideX, ix, zy, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default zaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport zaxpy from './zaxpy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zaxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to scale a double-precision complex floating-point vector by a double-precision complex floating-point constant and add the result to a double-precision complex floating-point vector.\n*\n* @module @stdlib/blas/base/zaxpy\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n* import zaxpy from '@stdlib/blas/base/zaxpy';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, za, zx, 1, zy, 1 );\n* // zy => <Complex128Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n* import zaxpy from '@stdlib/blas/base/zaxpy';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy.ndarray( 3, za, zx, 1, 0, zy, 1, 0 );\n* // zy => <Complex128Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils/try-require';\nimport isError from '@stdlib/assert/is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar zaxpy;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tzaxpy = main;\n} else {\n\tzaxpy = tmp;\n}\n\n\n// EXPORTS //\n\nexport default zaxpy;\n\n// exports: { \"ndarray\": \"zaxpy.ndarray\" }\n","export default '/home/runner/work/blas/blas/base/zaxpy/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\nimport { strided as scale } from '@stdlib/complex/float64/base/scale';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} da - constant\n* @param {Complex128Array} zx - input array\n* @param {integer} strideZX - `zx` stride length\n* @param {NonNegativeInteger} offsetZX - starting `zx` index\n* @returns {Complex128Array} input array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* zdscal( 3, 2.0, zx, 1, 0 );\n* // zx => <Complex128Array>[ 2.0, 4.0, 6.0, 8.0, 10.0, 12.0 ]\n*/\nfunction zdscal( N, da, zx, strideZX, offsetZX ) {\n\tvar zx64;\n\tvar ix;\n\tvar sx;\n\tvar i;\n\n\tif ( N <= 0 || da === 1.0 ) {\n\t\treturn zx;\n\t}\n\t// Reinterpret the input array as a real-valued array of interleaved real and imaginary components:\n\tzx64 = reinterpret( zx, 0 );\n\n\t// Adjust the stride and offset accordingly:\n\tix = offsetZX * 2;\n\tsx = strideZX * 2;\n\n\tfor ( i = 0; i < N; i++ ) {\n\t\tscale( da, zx64, 1, ix, zx64, 1, ix );\n\t\tix += sx;\n\t}\n\treturn zx;\n}\n\n\n// EXPORTS //\n\nexport default zdscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} da - constant\n* @param {Complex128Array} zx - input array\n* @param {integer} strideZX - `zx` stride length\n* @returns {Complex128Array} input array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* zdscal( 3, 2.0, zx, 1 );\n* // zx => <Complex128Array>[ 2.0, 4.0, 6.0, 8.0, 10.0, 12.0 ]\n*/\nfunction zdscal( N, da, zx, strideZX ) {\n\treturn ndarray( N, da, zx, strideZX, stride2offset( N, strideZX ) );\n}\n\n\n// EXPORTS //\n\nexport default zdscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided/base/reinterpret-complex128';\nimport { assign as cmul } from '@stdlib/complex/float64/base/mul';\nimport real from '@stdlib/complex/float64/real';\nimport imag from '@stdlib/complex/float64/imag';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} alpha - constant\n* @param {Complex128Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @returns {Complex128Array} input array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var alpha = new Complex128( 2.0, 2.0 );\n*\n* zscal( 3, alpha, x, 1, 0 );\n* // x => <Complex128Array>[ -2.0, 6.0, -2.0, 14.0, -2.0, 22.0 ]\n*/\nfunction zscal( N, alpha, x, strideX, offsetX ) {\n\tvar view;\n\tvar re1;\n\tvar im1;\n\tvar re2;\n\tvar im2;\n\tvar sx;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\t// Reinterpret the input array as a real-valued array of interleaved real and imaginary components:\n\tview = reinterpret( x, 0 );\n\n\t// Adjust the stride and offset:\n\tsx = strideX * 2;\n\tix = offsetX * 2;\n\n\t// Decompose the input scalar to real and imaginary components:\n\tre1 = real( alpha );\n\tim1 = imag( alpha );\n\n\tfor ( i = 0; i < N; i++ ) {\n\t\tre2 = view[ ix ];\n\t\tim2 = view[ ix+1 ];\n\t\tcmul( re1, im1, re2, im2, view, 1, ix );\n\t\tix += sx;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default zscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} alpha - constant\n* @param {Complex128Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @returns {Complex128Array} input array\n*\n* @example\n* import Complex128Array from '@stdlib/array/complex128';\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var alpha = new Complex128( 2.0, 2.0 );\n*\n* zscal( 3, alpha, x, 1 );\n* // x => <Complex128Array>[ -2.0, 6.0, -2.0, 14.0, -2.0, 22.0 ]\n*/\nfunction zscal( N, alpha, x, strideX ) {\n\tvar ox = stride2offset( N, strideX );\n\treturn ndarray( N, alpha, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default zscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport zdscal from './zdscal.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zdscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zdscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport zscal from './zscal.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace blas\n*/\nvar blas = {};\n\n/**\n* @name assert\n* @memberof blas\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/base/assert}\n*/\nimport assert from './../../base/assert';\nsetReadOnly( blas, 'assert', assert );\n\n/**\n* @name caxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/caxpy}\n*/\nimport caxpy from './../../base/caxpy';\nsetReadOnly( blas, 'caxpy', caxpy );\n\n/**\n* @name ccopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ccopy}\n*/\nimport ccopy from './../../base/ccopy';\nsetReadOnly( blas, 'ccopy', ccopy );\n\n/**\n* @name cscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/cscal}\n*/\nimport cscal from './../../base/cscal';\nsetReadOnly( blas, 'cscal', cscal );\n\n/**\n* @name csrot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/csrot}\n*/\nimport csrot from './../../base/csrot';\nsetReadOnly( blas, 'csrot', csrot );\n\n/**\n* @name cswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/cswap}\n*/\nimport cswap from './../../base/cswap';\nsetReadOnly( blas, 'cswap', cswap );\n\n/**\n* @name dasum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dasum}\n*/\nimport dasum from './../../base/dasum';\nsetReadOnly( blas, 'dasum', dasum );\n\n/**\n* @name daxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/daxpy}\n*/\nimport daxpy from './../../base/daxpy';\nsetReadOnly( blas, 'daxpy', daxpy );\n\n/**\n* @name dcabs1\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dcabs1}\n*/\nimport dcabs1 from './../../base/dcabs1';\nsetReadOnly( blas, 'dcabs1', dcabs1 );\n\n/**\n* @name dcopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dcopy}\n*/\nimport dcopy from './../../base/dcopy';\nsetReadOnly( blas, 'dcopy', dcopy );\n\n/**\n* @name ddot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ddot}\n*/\nimport ddot from './../../base/ddot';\nsetReadOnly( blas, 'ddot', ddot );\n\n/**\n* @name dgemm\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dgemm}\n*/\nimport dgemm from './../../base/dgemm';\nsetReadOnly( blas, 'dgemm', dgemm );\n\n/**\n* @name dgemv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dgemv}\n*/\nimport dgemv from './../../base/dgemv';\nsetReadOnly( blas, 'dgemv', dgemv );\n\n/**\n* @name diagonalTypeEnum2Str\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/diagonal-type-enum2str}\n*/\nimport diagonalTypeEnum2Str from './../../base/diagonal-type-enum2str';\nsetReadOnly( blas, 'diagonalTypeEnum2Str', diagonalTypeEnum2Str );\n\n/**\n* @name diagonalTypeResolveEnum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/diagonal-type-resolve-enum}\n*/\nimport diagonalTypeResolveEnum from './../../base/diagonal-type-resolve-enum';\nsetReadOnly( blas, 'diagonalTypeResolveEnum', diagonalTypeResolveEnum );\n\n/**\n* @name diagonalTypeResolveStr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/diagonal-type-resolve-str}\n*/\nimport diagonalTypeResolveStr from './../../base/diagonal-type-resolve-str';\nsetReadOnly( blas, 'diagonalTypeResolveStr', diagonalTypeResolveStr );\n\n/**\n* @name diagonalTypeStr2Enum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/diagonal-type-str2enum}\n*/\nimport diagonalTypeStr2Enum from './../../base/diagonal-type-str2enum';\nsetReadOnly( blas, 'diagonalTypeStr2Enum', diagonalTypeStr2Enum );\n\n/**\n* @name diagonalTypes\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/diagonal-types}\n*/\nimport diagonalTypes from './../../base/diagonal-types';\nsetReadOnly( blas, 'diagonalTypes', diagonalTypes );\n\n/**\n* @name dnrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dnrm2}\n*/\nimport dnrm2 from './../../base/dnrm2';\nsetReadOnly( blas, 'dnrm2', dnrm2 );\n\n/**\n* @name drot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/drot}\n*/\nimport drot from './../../base/drot';\nsetReadOnly( blas, 'drot', drot );\n\n/**\n* @name drotg\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/drotg}\n*/\nimport drotg from './../../base/drotg';\nsetReadOnly( blas, 'drotg', drotg );\n\n/**\n* @name drotm\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/drotm}\n*/\nimport drotm from './../../base/drotm';\nsetReadOnly( blas, 'drotm', drotm );\n\n/**\n* @name dscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dscal}\n*/\nimport dscal from './../../base/dscal';\nsetReadOnly( blas, 'dscal', dscal );\n\n/**\n* @name dsdot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dsdot}\n*/\nimport dsdot from './../../base/dsdot';\nsetReadOnly( blas, 'dsdot', dsdot );\n\n/**\n* @name dspmv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dspmv}\n*/\nimport dspmv from './../../base/dspmv';\nsetReadOnly( blas, 'dspmv', dspmv );\n\n/**\n* @name dspr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dspr}\n*/\nimport dspr from './../../base/dspr';\nsetReadOnly( blas, 'dspr', dspr );\n\n/**\n* @name dswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dswap}\n*/\nimport dswap from './../../base/dswap';\nsetReadOnly( blas, 'dswap', dswap );\n\n/**\n* @name dsymv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dsymv}\n*/\nimport dsymv from './../../base/dsymv';\nsetReadOnly( blas, 'dsymv', dsymv );\n\n/**\n* @name dsyr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dsyr}\n*/\nimport dsyr from './../../base/dsyr';\nsetReadOnly( blas, 'dsyr', dsyr );\n\n/**\n* @name dsyr2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dsyr2}\n*/\nimport dsyr2 from './../../base/dsyr2';\nsetReadOnly( blas, 'dsyr2', dsyr2 );\n\n/**\n* @name dtrmv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dtrmv}\n*/\nimport dtrmv from './../../base/dtrmv';\nsetReadOnly( blas, 'dtrmv', dtrmv );\n\n/**\n* @name dtrsv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dtrsv}\n*/\nimport dtrsv from './../../base/dtrsv';\nsetReadOnly( blas, 'dtrsv', dtrsv );\n\n/**\n* @name dznrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/dznrm2}\n*/\nimport dznrm2 from './../../base/dznrm2';\nsetReadOnly( blas, 'dznrm2', dznrm2 );\n\n/**\n* @name gasum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gasum}\n*/\nimport gasum from './../../base/gasum';\nsetReadOnly( blas, 'gasum', gasum );\n\n/**\n* @name gaxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gaxpy}\n*/\nimport gaxpy from './../../base/gaxpy';\nsetReadOnly( blas, 'gaxpy', gaxpy );\n\n/**\n* @name gcopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gcopy}\n*/\nimport gcopy from './../../base/gcopy';\nsetReadOnly( blas, 'gcopy', gcopy );\n\n/**\n* @name gdot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gdot}\n*/\nimport gdot from './../../base/gdot';\nsetReadOnly( blas, 'gdot', gdot );\n\n/**\n* @name gnrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gnrm2}\n*/\nimport gnrm2 from './../../base/gnrm2';\nsetReadOnly( blas, 'gnrm2', gnrm2 );\n\n/**\n* @name gscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gscal}\n*/\nimport gscal from './../../base/gscal';\nsetReadOnly( blas, 'gscal', gscal );\n\n/**\n* @name gswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/gswap}\n*/\nimport gswap from './../../base/gswap';\nsetReadOnly( blas, 'gswap', gswap );\n\n/**\n* @name idamax\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/idamax}\n*/\nimport idamax from './../../base/idamax';\nsetReadOnly( blas, 'idamax', idamax );\n\n/**\n* @name isamax\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/isamax}\n*/\nimport isamax from './../../base/isamax';\nsetReadOnly( blas, 'isamax', isamax );\n\n/**\n* @name layoutEnum2Str\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/layout-enum2str}\n*/\nimport layoutEnum2Str from './../../base/layout-enum2str';\nsetReadOnly( blas, 'layoutEnum2Str', layoutEnum2Str );\n\n/**\n* @name layoutResolveEnum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/layout-resolve-enum}\n*/\nimport layoutResolveEnum from './../../base/layout-resolve-enum';\nsetReadOnly( blas, 'layoutResolveEnum', layoutResolveEnum );\n\n/**\n* @name layoutResolveStr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/layout-resolve-str}\n*/\nimport layoutResolveStr from './../../base/layout-resolve-str';\nsetReadOnly( blas, 'layoutResolveStr', layoutResolveStr );\n\n/**\n* @name layoutStr2Enum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/layout-str2enum}\n*/\nimport layoutStr2Enum from './../../base/layout-str2enum';\nsetReadOnly( blas, 'layoutStr2Enum', layoutStr2Enum );\n\n/**\n* @name layouts\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/layouts}\n*/\nimport layouts from './../../base/layouts';\nsetReadOnly( blas, 'layouts', layouts );\n\n/**\n* @name matrixTriangleEnum2Str\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/matrix-triangle-enum2str}\n*/\nimport matrixTriangleEnum2Str from './../../base/matrix-triangle-enum2str';\nsetReadOnly( blas, 'matrixTriangleEnum2Str', matrixTriangleEnum2Str );\n\n/**\n* @name matrixTriangleResolveEnum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/matrix-triangle-resolve-enum}\n*/\nimport matrixTriangleResolveEnum from './../../base/matrix-triangle-resolve-enum';\nsetReadOnly( blas, 'matrixTriangleResolveEnum', matrixTriangleResolveEnum );\n\n/**\n* @name matrixTriangleResolveStr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/matrix-triangle-resolve-str}\n*/\nimport matrixTriangleResolveStr from './../../base/matrix-triangle-resolve-str';\nsetReadOnly( blas, 'matrixTriangleResolveStr', matrixTriangleResolveStr );\n\n/**\n* @name matrixTriangleStr2Enum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/matrix-triangle-str2enum}\n*/\nimport matrixTriangleStr2Enum from './../../base/matrix-triangle-str2enum';\nsetReadOnly( blas, 'matrixTriangleStr2Enum', matrixTriangleStr2Enum );\n\n/**\n* @name matrixTriangles\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/matrix-triangles}\n*/\nimport matrixTriangles from './../../base/matrix-triangles';\nsetReadOnly( blas, 'matrixTriangles', matrixTriangles );\n\n/**\n* @name operationSideEnum2Str\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/operation-side-enum2str}\n*/\nimport operationSideEnum2Str from './../../base/operation-side-enum2str';\nsetReadOnly( blas, 'operationSideEnum2Str', operationSideEnum2Str );\n\n/**\n* @name operationSideResolveEnum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/operation-side-resolve-enum}\n*/\nimport operationSideResolveEnum from './../../base/operation-side-resolve-enum';\nsetReadOnly( blas, 'operationSideResolveEnum', operationSideResolveEnum );\n\n/**\n* @name operationSideResolveStr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/operation-side-resolve-str}\n*/\nimport operationSideResolveStr from './../../base/operation-side-resolve-str';\nsetReadOnly( blas, 'operationSideResolveStr', operationSideResolveStr );\n\n/**\n* @name operationSideStr2Enum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/operation-side-str2enum}\n*/\nimport operationSideStr2Enum from './../../base/operation-side-str2enum';\nsetReadOnly( blas, 'operationSideStr2Enum', operationSideStr2Enum );\n\n/**\n* @name operationSides\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/operation-sides}\n*/\nimport operationSides from './../../base/operation-sides';\nsetReadOnly( blas, 'operationSides', operationSides );\n\n/**\n* @name sasum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sasum}\n*/\nimport sasum from './../../base/sasum';\nsetReadOnly( blas, 'sasum', sasum );\n\n/**\n* @name saxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/saxpy}\n*/\nimport saxpy from './../../base/saxpy';\nsetReadOnly( blas, 'saxpy', saxpy );\n\n/**\n* @name scabs1\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/scabs1}\n*/\nimport scabs1 from './../../base/scabs1';\nsetReadOnly( blas, 'scabs1', scabs1 );\n\n/**\n* @name scasum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/scasum}\n*/\nimport scasum from './../../base/scasum';\nsetReadOnly( blas, 'scasum', scasum );\n\n/**\n* @name scnrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/scnrm2}\n*/\nimport scnrm2 from './../../base/scnrm2';\nsetReadOnly( blas, 'scnrm2', scnrm2 );\n\n/**\n* @name scopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/scopy}\n*/\nimport scopy from './../../base/scopy';\nsetReadOnly( blas, 'scopy', scopy );\n\n/**\n* @name sdot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sdot}\n*/\nimport sdot from './../../base/sdot';\nsetReadOnly( blas, 'sdot', sdot );\n\n/**\n* @name sdsdot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sdsdot}\n*/\nimport sdsdot from './../../base/sdsdot';\nsetReadOnly( blas, 'sdsdot', sdsdot );\n\n/**\n* @name sgemm\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sgemm}\n*/\nimport sgemm from './../../base/sgemm';\nsetReadOnly( blas, 'sgemm', sgemm );\n\n/**\n* @name sgemv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sgemv}\n*/\nimport sgemv from './../../base/sgemv';\nsetReadOnly( blas, 'sgemv', sgemv );\n\n/**\n* @name snrm2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/snrm2}\n*/\nimport snrm2 from './../../base/snrm2';\nsetReadOnly( blas, 'snrm2', snrm2 );\n\n/**\n* @name srot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/srot}\n*/\nimport srot from './../../base/srot';\nsetReadOnly( blas, 'srot', srot );\n\n/**\n* @name srotg\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/srotg}\n*/\nimport srotg from './../../base/srotg';\nsetReadOnly( blas, 'srotg', srotg );\n\n/**\n* @name srotm\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/srotm}\n*/\nimport srotm from './../../base/srotm';\nsetReadOnly( blas, 'srotm', srotm );\n\n/**\n* @name sscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sscal}\n*/\nimport sscal from './../../base/sscal';\nsetReadOnly( blas, 'sscal', sscal );\n\n/**\n* @name sspmv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sspmv}\n*/\nimport sspmv from './../../base/sspmv';\nsetReadOnly( blas, 'sspmv', sspmv );\n\n/**\n* @name sspr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sspr}\n*/\nimport sspr from './../../base/sspr';\nsetReadOnly( blas, 'sspr', sspr );\n\n/**\n* @name sswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/sswap}\n*/\nimport sswap from './../../base/sswap';\nsetReadOnly( blas, 'sswap', sswap );\n\n/**\n* @name ssymv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ssymv}\n*/\nimport ssymv from './../../base/ssymv';\nsetReadOnly( blas, 'ssymv', ssymv );\n\n/**\n* @name ssyr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ssyr}\n*/\nimport ssyr from './../../base/ssyr';\nsetReadOnly( blas, 'ssyr', ssyr );\n\n/**\n* @name ssyr2\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/ssyr2}\n*/\nimport ssyr2 from './../../base/ssyr2';\nsetReadOnly( blas, 'ssyr2', ssyr2 );\n\n/**\n* @name strmv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/strmv}\n*/\nimport strmv from './../../base/strmv';\nsetReadOnly( blas, 'strmv', strmv );\n\n/**\n* @name strsv\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/strsv}\n*/\nimport strsv from './../../base/strsv';\nsetReadOnly( blas, 'strsv', strsv );\n\n/**\n* @name transposeOperationEnum2Str\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/transpose-operation-enum2str}\n*/\nimport transposeOperationEnum2Str from './../../base/transpose-operation-enum2str';\nsetReadOnly( blas, 'transposeOperationEnum2Str', transposeOperationEnum2Str );\n\n/**\n* @name transposeOperationResolveEnum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/transpose-operation-resolve-enum}\n*/\nimport transposeOperationResolveEnum from './../../base/transpose-operation-resolve-enum';\nsetReadOnly( blas, 'transposeOperationResolveEnum', transposeOperationResolveEnum );\n\n/**\n* @name transposeOperationResolveStr\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/transpose-operation-resolve-str}\n*/\nimport transposeOperationResolveStr from './../../base/transpose-operation-resolve-str';\nsetReadOnly( blas, 'transposeOperationResolveStr', transposeOperationResolveStr );\n\n/**\n* @name transposeOperationStr2Enum\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/transpose-operation-str2enum}\n*/\nimport transposeOperationStr2Enum from './../../base/transpose-operation-str2enum';\nsetReadOnly( blas, 'transposeOperationStr2Enum', transposeOperationStr2Enum );\n\n/**\n* @name transposeOperations\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/transpose-operations}\n*/\nimport transposeOperations from './../../base/transpose-operations';\nsetReadOnly( blas, 'transposeOperations', transposeOperations );\n\n/**\n* @name wasm\n* @memberof blas\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/base/wasm}\n*/\nimport wasm from './../../base/wasm';\nsetReadOnly( blas, 'wasm', wasm );\n\n/**\n* @name zaxpy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zaxpy}\n*/\nimport zaxpy from './../../base/zaxpy';\nsetReadOnly( blas, 'zaxpy', zaxpy );\n\n/**\n* @name zcopy\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zcopy}\n*/\nimport zcopy from './../../base/zcopy';\nsetReadOnly( blas, 'zcopy', zcopy );\n\n/**\n* @name zdrot\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zdrot}\n*/\nimport zdrot from './../../base/zdrot';\nsetReadOnly( blas, 'zdrot', zdrot );\n\n/**\n* @name zdscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zdscal}\n*/\nimport zdscal from './../../base/zdscal';\nsetReadOnly( blas, 'zdscal', zdscal );\n\n/**\n* @name zscal\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zscal}\n*/\nimport zscal from './../../base/zscal';\nsetReadOnly( blas, 'zscal', zscal );\n\n/**\n* @name zswap\n* @memberof blas\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/base/zswap}\n*/\nimport zswap from './../../base/zswap';\nsetReadOnly( blas, 'zswap', zswap );\n\n\n// EXPORTS //\n\nexport default blas;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat64ndarrayLike from '@stdlib/assert/is-float64ndarray-like';\nimport { isPrimitive as isNegativeInteger } from '@stdlib/assert/is-negative-integer';\nimport min from '@stdlib/math/base/special/fast/min';\nimport without from '@stdlib/array/base/without';\nimport numel from '@stdlib/ndarray/base/numel';\nimport normalizeIndex from '@stdlib/ndarray/base/normalize-index';\nimport maybeBroadcastArrays from '@stdlib/ndarray/base/maybe-broadcast-arrays';\nimport ndarraylike2ndarray from '@stdlib/ndarray/base/ndarraylike2ndarray';\nimport nditerStacks from '@stdlib/ndarray/iter/stacks';\nimport empty from '@stdlib/ndarray/empty';\nimport { ndarray as base } from './../../base/ddot';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two double-precision floating-point vectors.\n*\n* @param {ndarrayLike} x - first input array\n* @param {ndarrayLike} y - second input array\n* @param {NegativeInteger} [dim=-1] - dimension for which to compute the dot product\n* @throws {TypeError} first argument must be a ndarray containing double-precision floating-point numbers\n* @throws {TypeError} first argument must have at least one dimension\n* @throws {TypeError} second argument must be a ndarray containing double-precision floating-point numbers\n* @throws {TypeError} second argument must have at least one dimension\n* @throws {TypeError} third argument must be a negative integer\n* @throws {Error} input arrays must be broadcast compatible\n* @throws {RangeError} the size of the contracted dimension must be the same for both input arrays\n* @throws {RangeError} third argument is out-of-bounds\n* @returns {ndarray} ndarray containing the dot product\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* var z = ddot( x, y );\n* // returns <ndarray>\n*\n* var v = z.get();\n* // returns -5.0\n*/\nfunction ddot( x, y ) {\n\tvar dim;\n\tvar xsh;\n\tvar ysh;\n\tvar osh;\n\tvar xit;\n\tvar yit;\n\tvar out;\n\tvar tmp;\n\tvar xc;\n\tvar yc;\n\tvar vx;\n\tvar vy;\n\tvar dm;\n\tvar S;\n\tvar v;\n\tvar i;\n\n\tif ( !isFloat64ndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray containing double-precision floating-point numbers. Value: `%s`.', x ) );\n\t}\n\tif ( !isFloat64ndarrayLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray containing double-precision floating-point numbers. Value: `%s`.', y ) );\n\t}\n\t// Convert the input arrays to \"base\" ndarrays:\n\txc = ndarraylike2ndarray( x );\n\tyc = ndarraylike2ndarray( y );\n\n\t// Resolve the input array shapes:\n\txsh = xc.shape;\n\tysh = yc.shape;\n\n\t// Validate that we've been provided non-zero-dimensional arrays...\n\tif ( xsh.length < 1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have at least one dimension.' ) );\n\t}\n\tif ( ysh.length < 1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have at least one dimension.' ) );\n\t}\n\t// Validate that the dimension argument is a negative integer...\n\tif ( arguments.length > 2 ) {\n\t\tdim = arguments[ 2 ];\n\t\tif ( !isNegativeInteger( dim ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a negative integer. Value: `%s`.', dim ) );\n\t\t}\n\t} else {\n\t\tdim = -1;\n\t}\n\t// Validate that a provided dimension index is within bounds **before** broadcasting...\n\tdm = min( xsh.length, ysh.length ) - 1;\n\tdim = normalizeIndex( dim, dm );\n\tif ( dim === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a value on the interval: [%d,%d]. Value: `%d`.', -dm, -1, arguments[ 2 ] ) );\n\t}\n\t// Validate that the contracted dimension size is the same for both input arrays...\n\tS = xsh[ dim ];\n\tif ( ysh[ dim ] !== S ) {\n\t\tthrow new RangeError( format( 'invalid argument. The size of the contracted dimension must be the same for both input ndarrays. Dim(%s,%d) = %d. Dim(%s,%d) = %d.', 'x', dim, S, 'y', dim, ysh[ dim ] ) );\n\t}\n\t// Broadcast the input arrays to a common shape....\n\ttry {\n\t\ttmp = maybeBroadcastArrays( [ xc, yc ] );\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tthrow new Error( format( 'invalid arguments. Input ndarrays must be broadcast compatible. Shape(%s) = (%s). Shape(%s) = (%s).', 'x', xsh.join( ',' ), 'y', ysh.join( ',' ) ) );\n\t}\n\txc = tmp[ 0 ];\n\tyc = tmp[ 1 ];\n\n\t// Resolve the output array shape by excluding the contracted dimension:\n\tosh = without( xc.shape, dim );\n\n\t// Allocate an empty output array:\n\tout = empty( osh, {\n\t\t'dtype': xc.dtype,\n\t\t'order': xc.order\n\t});\n\n\t// If we are only provided one-dimensional input arrays, we can skip iterating over stacks...\n\tif ( osh.length === 0 ) {\n\t\tv = base( S, xc.data, xc.strides[0], xc.offset, yc.data, yc.strides[0], yc.offset ); // eslint-disable-line max-len\n\t\tout.iset( v );\n\t\treturn out;\n\t}\n\t// Create iterators for iterating over stacks of vectors:\n\txit = nditerStacks( xc, [ dim ] );\n\tyit = nditerStacks( yc, [ dim ] );\n\n\t// Compute the dot product for each pair of vectors...\n\tfor ( i = 0; i < numel( osh ); i++ ) {\n\t\tvx = xit.next().value;\n\t\tvy = yit.next().value;\n\t\tv = base( S, vx.data, vx.strides[0], vx.offset, vy.data, vy.strides[0], vy.offset ); // eslint-disable-line max-len\n\t\tout.iset( i, v );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default ddot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert/is-function';\nimport isndarrayLikeWithDataType from '@stdlib/assert/is-ndarray-like-with-data-type';\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport { isPrimitive as isNegativeInteger } from '@stdlib/assert/is-negative-integer';\nimport isDataType from '@stdlib/ndarray/base/assert/is-data-type';\nimport isReadOnly from '@stdlib/ndarray/base/assert/is-read-only';\nimport hasEqualValues from '@stdlib/array/base/assert/has-equal-values-indexed';\nimport min from '@stdlib/math/base/special/fast/min';\nimport without from '@stdlib/array/base/without';\nimport ndarraylike2ndarray from '@stdlib/ndarray/base/ndarraylike2ndarray';\nimport normalizeIndex from '@stdlib/ndarray/base/normalize-index';\nimport nditerStacks from '@stdlib/ndarray/iter/stacks';\nimport numel from '@stdlib/ndarray/base/numel';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns a function which interchanges two vectors.\n*\n* @param {Function} base - \"base\" function which interchanges two vectors\n* @param {(String|null)} dtype - array data type\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a data type\n* @returns {Function} function wrapper\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import array from '@stdlib/ndarray/array';\n* import { ndarray as dswap } from '@stdlib/blas/base/dswap';\n*\n* var swap = factory( dswap, 'float64' );\n*\n* var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* swap( x, y );\n*\n* var xbuf = x.data;\n* // returns <Float64Array>[ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n*\n* var ybuf = y.data;\n* // returns <Float64Array>[ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nfunction factory( base, dtype ) {\n\tvar isValid;\n\tif ( !isFunction( base ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', base ) );\n\t}\n\tif ( !isDataType( dtype ) && dtype !== null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a data type. Value: `%s`.', dtype ) );\n\t}\n\tisValid = ( dtype ) ? isValidWrapper : isndarrayLike;\n\treturn swap;\n\n\t/**\n\t* Tests if an input value is an ndarray-like object having a specified data type.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating if an input value is an ndarray-like object having a specified data type\n\t*/\n\tfunction isValidWrapper( value ) {\n\t\treturn isndarrayLikeWithDataType( value, dtype );\n\t}\n\n\t/**\n\t* Interchanges two vectors.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - first input array\n\t* @param {ndarrayLike} y - second input array\n\t* @param {NegativeInteger} [dim] - dimension along which to interchange elements\n\t* @throws {TypeError} first argument must be an ndarray\n\t* @throws {TypeError} first argument must have at least one dimension\n\t* @throws {TypeError} second argument must be an ndarray\n\t* @throws {TypeError} second argument must have at least one dimension\n\t* @throws {Error} both input arrays must have the same shape\n\t* @throws {RangeError} third argument is out-of-bounds\n\t* @throws {Error} cannot write to read-only array\n\t* @returns {ndarrayLike} `y`\n\t*/\n\tfunction swap( x, y ) {\n\t\tvar dim;\n\t\tvar xsh;\n\t\tvar ysh;\n\t\tvar xit;\n\t\tvar yit;\n\t\tvar xc;\n\t\tvar yc;\n\t\tvar vx;\n\t\tvar vy;\n\t\tvar dm;\n\t\tvar S;\n\t\tvar N;\n\t\tvar i;\n\t\tif ( !isValid( x ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object having a supported data type. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( !isValid( y ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object having a supported data type. Value: `%s`.', y ) );\n\t\t}\n\t\tif ( isReadOnly( x ) || isReadOnly( y ) ) {\n\t\t\tthrow new Error( 'invalid argument. Cannot write to read-only array.' );\n\t\t}\n\t\t// Convert the input arrays to \"base\" ndarrays:\n\t\txc = ndarraylike2ndarray( x );\n\t\tyc = ndarraylike2ndarray( y );\n\n\t\t// Resolve the input array shapes:\n\t\txsh = xc.shape;\n\t\tysh = yc.shape;\n\n\t\t// Validate that we've been provided non-zero-dimensional arrays...\n\t\tif ( xsh.length < 1 ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must have at least one dimension.' ) );\n\t\t}\n\t\tif ( ysh.length < 1 ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must have at least one dimension.' ) );\n\t\t}\n\t\t// Validate that the arrays have the same shape...\n\t\tif ( !hasEqualValues( xsh, ysh ) ) {\n\t\t\tthrow new Error( 'invalid arguments. The first and second arguments must have the same shape.' );\n\t\t}\n\t\t// Validate that the dimension argument is a negative integer...\n\t\tif ( arguments.length > 2 ) {\n\t\t\tdim = arguments[ 2 ];\n\t\t\tif ( !isNegativeInteger( dim ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a negative integer. Value: `%s`.', dim ) );\n\t\t\t}\n\t\t} else {\n\t\t\tdim = -1;\n\t\t}\n\t\t// Validate that a provided dimension index is within bounds...\n\t\tdm = min( xsh.length, ysh.length ) - 1;\n\t\tdim = normalizeIndex( dim, dm );\n\t\tif ( dim === -1 ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a value on the interval: [%d,%d]. Value: `%d`.', -dm, -1, arguments[ 2 ] ) );\n\t\t}\n\t\t// Resolve the size of the interchange dimension:\n\t\tS = xsh[ dim ];\n\n\t\t// If we are only provided one-dimensional input arrays, we can skip iterating over stacks...\n\t\tif ( xsh.length === 1 ) {\n\t\t\tbase( S, xc.data, xc.strides[0], xc.offset, yc.data, yc.strides[0], yc.offset ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\t// Resolve the number of stacks:\n\t\tN = numel( without( xsh, dim ) );\n\n\t\t// Create iterators for iterating over stacks of vectors:\n\t\txit = nditerStacks( xc, [ dim ] );\n\t\tyit = nditerStacks( yc, [ dim ] );\n\n\t\t// Interchange each pair of vectors...\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tvx = xit.next().value;\n\t\t\tvy = yit.next().value;\n\t\t\tbase( S, vx.data, vx.strides[0], vx.offset, vy.data, vy.strides[0], vy.offset ); // eslint-disable-line max-len\n\t\t}\n\t\treturn y;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/diagonal-type-enum2str';\nimport str2enum from './../../../base/diagonal-type-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported BLAS diagonal type value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `UNIT == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} value - diagonal type value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'non-unit' );\n* // returns <number>\n*/\nfunction resolve( value ) {\n\tvar t = ( typeof value );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( value ) ) ? value : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( value );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/diagonal-type-enum2str';\nimport str2enum from './../../../base/diagonal-type-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the diagonal type string associated with a supported BLAS diagonal type value.\n*\n* @param {*} value - diagonal type value\n* @returns {(string|null)} diagonal type string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/diagonal-type-str2enum';\n*\n* var v = resolve( str2enum( 'unit' ) );\n* // returns 'unit'\n*/\nfunction resolve( value ) {\n\tvar t = ( typeof value );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( value ) === null ) ? null : value;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( value );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/layout-enum2str';\nimport str2enum from './../../../base/layout-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported BLAS memory layout value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `ROW_MAJOR == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} layout - layout value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'row-major' );\n* // returns <number>\n*/\nfunction resolve( layout ) {\n\tvar t = ( typeof layout );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( layout ) ) ? layout : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( layout );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/layout-enum2str';\nimport str2enum from './../../../base/layout-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the layout string associated with a supported BLAS memory layout value.\n*\n* @param {*} layout - layout value\n* @returns {(string|null)} layout string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/layout-str2enum';\n*\n* var v = resolve( str2enum( 'row-major' ) );\n* // returns 'row-major'\n*/\nfunction resolve( layout ) {\n\tvar t = ( typeof layout );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( layout ) === null ) ? null : layout;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( layout );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/matrix-triangle-enum2str';\nimport str2enum from './../../../base/matrix-triangle-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported BLAS matrix triangle value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `UPPER == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} value - matrix triangle value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'lower' );\n* // returns <number>\n*/\nfunction resolve( value ) {\n\tvar t = ( typeof value );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( value ) ) ? value : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( value );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/matrix-triangle-enum2str';\nimport str2enum from './../../../base/matrix-triangle-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the matrix triangle string associated with a supported BLAS matrix triangle value.\n*\n* @param {*} value - matrix triangle value\n* @returns {(string|null)} matrix triangle string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/matrix-triangle-str2enum';\n*\n* var v = resolve( str2enum( 'upper' ) );\n* // returns 'upper'\n*/\nfunction resolve( value ) {\n\tvar t = ( typeof value );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( value ) === null ) ? null : value;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( value );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/operation-side-enum2str';\nimport str2enum from './../../../base/operation-side-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported BLAS operation side value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `LEFT == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} operation - operation value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'right' );\n* // returns <number>\n*/\nfunction resolve( operation ) {\n\tvar t = ( typeof operation );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( operation ) ) ? operation : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( operation );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/operation-side-enum2str';\nimport str2enum from './../../../base/operation-side-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the operation side string associated with a supported BLAS operation side value.\n*\n* @param {*} operation - operation value\n* @returns {(string|null)} operation side string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/operation-side-str2enum';\n*\n* var v = resolve( str2enum( 'left' ) );\n* // returns 'left'\n*/\nfunction resolve( operation ) {\n\tvar t = ( typeof operation );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( operation ) === null ) ? null : operation;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( operation );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/transpose-operation-enum2str';\nimport str2enum from './../../../base/transpose-operation-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported BLAS transpose operation value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `TRANSPOSE == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} operation - operation value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'conjugate-transpose' );\n* // returns <number>\n*/\nfunction resolve( operation ) {\n\tvar t = ( typeof operation );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( operation ) ) ? operation : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( operation );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/transpose-operation-enum2str';\nimport str2enum from './../../../base/transpose-operation-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the transpose operation string associated with a supported BLAS transpose operation value.\n*\n* @param {*} operation - operation value\n* @returns {(string|null)} transpose operation string or null\n*\n* @example\n* import str2enum from '@stdlib/blas/base/transpose-operation-str2enum';\n*\n* var v = resolve( str2enum( 'transpose' ) );\n* // returns 'transpose'\n*/\nfunction resolve( operation ) {\n\tvar t = ( typeof operation );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( operation ) === null ) ? null : operation;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( operation );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as base } from './../../base/dswap';\nimport factory from './../../tools/swap-factory';\n\n\n// MAIN //\n\n/**\n* Interchanges two double-precision floating-point vectors.\n*\n* @name dswap\n* @type {Function}\n* @param {ndarrayLike} x - first input array\n* @param {ndarrayLike} y - second input array\n* @param {NegativeInteger} [dim] - dimension along which to interchange elements\n* @throws {TypeError} first argument must be a ndarray containing double-precision floating-point numbers\n* @throws {TypeError} first argument must have at least one dimension\n* @throws {TypeError} second argument must be a ndarray containing double-precision floating-point numbers\n* @throws {TypeError} second argument must have at least one dimension\n* @throws {Error} both input arrays must have the same shape\n* @throws {RangeError} third argument is out-of-bounds\n* @throws {Error} cannot write to read-only array\n* @returns {ndarrayLike} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* dswap( x, y );\n*\n* var xbuf = x.data;\n* // returns <Float64Array>[ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n*\n* var ybuf = y.data;\n* // returns <Float64Array>[ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nvar dswap = factory( base, 'float64' );\n\n\n// EXPORTS //\n\nexport default dswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* dapx( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, 1.0, 10.0, -1.0 ]\n*/\nfunction dapx( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] += alpha;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] += alpha;\n\t\t\tx[ ix+1 ] += alpha;\n\t\t\tx[ ix+2 ] += alpha;\n\t\t\tx[ ix+3 ] += alpha;\n\t\t\tx[ ix+4 ] += alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* dapx( x.length, 5.0, x, 1 );\n* // x => <Float64Array>[ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\nfunction dapx( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsumkbn( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumkbn( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default dapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dapxsumkbn( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumkbn( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dapxsumkbn } from './../../../../ext/base/dapxsumkbn';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsum( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsum( N, alpha, x, strideX, offsetX ) {\n\treturn dapxsumkbn( N, alpha, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default dapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dapxsum( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsum( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsumkbn2( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumkbn2( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default dapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dapxsumkbn2( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumkbn2( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsumors( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumors( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += alpha + x[ ix ];\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dapxsumors( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumors( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapx from './dapx.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapx, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapxsumkbn from './dapxsumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapxsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapxsum from './dapxsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapxsumkbn2 from './dapxsumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapxsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapxsumors from './dapxsumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapxsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumpw( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+strideX ];\n\t\ts2 = alpha + x[ ix+(2*strideX) ];\n\t\ts3 = alpha + x[ ix+(3*strideX) ];\n\t\ts4 = alpha + x[ ix+(4*strideX) ];\n\t\ts5 = alpha + x[ ix+(5*strideX) ];\n\t\ts6 = alpha + x[ ix+(6*strideX) ];\n\t\ts7 = alpha + x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+strideX ];\n\t\t\ts2 += alpha + x[ ix+(2*strideX) ];\n\t\t\ts3 += alpha + x[ ix+(3*strideX) ];\n\t\t\ts4 += alpha + x[ ix+(4*strideX) ];\n\t\t\ts5 += alpha + x[ ix+(5*strideX) ];\n\t\t\ts6 += alpha + x[ ix+(6*strideX) ];\n\t\t\ts7 += alpha + x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dapxsumpw( n, alpha, x, strideX, ix ) + dapxsumpw( N-n, alpha, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dapxsumpw( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumpw( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dapxsumpw from './dapxsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dasumpw( 4, x, 2, 1 );\n* // returns 9.0\n*/\nfunction dasumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * abs( x[ ix ] );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = abs( x[ ix ] );\n\t\ts1 = abs( x[ ix+strideX ] );\n\t\ts2 = abs( x[ ix+(2*strideX) ] );\n\t\ts3 = abs( x[ ix+(3*strideX) ] );\n\t\ts4 = abs( x[ ix+(4*strideX) ] );\n\t\ts5 = abs( x[ ix+(5*strideX) ] );\n\t\ts6 = abs( x[ ix+(6*strideX) ] );\n\t\ts7 = abs( x[ ix+(7*strideX) ] );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += abs( x[ ix ] );\n\t\t\ts1 += abs( x[ ix+strideX ] );\n\t\t\ts2 += abs( x[ ix+(2*strideX) ] );\n\t\t\ts3 += abs( x[ ix+(3*strideX) ] );\n\t\t\ts4 += abs( x[ ix+(4*strideX) ] );\n\t\t\ts5 += abs( x[ ix+(5*strideX) ] );\n\t\t\ts6 += abs( x[ ix+(6*strideX) ] );\n\t\t\ts7 += abs( x[ ix+(7*strideX) ] );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dasumpw( n, x, strideX, ix ) + dasumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dasumpw( x.length, x, 1 );\n* // returns 5.0\n*/\nfunction dasumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - stride length `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumkbn( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = s + v;\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc += (s-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + s;\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = s + c;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumkbn( 3, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumkbn( N, sum, x, strideX, y, strideY ) {\n\tndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dcusumkbn } from './../../../../ext/base/dcusumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusum( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusum( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn dcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY );\n}\n\n\n// EXPORTS //\n\nexport default dcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusum( 3, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusum( N, sum, x, strideX, y, strideY ) {\n\treturn ndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumkbn2( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumkbn2( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\n\t\ty[ iy ] = sum + cs + ccs;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n* var N = x.length;\n*\n* var v = dcusumkbn2( N, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumkbn2( N, sum, x, strideX, y, strideY ) {\n\tndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumors( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumors( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumors( 3, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumors( N, sum, x, strideX, y, strideY ) {\n\tndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dasumpw from './dasumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dasumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcusumkbn from './dcusumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcusumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcusum from './dcusum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcusum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcusumkbn2 from './dcusumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcusumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcusumors from './dcusumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcusumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation:\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumpw( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumpw( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( N <= BLOCKSIZE ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\ty[ iy ] = sum + s;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tn = floor( N/2 );\n\tdcusumpw( n, sum, x, strideX, ix, y, strideY, iy );\n\tiy += (n-1) * strideY;\n\tdcusumpw( N-n, y[ iy ], x, strideX, ix+(n*strideX), y, strideY, iy+strideY ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcusumpw( 3, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumpw( N, sum, x, strideX, y, strideY ) {\n\tndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnanasumors( 4, x, 2, 1 );\n* // returns 9.0\n*/\nfunction dnanasumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn abs( x[ ix ] ) * N;\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tsum += abs( v );\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dnanasumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dnanasumors( x.length, x, 1 );\n* // returns 5.0\n*/\nfunction dnanasumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dnanasumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dnanasumors } from './../../../../ext/base/dnanasumors';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnanasum( 5, x, 2, 1 );\n* // returns 9.0\n*/\nfunction dnanasum( N, x, strideX, offsetX ) {\n\treturn dnanasumors( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default dnanasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dnanasum( 4, x, 1 );\n* // returns 5.0\n*/\nfunction dnanasum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dnanasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ offsetOut ] = sum;\n\t\tout[ offsetOut+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ offsetOut ] = sum;\n\t\t\tout[ offsetOut+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offsetOut ] = x[ ix ] * N;\n\t\tout[ offsetOut+strideOut ] = N;\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ offsetOut ] = sum + c;\n\tout[ offsetOut+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumkbn( N, x, strideX, out, strideOut ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), out, strideOut, stride2offset( 2, strideOut ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dnannsumkbn } from './../../../../ext/base/dnannsumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsum( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsum( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\treturn dnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut );\n}\n\n\n// EXPORTS //\n\nexport default dnannsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsum( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsum( N, x, strideX, out, strideOut ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), out, strideOut, stride2offset( 2, strideOut ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dnannsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn2( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumkbn2( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ccs;\n\tvar cs;\n\tvar cc;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tsum = 0.0;\n\tio = offsetOut;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ] * N;\n\t\tout[ io+strideOut ] = N;\n\t\treturn out;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum + cs + ccs;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn2( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumkbn2( N, x, strideX, out, strideOut ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), out, strideOut, stride2offset( 2, strideOut ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumors( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumors( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar n;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ offsetOut ] = sum;\n\t\tout[ offsetOut+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ offsetOut ] = sum;\n\t\t\tout[ offsetOut+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offsetOut ] = x[ ix ] * N;\n\t\tout[ offsetOut+strideOut ] = N;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ offsetOut ] = sum;\n\tout[ offsetOut+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumors( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumors( N, x, strideX, out, strideOut ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), out, strideOut, stride2offset( 2, strideOut ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dcusumpw from './dcusumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcusumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnanasumors from './dnanasumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnanasumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnanasumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnanasum from './dnanasum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnanasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnanasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnannsumkbn from './dnannsumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnannsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnannsum from './dnannsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnannsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnannsumkbn2 from './dnannsumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnannsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnannsumors from './dnannsumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnannsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of a double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} out - two-element output array whose first element is the accumulated sum and whose second element is the accumulated number of summed values\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( [ 0.0, 0 ] );\n*\n* var v = sumpw( 5.0, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction sumpw( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn out;\n\t\t}\n\t\tout[ offsetOut ] += x[ ix ] * N;\n\t\tout[ offsetOut+strideOut ] += N;\n\t\treturn out;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tn = 0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\tout[ offsetOut ] += s;\n\t\tout[ offsetOut+strideOut ] += n;\n\t\treturn out;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = 0.0;\n\t\ts1 = 0.0;\n\t\ts2 = 0.0;\n\t\ts3 = 0.0;\n\t\ts4 = 0.0;\n\t\ts5 = 0.0;\n\t\ts6 = 0.0;\n\t\ts7 = 0.0;\n\t\tn = 0;\n\n\t\tM = N % 8;\n\t\tfor ( i = 0; i < N-M; i += 8 ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts0 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts1 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts2 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts3 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts4 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts5 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts6 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts7 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\tout[ offsetOut ] += s;\n\t\tout[ offsetOut+strideOut ] += n;\n\t\treturn out;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\tsumpw( n, x, strideX, ix, out, strideOut, offsetOut );\n\tsumpw( N-n, x, strideX, ix+(n*strideX), out, strideOut, offsetOut );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default sumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sumpw from './sumpw.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumpw( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumpw( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = 0.0;\n\tout[ offsetOut+strideOut ] = 0;\n\treturn sumpw( N, x, strideX, offsetX, out, strideOut, offsetOut );\n}\n\n\n// EXPORTS //\n\nexport default dnannsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumpw( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumpw( N, x, strideX, out, strideOut ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), out, strideOut, stride2offset( 2, strideOut ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dnannsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnansumkbn( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumkbn( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ ix ] * N;\n\t}\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default dnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dnansumkbn( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumkbn( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dnansumkbn } from './../../../../ext/base/dnansumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnansum( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansum( N, x, strideX, offsetX ) {\n\treturn dnansumkbn( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default dnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dnansum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dnansum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnansumkbn2( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumkbn2( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ ix ] * N;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default dnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dnansumkbn2( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumkbn2( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnansumors( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ ix ] * N;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dnansumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnannsumpw from './dnannsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnannsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnansumkbn from './dnansumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnansumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnansum from './dnansum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnansumkbn2 from './dnansumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnansumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnansumors from './dnansumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnansumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnansumpw( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ offsetX ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offsetX ] * N;\n\t}\n\tix = offsetX;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts1 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts2 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts3 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts4 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts5 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts6 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts7 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts1 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts2 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts3 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts4 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts5 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts6 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts7 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dnansumpw( n, x, strideX, ix ) + dnansumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dnansumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dnansumpw from './dnansumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a double-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* drev( 3, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, -6.0, 5.0, -4.0 ]\n*/\nfunction drev( N, x, strideX, offsetX ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tn = floor( N/2 );\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = n % M;\n\t\tiy = ix + N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy -= strideX;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < n; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tiy = ix + ( (N-1) * strideX );\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy -= strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default drev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Reverses a double-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* drev( x.length, x, 1 );\n* // x => <Float64Array>[ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\nfunction drev( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default drev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport drev from './drev.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( drev, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default drev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element, and computes the sum using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dsapxsumpw( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+strideX ];\n\t\ts2 = alpha + x[ ix+(2*strideX) ];\n\t\ts3 = alpha + x[ ix+(3*strideX) ];\n\t\ts4 = alpha + x[ ix+(4*strideX) ];\n\t\ts5 = alpha + x[ ix+(5*strideX) ];\n\t\ts6 = alpha + x[ ix+(6*strideX) ];\n\t\ts7 = alpha + x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+strideX ];\n\t\t\ts2 += alpha + x[ ix+(2*strideX) ];\n\t\t\ts3 += alpha + x[ ix+(3*strideX) ];\n\t\t\ts4 += alpha + x[ ix+(4*strideX) ];\n\t\t\ts5 += alpha + x[ ix+(5*strideX) ];\n\t\t\ts6 += alpha + x[ ix+(6*strideX) ];\n\t\t\ts7 += alpha + x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsapxsumpw( n, alpha, x, strideX, ix ) + dsapxsumpw( N-n, alpha, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element, and computes the sum using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dsapxsumpw( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dsapxsumpw( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dsapxsumpw } from './../../../../ext/base/dsapxsumpw';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element, and computes the sum using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsapxsum( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dsapxsum( N, alpha, x, strideX, offsetX ) {\n\treturn dsapxsumpw( N, alpha, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default dsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element, and computes the sum using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dsapxsum( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dsapxsum( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dsnannsumors( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dsnannsumors( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar n;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ offsetOut ] = sum;\n\t\tout[ offsetOut+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ offsetOut ] = sum;\n\t\t\tout[ offsetOut+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offsetOut ] = x[ ix ] * N;\n\t\tout[ offsetOut+strideOut ] = N;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ offsetOut ] = sum;\n\tout[ offsetOut+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dsnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dsnannsumors( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dsnannsumors( N, x, strideX, out, strideOut ) {\n\tvar ix;\n\tvar io;\n\n\tix = stride2offset( N, strideX );\n\tio = stride2offset( 2, strideOut );\n\treturn ndarray( N, x, strideX, ix, out, strideOut, io );\n}\n\n\n// EXPORTS //\n\nexport default dsnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsapxsumpw from './dsapxsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsapxsum from './dsapxsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsnannsumors from './dsnannsumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsnannsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using pairwise summation with extended accumulation, and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dsnansumpw( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsnansumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnanf( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts1 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts2 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts3 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts4 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts5 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts6 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts7 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts1 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts2 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts3 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts4 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts5 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts6 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts7 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsnansumpw( n, x, strideX, ix ) + dsnansumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using pairwise summation with extended accumulation, and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dsnansumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsnansumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dsnansumpw } from './../../../../ext/base/dsnansumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dsnansum( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsnansum( N, x, strideX, offsetX ) {\n\treturn dsnansumpw( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default dsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n\n* var v = dsnansum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsnansum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX) );\n}\n\n\n// EXPORTS //\n\nexport default dsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dsnansumors( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsnansumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dsnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dsnansumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsnansumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2hp( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2ins( N, order, x, strideX, y, strideY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideY < 0 ) {\n\t\tfy = (1-N) * strideY;\n\t\tly = 0;\n\t} else {\n\t\tfy = 0;\n\t\tly = (N-1) * strideY;\n\t}\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * strideX; // first index\n\t\tlx = 0;               // last index\n\t\tix = fx + strideX;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * strideX; // last index\n\tix = fx + strideX;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsnansumpw from './dsnansumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsnansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsnansum from './dsnansum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsnansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsnansumors from './dsnansumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsnansumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsort2hp from './dsort2hp.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsort2hp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsort2ins from './dsort2ins.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsort2ins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2sh( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsorthp( x.length, 1.0, x, 1, 0 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsorthp( N, order, x, strideX, offsetX ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offsetX+(parent*strideX) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offsetX + (n*strideX);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offsetX ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsorthp( x.length, 1.0, x, 1 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsorthp( N, order, x, strideX ) {\n\treturn ndarray( N, order, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortins( x.length, 1.0, x, 1, 0 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortins( N, order, x, strideX, offsetX ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - strideX;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = u;\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = v;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\tjx += strideX;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - strideX;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = u;\n\t\t\t\tjx -= strideX;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = v;\n\t\t\tix += strideX;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortins( x.length, 1.0, x, 1 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortins( N, order, x, strideX ) {\n\treturn ndarray( N, order, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsort2sh from './dsort2sh.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsort2sh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsorthp from './dsorthp.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsorthp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsortins from './dsortins.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsortins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortsh( x.length, 1.0, x, 1 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortsh( N, order, x, stride ) {\n\tvar offset;\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortsh( x.length, 1.0, x, 1, 0 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortsh( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsortsh from './dsortsh.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsortsh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dssumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dssumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+strideX ];\n\t\ts2 = x[ ix+(2*strideX) ];\n\t\ts3 = x[ ix+(3*strideX) ];\n\t\ts4 = x[ ix+(4*strideX) ];\n\t\ts5 = x[ ix+(5*strideX) ];\n\t\ts6 = x[ ix+(6*strideX) ];\n\t\ts7 = x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+strideX ];\n\t\t\ts2 += x[ ix+(2*strideX) ];\n\t\t\ts3 += x[ ix+(3*strideX) ];\n\t\t\ts4 += x[ ix+(4*strideX) ];\n\t\t\ts5 += x[ ix+(5*strideX) ];\n\t\t\ts6 += x[ ix+(6*strideX) ];\n\t\t\ts7 += x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dssumpw( n, x, strideX, ix ) + dssumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dssumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dssumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dssumpw } from './../../../../ext/base/dssumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dssum( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dssum( N, x, strideX, offsetX ) {\n\treturn dssumpw( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default dssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dssum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dssum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dssumpw from './dssumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dssumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dssum from './dssum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dssum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation with extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dssumors( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dssumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation with extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dssumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dssumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsumkbn( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumkbn( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default dsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dsumkbn( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsumkbn( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dsumkbn } from './../../../../ext/base/dsumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsum( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsum( N, x, strideX, offsetX ) {\n\treturn dsumkbn( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default dsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dsum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsumkbn2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumkbn2( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default dsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dsumkbn2( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsumkbn2( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dssumors from './dssumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dssumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsumkbn from './dsumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsum from './dsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsumkbn2 from './dsumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsumors( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dsumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsumors from './dsumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+strideX ];\n\t\ts2 = x[ ix+(2*strideX) ];\n\t\ts3 = x[ ix+(3*strideX) ];\n\t\ts4 = x[ ix+(4*strideX) ];\n\t\ts5 = x[ ix+(5*strideX) ];\n\t\ts6 = x[ ix+(6*strideX) ];\n\t\ts7 = x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+strideX ];\n\t\t\ts2 += x[ ix+(2*strideX) ];\n\t\t\ts3 += x[ ix+(3*strideX) ];\n\t\t\ts4 += x[ ix+(4*strideX) ];\n\t\t\ts5 += x[ ix+(5*strideX) ];\n\t\t\ts6 += x[ ix+(6*strideX) ];\n\t\t\ts7 += x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsumpw( n, x, strideX, ix ) + dsumpw( N-n, x, strideX, ix+(n*strideX) );\t// eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dsumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport dsumpw from './dsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* gapx( 3, 5.0, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, 1.0, 10.0, -1.0 ]\n*/\nfunction gapx( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, alpha, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] += alpha;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] += alpha;\n\t\t\tx[ ix+1 ] += alpha;\n\t\t\tx[ ix+2 ] += alpha;\n\t\t\tx[ ix+3 ] += alpha;\n\t\t\tx[ ix+4 ] += alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a strided array.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Object} input array object\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gapx( 4, 5.0, arraylike2object( x ), 2, 1 );\n* // returns {...}\n*/\nfunction gapx( N, alpha, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar set;\n\tvar ix;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\tget = x.accessors[ 0 ];\n\tset = x.accessors[ 1 ];\n\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( xbuf, ix, alpha + get( xbuf, ix ) );\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx( x.length, 5.0, x, 1 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\nfunction gapx( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport abs from '@stdlib/math/base/special/abs';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumkbn( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumkbn( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, alpha, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gapxsumkbn( 4, 5.0, arraylike2object( x ), 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumkbn( N, alpha, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + get( xbuf, ix ) );\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + get( xbuf, ix );\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumkbn( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumkbn( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gapxsumkbn } from './../../../../ext/base/gapxsumkbn';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsum( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsum( N, alpha, x, strideX, offsetX ) {\n\treturn gapxsumkbn( N, alpha, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default gapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsum( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsum( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport abs from '@stdlib/math/base/special/abs';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumkbn2( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumkbn2( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, alpha, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gapxsumkbn2( 4, 5.0, arraylike2object( x ), 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumkbn2( N, alpha, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + get( xbuf, ix ) );\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + get( xbuf, ix );\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumkbn2( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumkbn2( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumors( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumors( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, alpha, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += alpha + x[ ix ];\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using ordinary recursive summation.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gapxsumors( 4, 5.0, arraylike2object( x ), 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumors( N, alpha, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar sum;\n\tvar get;\n\tvar ix;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + get( xbuf, ix ) );\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += alpha + get( xbuf, ix );\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumors( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumors( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a scalar constant to each element in a strided array.\n*\n* @module @stdlib/blas/ext/base/gapx\n*\n* @example\n* import gapx from '@stdlib/blas/ext/base/gapx';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx( x.length, 5.0, x, 1 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*\n* @example\n* import gapx from '@stdlib/blas/ext/base/gapx';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a scalar constant to each strided array element and compute the sum using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gapxsumkbn\n*\n* @example\n* import gapxsumkbn from '@stdlib/blas/ext/base/gapxsumkbn';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumkbn( x.length, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import gapxsumkbn from '@stdlib/blas/ext/base/gapxsumkbn';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumkbn.ndarray( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a scalar constant to each strided array element and compute the sum.\n*\n* @module @stdlib/blas/ext/base/gapxsum\n*\n* @example\n* import gapxsum from '@stdlib/blas/ext/base/gapxsum';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsum( x.length, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import gapxsum from '@stdlib/blas/ext/base/gapxsum';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsum.ndarray( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a scalar constant to each strided array element and compute the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gapxsumkbn2\n*\n* @example\n* import gapxsumkbn2 from '@stdlib/blas/ext/base/gapxsumkbn2';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumkbn2( x.length, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import gapxsumkbn2 from '@stdlib/blas/ext/base/gapxsumkbn2';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumkbn2.ndarray( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a scalar constant to each strided array element and compute the sum using ordinary recursive summation.\n*\n* @module @stdlib/blas/ext/base/gapxsumors\n*\n* @example\n* import gapxsumors from '@stdlib/blas/ext/base/gapxsumors';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumors( x.length, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import gapxsumors from '@stdlib/blas/ext/base/gapxsumors';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumors.ndarray( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gapxsumpw( 4, 5.0, arraylike2object( x ), 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumpw( N, alpha, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + get( xbuf, ix ) );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + get( xbuf, ix );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + get( xbuf, ix );\n\t\ts1 = alpha + get( xbuf, ix+strideX );\n\t\ts2 = alpha + get( xbuf, ix+(2*strideX) );\n\t\ts3 = alpha + get( xbuf, ix+(3*strideX) );\n\t\ts4 = alpha + get( xbuf, ix+(4*strideX) );\n\t\ts5 = alpha + get( xbuf, ix+(5*strideX) );\n\t\ts6 = alpha + get( xbuf, ix+(6*strideX) );\n\t\ts7 = alpha + get( xbuf, ix+(7*strideX) );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + get( xbuf, ix );\n\t\t\ts1 += alpha + get( xbuf, ix+strideX );\n\t\t\ts2 += alpha + get( xbuf, ix+(2*strideX) );\n\t\t\ts3 += alpha + get( xbuf, ix+(3*strideX) );\n\t\t\ts4 += alpha + get( xbuf, ix+(4*strideX) );\n\t\t\ts5 += alpha + get( xbuf, ix+(5*strideX) );\n\t\t\ts6 += alpha + get( xbuf, ix+(6*strideX) );\n\t\t\ts7 += alpha + get( xbuf, ix+(7*strideX) );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + get( xbuf, ix );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gapxsumpw( n, alpha, x, strideX, ix ) + gapxsumpw( N-n, alpha, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport floor from '@stdlib/math/base/special/floor';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumpw( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar o;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, alpha, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+strideX ];\n\t\ts2 = alpha + x[ ix+(2*strideX) ];\n\t\ts3 = alpha + x[ ix+(3*strideX) ];\n\t\ts4 = alpha + x[ ix+(4*strideX) ];\n\t\ts5 = alpha + x[ ix+(5*strideX) ];\n\t\ts6 = alpha + x[ ix+(6*strideX) ];\n\t\ts7 = alpha + x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+strideX ];\n\t\t\ts2 += alpha + x[ ix+(2*strideX) ];\n\t\t\ts3 += alpha + x[ ix+(3*strideX) ];\n\t\t\ts4 += alpha + x[ ix+(4*strideX) ];\n\t\t\ts5 += alpha + x[ ix+(5*strideX) ];\n\t\t\ts6 += alpha + x[ ix+(6*strideX) ];\n\t\t\ts7 += alpha + x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gapxsumpw( n, alpha, x, strideX, ix ) + gapxsumpw( N-n, alpha, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumpw( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumpw( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a scalar constant to each strided array element and compute the sum using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gapxsumpw\n*\n* @example\n* import gapxsumpw from '@stdlib/blas/ext/base/gapxsumpw';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumpw( x.length, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import gapxsumpw from '@stdlib/blas/ext/base/gapxsumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumpw.ndarray( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of strided array elements using pairwise summation.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gasumpw( 4, arraylike2object( x ), 2, 1 );\n* // returns 9.0\n*/\nfunction gasumpw( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( abs( get( xbuf, ix ) ) );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += abs( get( xbuf, ix ) );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = abs( get( xbuf, ix ) );\n\t\ts1 = abs( get( xbuf, ix+strideX ) );\n\t\ts2 = abs( get( xbuf, ix+(2*strideX) ) );\n\t\ts3 = abs( get( xbuf, ix+(3*strideX) ) );\n\t\ts4 = abs( get( xbuf, ix+(4*strideX) ) );\n\t\ts5 = abs( get( xbuf, ix+(5*strideX) ) );\n\t\ts6 = abs( get( xbuf, ix+(6*strideX) ) );\n\t\ts7 = abs( get( xbuf, ix+(7*strideX) ) );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += abs( get( xbuf, ix ) );\n\t\t\ts1 += abs( get( xbuf, ix+strideX ) );\n\t\t\ts2 += abs( get( xbuf, ix+(2*strideX) ) );\n\t\t\ts3 += abs( get( xbuf, ix+(3*strideX) ) );\n\t\t\ts4 += abs( get( xbuf, ix+(4*strideX) ) );\n\t\t\ts5 += abs( get( xbuf, ix+(5*strideX) ) );\n\t\t\ts6 += abs( get( xbuf, ix+(6*strideX) ) );\n\t\t\ts7 += abs( get( xbuf, ix+(7*strideX) ) );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += abs( get( xbuf, ix ) );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gasumpw( n, x, strideX, ix ) + gasumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport floor from '@stdlib/math/base/special/floor';\nimport abs from '@stdlib/math/base/special/abs';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gasumpw( 4, x, 2, 1 );\n* // returns 9.0\n*/\nfunction gasumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( abs( x[ix] ) );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = abs( x[ ix ] );\n\t\ts1 = abs( x[ ix+strideX ] );\n\t\ts2 = abs( x[ ix+(2*strideX) ] );\n\t\ts3 = abs( x[ ix+(3*strideX) ] );\n\t\ts4 = abs( x[ ix+(4*strideX) ] );\n\t\ts5 = abs( x[ ix+(5*strideX) ] );\n\t\ts6 = abs( x[ ix+(6*strideX) ] );\n\t\ts7 = abs( x[ ix+(7*strideX) ] );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += abs( x[ ix ] );\n\t\t\ts1 += abs( x[ ix+strideX ] );\n\t\t\ts2 += abs( x[ ix+(2*strideX) ] );\n\t\t\ts3 += abs( x[ ix+(3*strideX) ] );\n\t\t\ts4 += abs( x[ ix+(4*strideX) ] );\n\t\t\ts5 += abs( x[ ix+(5*strideX) ] );\n\t\t\ts6 += abs( x[ ix+(6*strideX) ] );\n\t\t\ts7 += abs( x[ ix+(7*strideX) ] );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gasumpw( n, x, strideX, ix ) + gasumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gasumpw( x.length, x, 1 );\n* // returns 5.0\n*/\nfunction gasumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport abs from '@stdlib/math/base/special/abs';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, sum, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = s + v;\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc += (s-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + s;\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = s + c;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} y - output array object\n* @param {Collection} y.data - output array data\n* @param {Array<Function>} y.accessors - array element accessors\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Object} output array object\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn( 4, 0.0, arraylike2object( toAccessorArray( x ) ), 2, 1, arraylike2object( toAccessorArray( y ) ), 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar xget;\n\tvar yset;\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\tix = offsetX;\n\tiy = offsetY;\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tt = s + v;\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc += (s-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + s;\n\t\t}\n\t\ts = t;\n\t\tyset( ybuf, iy, s + c );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumkbn( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumkbn( N, sum, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, sum, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gcusumkbn } from './../../../../ext/base/gcusumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusum( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusum( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn gcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY );\n}\n\n\n// EXPORTS //\n\nexport default gcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusum( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusum( N, sum, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, sum, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default gcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport abs from '@stdlib/math/base/special/abs';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn2( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumkbn2( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, sum, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\n\t\ty[ iy ] = sum + cs + ccs;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} y - output array object\n* @param {Collection} y.data - output array data\n* @param {Array<Function>} y.accessors - array element accessors\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Object} output array object\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn2( 4, 0.0, arraylike2object( toAccessorArray( x ) ), 2, 1, arraylike2object( toAccessorArray( y ) ), 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumkbn2( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar xget;\n\tvar yset;\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\tix = offsetX;\n\tiy = offsetY;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\n\t\tyset( ybuf, iy, sum + cs + ccs );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumkbn2( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumkbn2( N, sum, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, sum, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumors( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumors( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, sum, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using ordinary recursive summation.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} y - output array object\n* @param {Collection} y.data - output array data\n* @param {Array<Function>} y.accessors - array element accessors\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Object} output array object\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumors( 4, 0.0, arraylike2object( toAccessorArray( x ) ), 2, 1, arraylike2object( toAccessorArray( y ) ), 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumors( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar xget;\n\tvar yset;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += xget( xbuf, ix );\n\t\tyset( ybuf, iy, sum );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumors( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumors( N, sum, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, sum, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default gcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of absolute values (L1 norm) of strided array elements using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gasumpw\n*\n* @example\n* import gasumpw from '@stdlib/blas/ext/base/gasumpw';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gasumpw( x.length, x, 1 );\n* // returns 5.0\n*\n* @example\n* import gasumpw from '@stdlib/blas/ext/base/gasumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gasumpw.ndarray( 4, x, 2, 1 );\n* // returns 9.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gcusumkbn\n*\n* @example\n* import gcusumkbn from '@stdlib/blas/ext/base/gcusumkbn';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import gcusumkbn from '@stdlib/blas/ext/base/gcusumkbn';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn.ndarray( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements.\n*\n* @module @stdlib/blas/ext/base/gcusum\n*\n* @example\n* import gcusum from '@stdlib/blas/ext/base/gcusum';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusum( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import floor from '@stdlib/math/base/special/floor';\n* import gcusum from '@stdlib/blas/ext/base/gcusum';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusum.ndarray( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gcusumkbn2\n*\n* @example\n* import gcusumkbn2 from '@stdlib/blas/ext/base/gcusumkbn2';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn2( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import gcusumkbn2 from '@stdlib/blas/ext/base/gcusumkbn2';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn2.ndarray( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using ordinary recursive summation.\n*\n* @module @stdlib/blas/ext/base/gcusumors\n*\n* @example\n* import gcusumors from '@stdlib/blas/ext/base/gcusumors';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumors( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import gcusumors from '@stdlib/blas/ext/base/gcusumors';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumors.ndarray( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation:\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} y - output array object\n* @param {Collection} y.data - output array data\n* @param {Array<Function>} y.accessors - array element accessors\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Object} output array object\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumpw( 4, 0.0, arraylike2object( toAccessorArray( x ) ), 2, 1, arraylike2object( toAccessorArray( y ) ), 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumpw( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar xget;\n\tvar yget;\n\tvar yset;\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( N <= BLOCKSIZE ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += xget( xbuf, ix );\n\t\t\tyset( ybuf, iy, sum + s);\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tn = floor( N/2 );\n\tgcusumpw( n, sum, x, strideX, ix, y, strideY, iy );\n\tiy += (n-1) * strideY;\n\tgcusumpw( N-n, yget( ybuf, iy ), x, strideX, ix+(n*strideX), y, strideY, iy+strideY ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport floor from '@stdlib/math/base/special/floor';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation:\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumpw( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumpw( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, sum, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( N <= BLOCKSIZE ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\ty[ iy ] = sum + s;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tn = floor( N/2 );\n\tgcusumpw( n, sum, x, strideX, ix, y, strideY, iy );\n\tiy += (n-1) * strideY;\n\tgcusumpw( N-n, y[ iy ], x, strideX, ix+(n*strideX), y, strideY, iy+strideY ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumpw( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumpw( N, sum, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, sum, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default gcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gcusumpw\n*\n* @example\n* import gcusumpw from '@stdlib/blas/ext/base/gcusumpw';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumpw( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import gcusumpw from '@stdlib/blas/ext/base/gcusumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* gcusumpw.ndarray( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar constant\n* @param {Collection} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Collection} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* gfill( 3, 5.0, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\taccessors( N, alpha, o, strideX, offsetX );\n\t\treturn o.data;\n\t}\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] = alpha;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] = alpha;\n\t\t\tx[ ix+1 ] = alpha;\n\t\t\tx[ ix+2 ] = alpha;\n\t\t\tx[ ix+3 ] = alpha;\n\t\t\tx[ ix+4 ] = alpha;\n\t\t\tx[ ix+5 ] = alpha;\n\t\t\tx[ ix+6 ] = alpha;\n\t\t\tx[ ix+7 ] = alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar constant\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Object} input array object\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import reinterpret64 from '@stdlib/strided/base/reinterpret-complex64';\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* var data = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var x = {\n*     'data': data,\n*     'accessors': [ null, setter ]\n* };\n*\n* var alpha = new Complex64( 5.0, 5.0 );\n*\n* gfill( data.length, alpha, x, 1, 0 );\n*\n* var view = reinterpret64( x.data, 0 );\n* // returns <Float32Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar set;\n\tvar ix;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tset = x.accessors[ 1 ];\n\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( xbuf, ix, alpha );\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar constant\n* @param {Collection} x - input array\n* @param {integer} strideX - stride length\n* @returns {Collection} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill( x.length, 5.0, x, 1 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Fills a strided array according to a provided callback function.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Callback} clbk - callback function\n* @param {*} [thisArg] - execution context\n* @returns {Collection} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* gfillBy( 3, x, 1, x.length-3, fill );\n* // x => [ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfillBy( N, x, strideX, offsetX, clbk, thisArg ) {\n\tvar ix;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\taccessors( N, o, strideX, offsetX, clbk, thisArg );\n\t\treturn o.data;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfillBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Fills a strided array according to a provided callback function.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Callback} clbk - callback function\n* @param {*} thisArg - execution context\n* @returns {Object} input array object\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import reinterpret64 from '@stdlib/strided/base/reinterpret-complex64';\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var data = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var x = {\n*     'data': data,\n*     'accessors': [ getter, setter ]\n* };\n*\n* function clbk() {\n*     return new Complex64( 5.0, 5.0 );\n* }\n*\n* gfillBy( data.length, x, 1, 0, clbk, void 0 );\n*\n* var view = reinterpret64( x.data, 0 );\n* // view => <Float32Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfillBy( N, x, strideX, offsetX, clbk, thisArg ) {\n\tvar xbuf;\n\tvar set;\n\tvar get;\n\tvar ix;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessors:\n\tget = x.accessors[ 0 ];\n\tset = x.accessors[ 1 ];\n\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( xbuf, ix, clbk.call( thisArg, get( xbuf, ix ), i, ix, x ) );\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfillBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Fills a strided array according to a provided callback function.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - stride length\n* @param {Callback} clbk - callback function\n* @param {*} [thisArg] - execution context\n* @returns {Collection} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* gfillBy( x.length, x, 1, fill );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfillBy( N, x, strideX, clbk, thisArg ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), clbk, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default gfillBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var out = [ 0.0, 0 ];\n*\n* var v = gnannsumkbn( 5, x, 2, 1, out, 1, 0 );\n* // returns [ 5.0, 4 ]\n*/\nfunction gnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar ox;\n\tvar oo;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ offsetOut ] = sum;\n\t\tout[ offsetOut+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tox = arraylike2object( x );\n\too = arraylike2object( out );\n\tif ( ox.accessorProtocol || oo.accessorProtocol ) {\n\t\taccessors( N, ox, strideX, offsetX, oo, strideOut, offsetOut );\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ offsetOut ] = sum;\n\t\t\tout[ offsetOut+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offsetOut ] = x[ ix ] * N;\n\t\tout[ offsetOut+strideOut ] = N;\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ offsetOut ] = sum + c;\n\tout[ offsetOut+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default gnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} out - output array object\n* @param {Collection} out.data - output array data\n* @param {Array<Function>} out.accessors - array element accessors\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Object} output array object\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = toAccessorArray( [ 0.0, 0 ] );\n*\n* var v = gnannsumkbn( 5, arraylike2object( x ), 2, 1, arraylike2object( out ), 1, 0 );\n* // returns {...}\n*/\nfunction gnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar obuf;\n\tvar xbuf;\n\tvar xget;\n\tvar oset;\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tobuf = out.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\toset = out.accessors[ 1 ];\n\n\tsum = 0.0;\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) ) {\n\t\t\toset( obuf, offsetOut, sum );\n\t\t\toset( obuf, offsetOut+strideOut, 0 );\n\t\t\treturn out;\n\t\t}\n\t\toset( obuf, offsetOut, v * N );\n\t\toset( obuf, offsetOut+strideOut, N );\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\toset( obuf, offsetOut, sum + c );\n\toset( obuf, offsetOut+strideOut, n );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default gnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gnansumkbn( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumkbn( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gnansumkbn( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumkbn( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( xget( xbuf, ix ) ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * xget( xbuf, ix );\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumkbn( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumkbn( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gnansumkbn } from './../../../../ext/base/gnansumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gnansum( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansum( N, x, strideX, offsetX ) {\n\treturn gnansumkbn( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default gnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gnansum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gnansumkbn2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumkbn2( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gnansumkbn2( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumkbn2( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar sum;\n\tvar ccs;\n\tvar cs;\n\tvar cc;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( xget( xbuf, ix ) ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * xget( xbuf, ix );\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumkbn2( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumkbn2( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gnansumors( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gnansumors( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumors( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * v;\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) === false ) {\n\t\t\tsum += v;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with a specified scalar constant.\n*\n* @module @stdlib/blas/ext/base/gfill\n*\n* @example\n* import gfill from '@stdlib/blas/ext/base/gfill';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill( x.length, 5.0, x, 1 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*\n* @example\n* import gfill from '@stdlib/blas/ext/base/gfill';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array according to a provided callback function.\n*\n* @module @stdlib/blas/ext/base/gfill-by\n*\n* @example\n* import gfillBy from '@stdlib/blas/ext/base/gfill-by';\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfillBy( x.length, x, 1, fill );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*\n* @example\n* import gfillBy from '@stdlib/blas/ext/base/gfill-by';\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfillBy.ndarray( x.length, x, 1, 0, fill );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gnansumkbn\n*\n* @example\n* import gnansumkbn from '@stdlib/blas/ext/base/gnansumkbn';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumkbn( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gnansumkbn from '@stdlib/blas/ext/base/gnansumkbn';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = gnansumkbn.ndarray( 5, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values.\n*\n* @module @stdlib/blas/ext/base/gnansum\n*\n* @example\n* import gnansum from '@stdlib/blas/ext/base/gnansum';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansum( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gnansum from '@stdlib/blas/ext/base/gnansum';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = gnansum.ndarray( 5, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gnansumkbn2\n*\n* @example\n* import gnansumkbn2 from '@stdlib/blas/ext/base/gnansumkbn2';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumkbn2( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gnansumkbn2 from '@stdlib/blas/ext/base/gnansumkbn2';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = gnansumkbn2.ndarray( 5, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @module @stdlib/blas/ext/base/gnansumors\n*\n* @example\n* import gnansumors from '@stdlib/blas/ext/base/gnansumors';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumors( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gnansumors from '@stdlib/blas/ext/base/gnansumors';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = gnansumors.ndarray( 5, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gnansumpw( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumpw( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * v;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = xget( xbuf, ix );\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts += v;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\tv = xget( xbuf, ix );\n\t\ts0 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts1 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts2 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts3 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts4 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts5 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts6 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts7 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts0 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts1 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts2 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts3 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts4 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts5 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts6 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts7 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tv = xget( xbuf, ix );\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts += v;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gnansumpw( n, x, strideX, ix ) + gnansumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gnansumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts1 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts2 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts3 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts4 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts5 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts6 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts7 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts1 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts2 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts3 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts4 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts5 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts6 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts7 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gnansumpw( n, x, strideX, ix ) + gnansumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gnansumpw\n*\n* @example\n* import gnansumpw from '@stdlib/blas/ext/base/gnansumpw';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumpw( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gnansumpw from '@stdlib/blas/ext/base/gnansumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = gnansumpw.ndarray( 5, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* grev( 3, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, -6.0, 5.0, -4.0 ]\n*/\nfunction grev( N, x, strideX, offsetX ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar o;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\taccessors( N, o, strideX, offsetX );\n\t\treturn o.data;\n\t}\n\tn = floor( N/2 );\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = n % M;\n\t\tiy = ix + N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy -= strideX;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < n; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tiy = ix + ( ( N - 1 ) * strideX );\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy -= strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default grev;\n","\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Reverses a strided array in-place.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Object} input array object\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import reinterpret64 from '@stdlib/strided/base/reinterpret-complex64';\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var data = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var x = {\n*     'data': data,\n*     'accessors': [ getter, setter ]\n* };\n*\n* grev( data.length, x, 1, 0 );\n*\n* var view = reinterpret64( x.data, 0 );\n* // view => <Float32Array>[ -1.0, -3.0, 4.0, 0.0, 3.0, -5.0, -2.0, 1.0 ]\n*/\nfunction grev( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar set;\n\tvar get;\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessors:\n\tget = x.accessors[ 0 ];\n\tset = x.accessors[ 1 ];\n\n\tn = floor( N/2 );\n\tix = offsetX;\n\tiy = ix + ( ( N - 1 ) * strideX );\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = get( xbuf, ix );\n\t\tset( xbuf, ix, get( xbuf, iy ) );\n\t\tset( xbuf, iy, tmp );\n\t\tix += strideX;\n\t\tiy -= strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default grev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Reverses a strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* grev( x.length, x, 1 );\n* // x => [ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\nfunction grev( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default grev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, order, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Object} x - first input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - first input array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} y - second input array object\n* @param {Collection} y.data - second input array data\n* @param {Array<Function>} y.accessors - second input array element accessors\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Object} `x`\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, arraylike2object( toAccessorArray( x ) ), 1, 0, arraylike2object( toAccessorArray( y ) ), 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar xbuf;\n\tvar ybuf;\n\tvar xget;\n\tvar yget;\n\tvar xset;\n\tvar yset;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\txset = x.accessors[ 1 ];\n\tyget = y.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = xget( xbuf, offsetX+(parent*strideX) );\n\t\t\tty = yget( ybuf, offsetY+(parent*strideY) );\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = xget( xbuf, ix );\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = yget( ybuf, iy );\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\txset( xbuf, ix, xget( xbuf, offsetX ) );\n\t\t\tyset( ybuf, iy, yget( ybuf, offsetY ) );\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = xget( xbuf, offsetX+(k*strideX) );\n\t\t\t\tv2 = xget( xbuf, offsetX+(child*strideX) );\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = xget( xbuf, offsetX+(child*strideX) );\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\txset( xbuf, offsetX+(j*strideX), v1 );\n\t\t\t\tyset( ybuf, offsetY+(j*strideY), yget( ybuf, offsetY+(child*strideY) ) ); // eslint-disable-line max-len\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\txset( xbuf, offsetX+(j*strideX), tx );\n\t\tyset( ybuf, offsetY+(j*strideY), ty );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2hp( N, order, x, strideX, y, strideY ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, order, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default gsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar ox;\n\tvar oy;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, order, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Object} x - first input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - first input array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} y - second input array object\n* @param {Collection} y.data - second input array data\n* @param {Array<Function>} y.accessors - second input array element accessors\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Object} `x`\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, arraylike2object( toAccessorArray( x ) ), 1, 0, arraylike2object( toAccessorArray( y ) ), 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar xget;\n\tvar yget;\n\tvar xset;\n\tvar yset;\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\txset = x.accessors[ 1 ];\n\tyget = y.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = xget( xbuf, ix );\n\t\t\tvy = yget( ybuf, iy );\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\txset( xbuf, jx, xget( xbuf, jx+strideX ) );\n\t\t\t\t\tyset( ybuf, jy, yget( ybuf, jy+strideY ) );\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\txset( xbuf, lx, vx );\n\t\t\t\tyset( ybuf, ly, vy );\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = xget( xbuf, jx );\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\txset( xbuf, jx+strideX, ux );\n\t\t\t\t\tyset( ybuf, jy+strideY, yget( ybuf, jy ) );\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\txset( xbuf, jx+strideX, vx );\n\t\t\t\tyset( ybuf, jy+strideY, vy );\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = xget( xbuf, ix );\n\t\tvy = yget( ybuf, iy );\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\txset( xbuf, jx, xget( xbuf, jx+strideX ) );\n\t\t\t\tyset( ybuf, jy, yget( ybuf, jy+strideY ) );\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\txset( xbuf, lx, vx );\n\t\t\tyset( ybuf, ly, vy );\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = xget( xbuf, jx );\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\txset( xbuf, jx+strideX, ux );\n\t\t\t\tyset( ybuf, jy+strideY, yget( ybuf, jy ) );\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\txset( xbuf, jx+strideX, vx );\n\t\t\tyset( ybuf, jy+strideY, vy );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2ins( N, order, x, strideX, y, strideY ) {\n\treturn ndarray( N, order, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Reverse a strided array in-place.\n*\n* @module @stdlib/blas/ext/base/grev\n*\n* @example\n* import grev from '@stdlib/blas/ext/base/grev';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* grev( x.length, x, 1 );\n* // x => [ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*\n* @example\n* import grev from '@stdlib/blas/ext/base/grev';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* grev( x.length, x, 1, 0 );\n* // x => [ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously sort two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* @module @stdlib/blas/ext/base/gsort2hp\n*\n* @example\n* import gsort2hp from '@stdlib/blas/ext/base/gsort2hp';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* import gsort2hp from '@stdlib/blas/ext/base/gsort2hp';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously sort two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @module @stdlib/blas/ext/base/gsort2ins\n*\n* @example\n* import gsort2ins from '@stdlib/blas/ext/base/gsort2ins';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* import gsort2ins from '@stdlib/blas/ext/base/gsort2ins';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Object} x - first input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - first input array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} y - second input array object\n* @param {Collection} y.data - second input array data\n* @param {Array<Function>} y.accessors - second input array element accessors\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Object} `x`\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, arraylike2object( toAccessorArray( x ) ), 1, 0, arraylike2object( toAccessorArray( y ) ), 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar xget;\n\tvar yget;\n\tvar xset;\n\tvar yset;\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\txset = x.accessors[ 1 ];\n\tyget = y.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = xget( xbuf, offsetX+(j*strideX) );\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = yget( ybuf, offsetY+(j*strideY) );\n\n\t\t\t// Perform Shellsort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = xget( xbuf, offsetX+((k-gap)*strideX) );\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\txset( xbuf, offsetX+(k*strideX), ux );\n\t\t\t\tyset( ybuf, offsetY+(k*strideY), yget( ybuf, offsetY+((k-gap)*strideY) ) ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\txset( xbuf, offsetX+(k*strideX), vx );\n\t\t\tyset( ybuf, offsetY+(k*strideY), vy );\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar ox;\n\tvar oy;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, order, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform Shellsort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2sh( N, order, x, strideX, y, strideY ) {\n\treturn ndarray( N, order, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsorthp( N, order, x, strideX, offsetX ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar ox;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\tox = arraylike2object( x );\n\tif ( ox.accessorProtocol ) {\n\t\taccessors( N, order, ox, strideX, offsetX );\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offsetX+(parent*strideX) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offsetX + (n*strideX);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offsetX ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math/base/assert/is-positive-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Object} x - input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - first input array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Object} `x`\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp( x.length, 1.0, arraylike2object( toAccessorArray( x ) ), 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsorthp( N, order, x, strideX, offsetX ) {\n\tvar parent;\n\tvar child;\n\tvar xbuf;\n\tvar xget;\n\tvar xset;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\txset = x.accessors[ 1 ];\n\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = xget( xbuf, offsetX+(parent*strideX) );\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offsetX + (n*strideX);\n\t\t\tt = xget( xbuf, i );\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\txset( xbuf, i, xget( xbuf, offsetX ) );\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = xget( xbuf, offsetX+(k*strideX) );\n\t\t\t\tv2 = xget( xbuf, offsetX+(child*strideX) );\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = xget( xbuf, offsetX+(child*strideX) );\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\txset( xbuf, offsetX+(j*strideX), v1 );\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\txset( xbuf, offsetX+(j*strideX), t );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsorthp( N, order, x, strideX ) {\n\treturn ndarray( N, order, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortins( N, order, x, strideX, offsetX ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar ox;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\tox = arraylike2object( x );\n\tif ( ox.accessorProtocol ) {\n\t\taccessors( N, order, ox, strideX, offsetX );\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ( (N-1)*strideX ); // last index\n\tix = fx + strideX;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - strideX;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = u;\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = v;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\tjx += strideX;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - strideX;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = u;\n\t\t\t\tjx -= strideX;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = v;\n\t\t\tix += strideX;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using insertion sort.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Object} x - input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - first input array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Object} `x`\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, arraylike2object( toAccessorArray( x ) ), 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortins( N, order, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar xset;\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\txset = x.accessors[ 1 ];\n\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ( (N-1)*strideX ); // last index\n\tix = fx + strideX;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = xget( xbuf, ix );\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\txset( xbuf, jx, xget( xbuf, jx+strideX ) );\n\t\t\t\t\tjx += strideX;\n\t\t\t\t}\n\t\t\t\txset( xbuf, lx, v );\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - strideX;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = xget( xbuf, jx );\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\txset( xbuf, jx+strideX, u );\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t}\n\t\t\t\txset( xbuf, jx+strideX, v );\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\txset( xbuf, jx, xget( xbuf, jx+strideX ) );\n\t\t\t\tjx += strideX;\n\t\t\t}\n\t\t\txset( xbuf, lx, v );\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - strideX;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = xget( xbuf, jx );\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\txset( xbuf, jx+strideX, u );\n\t\t\t\tjx -= strideX;\n\t\t\t}\n\t\t\txset( xbuf, jx+strideX, v );\n\t\t\tix += strideX;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortins( N, order, x, strideX ) {\n\treturn ndarray( N, order, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously sort two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* @module @stdlib/blas/ext/base/gsort2sh\n*\n* @example\n* import gsort2sh from '@stdlib/blas/ext/base/gsort2sh';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* import gsort2sh from '@stdlib/blas/ext/base/gsort2sh';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sort a strided array using heapsort.\n*\n* @module @stdlib/blas/ext/base/gsorthp\n*\n* @example\n* import gsorthp from '@stdlib/blas/ext/base/gsorthp';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* @example\n* import gsorthp from '@stdlib/blas/ext/base/gsorthp';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp.ndarray( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sort a strided array using insertion sort.\n*\n* @module @stdlib/blas/ext/base/gsortins\n*\n* @example\n* import gsortins from '@stdlib/blas/ext/base/gsortins';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* @example\n* import gsortins from '@stdlib/blas/ext/base/gsortins';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins.ndarray( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Object} x - input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - first input array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Object} `x`\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh( x.length, 1.0, arraylike2object( toAccessorArray( x ) ), 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortsh( N, order, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar xset;\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\txset = x.accessors[ 1 ];\n\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = xget( xbuf, offsetX+(j*strideX) );\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = xget( xbuf, offsetX+((k-gap)*strideX) );\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\txset( xbuf, offsetX+(k*strideX), u );\n\t\t\t}\n\t\t\txset( xbuf, offsetX+(k*strideX), v );\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport GAPS from './gaps.json';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortsh( N, order, x, strideX, offsetX ) {\n\tvar flg;\n\tvar gap;\n\tvar ox;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\tox = arraylike2object( x );\n\tif ( ox.accessorProtocol ) {\n\t\taccessors( N, order, ox, strideX, offsetX );\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = u;\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortsh( N, order, x, strideX ) {\n\treturn ndarray( N, order, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumkbn( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumkbn( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar o;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gsumkbn( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gsumkbn( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * get( xbuf, ix );\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = get( xbuf, ix );\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += strideX;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumkbn( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gsumkbn( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gsumkbn } from './../../../../ext/base/gsumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsum( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsum( N, x, strideX, offsetX ) {\n\treturn gsumkbn( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default gsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gsum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumkbn2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumkbn2( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar o;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gsumkbn2( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gsumkbn2( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * get( xbuf, ix );\n\t}\n\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = get( xbuf, ix );\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += strideX;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumkbn2( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gsumkbn2( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sort a strided array using Shellsort.\n*\n* @module @stdlib/blas/ext/base/gsortsh\n*\n* @example\n* import gsortsh from '@stdlib/blas/ext/base/gsortsh';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* @example\n* import gsortsh from '@stdlib/blas/ext/base/gsortsh';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh.ndarray( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gsumkbn\n*\n* @example\n* import gsumkbn from '@stdlib/blas/ext/base/gsumkbn';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumkbn( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gsumkbn from '@stdlib/blas/ext/base/gsumkbn';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumkbn.ndarray( 4, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements.\n*\n* @module @stdlib/blas/ext/base/gsum\n*\n* @example\n* import gsum from '@stdlib/blas/ext/base/gsum';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsum( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gsum from '@stdlib/blas/ext/base/gsum';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsum.ndarray( 4, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas/ext/base/gsumkbn2\n*\n* @example\n* import gsumkbn2 from '@stdlib/blas/ext/base/gsumkbn2';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumkbn2( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gsumkbn2 from '@stdlib/blas/ext/base/gsumkbn2';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumkbn2.ndarray( 4, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumors( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumors( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar s;\n\tvar o;\n\tvar i;\n\n\ts = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn s;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn s;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ts += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn s;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ts += x[ ix ];\n\t\tix += strideX;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default gsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using ordinary recursive summation.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gsumors( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gsumors( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * get( xbuf, ix );\n\t}\n\ts = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ts += get( xbuf, ix );\n\t\tix += strideX;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default gsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gsumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using ordinary recursive summation.\n*\n* @module @stdlib/blas/ext/base/gsumors\n*\n* @example\n* import gsumors from '@stdlib/blas/ext/base/gsumors';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumors( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gsumors from '@stdlib/blas/ext/base/gsumors';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumors.ndarray( 4, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array/base/to-accessor-array';\n* import arraylike2object from '@stdlib/array/base/arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gsumpw( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gsumpw( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar n;\n\tvar s;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * get( xbuf, ix );\n\t}\n\n\tif ( N <= 8 ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += get( xbuf, ix );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = get( xbuf, ix );\n\t\ts1 = get( xbuf, ix+strideX );\n\t\ts2 = get( xbuf, ix+(2*strideX) );\n\t\ts3 = get( xbuf, ix+(3*strideX) );\n\t\ts4 = get( xbuf, ix+(4*strideX) );\n\t\ts5 = get( xbuf, ix+(5*strideX) );\n\t\ts6 = get( xbuf, ix+(6*strideX) );\n\t\ts7 = get( xbuf, ix+(7*strideX) );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += get( xbuf, ix );\n\t\t\ts1 += get( xbuf, ix+strideX );\n\t\t\ts2 += get( xbuf, ix+(2*strideX) );\n\t\t\ts3 += get( xbuf, ix+(3*strideX) );\n\t\t\ts4 += get( xbuf, ix+(4*strideX) );\n\t\t\ts5 += get( xbuf, ix+(5*strideX) );\n\t\t\ts6 += get( xbuf, ix+(6*strideX) );\n\t\t\ts7 += get( xbuf, ix+(7*strideX) );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += get( xbuf, ix );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gsumpw( n, x, strideX, ix ) + gsumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar o;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+strideX ];\n\t\ts2 = x[ ix+(2*strideX) ];\n\t\ts3 = x[ ix+(3*strideX) ];\n\t\ts4 = x[ ix+(4*strideX) ];\n\t\ts5 = x[ ix+(5*strideX) ];\n\t\ts6 = x[ ix+(6*strideX) ];\n\t\ts7 = x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+strideX ];\n\t\t\ts2 += x[ ix+(2*strideX) ];\n\t\t\ts3 += x[ ix+(3*strideX) ];\n\t\t\ts4 += x[ ix+(4*strideX) ];\n\t\t\ts5 += x[ ix+(5*strideX) ];\n\t\t\ts6 += x[ ix+(6*strideX) ];\n\t\t\ts7 += x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gsumpw( n, x, strideX, ix ) + gsumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gsumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using pairwise summation.\n*\n* @module @stdlib/blas/ext/base/gsumpw\n*\n* @example\n* import gsumpw from '@stdlib/blas/ext/base/gsumpw';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumpw( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gsumpw from '@stdlib/blas/ext/base/gsumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumpw.ndarray( 4, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* sapx( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, 1.0, 10.0, -1.0 ]\n*/\nfunction sapx( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] += alpha;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] += alpha;\n\t\t\tx[ ix+1 ] += alpha;\n\t\t\tx[ ix+2 ] += alpha;\n\t\t\tx[ ix+3 ] += alpha;\n\t\t\tx[ ix+4 ] += alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default sapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* sapx( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\nfunction sapx( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport absf from '@stdlib/math/base/special/absf';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsumkbn( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumkbn( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * float64ToFloat32( alpha + x[ ix ] ) );\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum + v );\n\t\tif ( absf( sum ) >= absf( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t}\n\t\tsum = t;\n\t\tix += strideX;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sapxsumkbn( 3, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumkbn( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sapxsumkbn } from './../../../../ext/base/sapxsumkbn';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsum( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsum( N, alpha, x, strideX, offsetX ) {\n\treturn sapxsumkbn( N, alpha, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default sapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sapxsum( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsum( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsumkbn2( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumkbn2( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * float64ToFloat32( alpha + x[ ix ] ) );\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += strideX;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sapxsumkbn2( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumkbn2( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsumors( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumors( N, alpha, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * float64ToFloat32( alpha + x[ ix ] ) );\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + float64ToFloat32( alpha+x[ ix ] ) );\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default sapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sapxsumors( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumors( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapx from './sapx.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapx, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapxsumkbn from './sapxsumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapxsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapxsum from './sapxsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapxsumkbn2 from './sapxsumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapxsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapxsumors from './sapxsumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapxsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumpw( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * float64ToFloat32( alpha + x[ ix ] ) );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = float64ToFloat32( alpha + x[ ix ] );\n\t\ts1 = float64ToFloat32( alpha + x[ ix+strideX ] );\n\t\ts2 = float64ToFloat32( alpha + x[ ix+(2*strideX) ] );\n\t\ts3 = float64ToFloat32( alpha + x[ ix+(3*strideX) ] );\n\t\ts4 = float64ToFloat32( alpha + x[ ix+(4*strideX) ] );\n\t\ts5 = float64ToFloat32( alpha + x[ ix+(5*strideX) ] );\n\t\ts6 = float64ToFloat32( alpha + x[ ix+(6*strideX) ] );\n\t\ts7 = float64ToFloat32( alpha + x[ ix+(7*strideX) ] );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\ts1 = float64ToFloat32( s1 + float64ToFloat32( alpha + x[ ix+strideX ] ) );\n\t\t\ts2 = float64ToFloat32( s2 + float64ToFloat32( alpha + x[ ix+(2*strideX) ] ) );\n\t\t\ts3 = float64ToFloat32( s3 + float64ToFloat32( alpha + x[ ix+(3*strideX) ] ) );\n\t\t\ts4 = float64ToFloat32( s4 + float64ToFloat32( alpha + x[ ix+(4*strideX) ] ) );\n\t\t\ts5 = float64ToFloat32( s5 + float64ToFloat32( alpha + x[ ix+(5*strideX) ] ) );\n\t\t\ts6 = float64ToFloat32( s6 + float64ToFloat32( alpha + x[ ix+(6*strideX) ] ) );\n\t\t\ts7 = float64ToFloat32( s7 + float64ToFloat32( alpha + x[ ix+(7*strideX) ] ) );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sapxsumpw( n, alpha, x, strideX, ix ) + sapxsumpw( N-n, alpha, x, strideX, ix+(n*strideX) ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sapxsumpw( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumpw( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sapxsumpw from './sapxsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\nimport absf from '@stdlib/math/base/special/absf';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sasumpw( 4, x, 2, 1 );\n* // returns 9.0\n*/\nfunction sasumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * absf( x[ ix ] ) );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + absf( x[ ix ] ) );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = absf( x[ ix ] );\n\t\ts1 = absf( x[ ix+strideX ] );\n\t\ts2 = absf( x[ ix+(2*strideX) ] );\n\t\ts3 = absf( x[ ix+(3*strideX) ] );\n\t\ts4 = absf( x[ ix+(4*strideX) ] );\n\t\ts5 = absf( x[ ix+(5*strideX) ] );\n\t\ts6 = absf( x[ ix+(6*strideX) ] );\n\t\ts7 = absf( x[ ix+(7*strideX) ] );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + absf( x[ ix ] ) );\n\t\t\ts1 = float64ToFloat32( s1 + absf( x[ ix+strideX ] ) );\n\t\t\ts2 = float64ToFloat32( s2 + absf( x[ ix+(2*strideX) ] ) );\n\t\t\ts3 = float64ToFloat32( s3 + absf( x[ ix+(3*strideX) ] ) );\n\t\t\ts4 = float64ToFloat32( s4 + absf( x[ ix+(4*strideX) ] ) );\n\t\t\ts5 = float64ToFloat32( s5 + absf( x[ ix+(5*strideX) ] ) );\n\t\t\ts6 = float64ToFloat32( s6 + absf( x[ ix+(6*strideX) ] ) );\n\t\t\ts7 = float64ToFloat32( s7 + absf( x[ ix+(7*strideX) ] ) );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) ); // eslint-disable-line max-len\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + absf( x[ ix ] ) );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sasumpw( n, x, strideX, ix ) + sasumpw( N-n, x, strideX, ix+(n*strideX) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sasumpw( x.length, x, 1 );\n* // returns 5.0\n*/\nfunction sasumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusumkbn( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( s + v );\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( s - t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v - t ) + s ) ); // eslint-disable-line max-len\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = float64ToFloat32( s + c );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusumkbn( x.length, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumkbn( N, sum, x, strideX, y, strideY ) {\n\tndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport scusumkbn from './../../../../ext/base/scusumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusum( 3, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusum( N, sum, x, strideX, y, strideY ) {\n\treturn scusumkbn( N, sum, x, strideX, y, strideY );\n}\n\n\n// EXPORTS //\n\nexport default scusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusumkbn2( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumkbn2( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\n\t\ty[ iy ] = float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusumkbn2( x.length, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumkbn2( N, sum, x, strideX, y, strideY ) {\n\tndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusumors( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumors( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusumors( x.length, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumors( N, sum, x, strideX, y, strideY ) {\n\tndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sasumpw from './sasumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sasumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scusumkbn from './scusumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scusumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scusum from './scusum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scusum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as scusumkbn } from './../../../../ext/base/scusumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusum( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusum( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn scusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY );\n}\n\n\n// EXPORTS //\n\nexport default scusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scusumkbn2 from './scusumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scusumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scusumors from './scusumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scusumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation:\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusumpw( 4, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumpw( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( N <= BLOCKSIZE ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\ty[ iy ] = float64ToFloat32( sum + s );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tn = floor( N/2 );\n\tscusumpw( n, sum, x, strideX, ix, y, strideY, iy );\n\tiy += (n-1) * strideY;\n\tscusumpw( N-n, y[ iy ], x, strideX, ix+(n*strideX), y, strideY, iy+strideY ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - stride length for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scusumpw( x.length, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumpw( N, sum, x, strideX, y, strideY ) {\n\treturn ndarray( N, sum, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default scusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport scusumpw from './scusumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scusumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sdsapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sdsapxsumpw( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * float64ToFloat32( alpha + x[ ix ] ) );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+strideX ];\n\t\ts2 = alpha + x[ ix+(2*strideX) ];\n\t\ts3 = alpha + x[ ix+(3*strideX) ];\n\t\ts4 = alpha + x[ ix+(4*strideX) ];\n\t\ts5 = alpha + x[ ix+(5*strideX) ];\n\t\ts6 = alpha + x[ ix+(6*strideX) ];\n\t\ts7 = alpha + x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+strideX ];\n\t\t\ts2 += alpha + x[ ix+(2*strideX) ];\n\t\t\ts3 += alpha + x[ ix+(3*strideX) ];\n\t\t\ts4 += alpha + x[ ix+(4*strideX) ];\n\t\t\ts5 += alpha + x[ ix+(5*strideX) ];\n\t\t\ts6 += alpha + x[ ix+(6*strideX) ];\n\t\t\ts7 += alpha + x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sdsapxsumpw( n, alpha, x, strideX, ix ) + sdsapxsumpw( N-n, alpha, x, strideX, ix+(n*strideX) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sdsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sdsapxsumpw( 3, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sdsapxsumpw( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sdsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sdsapxsumpw } from './../../../../ext/base/sdsapxsumpw';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sdsapxsum( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sdsapxsum( N, alpha, x, strideX, offsetX ) {\n\treturn sdsapxsumpw( N, alpha, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default sdsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sdsapxsum( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sdsapxsum( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sdsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdsapxsumpw from './sdsapxsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdsapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdsapxsum from './sdsapxsum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdsapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = sdsnansumpw( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdsnansumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnanf( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn float64ToFloat32( N * x[ ix ] );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts1 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts2 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts3 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts4 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts5 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts6 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts7 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts1 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts2 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts3 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts4 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts5 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts6 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts7 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sdsnansumpw( n, x, strideX, ix ) + sdsnansumpw( N-n, x, strideX, ix+(n*strideX) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sdsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = sdsnansumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction sdsnansumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sdsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sdsnansumpw from './../../../../ext/base/sdsnansumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = sdsnansum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction sdsnansum( N, x, strideX ) {\n\treturn sdsnansumpw( N, x, strideX );\n}\n\n\n// EXPORTS //\n\nexport default sdsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdsnansumpw from './sdsnansumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdsnansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdsnansum from './sdsnansum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdsnansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sdsnansumpw } from './../../../../ext/base/sdsnansumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = sdsnansum( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdsnansum( N, x, strideX, offsetX ) {\n\treturn sdsnansumpw( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default sdsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sdssumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdssumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * x[ ix ] );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+strideX ];\n\t\ts2 = x[ ix+(2*strideX) ];\n\t\ts3 = x[ ix+(3*strideX) ];\n\t\ts4 = x[ ix+(4*strideX) ];\n\t\ts5 = x[ ix+(5*strideX) ];\n\t\ts6 = x[ ix+(6*strideX) ];\n\t\ts7 = x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+strideX ];\n\t\t\ts2 += x[ ix+(2*strideX) ];\n\t\t\ts3 += x[ ix+(3*strideX) ];\n\t\t\ts4 += x[ ix+(4*strideX) ];\n\t\t\ts5 += x[ ix+(5*strideX) ];\n\t\t\ts6 += x[ ix+(6*strideX) ];\n\t\t\ts7 += x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sdssumpw( n, x, strideX, ix ) + sdssumpw( N-n, x, strideX, ix+(n*strideX) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sdssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sdssumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction sdssumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sdssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sdssumpw } from './../../../../ext/base/sdssumpw';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sdssum( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdssum( N, x, strideX, offsetX ) {\n\treturn sdssumpw( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default sdssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sdssum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction sdssum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sdssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport absf from '@stdlib/math/base/special/absf';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = snansumkbn( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumkbn( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnanf( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn float64ToFloat32( N * x[ ix ] );\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( absf( sum ) >= absf( v ) ) {\n\t\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default snansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = snansumkbn( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction snansumkbn( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default snansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as snansumkbn } from './../../../../ext/base/snansumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = snansum( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansum( N, x, strideX, offsetX ) {\n\treturn snansumkbn( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default snansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = snansum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction snansum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default snansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport absf from '@stdlib/math/base/special/absf';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = snansumkbn2( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumkbn2( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnanf( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn float64ToFloat32( N * x[ ix ] );\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = float64ToFloat32( sum + v );\n\t\t\tif ( absf( sum ) >= absf( v ) ) {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = float64ToFloat32( cs + c );\n\t\t\tif ( absf( cs ) >= absf( c ) ) {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t\t} else {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs = float64ToFloat32( ccs + cc );\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs + ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default snansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = snansumkbn2( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction snansumkbn2( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default snansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = snansumors( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnanf( x[ ix ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default snansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = snansumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction snansumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default snansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdssumpw from './sdssumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdssumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport sdssum from './sdssum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdssum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snansumkbn from './snansumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snansumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snansum from './snansum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snansumkbn2 from './snansumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snansumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snansumors from './snansumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snansumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = snansumpw( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnanf( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts1 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts2 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts3 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts4 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts5 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts6 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts7 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = ( isnanf( x[ ix ] ) ) ? s0 : float64ToFloat32( s0 + x[ ix ] );\n\t\t\tix += strideX;\n\t\t\ts1 = ( isnanf( x[ ix ] ) ) ? s1 : float64ToFloat32( s1 + x[ ix ] );\n\t\t\tix += strideX;\n\t\t\ts2 = ( isnanf( x[ ix ] ) ) ? s2 : float64ToFloat32( s2 + x[ ix ] );\n\t\t\tix += strideX;\n\t\t\ts3 = ( isnanf( x[ ix ] ) ) ? s3 : float64ToFloat32( s3 + x[ ix ] );\n\t\t\tix += strideX;\n\t\t\ts4 = ( isnanf( x[ ix ] ) ) ? s4 : float64ToFloat32( s4 + x[ ix ] );\n\t\t\tix += strideX;\n\t\t\ts5 = ( isnanf( x[ ix ] ) ) ? s5 : float64ToFloat32( s5 + x[ ix ] );\n\t\t\tix += strideX;\n\t\t\ts6 = ( isnanf( x[ ix ] ) ) ? s6 : float64ToFloat32( s6 + x[ ix ] );\n\t\t\tix += strideX;\n\t\t\ts7 = ( isnanf( x[ ix ] ) ) ? s7 : float64ToFloat32( s7 + x[ ix ] );\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) ); // eslint-disable-line max-len\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( snansumpw( n, x, strideX, ix ) + snansumpw( N-n, x, strideX, ix+(n*strideX) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default snansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = snansumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction snansumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default snansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport snansumpw from './snansumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a single-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* srev( 3, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, -6.0, 5.0, -4.0 ]\n*/\nfunction srev( N, x, strideX, offsetX ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tn = floor( N/2 );\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = n % M;\n\t\tiy = ix + N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tix += strideX;\n\t\t\t\tiy -= strideX;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < n; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tiy = ix + ( ( N-1 ) * strideX );\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += strideX;\n\t\tiy -= strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default srev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Reverses a single-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* srev( x.length, x, 1 );\n* // x => <Float32Array>[ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\nfunction srev( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default srev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZerof from '@stdlib/math/base/assert/is-positive-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2hp( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnanf( v1 ) || ( v1 === tx && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ssort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2ins( N, order, x, strideX, y, strideY ) {\n\treturn ndarray( N, order, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ssort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport srev from './srev.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( srev, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default srev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssort2hp from './ssort2hp.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssort2hp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZerof from '@stdlib/math/base/assert/is-positive-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnanf( v1 ) || ( v1 === tx && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ssort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssort2ins from './ssort2ins.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssort2ins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2sh( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZerof from '@stdlib/math/base/assert/is-positive-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssorthp( x.length, 1.0, x, 1 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssorthp( N, order, x, stride ) {\n\tvar offset;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnanf( v1 ) || ( v1 === t && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ssorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortins( x.length, 1.0, x, 1 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortins( N, order, x, stride ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * stride; // first index\n\t\tlx = 0;              // last index\n\t\tix = fx + stride;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * stride; // last index\n\tix = fx + stride;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssort2sh from './ssort2sh.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssort2sh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssorthp from './ssorthp.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssorthp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZerof from '@stdlib/math/base/assert/is-positive-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssorthp( x.length, 1.0, x, 1, 0 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssorthp( N, order, x, stride, offset ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnanf( v1 ) || ( v1 === t && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ssorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssortins from './ssortins.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssortins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortins( x.length, 1.0, x, 1, 0 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortins( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfx = offset;              // first index\n\tlx = fx + ((N-1)*stride); // last index\n\tix = fx + stride;\n\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortsh( x.length, 1.0, x, 1 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortsh( N, order, x, stride ) {\n\tvar offset;\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math/base/assert/is-negative-zerof';\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport GAPS from './gaps.json';\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortsh( x.length, 1.0, x, 1, 0 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortsh( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport absf from '@stdlib/math/base/special/absf';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = ssumkbn( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumkbn( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * x[ ix ] );\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum + v );\n\t\tif ( absf( sum ) >= absf( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t}\n\t\tsum = t;\n\t\tix += strideX;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default ssumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = ssumkbn( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction ssumkbn( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default ssumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as ssumkbn } from './../../../../ext/base/ssumkbn';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = ssum( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssum( N, x, strideX, offsetX ) {\n\treturn ssumkbn( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default ssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = ssum( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction ssum( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default ssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport absf from '@stdlib/math/base/special/absf';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = ssumkbn2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumkbn2( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * x[ ix ] );\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( absf( sum ) >= absf( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( absf( cs ) >= absf( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += strideX;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default ssumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = ssumkbn2( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction ssumkbn2( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default ssumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = ssumors( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default ssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = ssumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction ssumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default ssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssortsh from './ssortsh.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssortsh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssumkbn from './ssumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssum from './ssum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssumkbn2 from './ssumkbn2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssumors from './ssumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = ssumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+strideX ];\n\t\ts2 = x[ ix+(2*strideX) ];\n\t\ts3 = x[ ix+(3*strideX) ];\n\t\ts4 = x[ ix+(4*strideX) ];\n\t\ts5 = x[ ix+(5*strideX) ];\n\t\ts6 = x[ ix+(6*strideX) ];\n\t\ts7 = x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + x[ ix ] );\n\t\t\ts1 = float64ToFloat32( s1 + x[ ix+strideX ] );\n\t\t\ts2 = float64ToFloat32( s2 + x[ ix+(2*strideX) ] );\n\t\t\ts3 = float64ToFloat32( s3 + x[ ix+(3*strideX) ] );\n\t\t\ts4 = float64ToFloat32( s4 + x[ ix+(4*strideX) ] );\n\t\t\ts5 = float64ToFloat32( s5 + x[ ix+(5*strideX) ] );\n\t\t\ts6 = float64ToFloat32( s6 + x[ ix+(6*strideX) ] );\n\t\t\ts7 = float64ToFloat32( s7 + x[ ix+(7*strideX) ] );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) ); // eslint-disable-line max-len\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( ssumpw( n, x, strideX, ix ) + ssumpw( N-n, x, strideX, ix+(n*strideX) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = ssumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction ssumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport ssumpw from './ssumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name dapxsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumkbn}\n*/\nimport dapxsumkbn from './../../../../ext/base/dapxsumkbn';\nsetReadOnly( ns, 'dapxsumkbn', dapxsumkbn );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name dapx\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapx}\n*/\nimport dapx from './../../../ext/base/dapx';\nsetReadOnly( ns, 'dapx', dapx );\n\n/**\n* @name dapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsum}\n*/\nimport dapxsum from './../../../ext/base/dapxsum';\nsetReadOnly( ns, 'dapxsum', dapxsum );\n\n/**\n* @name dapxsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumkbn}\n*/\nimport dapxsumkbn from './../../../ext/base/dapxsumkbn';\nsetReadOnly( ns, 'dapxsumkbn', dapxsumkbn );\n\n/**\n* @name dapxsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumkbn2}\n*/\nimport dapxsumkbn2 from './../../../ext/base/dapxsumkbn2';\nsetReadOnly( ns, 'dapxsumkbn2', dapxsumkbn2 );\n\n/**\n* @name dapxsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumors}\n*/\nimport dapxsumors from './../../../ext/base/dapxsumors';\nsetReadOnly( ns, 'dapxsumors', dapxsumors );\n\n/**\n* @name dapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumpw}\n*/\nimport dapxsumpw from './../../../ext/base/dapxsumpw';\nsetReadOnly( ns, 'dapxsumpw', dapxsumpw );\n\n/**\n* @name dasumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dasumpw}\n*/\nimport dasumpw from './../../../ext/base/dasumpw';\nsetReadOnly( ns, 'dasumpw', dasumpw );\n\n/**\n* @name dcusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusum}\n*/\nimport dcusum from './../../../ext/base/dcusum';\nsetReadOnly( ns, 'dcusum', dcusum );\n\n/**\n* @name dcusumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumkbn}\n*/\nimport dcusumkbn from './../../../ext/base/dcusumkbn';\nsetReadOnly( ns, 'dcusumkbn', dcusumkbn );\n\n/**\n* @name dcusumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumkbn2}\n*/\nimport dcusumkbn2 from './../../../ext/base/dcusumkbn2';\nsetReadOnly( ns, 'dcusumkbn2', dcusumkbn2 );\n\n/**\n* @name dcusumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumors}\n*/\nimport dcusumors from './../../../ext/base/dcusumors';\nsetReadOnly( ns, 'dcusumors', dcusumors );\n\n/**\n* @name dcusumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumpw}\n*/\nimport dcusumpw from './../../../ext/base/dcusumpw';\nsetReadOnly( ns, 'dcusumpw', dcusumpw );\n\n/**\n* @name dfill\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dfill}\n*/\nimport dfill from './../../../ext/base/dfill';\nsetReadOnly( ns, 'dfill', dfill );\n\n/**\n* @name dnanasum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnanasum}\n*/\nimport dnanasum from './../../../ext/base/dnanasum';\nsetReadOnly( ns, 'dnanasum', dnanasum );\n\n/**\n* @name dnanasumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnanasumors}\n*/\nimport dnanasumors from './../../../ext/base/dnanasumors';\nsetReadOnly( ns, 'dnanasumors', dnanasumors );\n\n/**\n* @name dnannsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsum}\n*/\nimport dnannsum from './../../../ext/base/dnannsum';\nsetReadOnly( ns, 'dnannsum', dnannsum );\n\n/**\n* @name dnannsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumkbn}\n*/\nimport dnannsumkbn from './../../../ext/base/dnannsumkbn';\nsetReadOnly( ns, 'dnannsumkbn', dnannsumkbn );\n\n/**\n* @name dnannsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumkbn2}\n*/\nimport dnannsumkbn2 from './../../../ext/base/dnannsumkbn2';\nsetReadOnly( ns, 'dnannsumkbn2', dnannsumkbn2 );\n\n/**\n* @name dnannsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumors}\n*/\nimport dnannsumors from './../../../ext/base/dnannsumors';\nsetReadOnly( ns, 'dnannsumors', dnannsumors );\n\n/**\n* @name dnannsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumpw}\n*/\nimport dnannsumpw from './../../../ext/base/dnannsumpw';\nsetReadOnly( ns, 'dnannsumpw', dnannsumpw );\n\n/**\n* @name dnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansum}\n*/\nimport dnansum from './../../../ext/base/dnansum';\nsetReadOnly( ns, 'dnansum', dnansum );\n\n/**\n* @name dnansumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumkbn}\n*/\nimport dnansumkbn from './../../../ext/base/dnansumkbn';\nsetReadOnly( ns, 'dnansumkbn', dnansumkbn );\n\n/**\n* @name dnansumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumkbn2}\n*/\nimport dnansumkbn2 from './../../../ext/base/dnansumkbn2';\nsetReadOnly( ns, 'dnansumkbn2', dnansumkbn2 );\n\n/**\n* @name dnansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumors}\n*/\nimport dnansumors from './../../../ext/base/dnansumors';\nsetReadOnly( ns, 'dnansumors', dnansumors );\n\n/**\n* @name dnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumpw}\n*/\nimport dnansumpw from './../../../ext/base/dnansumpw';\nsetReadOnly( ns, 'dnansumpw', dnansumpw );\n\n/**\n* @name drev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/drev}\n*/\nimport drev from './../../../ext/base/drev';\nsetReadOnly( ns, 'drev', drev );\n\n/**\n* @name dsapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsapxsum}\n*/\nimport dsapxsum from './../../../ext/base/dsapxsum';\nsetReadOnly( ns, 'dsapxsum', dsapxsum );\n\n/**\n* @name dsapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsapxsumpw}\n*/\nimport dsapxsumpw from './../../../ext/base/dsapxsumpw';\nsetReadOnly( ns, 'dsapxsumpw', dsapxsumpw );\n\n/**\n* @name dsnannsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnannsumors}\n*/\nimport dsnannsumors from './../../../ext/base/dsnannsumors';\nsetReadOnly( ns, 'dsnannsumors', dsnannsumors );\n\n/**\n* @name dsnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnansum}\n*/\nimport dsnansum from './../../../ext/base/dsnansum';\nsetReadOnly( ns, 'dsnansum', dsnansum );\n\n/**\n* @name dsnansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnansumors}\n*/\nimport dsnansumors from './../../../ext/base/dsnansumors';\nsetReadOnly( ns, 'dsnansumors', dsnansumors );\n\n/**\n* @name dsnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnansumpw}\n*/\nimport dsnansumpw from './../../../ext/base/dsnansumpw';\nsetReadOnly( ns, 'dsnansumpw', dsnansumpw );\n\n/**\n* @name dsort2hp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsort2hp}\n*/\nimport dsort2hp from './../../../ext/base/dsort2hp';\nsetReadOnly( ns, 'dsort2hp', dsort2hp );\n\n/**\n* @name dsort2ins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsort2ins}\n*/\nimport dsort2ins from './../../../ext/base/dsort2ins';\nsetReadOnly( ns, 'dsort2ins', dsort2ins );\n\n/**\n* @name dsort2sh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsort2sh}\n*/\nimport dsort2sh from './../../../ext/base/dsort2sh';\nsetReadOnly( ns, 'dsort2sh', dsort2sh );\n\n/**\n* @name dsorthp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsorthp}\n*/\nimport dsorthp from './../../../ext/base/dsorthp';\nsetReadOnly( ns, 'dsorthp', dsorthp );\n\n/**\n* @name dsortins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsortins}\n*/\nimport dsortins from './../../../ext/base/dsortins';\nsetReadOnly( ns, 'dsortins', dsortins );\n\n/**\n* @name dsortsh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsortsh}\n*/\nimport dsortsh from './../../../ext/base/dsortsh';\nsetReadOnly( ns, 'dsortsh', dsortsh );\n\n/**\n* @name dssum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dssum}\n*/\nimport dssum from './../../../ext/base/dssum';\nsetReadOnly( ns, 'dssum', dssum );\n\n/**\n* @name dssumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dssumors}\n*/\nimport dssumors from './../../../ext/base/dssumors';\nsetReadOnly( ns, 'dssumors', dssumors );\n\n/**\n* @name dssumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dssumpw}\n*/\nimport dssumpw from './../../../ext/base/dssumpw';\nsetReadOnly( ns, 'dssumpw', dssumpw );\n\n/**\n* @name dsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsum}\n*/\nimport dsum from './../../../ext/base/dsum';\nsetReadOnly( ns, 'dsum', dsum );\n\n/**\n* @name dsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumkbn}\n*/\nimport dsumkbn from './../../../ext/base/dsumkbn';\nsetReadOnly( ns, 'dsumkbn', dsumkbn );\n\n/**\n* @name dsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumkbn2}\n*/\nimport dsumkbn2 from './../../../ext/base/dsumkbn2';\nsetReadOnly( ns, 'dsumkbn2', dsumkbn2 );\n\n/**\n* @name dsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumors}\n*/\nimport dsumors from './../../../ext/base/dsumors';\nsetReadOnly( ns, 'dsumors', dsumors );\n\n/**\n* @name dsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumpw}\n*/\nimport dsumpw from './../../../ext/base/dsumpw';\nsetReadOnly( ns, 'dsumpw', dsumpw );\n\n/**\n* @name gapx\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapx}\n*/\nimport gapx from './../../../ext/base/gapx';\nsetReadOnly( ns, 'gapx', gapx );\n\n/**\n* @name gapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsum}\n*/\nimport gapxsum from './../../../ext/base/gapxsum';\nsetReadOnly( ns, 'gapxsum', gapxsum );\n\n/**\n* @name gapxsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumkbn}\n*/\nimport gapxsumkbn from './../../../ext/base/gapxsumkbn';\nsetReadOnly( ns, 'gapxsumkbn', gapxsumkbn );\n\n/**\n* @name gapxsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumkbn2}\n*/\nimport gapxsumkbn2 from './../../../ext/base/gapxsumkbn2';\nsetReadOnly( ns, 'gapxsumkbn2', gapxsumkbn2 );\n\n/**\n* @name gapxsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumors}\n*/\nimport gapxsumors from './../../../ext/base/gapxsumors';\nsetReadOnly( ns, 'gapxsumors', gapxsumors );\n\n/**\n* @name gapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumpw}\n*/\nimport gapxsumpw from './../../../ext/base/gapxsumpw';\nsetReadOnly( ns, 'gapxsumpw', gapxsumpw );\n\n/**\n* @name gasumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gasumpw}\n*/\nimport gasumpw from './../../../ext/base/gasumpw';\nsetReadOnly( ns, 'gasumpw', gasumpw );\n\n/**\n* @name gcusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusum}\n*/\nimport gcusum from './../../../ext/base/gcusum';\nsetReadOnly( ns, 'gcusum', gcusum );\n\n/**\n* @name gcusumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumkbn}\n*/\nimport gcusumkbn from './../../../ext/base/gcusumkbn';\nsetReadOnly( ns, 'gcusumkbn', gcusumkbn );\n\n/**\n* @name gcusumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumkbn2}\n*/\nimport gcusumkbn2 from './../../../ext/base/gcusumkbn2';\nsetReadOnly( ns, 'gcusumkbn2', gcusumkbn2 );\n\n/**\n* @name gcusumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumors}\n*/\nimport gcusumors from './../../../ext/base/gcusumors';\nsetReadOnly( ns, 'gcusumors', gcusumors );\n\n/**\n* @name gcusumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumpw}\n*/\nimport gcusumpw from './../../../ext/base/gcusumpw';\nsetReadOnly( ns, 'gcusumpw', gcusumpw );\n\n/**\n* @name gfill\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gfill}\n*/\nimport gfill from './../../../ext/base/gfill';\nsetReadOnly( ns, 'gfill', gfill );\n\n/**\n* @name gfillBy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gfill-by}\n*/\nimport gfillBy from './../../../ext/base/gfill-by';\nsetReadOnly( ns, 'gfillBy', gfillBy );\n\n/**\n* @name gnannsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnannsumkbn}\n*/\nimport gnannsumkbn from './../../../ext/base/gnannsumkbn';\nsetReadOnly( ns, 'gnannsumkbn', gnannsumkbn );\n\n/**\n* @name gnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansum}\n*/\nimport gnansum from './../../../ext/base/gnansum';\nsetReadOnly( ns, 'gnansum', gnansum );\n\n/**\n* @name gnansumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumkbn}\n*/\nimport gnansumkbn from './../../../ext/base/gnansumkbn';\nsetReadOnly( ns, 'gnansumkbn', gnansumkbn );\n\n/**\n* @name gnansumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumkbn2}\n*/\nimport gnansumkbn2 from './../../../ext/base/gnansumkbn2';\nsetReadOnly( ns, 'gnansumkbn2', gnansumkbn2 );\n\n/**\n* @name gnansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumors}\n*/\nimport gnansumors from './../../../ext/base/gnansumors';\nsetReadOnly( ns, 'gnansumors', gnansumors );\n\n/**\n* @name gnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumpw}\n*/\nimport gnansumpw from './../../../ext/base/gnansumpw';\nsetReadOnly( ns, 'gnansumpw', gnansumpw );\n\n/**\n* @name grev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/grev}\n*/\nimport grev from './../../../ext/base/grev';\nsetReadOnly( ns, 'grev', grev );\n\n/**\n* @name gsort2hp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsort2hp}\n*/\nimport gsort2hp from './../../../ext/base/gsort2hp';\nsetReadOnly( ns, 'gsort2hp', gsort2hp );\n\n/**\n* @name gsort2ins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsort2ins}\n*/\nimport gsort2ins from './../../../ext/base/gsort2ins';\nsetReadOnly( ns, 'gsort2ins', gsort2ins );\n\n/**\n* @name gsort2sh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsort2sh}\n*/\nimport gsort2sh from './../../../ext/base/gsort2sh';\nsetReadOnly( ns, 'gsort2sh', gsort2sh );\n\n/**\n* @name gsorthp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsorthp}\n*/\nimport gsorthp from './../../../ext/base/gsorthp';\nsetReadOnly( ns, 'gsorthp', gsorthp );\n\n/**\n* @name gsortins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsortins}\n*/\nimport gsortins from './../../../ext/base/gsortins';\nsetReadOnly( ns, 'gsortins', gsortins );\n\n/**\n* @name gsortsh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsortsh}\n*/\nimport gsortsh from './../../../ext/base/gsortsh';\nsetReadOnly( ns, 'gsortsh', gsortsh );\n\n/**\n* @name gsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsum}\n*/\nimport gsum from './../../../ext/base/gsum';\nsetReadOnly( ns, 'gsum', gsum );\n\n/**\n* @name gsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumkbn}\n*/\nimport gsumkbn from './../../../ext/base/gsumkbn';\nsetReadOnly( ns, 'gsumkbn', gsumkbn );\n\n/**\n* @name gsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumkbn2}\n*/\nimport gsumkbn2 from './../../../ext/base/gsumkbn2';\nsetReadOnly( ns, 'gsumkbn2', gsumkbn2 );\n\n/**\n* @name gsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumors}\n*/\nimport gsumors from './../../../ext/base/gsumors';\nsetReadOnly( ns, 'gsumors', gsumors );\n\n/**\n* @name gsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumpw}\n*/\nimport gsumpw from './../../../ext/base/gsumpw';\nsetReadOnly( ns, 'gsumpw', gsumpw );\n\n/**\n* @name sapx\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapx}\n*/\nimport sapx from './../../../ext/base/sapx';\nsetReadOnly( ns, 'sapx', sapx );\n\n/**\n* @name sapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsum}\n*/\nimport sapxsum from './../../../ext/base/sapxsum';\nsetReadOnly( ns, 'sapxsum', sapxsum );\n\n/**\n* @name sapxsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumkbn}\n*/\nimport sapxsumkbn from './../../../ext/base/sapxsumkbn';\nsetReadOnly( ns, 'sapxsumkbn', sapxsumkbn );\n\n/**\n* @name sapxsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumkbn2}\n*/\nimport sapxsumkbn2 from './../../../ext/base/sapxsumkbn2';\nsetReadOnly( ns, 'sapxsumkbn2', sapxsumkbn2 );\n\n/**\n* @name sapxsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumors}\n*/\nimport sapxsumors from './../../../ext/base/sapxsumors';\nsetReadOnly( ns, 'sapxsumors', sapxsumors );\n\n/**\n* @name sapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumpw}\n*/\nimport sapxsumpw from './../../../ext/base/sapxsumpw';\nsetReadOnly( ns, 'sapxsumpw', sapxsumpw );\n\n/**\n* @name sasumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sasumpw}\n*/\nimport sasumpw from './../../../ext/base/sasumpw';\nsetReadOnly( ns, 'sasumpw', sasumpw );\n\n/**\n* @name scusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusum}\n*/\nimport scusum from './../../../ext/base/scusum';\nsetReadOnly( ns, 'scusum', scusum );\n\n/**\n* @name scusumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumkbn}\n*/\nimport scusumkbn from './../../../ext/base/scusumkbn';\nsetReadOnly( ns, 'scusumkbn', scusumkbn );\n\n/**\n* @name scusumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumkbn2}\n*/\nimport scusumkbn2 from './../../../ext/base/scusumkbn2';\nsetReadOnly( ns, 'scusumkbn2', scusumkbn2 );\n\n/**\n* @name scusumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumors}\n*/\nimport scusumors from './../../../ext/base/scusumors';\nsetReadOnly( ns, 'scusumors', scusumors );\n\n/**\n* @name scusumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumpw}\n*/\nimport scusumpw from './../../../ext/base/scusumpw';\nsetReadOnly( ns, 'scusumpw', scusumpw );\n\n/**\n* @name sdsapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsapxsum}\n*/\nimport sdsapxsum from './../../../ext/base/sdsapxsum';\nsetReadOnly( ns, 'sdsapxsum', sdsapxsum );\n\n/**\n* @name sdsapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsapxsumpw}\n*/\nimport sdsapxsumpw from './../../../ext/base/sdsapxsumpw';\nsetReadOnly( ns, 'sdsapxsumpw', sdsapxsumpw );\n\n/**\n* @name sdsnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsnansum}\n*/\nimport sdsnansum from './../../../ext/base/sdsnansum';\nsetReadOnly( ns, 'sdsnansum', sdsnansum );\n\n/**\n* @name sdsnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsnansumpw}\n*/\nimport sdsnansumpw from './../../../ext/base/sdsnansumpw';\nsetReadOnly( ns, 'sdsnansumpw', sdsnansumpw );\n\n/**\n* @name sdssum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdssum}\n*/\nimport sdssum from './../../../ext/base/sdssum';\nsetReadOnly( ns, 'sdssum', sdssum );\n\n/**\n* @name sdssumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdssumpw}\n*/\nimport sdssumpw from './../../../ext/base/sdssumpw';\nsetReadOnly( ns, 'sdssumpw', sdssumpw );\n\n/**\n* @name sfill\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sfill}\n*/\nimport sfill from './../../../ext/base/sfill';\nsetReadOnly( ns, 'sfill', sfill );\n\n/**\n* @name snansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansum}\n*/\nimport snansum from './../../../ext/base/snansum';\nsetReadOnly( ns, 'snansum', snansum );\n\n/**\n* @name snansumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumkbn}\n*/\nimport snansumkbn from './../../../ext/base/snansumkbn';\nsetReadOnly( ns, 'snansumkbn', snansumkbn );\n\n/**\n* @name snansumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumkbn2}\n*/\nimport snansumkbn2 from './../../../ext/base/snansumkbn2';\nsetReadOnly( ns, 'snansumkbn2', snansumkbn2 );\n\n/**\n* @name snansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumors}\n*/\nimport snansumors from './../../../ext/base/snansumors';\nsetReadOnly( ns, 'snansumors', snansumors );\n\n/**\n* @name snansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumpw}\n*/\nimport snansumpw from './../../../ext/base/snansumpw';\nsetReadOnly( ns, 'snansumpw', snansumpw );\n\n/**\n* @name srev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/srev}\n*/\nimport srev from './../../../ext/base/srev';\nsetReadOnly( ns, 'srev', srev );\n\n/**\n* @name ssort2hp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssort2hp}\n*/\nimport ssort2hp from './../../../ext/base/ssort2hp';\nsetReadOnly( ns, 'ssort2hp', ssort2hp );\n\n/**\n* @name ssort2ins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssort2ins}\n*/\nimport ssort2ins from './../../../ext/base/ssort2ins';\nsetReadOnly( ns, 'ssort2ins', ssort2ins );\n\n/**\n* @name ssort2sh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssort2sh}\n*/\nimport ssort2sh from './../../../ext/base/ssort2sh';\nsetReadOnly( ns, 'ssort2sh', ssort2sh );\n\n/**\n* @name ssorthp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssorthp}\n*/\nimport ssorthp from './../../../ext/base/ssorthp';\nsetReadOnly( ns, 'ssorthp', ssorthp );\n\n/**\n* @name ssortins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssortins}\n*/\nimport ssortins from './../../../ext/base/ssortins';\nsetReadOnly( ns, 'ssortins', ssortins );\n\n/**\n* @name ssortsh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssortsh}\n*/\nimport ssortsh from './../../../ext/base/ssortsh';\nsetReadOnly( ns, 'ssortsh', ssortsh );\n\n/**\n* @name ssum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssum}\n*/\nimport ssum from './../../../ext/base/ssum';\nsetReadOnly( ns, 'ssum', ssum );\n\n/**\n* @name ssumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumkbn}\n*/\nimport ssumkbn from './../../../ext/base/ssumkbn';\nsetReadOnly( ns, 'ssumkbn', ssumkbn );\n\n/**\n* @name ssumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumkbn2}\n*/\nimport ssumkbn2 from './../../../ext/base/ssumkbn2';\nsetReadOnly( ns, 'ssumkbn2', ssumkbn2 );\n\n/**\n* @name ssumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumors}\n*/\nimport ssumors from './../../../ext/base/ssumors';\nsetReadOnly( ns, 'ssumors', ssumors );\n\n/**\n* @name ssumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumpw}\n*/\nimport ssumpw from './../../../ext/base/ssumpw';\nsetReadOnly( ns, 'ssumpw', ssumpw );\n\n/**\n* @name wasm\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/ext/base/wasm}\n*/\nimport wasm from './../../../ext/base/wasm';\nsetReadOnly( ns, 'wasm', wasm );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided/base/stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var out = [ 0.0, 0 ];\n*\n* var v = gnannsumkbn( x.length, x, 1, out, 1 );\n* // returns [ 1.0, 3 ]\n*/\nfunction gnannsumkbn( N, x, strideX, out, strideOut ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar io = stride2offset( 2, strideOut );\n\treturn ndarray( N, x, strideX, ix, out, strideOut, io );\n}\n\n\n// EXPORTS //\n\nexport default gnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/ext/base}\n*/\nimport base from './../../ext/base';\nsetReadOnly( ns, 'base', base );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isCollection from '@stdlib/assert/is-collection';\nimport isFloat64Array from '@stdlib/assert/is-float64array';\nimport isFloat32Array from '@stdlib/assert/is-float32array';\nimport format from '@stdlib/string/format';\nimport { ndarray as ddot } from './../../base/ddot';\nimport { ndarray as sdot } from './../../base/sdot';\nimport { ndarray as dot } from './../../base/gdot';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of vectors `x` and `y`.\n*\n* ## Notes\n*\n* -   In general, for best performance, especially for large vectors, provide 1-dimensional `ndarrays` whose underlying data type is either `float64` or `float32`.\n*\n* @param {(Collection|VectorLike)} x - first input array\n* @param {(Collection|VectorLike)} y - second input array\n* @throws {TypeError} first argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {TypeError} second argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {RangeError} input arrays must be the same length\n* @returns {number} dot product\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* var z = gdot( x, y );\n* // returns -5.0\n*/\nfunction gdot( x, y ) {\n\tvar isxf64;\n\tvar isxf32;\n\tvar isyf64;\n\tvar isyf32;\n\tvar isxa;\n\tvar isxv;\n\tvar isya;\n\tvar isyv;\n\n\tisxa = isndarrayLike( x );\n\tisya = isndarrayLike( y );\n\tisxv = isxa && x.ndims === 1 && x.strides.length === 1; // is ndarray-like vector?\n\tisyv = isya && y.ndims === 1 && y.strides.length === 1; // is ndarray-like vector?\n\tif ( isxv ) {\n\t\tisxf64 = isFloat64Array( x.data );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x.data );\n\t} else if ( isxa === false && isCollection( x ) ) {\n\t\tisxf64 = isFloat64Array( x );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( isyv ) {\n\t\tisyf64 = isFloat64Array( y.data );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y.data );\n\t} else if ( isya === false && isCollection( y ) ) {\n\t\tisyf64 = isFloat64Array( y );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', y ) );\n\t}\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( format( 'invalid argument. Arrays must be the same length. First argument length: `%u`. Second argument length: `%u`.', x.length, y.length ) );\n\t}\n\tif ( isxv && isyv ) {\n\t\tif ( isxf64 && isyf64 ) {\n\t\t\treturn ddot( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t}\n\t\tif ( isxf32 && isyf32 ) {\n\t\t\treturn sdot( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t}\n\t\treturn dot( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t}\n\tif ( isxv ) {\n\t\treturn dot( x.length, x.data, x.strides[ 0 ], x.offset, y, 1, 0 );\n\t}\n\tif ( isyv ) {\n\t\treturn dot( x.length, x, 1, 0, y.data, y.strides[ 0 ], y.offset );\n\t}\n\treturn dot( x.length, x, 1, 0, y, 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default gdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isCollection from '@stdlib/assert/is-collection';\nimport isFloat64Array from '@stdlib/assert/is-float64array';\nimport isFloat32Array from '@stdlib/assert/is-float32array';\nimport format from '@stdlib/string/format';\nimport { ndarray as dswap } from './../../base/dswap';\nimport { ndarray as sswap } from './../../base/sswap';\nimport { ndarray as swap } from './../../base/gswap';\n\n\n// MAIN //\n\n/**\n* Interchanges two vectors.\n*\n* ## Notes\n*\n* -   In general, for best performance, especially for large vectors, provide 1-dimensional `ndarrays` whose underlying data type is either `float64` or `float32`.\n*\n* @param {(Collection|VectorLike)} x - first input array\n* @param {(Collection|VectorLike)} y - second input array\n* @throws {TypeError} first argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {TypeError} second argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {RangeError} input arrays must be the same length\n* @returns {(Collection|VectorLike)} `y`\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* gswap( x, y );\n* // x => [ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n* // y => [ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nfunction gswap( x, y ) {\n\tvar isxf64;\n\tvar isxf32;\n\tvar isyf64;\n\tvar isyf32;\n\tvar isxa;\n\tvar isxv;\n\tvar isya;\n\tvar isyv;\n\n\tisxa = isndarrayLike( x );\n\tisya = isndarrayLike( y );\n\tisxv = isxa && x.ndims === 1 && x.strides.length === 1; // is ndarray-like vector?\n\tisyv = isya && y.ndims === 1 && y.strides.length === 1; // is ndarray-like vector?\n\tif ( isxv ) {\n\t\tisxf64 = isFloat64Array( x.data );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x.data );\n\t} else if ( isxa === false && isCollection( x ) ) {\n\t\tisxf64 = isFloat64Array( x );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( isyv ) {\n\t\tisyf64 = isFloat64Array( y.data );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y.data );\n\t} else if ( isya === false && isCollection( y ) ) {\n\t\tisyf64 = isFloat64Array( y );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', y ) );\n\t}\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( format( 'invalid argument. Arrays must be the same length. First argument length: `%u`. Second argument length: `%u`.', x.length, y.length ) );\n\t}\n\tif ( isxv && isyv ) {\n\t\tif ( isxf64 && isyf64 ) {\n\t\t\tdswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\tif ( isxf32 && isyf32 ) {\n\t\t\tsswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\tswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\treturn y;\n\t}\n\tif ( isxv ) {\n\t\tswap( x.length, x.data, x.strides[ 0 ], x.offset, y, 1, 0 );\n\t\treturn y;\n\t}\n\tif ( isyv ) {\n\t\tswap( x.length, x, 1, 0, y.data, y.strides[ 0 ], y.offset );\n\t\treturn y;\n\t}\n\tswap( x.length, x, 1, 0, y, 1, 0 );\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat32ndarrayLike from '@stdlib/assert/is-float32ndarray-like';\nimport { isPrimitive as isNegativeInteger } from '@stdlib/assert/is-negative-integer';\nimport min from '@stdlib/math/base/special/fast/min';\nimport without from '@stdlib/array/base/without';\nimport numel from '@stdlib/ndarray/base/numel';\nimport normalizeIndex from '@stdlib/ndarray/base/normalize-index';\nimport maybeBroadcastArrays from '@stdlib/ndarray/base/maybe-broadcast-arrays';\nimport ndarraylike2ndarray from '@stdlib/ndarray/base/ndarraylike2ndarray';\nimport nditerStacks from '@stdlib/ndarray/iter/stacks';\nimport empty from '@stdlib/ndarray/empty';\nimport { ndarray as base } from './../../base/sdot';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two single-precision floating-point vectors.\n*\n* @param {ndarrayLike} x - first input array\n* @param {ndarrayLike} y - second input array\n* @param {NegativeInteger} [dim=-1] - dimension for which to compute the dot product\n* @throws {TypeError} first argument must be a ndarray containing single-precision floating-point numbers\n* @throws {TypeError} first argument must have at least one dimension\n* @throws {TypeError} second argument must be a ndarray containing single-precision floating-point numbers\n* @throws {TypeError} second argument must have at least one dimension\n* @throws {TypeError} third argument must be a negative integer\n* @throws {Error} input arrays must be broadcast compatible\n* @throws {RangeError} the size of the contracted dimension must be the same for both input arrays\n* @throws {RangeError} third argument is out-of-bounds\n* @returns {ndarray} ndarray containing the dot product\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* var z = sdot( x, y );\n* // returns <ndarray>\n*\n* var v = z.get();\n* // returns -5.0\n*/\nfunction sdot( x, y ) {\n\tvar dim;\n\tvar xsh;\n\tvar ysh;\n\tvar osh;\n\tvar xit;\n\tvar yit;\n\tvar out;\n\tvar tmp;\n\tvar xc;\n\tvar yc;\n\tvar vx;\n\tvar vy;\n\tvar dm;\n\tvar S;\n\tvar v;\n\tvar i;\n\n\tif ( !isFloat32ndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray containing single-precision floating-point numbers. Value: `%s`.', x ) );\n\t}\n\tif ( !isFloat32ndarrayLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray containing single-precision floating-point numbers. Value: `%s`.', y ) );\n\t}\n\t// Convert the input arrays to \"base\" ndarrays:\n\txc = ndarraylike2ndarray( x );\n\tyc = ndarraylike2ndarray( y );\n\n\t// Resolve the input array shapes:\n\txsh = xc.shape;\n\tysh = yc.shape;\n\n\t// Validate that we've been provided non-zero-dimensional arrays...\n\tif ( xsh.length < 1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have at least one dimension.' ) );\n\t}\n\tif ( ysh.length < 1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have at least one dimension.' ) );\n\t}\n\t// Validate that the dimension argument is a negative integer...\n\tif ( arguments.length > 2 ) {\n\t\tdim = arguments[ 2 ];\n\t\tif ( !isNegativeInteger( dim ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a negative integer. Value: `%s`.', dim ) );\n\t\t}\n\t} else {\n\t\tdim = -1;\n\t}\n\t// Validate that a provided dimension index is within bounds **before** broadcasting...\n\tdm = min( xsh.length, ysh.length ) - 1;\n\tdim = normalizeIndex( dim, dm );\n\tif ( dim === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a value on the interval: [%d,%d]. Value: `%d`.', -dm, -1, arguments[ 2 ] ) );\n\t}\n\t// Validate that the contracted dimension size is the same for both input arrays...\n\tS = xsh[ dim ];\n\tif ( ysh[ dim ] !== S ) {\n\t\tthrow new RangeError( format( 'invalid argument. The size of the contracted dimension must be the same for both input ndarrays. Dim(%s,%d) = %d. Dim(%s,%d) = %d.', 'x', dim, S, 'y', dim, ysh[ dim ] ) );\n\t}\n\t// Broadcast the input arrays to a common shape....\n\ttry {\n\t\ttmp = maybeBroadcastArrays( [ xc, yc ] );\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tthrow new Error( format( 'invalid arguments. Input ndarrays must be broadcast compatible. Shape(%s) = (%s). Shape(%s) = (%s).', 'x', xsh.join( ',' ), 'y', ysh.join( ',' ) ) );\n\t}\n\txc = tmp[ 0 ];\n\tyc = tmp[ 1 ];\n\n\t// Resolve the output array shape by excluding the contracted dimension:\n\tosh = without( xc.shape, dim );\n\n\t// Allocate an empty output array:\n\tout = empty( osh, {\n\t\t'dtype': xc.dtype,\n\t\t'order': xc.order\n\t});\n\n\t// If we are only provided one-dimensional input arrays, we can skip iterating over stacks...\n\tif ( osh.length === 0 ) {\n\t\tv = base( S, xc.data, xc.strides[0], xc.offset, yc.data, yc.strides[0], yc.offset ); // eslint-disable-line max-len\n\t\tout.iset( v );\n\t\treturn out;\n\t}\n\t// Create iterators for iterating over stacks of vectors:\n\txit = nditerStacks( xc, [ dim ] );\n\tyit = nditerStacks( yc, [ dim ] );\n\n\t// Compute the dot product for each pair of vectors...\n\tfor ( i = 0; i < numel( osh ); i++ ) {\n\t\tvx = xit.next().value;\n\t\tvy = yit.next().value;\n\t\tv = base( S, vx.data, vx.strides[0], vx.offset, vy.data, vy.strides[0], vy.offset ); // eslint-disable-line max-len\n\t\tout.iset( i, v );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default sdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as base } from './../../base/sswap';\nimport factory from './../../tools/swap-factory';\n\n\n// MAIN //\n\n/**\n* Interchanges two single-precision floating-point vectors.\n*\n* @name sswap\n* @type {Function}\n* @param {ndarrayLike} x - first input array\n* @param {ndarrayLike} y - second input array\n* @param {NegativeInteger} [dim=-1] - dimension along which to interchange elements\n* @throws {TypeError} first argument must be a ndarray containing single-precision floating-point numbers\n* @throws {TypeError} first argument must have at least one dimension\n* @throws {TypeError} second argument must be a ndarray containing single-precision floating-point numbers\n* @throws {TypeError} second argument must have at least one dimension\n* @throws {Error} both input arrays must have the same shape\n* @throws {RangeError} third argument is out-of-bounds\n* @throws {Error} cannot write to read-only array\n* @returns {ndarrayLike} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* sswap( x, y );\n*\n* var xbuf = x.data;\n* // returns <Float32Array>[ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n*\n* var ybuf = y.data;\n* // returns <Float32Array>[ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nvar sswap = factory( base, 'float32' );\n\n\n// EXPORTS //\n\nexport default sswap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/base}\n*/\nimport base from './../base';\nsetReadOnly( ns, 'base', base );\n\n/**\n* @name ddot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ddot}\n*/\nimport ddot from './../ddot';\nsetReadOnly( ns, 'ddot', ddot );\n\n/**\n* @name dswap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/dswap}\n*/\nimport dswap from './../dswap';\nsetReadOnly( ns, 'dswap', dswap );\n\n/**\n* @name ext\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/ext}\n*/\nimport ext from './../ext';\nsetReadOnly( ns, 'ext', ext );\n\n/**\n* @name gdot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/gdot}\n*/\nimport gdot from './../gdot';\nsetReadOnly( ns, 'gdot', gdot );\n\n/**\n* @name gswap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/gswap}\n*/\nimport gswap from './../gswap';\nsetReadOnly( ns, 'gswap', gswap );\n\n/**\n* @name sdot\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/sdot}\n*/\nimport sdot from './../sdot';\nsetReadOnly( ns, 'sdot', sdot );\n\n/**\n* @name sswap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/sswap}\n*/\nimport sswap from './../sswap';\nsetReadOnly( ns, 'sswap', sswap );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["diagonalTypes","DATA","slice","enumerated","unit","setReadOnly","main","enumeration","isDiagonalType","contains","layouts","isLayout","matrixTriangles","upper","lower","isMatrixTriangle","operationSides","left","right","isOperationSide","transpose","isTransposeOperation","ops","ns","scabs1","c","absf","realf","imagf","caxpy","N","ca","cx","strideX","offsetX","cy","strideY","offsetY","ix","iy","i","set","caddf","cmulf","get","ndarray","stride2offset","ccopy","x","y","viewX","viewY","sx","sy","reinterpret","cscal","csrot","s","tmp","f32","cswap","dasum","stride","offset","sum","abs","M","daxpy","alpha","m","dcabs1","z","real","imag","dcopy","ddot","dot","bsize","blockSize","isTransposed","str","naive","K","A","strideA1","strideA2","offsetA","B","strideB1","strideB2","offsetB","C","strideC1","strideC2","offsetC","da0","db0","dc0","dc1","S0","S1","i0","i1","ia","ib","ic","dgemm","transA","transB","beta","isrma","isrmb","sa1","sa2","sb1","sb2","X","strideX1","strideX2","dx0","dx1","isRowMajor","zeros","scal","oa1","ob0","oc0","oc1","s0","s1","sk","j0","j1","oa","ob","k","blocked","order","LDA","LDB","LDC","nrowsa","nrowsb","valc","sc1","sc2","TypeError","format","isMatrixTranspose","RangeError","max","base","tryRequire","join","require$$0","dgemm$1","isError","dfill","dscal","dgemv","trans","isrm","xlen","ylen","ix1","iy1","sa0","dgemv$1","hash","objectInverse","duplicates","enum2str","value","v","ENUM","str2enum","diagonal","tsml","tbig","ssml","sbig","dnrm2","notbig","sumsq","abig","amed","asml","ymax","ymin","scl","ax","abs2","FLOAT64_MAX","sqrt","drot","drotg","a","b","out","scale","sign","aa","ab","r","copysign","fcn","Float64Array","drotm","param","dflag","dh11","dh12","dh21","dh22","w","assign","dsdot","dspmv","uplo","AP","offsetAP","temp1","temp2","jx","jy","kk","kx","ky","j","dspmv$1","dspr","strideAP","ix0","iap","ox","dspr$1","dswap","dsymv","jmin","jmax","oy","dsymv$1","dsyr","dsyr$1","dsyr2","tmp1","tmp2","iy0","dsyr2$1","dtrmv","diag","nonunit","isDiagonal","dtrmv$1","dtrsv","dtrsv$1","dznrm2","zx","dznrm2$1","gasum","o","arraylike2object","accessorProtocol","buf","data","accessors","gaxpy","gcopy","xbuf","ybuf","gdot","gnrm2","ssq","pow","gscal","xget","xset","gswap","idamax","dmax","idx","isamax","smax","layout","operation","sasum","saxpy","float64ToFloat32","scasum","stemp","scasum$1","scnrm2","abs2f","FLOAT32_MAX","sqrtf","scnrm2$1","scopy","sdot","sdsdot","scalar","sgemm","sgemm$1","sfill","sscal","sgemv","sgemv$1","snrm2","srot","srotg","copysignf","Float32Array","srotm","sflag","sh11","sh12","sh21","sh22","sspmv","sspmv$1","sspr","sswap","ssymv","ssymv$1","ssyr","ssyr2","ssyr2$1","strmv","strmv$1","strsv","strsv$1","zcopy","zdrot","zy","zswap","zaxpy","za","re","im","muladd","zaxpy$1","zdscal","da","strideZX","offsetZX","zx64","zscal","view","re1","im1","re2","im2","cmul","blas","dim","xsh","ysh","osh","xit","yit","xc","yc","vx","vy","dm","S","isFloat64ndarrayLike","ndarraylike2ndarray","shape","length","arguments","isNegativeInteger","min","normalizeIndex","maybeBroadcastArrays","err","Error","without","empty","dtype","strides","iset","nditerStacks","numel","next","factory","isValid","isFunction","isDataType","isndarrayLikeWithDataType","isndarrayLike","isReadOnly","hasEqualValues","assert","diagonalTypeEnum2Str","t","diagonalTypeStr2Enum","layoutEnum2Str","layoutStr2Enum","matrixTriangleEnum2Str","matrixTriangleStr2Enum","operationSideEnum2Str","operationSideStr2Enum","transposeOperationEnum2Str","transposeOperationStr2Enum","transposeOperations","wasm","dapx","dapxsumkbn","dapxsum","dapxsumkbn2","ccs","cs","cc","dapxsumors","BLOCKSIZE","dapxsumpw","s2","s3","s4","s5","s6","s7","n","floor","dasumpw","dcusumkbn","dcusum","dcusumkbn2","dcusumors","dcusumpw","dnanasumors","isnan","dnanasum","dnannsumkbn","strideOut","offsetOut","dnannsum","dnannsumkbn2","io","dnannsumors","sumpw","dnannsumpw","dnansumkbn","dnansum","dnansumkbn2","dnansumors","dnansumpw","drev","dsapxsumpw","dsapxsum","dsnannsumors","dsnansumpw","isnanf","dsnansum","dsnansumors","dsort2hp","parent","child","v1","v2","tx","ty","isPositiveZero","dsort2ins","flg","fx","lx","fy","ly","ux","isNegativeZero","NGAPS","GAPS","dsort2sh","gap","dsorthp","dsortins","u","dsortsh","dssumpw","dssum","dssumors","dsumkbn","dsum","dsumkbn2","dsumors","dsumpw","gapx","gapxsumkbn","gapxsum","gapxsumkbn2","gapxsumors","gapxsumpw","gasumpw","gcusumkbn","yset","gcusum","gcusumkbn2","gcusumors","gcusumpw","yget","gfill","gfillBy","clbk","thisArg","call","gnannsumkbn","oo","obuf","oset","gnansumkbn","gnansum","gnansumkbn2","gnansumors","gnansumpw","grev","gsort2hp","gsort2ins","gsort2sh","gsorthp","gsortins","gsortsh","gsumkbn","gsum","gsumkbn2","gsumors","gsumpw","sapx","sapxsumkbn","sapxsum","sapxsumkbn2","sapxsumors","sapxsumpw","sasumpw","scusumkbn","scusum","scusumkbn2","scusumors","scusumpw","sdsapxsumpw","sdsapxsum","sdsnansumpw","sdsnansum","sdssumpw","sdssum","snansumkbn","snansum","snansumkbn2","snansumors","snansumpw","srev","ssort2hp","isPositiveZerof","ssort2ins","isNegativeZerof","ssort2sh","ssorthp","ssortins","ssortsh","ssumkbn","ssum","ssumkbn2","ssumors","ssumpw","isxf64","isxf32","isyf64","isyf32","isxa","isxv","isya","isyv","ndims","isFloat64Array","isFloat32Array","isCollection","swap","isFloat32ndarrayLike","ext"],"mappings":"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"}